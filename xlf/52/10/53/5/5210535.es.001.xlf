<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/5210535">
    <body>
      <group id="5210535">
        <trans-unit id="5128e9d8380cba42898da6b0b4c094f182f31368" translate="yes" xml:space="preserve">
          <source>1&amp;gt;We need to crate string object in SecondViewController.h file</source>
          <target state="translated">1&amp;gt; Necesitamos crear un objeto de cadena en el archivo SecondViewController.h</target>
        </trans-unit>
        <trans-unit id="382568f3d5638e45d07eaa2ba4e79626c6e35495" translate="yes" xml:space="preserve">
          <source>2&amp;gt;Need to declare property as below below declaration in .h file</source>
          <target state="translated">2&amp;gt; Necesita declarar la propiedad como se muestra a continuaci&amp;oacute;n en la declaraci&amp;oacute;n en el archivo .h</target>
        </trans-unit>
        <trans-unit id="ca8fae13e1609c64d729ca50adc43575fd915a5d" translate="yes" xml:space="preserve">
          <source>3&amp;gt;Need synthesize that value in FirstViewController.m file below header declaration</source>
          <target state="translated">3&amp;gt; Necesita sintetizar ese valor en el archivo FirstViewController.m debajo de la declaraci&amp;oacute;n del encabezado</target>
        </trans-unit>
        <trans-unit id="7e6c2732929d97145ee56f3dbef06b5bd1d4b710" translate="yes" xml:space="preserve">
          <source>4 lines of code inside the method and you are done.</source>
          <target state="translated">4 líneas de código dentro del método y listo.</target>
        </trans-unit>
        <trans-unit id="12af7e16d59d006e71a07aade88fd2f960f7d040" translate="yes" xml:space="preserve">
          <source>4&amp;gt;In FirstViewController,From which method we navigate to second view please write below code in that method.</source>
          <target state="translated">4&amp;gt; En FirstViewController, desde qu&amp;eacute; m&amp;eacute;todo navegamos a la segunda vista, escriba el c&amp;oacute;digo siguiente en ese m&amp;eacute;todo.</target>
        </trans-unit>
        <trans-unit id="8e9441a605f9f93f88f097003026bbcbdb4e55b8" translate="yes" xml:space="preserve">
          <source>:) Cheers.</source>
          <target state="translated">:)Salud.</target>
        </trans-unit>
        <trans-unit id="c7e0fd5894134e3a798732701f0ee5582c0e8363" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ManagingDataFlowBetweenViewControllers/ManagingDataFlowBetweenViewControllers.html#//apple_ref/doc/uid/TP40007457-CH8-SW9&quot;&gt;Using Delegation to Communicate With Other View Controllers&lt;/a&gt; in the &lt;em&gt;View Controller Programming Guide&lt;/em&gt;</source>
          <target state="translated">&lt;a href=&quot;http://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ManagingDataFlowBetweenViewControllers/ManagingDataFlowBetweenViewControllers.html#//apple_ref/doc/uid/TP40007457-CH8-SW9&quot;&gt;Uso de la delegaci&amp;oacute;n para comunicarse con otros controladores de vista&lt;/a&gt; en la &lt;em&gt;Gu&amp;iacute;a de programaci&amp;oacute;n del controlador de vista&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9cddb9f240b7be5a6c0e6206779adba0c54ad320" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.iphonedevsdk.com/forum/iphone-sdk-development/54859-sharing-data-between-view-controllers-other-objects.html&quot;&gt;Sharing data between view controllers and other objects&lt;/a&gt; @ iPhone Dev SDK</source>
          <target state="translated">&lt;a href=&quot;http://www.iphonedevsdk.com/forum/iphone-sdk-development/54859-sharing-data-between-view-controllers-other-objects.html&quot;&gt;Compartir datos entre controladores de vista y otros objetos&lt;/a&gt; @ iPhone Dev SDK</target>
        </trans-unit>
        <trans-unit id="a561b48e56f3bead23ac829c64c64003e3095e17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/RamdhanChoudhary/A-Simple-iOS-App-for-Passing-Data-Between-Controllers-in-Swift&quot;&gt;You can find complete sample Application at my GitHub&lt;/a&gt; Please let me know if you have any question(s) on this.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/RamdhanChoudhary/A-Simple-iOS-App-for-Passing-Data-Between-Controllers-in-Swift&quot;&gt;Puede encontrar una aplicaci&amp;oacute;n de muestra completa en mi GitHub. Inf&amp;oacute;rmeme&lt;/a&gt; si tiene alguna pregunta al respecto.</target>
        </trans-unit>
        <trans-unit id="4a01486c528ad5e980ae4089d498cd8c88f97fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@synthesize  indexNumber;&lt;/code&gt;           in NextVC.m</source>
          <target state="translated">&lt;code&gt;@synthesize indexNumber;&lt;/code&gt; en NextVC.m</target>
        </trans-unit>
        <trans-unit id="b78c51f4a043a824f5e08ef6eaf7ecfb3f33270d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Blocks are anonymous functions.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Los bloques son funciones an&amp;oacute;nimas.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1021f754895d902d9dddaf8f14272d74668e6de6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-Using Block callbacks:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;-Utilizando devoluciones de llamada de bloque:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c37f6c389f441f0686ad2157cb488b1e89332e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;-Using storyboards Unwind (Exit)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;-Uso de guiones gr&amp;aacute;ficos Unwind (Salir)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f6e3b19fd1dae9c65f2307816e0fe1c6c694e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1.&lt;/strong&gt; Create the instance of first View Controller in the second View Controller and make its property &lt;code&gt;@property (nonatomic,assign)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;1.&lt;/strong&gt; Cree la instancia del primer controlador de vista en el segundo controlador de vista y haga su propiedad &lt;code&gt;@property (nonatomic,assign)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="caa8b857bce2edcc30a0b3967af6102ff7c4e3cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;/strong&gt; Assign the &lt;code&gt;SecondviewController&lt;/code&gt; instance of this view controller.</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt; Asigne la instancia &lt;code&gt;SecondviewController&lt;/code&gt; de este controlador de vista.</target>
        </trans-unit>
        <trans-unit id="c1ab9d883587e24a8d31adae458d2e6b60264d54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2.&lt;/strong&gt; When you finish the selection operation copy the array to first View Controller,When u unload the SecondView ,FirstView will hold the Array Data.</source>
          <target state="translated">&lt;strong&gt;2.&lt;/strong&gt; Cuando termine la operaci&amp;oacute;n de selecci&amp;oacute;n, copie la matriz en el primer controlador de vista. Cuando descargue SecondView, FirstView contendr&amp;aacute; los datos de la matriz.</target>
        </trans-unit>
        <trans-unit id="69324ef579d371a172a46ed3433537adafdd0323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Application Scenarios&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Escenarios de aplicaci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19d3c711e8278b4bcb9dc5b3925628e10a4961cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't forget&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;No olvides&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55779cd52cf0b0e46e2fe75e0ae7c25906301bd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;First View Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Primer controlador de vista&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c0c0b273313e9e6e2211fefaab5837fd17c6153" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Por ejemplo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c300eb69852a39b53d39a423e83febc84bb7ecf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Go to Controller B&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ir al controlador B&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd3b42b839c0fa27211813e4f7a2b41b323efb59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NSNotification center&lt;/strong&gt;
It's another way to pass data.</source>
          <target state="translated">&lt;strong&gt;Centro de NSNotification&lt;/strong&gt; Es otra forma de pasar datos.</target>
        </trans-unit>
        <trans-unit id="f83086999fd5c7eccf89cda212980e525c8ee244" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NewsDetailViewController.h&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NewsDetailViewController.h&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2e498d6299003ee4bb995fd064cfff0f5031dd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NewsDetailViewController.m&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NewsDetailViewController.m&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="170aa6c3a45436cad64cb27754574f9f66c7007d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NewsViewController&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NewsViewController&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcf13efd0f4fde8b8e30afec77961f30fe04bf16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data Back&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pasar datos de vuelta&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4056ba2648992080e38f34e858850a2675ff28c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data Forward using Segues&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Transmitir datos hacia adelante usando Segues&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="806df0e91c6a17443dc044857cd2e12e700908c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data Forward&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Transmitir datos hacia adelante&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a823b2509776072df9c2f284478ab9d56976c87d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data back from one class to another&lt;/strong&gt; (A class can be any controller, Network/session manager, UIView subclass or any other class)</source>
          <target state="translated">&lt;strong&gt;Transferencia de datos de una clase a otra&lt;/strong&gt; (una clase puede ser cualquier controlador, administrador de red / sesi&amp;oacute;n, subclase UIView o cualquier otra clase)</target>
        </trans-unit>
        <trans-unit id="3a2d4f96ca3cdcbd2c5729cfeeddcfe8a83ef0da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data between FirstViewController to SecondViewController as below&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pasar datos entre FirstViewController a SecondViewController como se muestra a continuaci&amp;oacute;n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1633208f374584ce5b10f1cf78b22a2eeba7eee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data through Block&lt;/strong&gt; : &lt;em&gt;From ViewControllerB to ViewControllerA&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Paso de datos a trav&amp;eacute;s del bloque&lt;/strong&gt; : de &lt;em&gt;ViewControllerB a ViewControllerA&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="024c5395573bc2998ff2187cbf90e249d2fd7f30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data through Delegate&lt;/strong&gt; : &lt;em&gt;From ViewControllerB to ViewControllerA&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Pasar datos a trav&amp;eacute;s del delegado&lt;/strong&gt; : de &lt;em&gt;ViewControllerB a ViewControllerA&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c82eb764b54c062d5349bd59c7a3fb7fcbc641b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data through Navigation Controller Push&lt;/strong&gt; : &lt;em&gt;From ViewControllerA to ViewControllerB&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Transferencia de datos a trav&amp;eacute;s del controlador de navegaci&amp;oacute;n Push&lt;/strong&gt; : &lt;em&gt;desde ViewControllerA a ViewControllerB&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="55db90aacfef6b7797ad7a5da078395659732e1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data through Notification Observer&lt;/strong&gt; : &lt;em&gt;From ViewControllerB to ViewControllerA&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Transferencia de datos a trav&amp;eacute;s de Notification Observer&lt;/strong&gt; : de &lt;em&gt;ViewControllerB a ViewControllerA&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d0561e6d1d3b1f23d57d8291ca2684d08bcde0b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing Data through Segue&lt;/strong&gt; : &lt;em&gt;From ViewControllerA to ViewControllerB&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Paso de datos a trav&amp;eacute;s de Segue&lt;/strong&gt; : de &lt;em&gt;ViewControllerA a ViewControllerB&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf80e7bc29bfca96a73722d3c8c419ee4f8a9df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scenario one:&lt;/strong&gt; maximum two view controllers ever need to share information.
See diagram one.</source>
          <target state="translated">&lt;strong&gt;Escenario uno: un&lt;/strong&gt; m&amp;aacute;ximo de dos controladores de vista necesitan compartir informaci&amp;oacute;n. Ver diagrama uno.</target>
        </trans-unit>
        <trans-unit id="b5cb92a49a24b197803d86b1055b30b5711cba2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scenario two&lt;/strong&gt;: more than two view controllers need to share the same information.
See diagram two.</source>
          <target state="translated">&lt;strong&gt;Escenario dos&lt;/strong&gt; : m&amp;aacute;s de dos controladores de vista necesitan compartir la misma informaci&amp;oacute;n. Ver diagrama dos.</target>
        </trans-unit>
        <trans-unit id="f945b9a41062fc17eb825c26426f171f0d86ed91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Second View Controller and Protocol&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Segundo controlador de vista y protocolo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6ce77aea00bcbf439da1f87290ce172463ea140c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Second View Controller&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Segundo controlador de vista&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bd48716ff2de9235461890349819ae353247ac0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setup The Storyboard&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Configurar el gui&amp;oacute;n gr&amp;aacute;fico&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="089fc6cd09fa49635621f8cfa746223ca053b190" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Create Segue from ViewControllerA to ViewControllerB and give Identifier = showDetailSegue in Storyboard as shown below</source>
          <target state="translated">&lt;strong&gt;Paso 1.&lt;/strong&gt; Cree Segue de ViewControllerA a ViewControllerB y proporcione Identifier = showDetailSegue en Storyboard como se muestra a continuaci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="02d6487d795d944e58f58e4366b35bc8d1b32dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Declare Protocol &lt;strong&gt;&lt;em&gt;ViewControllerBDelegate&lt;/em&gt;&lt;/strong&gt; in ViewControllerB file but outside the class</source>
          <target state="translated">&lt;strong&gt;Paso 1.&lt;/strong&gt; Declare el protocolo &lt;strong&gt;&lt;em&gt;ViewControllerBDelegate&lt;/em&gt;&lt;/strong&gt; en el archivo ViewControllerB pero fuera de la clase</target>
        </trans-unit>
        <trans-unit id="0cfd0efef879069214eec7da3b7a25e5918e36d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Declare variable in ViewControllerB</source>
          <target state="translated">&lt;strong&gt;Paso 1.&lt;/strong&gt; Declarar variable en ViewControllerB</target>
        </trans-unit>
        <trans-unit id="63f0b24521041c6431c75964ba6cefcaea19944c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Declare Delegate variable instance in ViewControllerB</source>
          <target state="translated">&lt;strong&gt;Paso 2.&lt;/strong&gt; Declarar la instancia de la variable Delegate en ViewControllerB</target>
        </trans-unit>
        <trans-unit id="cf2aa8929fa2c0c9c4a6b1ac4ca41b9ce1e5280a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; In ViewControllerB Declare a viable named &lt;strong&gt;isSomethingEnabled&lt;/strong&gt; and print its value.</source>
          <target state="translated">&lt;strong&gt;Paso 2.&lt;/strong&gt; En ViewControllerB Declare un viable llamado &lt;strong&gt;isSomethingEnabled&lt;/strong&gt; e imprima su valor.</target>
        </trans-unit>
        <trans-unit id="673106a11e8d268ad485367e76e5b7fe1a54be95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Print Variable in ViewControllerB' ViewDidLoad method</source>
          <target state="translated">&lt;strong&gt;Paso 2.&lt;/strong&gt; Imprimir variable en el m&amp;eacute;todo ViewControllerB 'ViewDidLoad</target>
        </trans-unit>
        <trans-unit id="c79ecb62ba912afd27284dd7da413af362a92fe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; In ViewControllerA Pass Data while pushing through Navigation Controller</source>
          <target state="translated">&lt;strong&gt;Paso 3.&lt;/strong&gt; En ViewController, pase los datos mientras empuja a trav&amp;eacute;s del controlador de navegaci&amp;oacute;n</target>
        </trans-unit>
        <trans-unit id="4b0af6a719a13383d29f0e86f0830773e5362336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; In ViewControllerA pass isSomethingEnabled's value while passing Segue</source>
          <target state="translated">&lt;strong&gt;Paso 3.&lt;/strong&gt; En ViewController, un pase es el valor de SomeEnabled al pasar Segue</target>
        </trans-unit>
        <trans-unit id="e879cf49b95c873ff028951588aa65e4dc76e026" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Send data for delegate inside viewDidLoad method of ViewControllerB</source>
          <target state="translated">&lt;strong&gt;Paso 3.&lt;/strong&gt; Enviar datos para delegar dentro del m&amp;eacute;todo viewDidLoad de ViewControllerB</target>
        </trans-unit>
        <trans-unit id="c0971f452794a6e92bcbbc194c9499089ede4379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; Confirm ViewControllerBDelegate in ViewControllerA</source>
          <target state="translated">&lt;strong&gt;Paso 4.&lt;/strong&gt; Confirme ViewControllerBDelegate en ViewControllerA</target>
        </trans-unit>
        <trans-unit id="400cecca8d5ee34aed2e79bed634a5f6417ad26a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5.&lt;/strong&gt; Confirm that you will implement delegate in ViewControllerA</source>
          <target state="translated">&lt;strong&gt;Paso 5.&lt;/strong&gt; Confirme que implementar&amp;aacute; delegado en ViewControllerA</target>
        </trans-unit>
        <trans-unit id="a6946e7fb9eb003efc11719f3b07f5e5dd24240e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6.&lt;/strong&gt; Implement delegate method for receiving data in ViewControllerA</source>
          <target state="translated">&lt;strong&gt;Paso 6.&lt;/strong&gt; Implemente el m&amp;eacute;todo delegado para recibir datos en ViewControllerA</target>
        </trans-unit>
        <trans-unit id="dae0e54a74abfd074492d26eb16ee245aa1b2bad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Swift 5&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Swift 5&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28379284774a4bc3f1d8c071ddb2db954d9799db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Solutions: Delegates and the Observer Pattern, and Singletons&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Las Soluciones: Delegados y el Patr&amp;oacute;n de Observador, y Singletons&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67f11916500f3f87c23f865722bfb004fcf67670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The View Controllers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Los controladores de vista&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4223100f431b368002a27fc7e5a1b02d95268402" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a very old answer and this is anti pattern, please use delegates. Do not use this Approach !!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Esta es una respuesta muy antigua y es anti patr&amp;oacute;n, por favor use delegados.&lt;/strong&gt; &lt;strong&gt;&amp;iexcl;No utilices este enfoque!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f90d261e0a84b99ac74b5c70573c76458761db1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ViewControllerA&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ViewControllerA&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48b18e371bee61f8b3cc40f6098e6c3da05ba232" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ViewControllerB&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ViewControllerB&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7695880e46c35fa27304925b1429e1f63dcc24f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add block handler (listener)&lt;/strong&gt;
where you need a value (for example you need your API response in ControllerA or you need ContorllerB data on A)</source>
          <target state="translated">&lt;strong&gt;agregue el controlador de bloque (escucha)&lt;/strong&gt; donde necesita un valor (por ejemplo, necesita su respuesta API en ControllerA o necesita datos de ContorllerB en A)</target>
        </trans-unit>
        <trans-unit id="c5d2857c643c79b0380179ffbc7e423000f801e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;define a block&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;definir un bloque&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93db5e336a184ed3fa5d32c57284bb8d6714d03a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fire block&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;bloque de fuego&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3915169e39c880b6db82aad68f146c88205b079" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;singleton&lt;/strong&gt; is an instance of a class, that instance being the only instance in existence during its lifetime. A singleton gets its name from the fact that it is the single instance. Normally developers who use singletons have special class methods for accessing them.</source>
          <target state="translated">Un &lt;strong&gt;singleton&lt;/strong&gt; es una instancia de una clase, siendo esa instancia la &amp;uacute;nica instancia que existe durante su vida &amp;uacute;til. Un singleton recibe su nombre del hecho de que es la instancia &amp;uacute;nica. Normalmente, los desarrolladores que usan singletons tienen m&amp;eacute;todos de clase especiales para acceder a ellos.</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">Add</target>
        </trans-unit>
        <trans-unit id="f28e068fdcf0539a305afd3501e8a77424964acf" translate="yes" xml:space="preserve">
          <source>Add a new file to your project (Objective-C Protocol) File -&amp;gt; New, now name it ViewController1Delegate or whatever you want and write these between the @interface and @end directives</source>
          <target state="translated">Agregue un nuevo archivo a su proyecto (Archivo Objective-C Protocol) -&amp;gt; Nuevo, ahora ll&amp;aacute;melo ViewController1Delegate o lo que quiera y escr&amp;iacute;balos entre las directivas @interface y @end</target>
        </trans-unit>
        <trans-unit id="3f0eff45a4a19a3b442bc835b668a6a9ac78b01f" translate="yes" xml:space="preserve">
          <source>Add this &lt;code&gt;property&lt;/code&gt; in NextVC.h on nextVC</source>
          <target state="translated">Agregue esta &lt;code&gt;property&lt;/code&gt; en NextVC.h en nextVC</target>
        </trans-unit>
        <trans-unit id="804108390422b4e4ce16d7dd070e8cd51d8926e4" translate="yes" xml:space="preserve">
          <source>After more research it seemed that Protocols and Delegates is the correct/Apple prefered way of doing this.</source>
          <target state="translated">Después de más investigación pareció que Protocolos y Delegados es la forma correcta de hacer esto.</target>
        </trans-unit>
        <trans-unit id="a12d91c7bf75162aeefa8045f7e5bc4e2c65ef2b" translate="yes" xml:space="preserve">
          <source>All of your views that conform to this need to be subclasses of MCViewController, which allow you to override the new onResume: method, allowing you access to the data you've passed in.</source>
          <target state="translated">Todos los puntos de vista que se ajusten a esto deben ser subclases del MCViewController,que le permiten anular el nuevo método onResume:,que le permite acceder a los datos que ha pasado.</target>
        </trans-unit>
        <trans-unit id="0d8ab1246f6106fb56d5a9574573a871cd55050d" translate="yes" xml:space="preserve">
          <source>And in the prepareForSegue of VC1 you can change any property you want to share.</source>
          <target state="translated">Y en el prepareForSegue de VC1 puedes cambiar cualquier propiedad que quieras compartir.</target>
        </trans-unit>
        <trans-unit id="bccdba78cf0a1ca896692cedf94279f07a532726" translate="yes" xml:space="preserve">
          <source>And last</source>
          <target state="translated">Y por último</target>
        </trans-unit>
        <trans-unit id="b969e3b40597dea269830b21f5cd87d1fbd3744f" translate="yes" xml:space="preserve">
          <source>And the code for the Second View Controller is</source>
          <target state="translated">Y el código para el Controlador de la Segunda Vista es</target>
        </trans-unit>
        <trans-unit id="18cc65ab16292fba4c64e85d6cc81210aac335ef" translate="yes" xml:space="preserve">
          <source>Another Working Example for Blocks</source>
          <target state="translated">Otro ejemplo de trabajo para los bloques</target>
        </trans-unit>
        <trans-unit id="118227ed38ee9d82b2542b27e2ded76929153d04" translate="yes" xml:space="preserve">
          <source>Another approach is to handle a screen full of data at a time and instead of coupling the view controllers to each other couple each view controller to single data source that they can get to independently.</source>
          <target state="translated">Otro enfoque es manejar una pantalla llena de datos a la vez y en lugar de acoplar los controladores de vista entre sí,acoplar cada controlador de vista a una sola fuente de datos a la que puedan llegar de forma independiente.</target>
        </trans-unit>
        <trans-unit id="24aa503d35146161367e2853117eb922f7c7e249" translate="yes" xml:space="preserve">
          <source>Another option of using storyboards Undwind (Exit)  - you can
use the method you wrote in VC1</source>
          <target state="translated">Otra opción de usar los storyboards Undwind (Exit)-puedes usar el método que escribiste en VC1</target>
        </trans-unit>
        <trans-unit id="0b6c72a6ce36ed0135ebc104f4837a0d4628e2ba" translate="yes" xml:space="preserve">
          <source>Another solution is use singleton class pattern initialize it once and use it in your entire app.</source>
          <target state="translated">Otra solución es usar el patrón de clase de Singleton,inicializarlo una vez y usarlo en toda la aplicación.</target>
        </trans-unit>
        <trans-unit id="485e9762fc4e98806a8bb291a5c98ca65cca0c5d" translate="yes" xml:space="preserve">
          <source>Any time an individual item is created or edited, it must also synchronize with the other view controllers. For example, if we add a boat in ViewControllerD, but it is not yet insured, then the boat must appear when the user goes to ViewControllerA (Luxury Items), and also ViewControllerC (Entire Home Inventory), but not when the user goes to ViewControllerB (Non-insured Items). We need be concerned with not only adding new items, but also deleting items (which may be allowed from any of the four view controllers), or editing existing items (which may be allowed from the &quot;Add New Item Form&quot;, repurposing the same for editing).</source>
          <target state="translated">Cada vez que se crea o edita un elemento individual,también debe sincronizarse con los otros controladores de la vista.Por ejemplo,si añadimos un barco en el ViewControllerD,pero aún no está asegurado,entonces el barco debe aparecer cuando el usuario vaya al ViewControllerA (Artículos de lujo),y también al ViewControllerC (Inventario completo de la casa),pero no cuando el usuario vaya al ViewControllerB (Artículos no asegurados).Debemos preocuparnos no sólo de añadir nuevos artículos,sino también de eliminarlos (lo cual puede estar permitido desde cualquiera de los cuatro ViewController),o editar los artículos existentes (lo cual puede estar permitido desde el &quot;Formulario para añadir nuevos artículos&quot;,volviendo a utilizar los mismos para la edición).</target>
        </trans-unit>
        <trans-unit id="64849ae90e58e40914c4de26bdae632804d0010e" translate="yes" xml:space="preserve">
          <source>Any time your Application Delegate starts to get bloated, start to remove functionality into singletons. For example, the Core Data Stack should not be left in the AppDelegate, but should instead be put in its own class, a coreDataManager class.</source>
          <target state="translated">Cada vez que tu delegado de aplicaciones empiece a hincharse,empieza a eliminar la funcionalidad en los singletons.Por ejemplo,el Core Data Stack no debe dejarse en el AppDelegate,sino que debe ponerse en su propia clase,una clase coreDataManager.</target>
        </trans-unit>
        <trans-unit id="3f40fedcce16e602b145be79b8076ddf17738736" translate="yes" xml:space="preserve">
          <source>Assuming we use Storyboard, first controller sets callback block, for example during segue preparation:</source>
          <target state="translated">Asumiendo que usamos el Storyboard,el primer controlador establece el bloqueo de llamada,por ejemplo durante la preparación del segmento:</target>
        </trans-unit>
        <trans-unit id="937c87dd061dc69a2f97f40ce08377952484a667" translate="yes" xml:space="preserve">
          <source>Asynchronous JSON Requests in Objective-C</source>
          <target state="translated">Solicitudes asincrónicas de JSON en el Objetivo-C</target>
        </trans-unit>
        <trans-unit id="7a23b7a9d6d6baa93168423a429c497e0668b171" translate="yes" xml:space="preserve">
          <source>Before pushing &lt;code&gt;viewControllerB&lt;/code&gt; to navigation stack we need to tell  &lt;code&gt;ViewControllerB&lt;/code&gt; that &lt;code&gt;ViewControllerA&lt;/code&gt; is its delegate, otherwise we will get an error.</source>
          <target state="translated">Antes de empujar &lt;code&gt;viewControllerB&lt;/code&gt; a la pila de navegaci&amp;oacute;n, debemos decirle a &lt;code&gt;ViewControllerB&lt;/code&gt; que &lt;code&gt;ViewControllerA&lt;/code&gt; es su delegado, de lo contrario obtendremos un error.</target>
        </trans-unit>
        <trans-unit id="8eac8dd9c4975fc8c45b35fda8f1d46a26aaa269" translate="yes" xml:space="preserve">
          <source>Brute force iteration on view controllers (in Navigation or Tab Bar Controller) to set the data</source>
          <target state="translated">Iteración de la fuerza bruta en los controladores de la vista (en Navegación o Controlador de la barra de pestañas)para establecer los datos</target>
        </trans-unit>
        <trans-unit id="54b5e333081c3612757c1545a54070e785c64a95" translate="yes" xml:space="preserve">
          <source>But for the simple scenario of passing a value to a different class whose allocation is done in the current class, the most common and preferred method would be the direct setting of values after allocation. This is done as follows:-</source>
          <target state="translated">Pero para el simple escenario de pasar un valor a una clase diferente cuya asignación se hace en la clase actual,el método más común y preferido sería la fijación directa de los valores después de la asignación.Esto se hace de la siguiente manera:-</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="959abf1f5e9c99d137dc34e9bffd461476893b28" translate="yes" xml:space="preserve">
          <source>Core Data</source>
          <target state="translated">Datos básicos</target>
        </trans-unit>
        <trans-unit id="dec7ea0ef8ddc0be363fac5318ec6d035445e81a" translate="yes" xml:space="preserve">
          <source>Create a the segue from &lt;code&gt;ViewControllerA&lt;/code&gt; to &lt;code&gt;ViewControllerB&lt;/code&gt; on the storyboard and give it an identifier, in this example we'll call it &lt;code&gt;&quot;showDetailSegue&quot;&lt;/code&gt;</source>
          <target state="translated">Cree un segue de &lt;code&gt;ViewControllerA&lt;/code&gt; a &lt;code&gt;ViewControllerB&lt;/code&gt; en el gui&amp;oacute;n gr&amp;aacute;fico y &lt;code&gt;&quot;showDetailSegue&quot;&lt;/code&gt; un identificador, en este ejemplo lo llamaremos &quot;showDetailSegue&quot;</target>
        </trans-unit>
        <trans-unit id="7d6106a2b404bee4c3c16acfce805678171d2723" translate="yes" xml:space="preserve">
          <source>Create the property on next &lt;code&gt;view controller .h&lt;/code&gt; and define getter and setter.</source>
          <target state="translated">Cree la propiedad en el siguiente &lt;code&gt;view controller .h&lt;/code&gt; y defina getter y setter.</target>
        </trans-unit>
        <trans-unit id="3dd4a61a93a6d9b50322d5da189d9a661c072e48" translate="yes" xml:space="preserve">
          <source>Create the storyboard layout in the Interface Builder. Again, to make the segue, you just</source>
          <target state="translated">Crear el diseño del guión gráfico en el Constructor de la Interfaz.De nuevo,para hacer la transición,simplemente</target>
        </trans-unit>
        <trans-unit id="2851431431fb0af8a145e641673ca993d6a20f60" translate="yes" xml:space="preserve">
          <source>Create the storyboard layout in the Interface Builder. To make the segue, you just</source>
          <target state="translated">Crear el diseño del guión gráfico en el Constructor de la Interfaz.Para hacer la transición,sólo</target>
        </trans-unit>
        <trans-unit id="863b2164a4f2bf227ea1d1aef73ad8543480c495" translate="yes" xml:space="preserve">
          <source>Data Source</source>
          <target state="translated">Fuente de datos</target>
        </trans-unit>
        <trans-unit id="2aac74bd52b9c492652ab12ed22c5b9514f39d8b" translate="yes" xml:space="preserve">
          <source>Databases and other storage mechanisms like plist, etc.</source>
          <target state="translated">Bases de datos y otros mecanismos de almacenamiento como el plist,etc.</target>
        </trans-unit>
        <trans-unit id="12ab214df85e4910f7e4400eea924b9565854a9f" translate="yes" xml:space="preserve">
          <source>Delegate</source>
          <target state="translated">Delegate</target>
        </trans-unit>
        <trans-unit id="7dcb8a7fd6d2299b039ffb1a88ed98c93cfc5c8c" translate="yes" xml:space="preserve">
          <source>Delegate Pattern</source>
          <target state="translated">Patrón del delegado</target>
        </trans-unit>
        <trans-unit id="55f0774bd4a8ef9ee512f251043f191561770ae9" translate="yes" xml:space="preserve">
          <source>Delegation - for passing data back</source>
          <target state="translated">Delegación-para pasar los datos de vuelta</target>
        </trans-unit>
        <trans-unit id="4e3967fb23456a60f72119d5b28aa0e415a7f7e8" translate="yes" xml:space="preserve">
          <source>Delegation is the only one solution to perform such operations when you are using .xib files however all answers described above are for &lt;code&gt;storyboard&lt;/code&gt; for .xibs files you need to use delegation. that's only solution you can.</source>
          <target state="translated">La delegaci&amp;oacute;n es la &amp;uacute;nica soluci&amp;oacute;n para realizar tales operaciones cuando est&amp;aacute; utilizando archivos .xib, sin embargo, todas las respuestas descritas anteriormente son para el &lt;code&gt;storyboard&lt;/code&gt; para archivos .xibs que necesita para usar delegaci&amp;oacute;n. Esa es la &amp;uacute;nica soluci&amp;oacute;n que puedes.</target>
        </trans-unit>
        <trans-unit id="b4207fd5520139aa96bd6e9274602042b4534a20" translate="yes" xml:space="preserve">
          <source>Direct initialization after the allocation of another class.</source>
          <target state="translated">Inicialización directa después de la asignación de otra clase.</target>
        </trans-unit>
        <trans-unit id="bcfc557b28b79f1b85cc19619bb82e338660c8e4" translate="yes" xml:space="preserve">
          <source>FirstViewController String value as</source>
          <target state="translated">FirstViewController String valor como</target>
        </trans-unit>
        <trans-unit id="57a94d454ba6c87c92cf93163d87c89f165d195a" translate="yes" xml:space="preserve">
          <source>FirstViewController.h</source>
          <target state="translated">FirstViewController.h</target>
        </trans-unit>
        <trans-unit id="f8e78f0e3c0970f488a281208ad26ef9f20bbdf0" translate="yes" xml:space="preserve">
          <source>FirstViewController.m</source>
          <target state="translated">FirstViewController.m</target>
        </trans-unit>
        <trans-unit id="9609a00b7fb972ff05c1431d4f283cdd084f76ce" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;ViewControllerA&lt;/code&gt; to be a delegate of &lt;code&gt;ViewControllerB&lt;/code&gt; it must conform to &lt;code&gt;ViewControllerB&lt;/code&gt;'s protocol which we have to specify. This tells &lt;code&gt;ViewControllerA&lt;/code&gt; which methods it must implement.</source>
          <target state="translated">Para que &lt;code&gt;ViewControllerA&lt;/code&gt; sea ​​un delegado de &lt;code&gt;ViewControllerB&lt;/code&gt; , debe cumplir con el protocolo de &lt;code&gt;ViewControllerB&lt;/code&gt; que debemos especificar. Esto le dice a &lt;code&gt;ViewControllerA&lt;/code&gt; qu&amp;eacute; m&amp;eacute;todos debe implementar.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="ddb095a25c86563637fe3a13523173efa1d4bd90" translate="yes" xml:space="preserve">
          <source>For this example, we will have &lt;code&gt;ViewControllerA&lt;/code&gt; and &lt;code&gt;ViewControllerB&lt;/code&gt;</source>
          <target state="translated">Para este ejemplo, tendremos &lt;code&gt;ViewControllerA&lt;/code&gt; y &lt;code&gt;ViewControllerB&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fd567287999a459caadcea427cbafc09d8c04a6" translate="yes" xml:space="preserve">
          <source>For those interested, I wrote some articles that address these points more in depth and highlight the various drawbacks:</source>
          <target state="translated">Para los interesados,escribí algunos artículos que tratan estos puntos más a fondo y destacan los diversos inconvenientes:</target>
        </trans-unit>
        <trans-unit id="32096c328bd65055c2650eb54a84201d94dbdd3e" translate="yes" xml:space="preserve">
          <source>Go to your SecondViewController.h and write two methods</source>
          <target state="translated">Ve a tu SecondViewController.h y escribe dos métodos</target>
        </trans-unit>
        <trans-unit id="66b1fbfc6e5394baafe61e59c041f14de3f8dfa2" translate="yes" xml:space="preserve">
          <source>Here are two trivial examples of the segue glue.  The first is straightforward showing one parameter passed for input, the second for output.</source>
          <target state="translated">Aquí hay dos ejemplos triviales del pegamento de la cola.El primero es sencillo y muestra un parámetro pasado para la entrada,el segundo para la salida.</target>
        </trans-unit>
        <trans-unit id="c503ca63bb5c748744204770c2f45a34800264da" translate="yes" xml:space="preserve">
          <source>Here is the setup for the receiver.</source>
          <target state="translated">Aquí está la configuración del receptor.</target>
        </trans-unit>
        <trans-unit id="27ec3a0713aa1a15fc2589ac80289f434c756874" translate="yes" xml:space="preserve">
          <source>Here is the setup for the sender</source>
          <target state="translated">Aquí está la configuración para el remitente</target>
        </trans-unit>
        <trans-unit id="2ed131c901fbe28ddf0ce2cd8b65f252fbcb1bac" translate="yes" xml:space="preserve">
          <source>Hook up the outlets for the &lt;code&gt;UITextField&lt;/code&gt; and the &lt;code&gt;UILabel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UITextField&lt;/code&gt; las salidas para el UITextField y el &lt;code&gt;UILabel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c858c878a55e6b91f549851d54d1a349d5effd3d" translate="yes" xml:space="preserve">
          <source>Hope This Helps.</source>
          <target state="translated">Espero que esto ayude.</target>
        </trans-unit>
        <trans-unit id="0f0122ee4a988027a9316eb9e7ae9f1f39324dd0" translate="yes" xml:space="preserve">
          <source>Hope i added something to the discussion.</source>
          <target state="translated">Espero haber añadido algo a la discusión.</target>
        </trans-unit>
        <trans-unit id="5a142ce919975d47656e09ab99d87f6db6c24f1b" translate="yes" xml:space="preserve">
          <source>Hope some of you find this solution useful/interesting.</source>
          <target state="translated">Espero que algunos de ustedes encuentren esta solución útil e interesante.</target>
        </trans-unit>
        <trans-unit id="3dde88ebb2cd0d70e69aeb2a7ef870a86f8e1b6f" translate="yes" xml:space="preserve">
          <source>Hope this helps</source>
          <target state="translated">Espero que esto ayude</target>
        </trans-unit>
        <trans-unit id="2cdfefbe424649534d9db2ab8261c3eafbd9a6e9" translate="yes" xml:space="preserve">
          <source>How iOS View Controllers Communicate With Each Other</source>
          <target state="translated">Cómo se comunican entre sí los controladores de iOS View</target>
        </trans-unit>
        <trans-unit id="c7727df2be19971e8927f49141a1a5496f4054e8" translate="yes" xml:space="preserve">
          <source>How to Structure the Code of iOS Apps</source>
          <target state="translated">Cómo estructurar el código de las aplicaciones del iOS</target>
        </trans-unit>
        <trans-unit id="a7486bddaa4b0348571f0d1a8a53e76566788cb0" translate="yes" xml:space="preserve">
          <source>I am currently contributing to an open source solution to this problem through a project called MCViewFactory, which may be found here:</source>
          <target state="translated">Actualmente estoy contribuyendo a una solución de código abierto a este problema a través de un proyecto llamado MCViewFactory,que se puede encontrar aquí:</target>
        </trans-unit>
        <trans-unit id="f2d0ca81764b2c3a3e1f362cde1e9ab36322bd51" translate="yes" xml:space="preserve">
          <source>I am going to rewrite his logic in Swift with latest iOS Framework</source>
          <target state="translated">Voy a reescribir su lógica en Swift con el último Marco iOS</target>
        </trans-unit>
        <trans-unit id="32993e505110576861bf61a7774bb4e29093aa24" translate="yes" xml:space="preserve">
          <source>I ended up using this example</source>
          <target state="translated">Terminé usando este ejemplo</target>
        </trans-unit>
        <trans-unit id="fb06d1564152df661993e0e7090fe2a1f0d5b7e9" translate="yes" xml:space="preserve">
          <source>I find simplest and most elegant version with passing blocks.
Let's name view controller that waits for returned data as &quot;A&quot; and returning view controller as &quot;B&quot;. In this example we want to get 2 values: first of Type1 and second of Type2.</source>
          <target state="translated">Encuentro la versión más simple y elegante con bloques de paso.Nombremos al controlador de la vista que espera los datos devueltos como &quot;A&quot; y al controlador de la vista de retorno como &quot;B&quot;.En este ejemplo queremos obtener 2 valores:el primero de Tipo 1 y el segundo de Tipo 2.</target>
        </trans-unit>
        <trans-unit id="1333860eaa3d97443744ef9200f6a80fa125579a" translate="yes" xml:space="preserve">
          <source>I found there are more ways:</source>
          <target state="translated">Descubrí que hay más formas:</target>
        </trans-unit>
        <trans-unit id="63c023c5a80422806d084a6c97842a45d00ed69c" translate="yes" xml:space="preserve">
          <source>I have a view that acts as a data entry form and I want to give the user the option to select multiple products. The products are listed on another view with a &lt;code&gt;UITableViewController&lt;/code&gt; and I have enabled multiple selections.</source>
          <target state="translated">Tengo una vista que act&amp;uacute;a como un formulario de entrada de datos y quiero darle al usuario la opci&amp;oacute;n de seleccionar m&amp;uacute;ltiples productos. Los productos se enumeran en otra vista con un &lt;code&gt;UITableViewController&lt;/code&gt; y he habilitado varias selecciones.</target>
        </trans-unit>
        <trans-unit id="daab7a9e1660ea80bf746f2a7ffe137093641504" translate="yes" xml:space="preserve">
          <source>I have seen a lot of people over complicating this using the &lt;code&gt;didSelectRowAtPath&lt;/code&gt; method. I am using Core Data in my example.</source>
          <target state="translated">He visto a muchas personas complicar esto usando el m&amp;eacute;todo &lt;code&gt;didSelectRowAtPath&lt;/code&gt; . Estoy usando Core Data en mi ejemplo.</target>
        </trans-unit>
        <trans-unit id="16aeeef45f1fe8a16c172b0d0778c79a341461c5" translate="yes" xml:space="preserve">
          <source>I have surfed around and seen some people declare an array in the app delegate. I read something about Singletons but don't understand what these are and I read something about creating a data model.</source>
          <target state="translated">He navegado por ahí y he visto a algunas personas declarar un arreglo en el delegado de la aplicación.Leí algo sobre los Singletons pero no entiendo qué son y leí algo sobre la creación de un modelo de datos.</target>
        </trans-unit>
        <trans-unit id="814549b2a629fcb2811c5678e6e7c5629c9fa79a" translate="yes" xml:space="preserve">
          <source>I hope this answer is clear enough for people to understand and that I have not missed anything.</source>
          <target state="translated">Espero que esta respuesta sea lo suficientemente clara para que la gente la entienda y que no se me haya pasado nada por alto.</target>
        </trans-unit>
        <trans-unit id="15f9e48f7ce909c17212445d5661bf8a3c542dbc" translate="yes" xml:space="preserve">
          <source>I know this is a beaten subject but for those looking to answer this question with a SWIFT slant and want a bare-bones example, here my go-to method for passing data if you are using a segue to get around.</source>
          <target state="translated">Sé que este es un tema muy popular,pero para aquellos que quieran responder a esta pregunta con un enfoque SWIFT y quieran un ejemplo sencillo,aquí está mi método para pasar los datos si están usando una pista para desplazarse.</target>
        </trans-unit>
        <trans-unit id="81a9e22efbeff10a44db5b8cdb745bd06025c82b" translate="yes" xml:space="preserve">
          <source>I like the idea of Model objects and Mock objects based on NSProxy to commit or discard data if what user selects can be cancelled.</source>
          <target state="translated">Me gusta la idea de los objetos modelo y los objetos simulados basados en NSProxy para confirmar o descartar datos si lo que el usuario selecciona puede ser cancelado.</target>
        </trans-unit>
        <trans-unit id="baaf8a3ca4379be9cd2bab483d766c8d34304728" translate="yes" xml:space="preserve">
          <source>I was searching this solution for long time, Atlast I found it. First of all declare all the objects in your SecondViewController.h file like</source>
          <target state="translated">Estuve buscando esta solución durante mucho tiempo,al final la encontré.Primero que nada,declara todos los objetos en tu archivo SecondViewController.h como</target>
        </trans-unit>
        <trans-unit id="62c982b0a0ffe5bca814c4394638faed462207da" translate="yes" xml:space="preserve">
          <source>I wrote a blog post about this a while back: &lt;a href=&quot;http://koreyhinton.com/blog/sharing-model-code.html&quot;&gt;Sharing Model Code&lt;/a&gt;. Here's a brief summary:</source>
          <target state="translated">Escrib&amp;iacute; una publicaci&amp;oacute;n de blog sobre esto hace un tiempo: &lt;a href=&quot;http://koreyhinton.com/blog/sharing-model-code.html&quot;&gt;Compartir el c&amp;oacute;digo del modelo&lt;/a&gt; . Aqu&amp;iacute; hay un breve resumen:</target>
        </trans-unit>
        <trans-unit id="f35d400cc0a2783a34596a1675a4eb5991195da1" translate="yes" xml:space="preserve">
          <source>I'm new to iOS and Objective-C and the whole MVC paradigm and I'm stuck with the following:</source>
          <target state="translated">Soy nuevo en el iOS y en el Objetivo-C y en todo el paradigma MVC y estoy atascado en lo siguiente:</target>
        </trans-unit>
        <trans-unit id="df1f75720203e34b8f92760b6e05286c591390f8" translate="yes" xml:space="preserve">
          <source>If you are using Storyboards you are most likely using segues and will need this procedure to pass data forward. This is similar to the above but instead of passing the data before you push the view controller, you use a method called</source>
          <target state="translated">Si está usando Storyboards lo más probable es que esté usando segueta y necesitará este procedimiento para pasar los datos hacia adelante.Esto es similar a lo anterior pero en lugar de pasar los datos antes de empujar el controlador de la vista,se utiliza un método llamado</target>
        </trans-unit>
        <trans-unit id="09342e817a09bfb2e555b89afe5f0a71bebde6b8" translate="yes" xml:space="preserve">
          <source>If you have your views embedded in a navigation controller you need to change the method above slightly to the following</source>
          <target state="translated">Si tiene sus puntos de vista incrustados en un controlador de navegación necesita cambiar el método anterior ligeramente a lo siguiente</target>
        </trans-unit>
        <trans-unit id="c057436dcaf9858c8a465dcfbcf74653c62e56d3" translate="yes" xml:space="preserve">
          <source>If you want to pass data from one controller to other try this code</source>
          <target state="translated">Si quieres pasar datos de un controlador a otro intenta este código</target>
        </trans-unit>
        <trans-unit id="5aaeee5260096b956e2adc18507a3dbdbd4de81b" translate="yes" xml:space="preserve">
          <source>If you want to send data from one to another viewController, here's a way to it:</source>
          <target state="translated">Si quieres enviar datos de uno a otro viewController,aquí tienes una forma de hacerlo:</target>
        </trans-unit>
        <trans-unit id="df625f6457413343ada0786d3f8df7e44cb409c4" translate="yes" xml:space="preserve">
          <source>Implement a method with a    UIStoryboardSegue argument in  VC 1,    like this one:</source>
          <target state="translated">Implementar un método con un argumento UIStoryboardSegue en el VC 1,como este:</target>
        </trans-unit>
        <trans-unit id="d5bbe6ca201c4fe5dda1d1e053bb7f12a4edd65d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ViewControllerA.m&lt;/code&gt; implement the following method from our protocol</source>
          <target state="translated">En &lt;code&gt;ViewControllerA.m&lt;/code&gt; implemente el siguiente m&amp;eacute;todo de nuestro protocolo</target>
        </trans-unit>
        <trans-unit id="9d6547b304166959ffcc04dfdf16623cf62b971e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ViewControllerB.h&lt;/code&gt;, below the &lt;code&gt;#import&lt;/code&gt;, but above &lt;code&gt;@interface&lt;/code&gt; you specify the protocol.</source>
          <target state="translated">En &lt;code&gt;ViewControllerB.h&lt;/code&gt; , debajo de &lt;code&gt;#import&lt;/code&gt; , pero arriba de &lt;code&gt;@interface&lt;/code&gt; , especifique el protocolo.</target>
        </trans-unit>
        <trans-unit id="34f4b01f04c9ab50f1dc277e194a6c707b3ae757" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ViewControllerB&lt;/code&gt; we call a message on the &lt;code&gt;delegate&lt;/code&gt; when we pop the view controller.</source>
          <target state="translated">En &lt;code&gt;ViewControllerB&lt;/code&gt; llamamos un mensaje al &lt;code&gt;delegate&lt;/code&gt; cuando hacemos estallar el controlador de vista.</target>
        </trans-unit>
        <trans-unit id="d4cb986f06c8a358bb0ac401e2255be7435b3ec6" translate="yes" xml:space="preserve">
          <source>In NewViewController.h</source>
          <target state="translated">En NewViewController.h</target>
        </trans-unit>
        <trans-unit id="ee25efeb34aea96a92caf4d24a919db9885aa93d" translate="yes" xml:space="preserve">
          <source>In NewViewController.m</source>
          <target state="translated">En NewViewController.m</target>
        </trans-unit>
        <trans-unit id="fcfba25eeca43facefb5d34107096b545f63a8ea" translate="yes" xml:space="preserve">
          <source>In both unwind options you can set the tag property of the button and check it in
        the prepareForSegue.</source>
          <target state="translated">En ambas opciones de desenrollado se puede establecer la propiedad de la etiqueta del botón y comprobarla en la preparación para el juego.</target>
        </trans-unit>
        <trans-unit id="61da207f2a6f23452f52382b7096f549ed3ae3a9" translate="yes" xml:space="preserve">
          <source>In my case I used a singleton class which can work as a global object allowing accesses to the data from almost everywhere in the app. First thing is to build a singleton class. Please refer to the page,&quot; &lt;a href=&quot;https://stackoverflow.com/questions/145154/what-does-your-objective-c-singleton-look-like&quot;&gt;What should my Objective-C singleton look like?&lt;/a&gt; &quot;
And what I did to make the object globally accessible was simply import it in &lt;code&gt;appName_Prefix.pch&lt;/code&gt; which is for applying import statement in every classes.
To access this object and to use, I simply implemented class method to return the shared instance, which contains its own variables</source>
          <target state="translated">En mi caso, utilic&amp;eacute; una clase singleton que puede funcionar como un objeto global que permite acceder a los datos desde casi cualquier lugar de la aplicaci&amp;oacute;n. Lo primero es construir una clase singleton. Consulte la p&amp;aacute;gina &quot; &lt;a href=&quot;https://stackoverflow.com/questions/145154/what-does-your-objective-c-singleton-look-like&quot;&gt;&amp;iquest;C&amp;oacute;mo deber&amp;iacute;a ser mi singleton Objective-C?&lt;/a&gt; &quot; Para acceder a este objeto y usarlo, simplemente implement&amp;eacute; el m&amp;eacute;todo de clase para devolver la instancia compartida, que contiene sus propias variables</target>
        </trans-unit>
        <trans-unit id="4347c7d44969ad5ed12d4df451dd2631e4a3c195" translate="yes" xml:space="preserve">
          <source>In practice, in my opinion only a few solutions are recommended:</source>
          <target state="translated">En la práctica,en mi opinión sólo se recomiendan algunas soluciones:</target>
        </trans-unit>
        <trans-unit id="bf835249be3289308815771b6433af2277b90842" translate="yes" xml:space="preserve">
          <source>In scenario one, we have several viable solutions, as other answers have given</source>
          <target state="translated">En el escenario uno,tenemos varias soluciones viables,ya que otras respuestas han dado</target>
        </trans-unit>
        <trans-unit id="24e6d5a69f4225a7a61ed046e01222766c16f892" translate="yes" xml:space="preserve">
          <source>In scenario two, we do not have a single property of the HouseholdInventoryManager which could be observed using KVO. Because we do not have a single property which is easily observable, the observer pattern, in this case, must be implemented using NSNotificationCenter. Each of the four view controllers would subscribe to notifications, and the sharedManager would send notifications to the notification center when appropriate. The inventory manager does not need to know anything about the view controllers or instances of any other classes which may be interested in knowing when the collection of inventory items changes; the NSNotificationCenter takes care of these implementation details. The View Controllers simply subscribe to notifications, and the data manager simply posts notifications.</source>
          <target state="translated">En el escenario dos,no tenemos ni una sola propiedad del HouseholdInventoryManager que pueda ser observada usando KVO.Debido a que no tenemos una sola propiedad que sea fácilmente observable,el patrón de observación,en este caso,debe ser implementado usando el NSNotificationCenter.Cada uno de los cuatro controladores de la vista se suscribiría a las notificaciones,y el sharedManager enviaría las notificaciones al centro de notificación cuando fuera apropiado.El gestor de inventario no necesita saber nada sobre los controladores de vista o las instancias de cualquier otra clase que puedan estar interesados en saber cuándo cambia la colección de artículos del inventario;el NSNotificationCenter se encarga de estos detalles de implementación.Los controladores de vista simplemente se suscriben a las notificaciones,y el administrador de datos simplemente publica las notificaciones.</target>
        </trans-unit>
        <trans-unit id="e1379c7d385f5fd318471115c5d1d1f688e6b7f5" translate="yes" xml:space="preserve">
          <source>In scenario two, we have other viable solutions:</source>
          <target state="translated">En el escenario dos,tenemos otras soluciones viables:</target>
        </trans-unit>
        <trans-unit id="58156148d8f8b4168742db8860d1cd7839fb7ebe" translate="yes" xml:space="preserve">
          <source>In the implementation of the Controller2 class there will be this function as-</source>
          <target state="translated">En la implementación de la clase Controller2 habrá esta función como...</target>
        </trans-unit>
        <trans-unit id="5156e8c6be3a57c9fa8103860d77229d47cc7974" translate="yes" xml:space="preserve">
          <source>In the storyBoard hook the &quot;return&quot; button to the green Exit
button(Unwind) of the vc.
 Now you have a segue that &quot;goes back&quot; so u can use the
destinationViewController property in the prepareForSegue of VC2 and
change any property of VC1 before it goes back.</source>
          <target state="translated">En el storyBoard enganche el botón &quot;return&quot; al botón verde Exit (Desenrollar)del vc.Ahora tienes una pista que &quot;vuelve&quot; para que puedas usar la propiedad destinationViewController en el prepareForSegue de VC2 y cambiar cualquier propiedad de VC1 antes de que vuelva.</target>
        </trans-unit>
        <trans-unit id="4e86367af7272fc181fb5bcd8c70015239a60e37" translate="yes" xml:space="preserve">
          <source>In viewControllerA.m</source>
          <target state="translated">En viewControllerA.m</target>
        </trans-unit>
        <trans-unit id="8a08c48c65d645ac979b803ebbf4f71b0159c9d9" translate="yes" xml:space="preserve">
          <source>In viewControllerB.m</source>
          <target state="translated">En viewControllerB.m</target>
        </trans-unit>
        <trans-unit id="cb79757699a18236287e35ceb1f9e3b022bb1e91" translate="yes" xml:space="preserve">
          <source>Independent access</source>
          <target state="translated">Acceso independiente</target>
        </trans-unit>
        <trans-unit id="3880381f94e658ae2233113129d0559225e916ff" translate="yes" xml:space="preserve">
          <source>It is similar to the above but without the buttons, labels and such.  Just simply passing data from one view to the next.</source>
          <target state="translated">Es similar a lo anterior pero sin los botones,etiquetas y demás.Simplemente pasando los datos de una vista a la siguiente.</target>
        </trans-unit>
        <trans-unit id="b906440f7eeb43644c0bf66e1e5221e013acae00" translate="yes" xml:space="preserve">
          <source>It's easy to pass data around since it's single object or couple of objects and if you have let's say UINavigationController controller, you can keep the reference to model inside and all pushed view controllers can access it directly from navigation controller.</source>
          <target state="translated">Es fácil pasar datos ya que se trata de un solo objeto o un par de objetos y si tienes,digamos,el controlador UINavigationController,puedes mantener la referencia al modelo en el interior y todos los controladores de la vista empujada pueden acceder a él directamente desde el controlador de navegación.</target>
        </trans-unit>
        <trans-unit id="0b5d7461b214a33821ecc10f031e0f6c05ecb915" translate="yes" xml:space="preserve">
          <source>Key-Value Observing</source>
          <target state="translated">Observación de valores clave</target>
        </trans-unit>
        <trans-unit id="8d8b4106a4bbadd0d9b29b9a2e51f6ef83bfb01d" translate="yes" xml:space="preserve">
          <source>Key-Value-Observing (KVO)</source>
          <target state="translated">Observación del valor clave (KVO)</target>
        </trans-unit>
        <trans-unit id="083eb368f20ff79cd32a80916799dbc06c14959b" translate="yes" xml:space="preserve">
          <source>Lastly, the setup for the segue.</source>
          <target state="translated">Por último,el montaje de la pista.</target>
        </trans-unit>
        <trans-unit id="f46a343ce085e475c030eeb1bc56e9b6d0820f1a" translate="yes" xml:space="preserve">
          <source>Managing Data Flow Between View Controllers</source>
          <target state="translated">Gestionar el flujo de datos entre los controladores de vista</target>
        </trans-unit>
        <trans-unit id="6261f4593d459846fc2f53486c547ab992d8a961" translate="yes" xml:space="preserve">
          <source>Many beginner programmers take advantage of the fact that there is always exactly one &lt;strong&gt;Application Delegate&lt;/strong&gt; in the lifetime of the application, which is globally accessible. Beginning programmers use this fact to stuff objects and functionality into the appDelegate as a convenience for access from anywhere else in the application. Just because the AppDelegate is a singleton doesn't mean it should replace all other singletons. This is a poor practice as it places too much burden on one class, breaking good object-oriented practices. Each class should have a clear role that is easily explained, often just by the name of the class.</source>
          <target state="translated">Muchos programadores principiantes aprovechan el hecho de que siempre hay exactamente un &lt;strong&gt;Delegado de aplicaciones&lt;/strong&gt; en la vida &amp;uacute;til de la aplicaci&amp;oacute;n, que es accesible a nivel mundial. Los programadores principiantes usan este hecho para introducir objetos y funcionalidades en la aplicaci&amp;oacute;n Delegar como una conveniencia para acceder desde cualquier otro lugar de la aplicaci&amp;oacute;n. El hecho de que AppDelegate sea un singleton no significa que deba reemplazar a todos los dem&amp;aacute;s. Esta es una mala pr&amp;aacute;ctica ya que pone demasiada carga en una clase, rompiendo buenas pr&amp;aacute;cticas orientadas a objetos. Cada clase debe tener un papel claro que se explica f&amp;aacute;cilmente, a menudo solo por el nombre de la clase.</target>
        </trans-unit>
        <trans-unit id="ee93bc5d4f01f7c4f087cb3eea0c1a1fa3b208c9" translate="yes" xml:space="preserve">
          <source>My question is, how do I transfer the data from one view to another? I will be holding the selections on the &lt;code&gt;UITableView&lt;/code&gt; in an array, but how do I then pass that back to the previous data entry form view so it can be saved along with the other data to Core Data on submission of the form?</source>
          <target state="translated">Mi pregunta es, &amp;iquest;c&amp;oacute;mo transfiero los datos de una vista a otra? &lt;code&gt;UITableView&lt;/code&gt; las selecciones en el UITableView en una matriz, pero &amp;iquest;c&amp;oacute;mo puedo pasar eso a la vista del formulario de entrada de datos anterior para que pueda guardarse junto con los otros datos en Core Data al enviar el formulario?</target>
        </trans-unit>
        <trans-unit id="a18e3f8bc52ea9a0b5de60e0fda22bd4b604ae4c" translate="yes" xml:space="preserve">
          <source>NSFetchedResultsController</source>
          <target state="translated">NSFetchedResultsController</target>
        </trans-unit>
        <trans-unit id="3f1be4da3d97e7743b4732f8a89228df11998162" translate="yes" xml:space="preserve">
          <source>NSNotification</source>
          <target state="translated">NSNotification</target>
        </trans-unit>
        <trans-unit id="703e1cf67303eac1ee399d96fe268f382746c5ae" translate="yes" xml:space="preserve">
          <source>NSNotificationCenter.</source>
          <target state="translated">NSNotificationCenter.</target>
        </trans-unit>
        <trans-unit id="433d340991507812dfa779c7f285cce0740b90aa" translate="yes" xml:space="preserve">
          <source>NSUserDefaults (actually a poor choice)</source>
          <target state="translated">NSUserDefaults (en realidad una mala elección)</target>
        </trans-unit>
        <trans-unit id="3ddf7238b6f7a09861615351dda77ab298ecd4c4" translate="yes" xml:space="preserve">
          <source>Next, we need to add the method to &lt;code&gt;ViewControllerA&lt;/code&gt; that is called when any segue is performed, because of this we need to detect which segue was called and then do something. In our example we will check for &lt;code&gt;&quot;showDetailSegue&quot;&lt;/code&gt; and if that's performed we will pass our &lt;code&gt;BOOL&lt;/code&gt; value to &lt;code&gt;ViewControllerB&lt;/code&gt;</source>
          <target state="translated">A continuaci&amp;oacute;n, necesitamos agregar el m&amp;eacute;todo a &lt;code&gt;ViewControllerA&lt;/code&gt; que se llama cuando se realiza cualquier segue, por eso necesitamos detectar qu&amp;eacute; segue se llam&amp;oacute; y luego hacer algo. En nuestro ejemplo, buscaremos &lt;code&gt;&quot;showDetailSegue&quot;&lt;/code&gt; y, si se realiza, pasaremos nuestro valor &lt;code&gt;BOOL&lt;/code&gt; a &lt;code&gt;ViewControllerB&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bae49983d331f8ba8153193a85e0fefdfdfa8445" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;protocol&lt;/code&gt; is outside of the View Controller class.</source>
          <target state="translated">Tenga en cuenta que el &lt;code&gt;protocol&lt;/code&gt; o est&amp;aacute; fuera de la clase View Controller.</target>
        </trans-unit>
        <trans-unit id="7b5b766ef197bc7d0023a5f3e888401660c5170a" translate="yes" xml:space="preserve">
          <source>Note the use of our custom &lt;code&gt;DataEnteredDelegate&lt;/code&gt; protocol.</source>
          <target state="translated">Tenga en cuenta el uso de nuestro protocolo personalizado &lt;code&gt;DataEnteredDelegate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c18f8f255ab9c208f23d0340eb9dff5a84efe311" translate="yes" xml:space="preserve">
          <source>Notification</source>
          <target state="translated">Notification</target>
        </trans-unit>
        <trans-unit id="01ae3c85aad097022aea128cd630e363a5a0b504" translate="yes" xml:space="preserve">
          <source>Notification - for broadcasting data to multiple classes at a single time</source>
          <target state="translated">Notificación-para la difusión de datos a múltiples clases a la vez</target>
        </trans-unit>
        <trans-unit id="4b1ac88a12c84ad56cbb34ecd00cd8b11ad67ab8" translate="yes" xml:space="preserve">
          <source>Now go to ViewController1.h and add the following property:</source>
          <target state="translated">Ahora ve a ViewController1.h y añade la siguiente propiedad:</target>
        </trans-unit>
        <trans-unit id="f4fdc026034f453314cb2b9feb3226cf19c866df" translate="yes" xml:space="preserve">
          <source>Now go to ViewController2.h and add</source>
          <target state="translated">Ahora ve a ViewController2.h y añade</target>
        </trans-unit>
        <trans-unit id="07293e03847eaf2deb454753b5701dde56438146" translate="yes" xml:space="preserve">
          <source>Now go to ViewController2.m and inside the implementation add:</source>
          <target state="translated">Ahora ve a ViewController2.m y dentro de la implementación agrega:</target>
        </trans-unit>
        <trans-unit id="1891d36db45cf91dbf1adab42bd7124ff5f7b4aa" translate="yes" xml:space="preserve">
          <source>Now if you are creating ViewController1 inside ViewController2 after some event, then you should do it this way using NIB files:</source>
          <target state="translated">Ahora bien,si estás creando el ViewController1 dentro del ViewController2 después de algún evento,entonces deberías hacerlo de esta manera usando archivos NIB:</target>
        </trans-unit>
        <trans-unit id="81718fed0b8059c2699c24b22f89672b462cced7" translate="yes" xml:space="preserve">
          <source>Now in viewControllerB.h</source>
          <target state="translated">Ahora en la vista del Controlador B.h</target>
        </trans-unit>
        <trans-unit id="066cfa98ab2af89a37dd0692de1da1e510da9279" translate="yes" xml:space="preserve">
          <source>Now in your implementation file allocate the memory for those objects like this</source>
          <target state="translated">Ahora en tu archivo de implementación asigna la memoria para esos objetos como este</target>
        </trans-unit>
        <trans-unit id="25d28a372f3af29852f3a97a0f8b0fbc603109d9" translate="yes" xml:space="preserve">
          <source>Now that we understand what a singleton is, let's discuss how a singleton fits into the observer pattern. The observer pattern is used for one object to respond to changes by another object. In the second scenario, we have four different view controllers, who all want to know about changes to the underlying data. The &quot;underlying data&quot; should belong to a single instance, a singleton. The &quot;know about changes&quot; is accomplished by observing changes made to the singleton.</source>
          <target state="translated">Ahora que entendemos lo que es un singleton,discutamos cómo un singleton encaja en el patrón de observación.El patrón de observación se utiliza para que un objeto responda a los cambios de otro objeto.En el segundo escenario,tenemos cuatro controladores de vista diferentes,que todos quieren saber sobre los cambios en los datos subyacentes.Los &quot;datos subyacentes&quot; deberían pertenecer a una sola instancia,un singleton.El &quot;saber acerca de los cambios&quot; se logra observando los cambios realizados en el singleton.</target>
        </trans-unit>
        <trans-unit id="810d6004f87bdd4f1aaf25235b9fc765e7454783" translate="yes" xml:space="preserve">
          <source>Now you are all set, whenever you detect the event of check changed in ViewController1, all you have to do is the below</source>
          <target state="translated">Ahora ya está todo listo,cada vez que detecte el evento de chequeo cambiado en el ViewController1,todo lo que tiene que hacer es lo siguiente</target>
        </trans-unit>
        <trans-unit id="b3a73828042eb03dcbae2c139bf92a09db907f20" translate="yes" xml:space="preserve">
          <source>Now you have allocated the memory for &lt;code&gt;Array&lt;/code&gt; and object. now you can fill that memory before pushing this &lt;code&gt;ViewController&lt;/code&gt;</source>
          <target state="translated">Ahora ha asignado la memoria para &lt;code&gt;Array&lt;/code&gt; y objeto. ahora puede llenar esa memoria antes de presionar este &lt;code&gt;ViewController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f65e68be86324bc6597c188e4d73418ae145285" translate="yes" xml:space="preserve">
          <source>Now, in your VC, anytime you want to move to a new VC and pass data, you create a new intent and add data to its dictionary (savedInstanceState). Then, just set the current intent of factory:</source>
          <target state="translated">Ahora,en su VC,cada vez que quiera pasar a un nuevo VC y pasar datos,usted crea un nuevo intento y añade datos a su diccionario (savedInstanceState).Entonces,sólo tienes que establecer la intención actual de fábrica:</target>
        </trans-unit>
        <trans-unit id="bec1d95a6f86d7011a1b0191ad1cb2a79100a6f0" translate="yes" xml:space="preserve">
          <source>Observer Pattern</source>
          <target state="translated">Patrón de observación</target>
        </trans-unit>
        <trans-unit id="6869e328e00e68ce2087969b13da4a7500c52bc3" translate="yes" xml:space="preserve">
          <source>Once it is run it should switch to the receiver view automatically and pass the value from the sender to the receiver, displaying the value in the console.</source>
          <target state="translated">Una vez que se ejecuta debe cambiar a la vista del receptor automáticamente y pasar el valor del emisor al receptor,mostrando el valor en la consola.</target>
        </trans-unit>
        <trans-unit id="1a8ee395cb2fe5ae68947c4ee9e43e6c00f1c91e" translate="yes" xml:space="preserve">
          <source>One approach is to share pointers to the model objects between view controllers.</source>
          <target state="translated">Un enfoque es compartir los punteros de los objetos modelo entre los controladores de la vista.</target>
        </trans-unit>
        <trans-unit id="c4076a44a136b6e3d1dde14cee2663da71d34347" translate="yes" xml:space="preserve">
          <source>One thing to remember is that using block often needs to manage strong and __weak references  like explained &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW16&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Una cosa para recordar es que el uso del bloque a menudo necesita administrar referencias fuertes y __ d&amp;eacute;biles como se explica &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW16&quot;&gt;aqu&amp;iacute;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0e88c4b3dfd5e93f534f4bbe8851936f162bd94e" translate="yes" xml:space="preserve">
          <source>Or if you need to pass more than 3 parameters which are related to a common feature you can store the values to a Model class and pass that modelObject to the next class</source>
          <target state="translated">O si necesitas pasar más de 3 parámetros relacionados con una característica común puedes almacenar los valores a una clase de Modelo y pasar ese ObjetoModelo a la siguiente clase</target>
        </trans-unit>
        <trans-unit id="ad245eca6b5201f4babe15b0ebc45f1a1101dc9c" translate="yes" xml:space="preserve">
          <source>Passing Data Between View Controllers</source>
          <target state="translated">Pasando datos entre los controladores de la vista</target>
        </trans-unit>
        <trans-unit id="06cd07cfe5ceeea538fa8519602b78db4a7a221b" translate="yes" xml:space="preserve">
          <source>Passing Data between View Controllers</source>
          <target state="translated">Pasando datos entre los controladores de la vista</target>
        </trans-unit>
        <trans-unit id="e969e4903b74ca67d170b3ed2c9867a31ea779e7" translate="yes" xml:space="preserve">
          <source>Passing data back from ViewController 2(destination) to viewController 1(Source) is the more interesting thing.
Assuming you use storyBoard those are all the ways i found out:</source>
          <target state="translated">Pasar los datos del ViewController 2(destino)al ViewController 1(fuente)es lo más interesante.Asumiendo que usas storyBoard,esas son todas las formas en las que me enteré:</target>
        </trans-unit>
        <trans-unit id="90994a166764b8045c671701e6012101fbad1f99" translate="yes" xml:space="preserve">
          <source>Passing data back to the previous View Controller</source>
          <target state="translated">Pasando los datos de vuelta al anterior Controlador de la Vista</target>
        </trans-unit>
        <trans-unit id="f34143ad2ab7c3261acf61c694d57262c6895d43" translate="yes" xml:space="preserve">
          <source>Passing data forward to a view controller from another view controller. You would use this method if you wanted to pass an object/value from one view controller to another view controller that you may be pushing on to a navigation stack.</source>
          <target state="translated">Pasando datos a un controlador de vista desde otro controlador de vista.Este método se utilizaría si se quisiera pasar un valor de objeto de un controlador de vista a otro controlador de vista que pudiera estar empujando a una pila de navegación.</target>
        </trans-unit>
        <trans-unit id="72012e34fc1aeacc4018406263df2a50524a13b3" translate="yes" xml:space="preserve">
          <source>Passing data forward to the next View Controller</source>
          <target state="translated">Pasando los datos al siguiente controlador de la vista</target>
        </trans-unit>
        <trans-unit id="7cbc262874edf29fb88c6eb2ae168aa523c5bed0" translate="yes" xml:space="preserve">
          <source>Passing data through notifications</source>
          <target state="translated">Pasar los datos a través de las notificaciones</target>
        </trans-unit>
        <trans-unit id="e73c1b3673eb3091a3411becb205b9ac61c3efb6" translate="yes" xml:space="preserve">
          <source>Passing data through the app delegate</source>
          <target state="translated">Pasar los datos a través del delegado de la aplicación</target>
        </trans-unit>
        <trans-unit id="a915a260ebb52c58c5ddeb3943b28412a9cefd74" translate="yes" xml:space="preserve">
          <source>Please tell me if there's anything that's not clear of if I didn't understand your question properly.</source>
          <target state="translated">Por favor,dígame si hay algo que no esté claro si no he entendido bien su pregunta.</target>
        </trans-unit>
        <trans-unit id="f176ff29bfb1c8e95257d7a079bef36426919bfd" translate="yes" xml:space="preserve">
          <source>Rather than having a highly hypothetical, abstract discussion, it helps to have concrete applications in mind. To help define a two-view-controller situation and a more-than-two-view-controller situation, I am going to define two concrete application scenarios.</source>
          <target state="translated">En lugar de tener una discusión altamente hipotética y abstracta,ayuda tener en mente aplicaciones concretas.Para ayudar a definir una situación de control de dos vistas y una situación de control de más de dos vistas,voy a definir dos escenarios de aplicación concretos.</target>
        </trans-unit>
        <trans-unit id="96723c17d633897e26d4e0d1557b30b3a18133db" translate="yes" xml:space="preserve">
          <source>Read more about this in my blog post: &lt;a href=&quot;http://koreyhinton.com/blog/sharing-model-code.html&quot;&gt;Sharing Model Code&lt;/a&gt;</source>
          <target state="translated">Lea m&amp;aacute;s sobre esto en mi publicaci&amp;oacute;n de blog: &lt;a href=&quot;http://koreyhinton.com/blog/sharing-model-code.html&quot;&gt;Compartir c&amp;oacute;digo de modelo&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="a6171b282836b161fc897d0e7facdf82f4d8f378" translate="yes" xml:space="preserve">
          <source>Referencing the previous controller directly instead of using delegation</source>
          <target state="translated">Haciendo referencia al controlador anterior directamente en lugar de usar la delegación</target>
        </trans-unit>
        <trans-unit id="47f40c97b581997edd1f3619ce23a4265e1431df" translate="yes" xml:space="preserve">
          <source>Saving in &lt;code&gt;NSUserDefaults&lt;/code&gt; - for accessing it later</source>
          <target state="translated">Guardar en &lt;code&gt;NSUserDefaults&lt;/code&gt; - para acceder m&amp;aacute;s tarde</target>
        </trans-unit>
        <trans-unit id="0bcf73dc223ca8c4becbbceb7de2d7cdd2d55fd9" translate="yes" xml:space="preserve">
          <source>Say we have viewControllers: ViewController and NewViewController.</source>
          <target state="translated">Digamos que tenemos ViewControllers:ViewController y NewViewController.</target>
        </trans-unit>
        <trans-unit id="569d57f11dc5d61438be375ec49d9c3b862b507e" translate="yes" xml:space="preserve">
          <source>Say we have viewControllers: viewControllerA and viewControllerB</source>
          <target state="translated">Digamos que tenemos viewControllers:viewControllerA y viewControllerB</target>
        </trans-unit>
        <trans-unit id="7995203d870462ca887f06daef0b98c3ee08ad6a" translate="yes" xml:space="preserve">
          <source>SecondViewController.h</source>
          <target state="translated">SecondViewController.h</target>
        </trans-unit>
        <trans-unit id="1915fd9b6120253558e8f5d765575ff18961657e" translate="yes" xml:space="preserve">
          <source>Set data in prepareForSegue (if storyboards) or init (if programmatic)</source>
          <target state="translated">Poner los datos en prepareForSegue (si son storyboards)o init (si son programados)</target>
        </trans-unit>
        <trans-unit id="9f9b397db477e0a2585ce2a75ed1b81d61e4549c" translate="yes" xml:space="preserve">
          <source>Set the first and second View Controllers to the appropriate Swift files in IB.</source>
          <target state="translated">Ponga el primer y segundo controladores de vista en los archivos Swift apropiados en IB.</target>
        </trans-unit>
        <trans-unit id="ccfa21b36505d345ced6258f5060e6876076d7db" translate="yes" xml:space="preserve">
          <source>Shared data</source>
          <target state="translated">Datos compartidos</target>
        </trans-unit>
        <trans-unit id="63b646be139048f00d5075927d5ac6aa1bc9e3fd" translate="yes" xml:space="preserve">
          <source>Sharing data through a singleton</source>
          <target state="translated">Compartir los datos a través de un solo botón</target>
        </trans-unit>
        <trans-unit id="88026f64b6a3f47cdb4c499ea8d5bb82d8ae7191" translate="yes" xml:space="preserve">
          <source>Sharing data through the user defaults</source>
          <target state="translated">Compartir datos a través de los valores predeterminados del usuario</target>
        </trans-unit>
        <trans-unit id="a81942be08afc02b07b690161fca39667b375b36" translate="yes" xml:space="preserve">
          <source>Since all the view controllers do need to share the same data, all four view controllers need to remain in synchronization, and therefore there needs to be some sort of communication to all other view controllers, whenever any single view controller changes the underlying data. It should be fairly obvious that we do not want each view controller communicating directly with each other view controller in this scenario. In case it is not obvious, consider if we had 20 different view controllers (rather than just 4). How difficult and error-prone would it be to notify each of the other 19 view controllers any time one view controller made a change?</source>
          <target state="translated">Dado que todos los controladores de la vista necesitan compartir los mismos datos,los cuatro controladores de la vista deben permanecer sincronizados y,por lo tanto,debe haber algún tipo de comunicación con todos los demás controladores de la vista,siempre que un solo controlador de la vista cambie los datos subyacentes.Debería ser bastante obvio que no queremos que cada controlador de vista se comunique directamente con cada otro controlador de vista en este escenario.En caso de que no sea obvio,considera si tuviéramos 20 controladores de vista diferentes (en lugar de sólo 4).¿Qué tan difícil y propenso a errores sería notificar a cada uno de los otros 19 controladores de vista cada vez que un controlador de vista hiciera un cambio?</target>
        </trans-unit>
        <trans-unit id="956ba40003839a7f10984a661afb553e5a9a4ec6" translate="yes" xml:space="preserve">
          <source>Since prepare for segue is the most common here is an example:</source>
          <target state="translated">Ya que la preparación para la transición es lo más común aquí es un ejemplo:</target>
        </trans-unit>
        <trans-unit id="39892ce8d343b16aa782fc0cc427d7c5ce4bcd1d" translate="yes" xml:space="preserve">
          <source>Singleton</source>
          <target state="translated">Singleton</target>
        </trans-unit>
        <trans-unit id="5f4a7d1855bedb7eb4c08667076bebd6d20d2643" translate="yes" xml:space="preserve">
          <source>Singleton classes</source>
          <target state="translated">Clases de monotonía</target>
        </trans-unit>
        <trans-unit id="f4952f106d9d3b4bccd6d238d2f11b71e55ecb4c" translate="yes" xml:space="preserve">
          <source>Singletons</source>
          <target state="translated">Singletons</target>
        </trans-unit>
        <trans-unit id="b57cd7bb78daf1f63929b88ccbd517476d4ae4d7" translate="yes" xml:space="preserve">
          <source>So Here is the complete code for :</source>
          <target state="translated">Así que aquí está el código completo para..:</target>
        </trans-unit>
        <trans-unit id="067b41481717b1f69eb20355ee8195bf00f43e67" translate="yes" xml:space="preserve">
          <source>So in-short if you want to -</source>
          <target state="translated">Así que en cortocircuito si quieres...</target>
        </trans-unit>
        <trans-unit id="630e7f3acca48624176a82489c5a93d213da2351" translate="yes" xml:space="preserve">
          <source>So this is how you can pass data from viewControllerA to viewControllerB without setting any delegate. ;)</source>
          <target state="translated">Así que así es como se pueden pasar datos de la vista del controlador A a la vista del controlador B sin establecer ningún delegado.;)</target>
        </trans-unit>
        <trans-unit id="156495cd7dd5073171ae3eca350eda618cbfbef4" translate="yes" xml:space="preserve">
          <source>So this way we can pass the data from one viewcontroller to another view controller...</source>
          <target state="translated">Así que de esta forma podemos pasar los datos de un controlador de vista a otro controlador de vista...</target>
        </trans-unit>
        <trans-unit id="9fa353fb1913b923bef4e523da2474a47221935b" translate="yes" xml:space="preserve">
          <source>So to pass a &lt;code&gt;BOOL&lt;/code&gt; from &lt;code&gt;ViewControllerA&lt;/code&gt; to &lt;code&gt;ViewControllerB&lt;/code&gt; we would do the following:</source>
          <target state="translated">Entonces, para pasar un &lt;code&gt;BOOL&lt;/code&gt; de &lt;code&gt;ViewControllerA&lt;/code&gt; a &lt;code&gt;ViewControllerB&lt;/code&gt; , har&amp;iacute;amos lo siguiente:</target>
        </trans-unit>
        <trans-unit id="98d77a00cf4d2b88573bd271f511f0e79ed4f054" translate="yes" xml:space="preserve">
          <source>Solutions I recommend NOT to use:</source>
          <target state="translated">Soluciones que recomiendo NO usar:</target>
        </trans-unit>
        <trans-unit id="b08338f95aa0ad8470939d5e2faa60ab6d042c8f" translate="yes" xml:space="preserve">
          <source>Step 1. Declare block in ViewControllerB</source>
          <target state="translated">Paso 1.Declarar el bloqueo en el ViewControllerB</target>
        </trans-unit>
        <trans-unit id="b2e9b0649764d10cd7a0faf97a6596c1df79f36a" translate="yes" xml:space="preserve">
          <source>Step 1. Set and Post data in Notification observer in ViewControllerB</source>
          <target state="translated">Paso 1.Establecer y publicar datos en el observador de la notificación en el ViewControllerB</target>
        </trans-unit>
        <trans-unit id="68b389f0cd09c0cdce9598cbf02e200602cae14b" translate="yes" xml:space="preserve">
          <source>Step 2. Add Notification Observer in ViewControllerA</source>
          <target state="translated">Paso 2.Agregar el Observador de Notificación en ViewControllerA</target>
        </trans-unit>
        <trans-unit id="0b56714eef4294da9118c9f272a4110e07a65e76" translate="yes" xml:space="preserve">
          <source>Step 2. Set data in block in ViewControllerB</source>
          <target state="translated">Paso 2.Poner los datos en bloque en ViewControllerB</target>
        </trans-unit>
        <trans-unit id="a2546740685a30020fdf8994c5e6ec2f4358487b" translate="yes" xml:space="preserve">
          <source>Step 3. Receive Notification data value in ViewControllerA</source>
          <target state="translated">Paso 3.Recibir el valor de los datos de la notificación en ViewControllerA</target>
        </trans-unit>
        <trans-unit id="8fc7fedaa6db88ca11b7a1de1f3aca654b50e838" translate="yes" xml:space="preserve">
          <source>Step 3. Receive block data in ViewControllerA</source>
          <target state="translated">Paso 3.Recibir los datos del bloque en el ViewControllerA</target>
        </trans-unit>
        <trans-unit id="270b96d467cbf5437502201704dee28da77c95f4" translate="yes" xml:space="preserve">
          <source>Storyboard segues, ARC and LLVM blocks make this easier than ever for me.  Some answers above mentioned storyboards and segues already but still relied on delegation.  Defining delegates certainly works but some people may find it easier to pass pointers or code blocks.</source>
          <target state="translated">Los segmentos del storyboard,los bloques ARC y LLVM hacen esto más fácil que nunca para mí.Algunas de las respuestas mencionadas anteriormente ya se han mencionado en los storyboards y segmentos,pero todavía dependen de la delegación.Definir los delegados ciertamente funciona pero algunas personas pueden encontrar más fácil pasar los punteros o los bloques de código.</target>
        </trans-unit>
        <trans-unit id="3b14c615ad076500bec6990bd3e8c11b39b908a7" translate="yes" xml:space="preserve">
          <source>Suppose in Controller1 class you want to create the Controller2 object and push it with a String value being passed. This can be done as this:-</source>
          <target state="translated">Supongamos que en la clase Controller1 se quiere crear el objeto Controller2 y empujarlo con un valor String que se pasa.Esto se puede hacer así:-</target>
        </trans-unit>
        <trans-unit id="112ab020698e5fc0f4baecd7821a512d8c419a69" translate="yes" xml:space="preserve">
          <source>Swift</source>
          <target state="translated">Swift</target>
        </trans-unit>
        <trans-unit id="19d9195fc6303123e2881ef15e4a993bb8b3dec5" translate="yes" xml:space="preserve">
          <source>Synthesize str2 in ViewControllerTwo.m</source>
          <target state="translated">Sintetiza str2 en ViewControllerTwo.m</target>
        </trans-unit>
        <trans-unit id="0207a1f2edfc990bff7a614c26a4e4edee42239e" translate="yes" xml:space="preserve">
          <source>Take care for spelling mistakes.</source>
          <target state="translated">Ten cuidado con las faltas de ortografía.</target>
        </trans-unit>
        <trans-unit id="09429d005a789be54befa1f80bc0eeaac578f2e8" translate="yes" xml:space="preserve">
          <source>Than in implementation file BViewController.m after we have desired values to return our callback should be called:</source>
          <target state="translated">Que en el archivo de implementación BViewController.m después de que tenemos valores deseados para devolver nuestra llamada debe ser llamado:</target>
        </trans-unit>
        <trans-unit id="03d7f840d11dff1bc5d8b6d191428b355e3aebb7" translate="yes" xml:space="preserve">
          <source>Thanks for all your help</source>
          <target state="translated">Gracias por toda su ayuda.</target>
        </trans-unit>
        <trans-unit id="8527cb919ee3a95cff65ca01028642d6226a89b6" translate="yes" xml:space="preserve">
          <source>That is how you can tackle it if you want to use a segue and you don't have your pages under a navigation controller.</source>
          <target state="translated">Así es como puedes abordarlo si quieres usar una pista y no tienes tus páginas bajo un controlador de navegación.</target>
        </trans-unit>
        <trans-unit id="95e8fe02f9d9ffb578ba4e865a2725ad960d20a6" translate="yes" xml:space="preserve">
          <source>That's it for &lt;code&gt;ViewControllerB&lt;/code&gt;. Now in &lt;code&gt;ViewControllerA.h&lt;/code&gt;, tell &lt;code&gt;ViewControllerA&lt;/code&gt; to import &lt;code&gt;ViewControllerB&lt;/code&gt; and conform to its protocol.</source>
          <target state="translated">Eso es todo por &lt;code&gt;ViewControllerB&lt;/code&gt; . Ahora en &lt;code&gt;ViewControllerA.h&lt;/code&gt; , d&amp;iacute;gale a &lt;code&gt;ViewControllerA&lt;/code&gt; que importe &lt;code&gt;ViewControllerB&lt;/code&gt; y cumpla con su protocolo.</target>
        </trans-unit>
        <trans-unit id="56ac635adbb66b598268b04a53cefa274b67ac90" translate="yes" xml:space="preserve">
          <source>That's it. Running the app now you should be able to send data back from the second view controller to the first.</source>
          <target state="translated">Eso es todo.Ejecutando la aplicación ahora deberías ser capaz de enviar datos desde el segundo controlador de la vista al primero.</target>
        </trans-unit>
        <trans-unit id="61f175a537a69568d4d36d5d1c44c51c042c2dc5" translate="yes" xml:space="preserve">
          <source>The M in MVC is for &quot;Model&quot; and in the MVC paradigm the role of model classes is to manage a program's data. A model is the opposite of a view -- a view knows how to display data, but it knows nothing about what to do with data, whereas a model knows everything about how to work with data, but nothing about how to display it. Models can be complicated, but they don't have to be -- the model for your app might be as simple as an array of strings or dictionaries.</source>
          <target state="translated">La M en MVC es de &quot;Modelo&quot; y en el paradigma MVC el papel de las clases modelo es manejar los datos de un programa.Un modelo es lo opuesto a una vista...una vista sabe cómo mostrar los datos,pero no sabe nada sobre qué hacer con los datos,mientras que un modelo sabe todo sobre cómo trabajar con los datos,pero nada sobre cómo mostrarlos.Los modelos pueden ser complicados,pero no tienen por qué serlo...el modelo para su aplicación puede ser tan simple como un conjunto de cadenas o diccionarios.</target>
        </trans-unit>
        <trans-unit id="de4d0fb8549c6a726ff58a67a687beaccbe06a26" translate="yes" xml:space="preserve">
          <source>The OP didn't mention view controllers but so many of the answers do, that I wanted to chime in with what some of the new features of the LLVM allow to make this easier when wanting to pass data from one view controller to another and then getting some results back.</source>
          <target state="translated">La OP no mencionó los controladores de vista,pero muchas de las respuestas sí lo hacen,por lo que quise participar en lo que algunas de las nuevas características de la LLVM permiten hacer esto más fácil cuando se quiere pasar datos de un controlador de vista a otro y luego obtener algunos resultados de vuelta.</target>
        </trans-unit>
        <trans-unit id="c20529383e6407f57b3ff8211721c8adde0bba28" translate="yes" xml:space="preserve">
          <source>The Receiver</source>
          <target state="translated">El receptor</target>
        </trans-unit>
        <trans-unit id="4154dd7ff0aa610daf859664a9f5cdd415da28f3" translate="yes" xml:space="preserve">
          <source>The Segue</source>
          <target state="translated">El Segue</target>
        </trans-unit>
        <trans-unit id="ebcf3ab1a842c17f7a5edda449755a002af952e2" translate="yes" xml:space="preserve">
          <source>The Sender</source>
          <target state="translated">El remitente</target>
        </trans-unit>
        <trans-unit id="b93bdfec7ee7436d0d31a07d163e319c506ba2dd" translate="yes" xml:space="preserve">
          <source>The code for the First View Controller is</source>
          <target state="translated">El código del controlador de la primera vista es</target>
        </trans-unit>
        <trans-unit id="16d83b85f70f1ef1d672a4056bde27f526c1f3e4" translate="yes" xml:space="preserve">
          <source>The code for the second view controller is</source>
          <target state="translated">El código para el controlador de la segunda vista es</target>
        </trans-unit>
        <trans-unit id="1427436496c2ed01688bdba0dfac3d0163918947" translate="yes" xml:space="preserve">
          <source>The following is an example based on the video (with a few modifications).</source>
          <target state="translated">El siguiente es un ejemplo basado en el video (con algunas modificaciones).</target>
        </trans-unit>
        <trans-unit id="27168310b19624bfd7d1406057bd1581233f19b9" translate="yes" xml:space="preserve">
          <source>The following is an example based on the video. The idea is to pass a string from the text field in the First View Controller to the label in the Second View Controller.</source>
          <target state="translated">El siguiente es un ejemplo basado en el video.La idea es pasar una cadena desde el campo de texto del controlador de la primera vista a la etiqueta del controlador de la segunda vista.</target>
        </trans-unit>
        <trans-unit id="07cf6b0d487458fa179fc57899f7a0abf454ed14" translate="yes" xml:space="preserve">
          <source>The home inventory application would have a single instance of a class which is designed to manage a list of inventory items. The manager would manage a collection of household items. The following is a class definition for the data manager:</source>
          <target state="translated">La aplicación de inventario doméstico tendría una sola instancia de una clase que está diseñada para manejar una lista de artículos de inventario.El administrador gestionaría una colección de artículos del hogar.A continuación se presenta una definición de clase para el administrador de datos:</target>
        </trans-unit>
        <trans-unit id="3883ea5969f34a183a8fdf68d24a5c4df97e7e94" translate="yes" xml:space="preserve">
          <source>The idea is imitate Android's intent paradigm, using a global factory to manage which view you are looking at and using &quot;intents&quot; to switch and pass data between views. All the documentation is on the github page, but here are some highlights:</source>
          <target state="translated">La idea es imitar el paradigma de intención de Android,usando una fábrica global para gestionar la vista que se está mirando y usando &quot;intenciones&quot; para cambiar y pasar datos entre vistas.Toda la documentación está en la página de github,pero aquí hay algunos puntos destacados:</target>
        </trans-unit>
        <trans-unit id="f4deb3d745148fadb3c8578e557f0283203b359a" translate="yes" xml:space="preserve">
          <source>The most common way I've seen this done is a &lt;a href=&quot;http://koreyhinton.com/blog/singleton-pattern-in-swift.html&quot;&gt;singleton&lt;/a&gt; instance. So if your singleton object was &lt;code&gt;DataAccess&lt;/code&gt; you could do the following in the viewDidLoad method of UIViewController:</source>
          <target state="translated">La forma m&amp;aacute;s com&amp;uacute;n en que he visto esto es una instancia de &lt;a href=&quot;http://koreyhinton.com/blog/singleton-pattern-in-swift.html&quot;&gt;singleton&lt;/a&gt; . Entonces, si su objeto singleton era &lt;code&gt;DataAccess&lt;/code&gt; , podr&amp;iacute;a hacer lo siguiente en el m&amp;eacute;todo viewDidLoad de UIViewController:</target>
        </trans-unit>
        <trans-unit id="270c440ea6ee47f9a7fab1f1471c613f9ba1ab40" translate="yes" xml:space="preserve">
          <source>The nice thing about Core Data is that it has inverse relationships. So if you want to just give a NotesViewController the notes object you can because it'll have an inverse relationship to something else like the notebook. If you need data on the notebook in the NotesViewController you can walk back up the object graph by doing the following:</source>
          <target state="translated">Lo bueno de Core Data es que tiene relaciones inversas.Así que si quieres darle a un NotesViewController el objeto de notas puedes hacerlo porque tendrá una relación inversa con algo más como el cuaderno.Si necesitas datos en el cuaderno en el NotesViewController puedes volver al gráfico del objeto haciendo lo siguiente:</target>
        </trans-unit>
        <trans-unit id="014260d3b948862434b9fa2f84c8640f401e09aa" translate="yes" xml:space="preserve">
          <source>The original poster also asked about &lt;strong&gt;Singletons&lt;/strong&gt; and the use of the &lt;strong&gt;AppDelegate&lt;/strong&gt;. These questions need to be answered.</source>
          <target state="translated">El p&amp;oacute;ster original tambi&amp;eacute;n preguntaba sobre &lt;strong&gt;Singletons&lt;/strong&gt; y el uso de &lt;strong&gt;AppDelegate&lt;/strong&gt; . Estas preguntas deben ser respondidas.</target>
        </trans-unit>
        <trans-unit id="4051bc4c8e14e8ba896618084a6ea2e97b0c1335" translate="yes" xml:space="preserve">
          <source>The question asks about passing information between view controllers. The specific example given asks about passing information between views, but given the self-stated newness to iOS, the original poster likely meant between viewControllers, not between views (without any involvement from the ViewControllers). It seems that all the answers focus on two view controllers, but what if the app evolves to need to involve more than two view controllers in the information exchange?</source>
          <target state="translated">La pregunta se refiere a la transmisión de información entre los controladores de la vista.El ejemplo específico dado pregunta acerca de pasar información entre vistas,pero dada la novedad autodeclarada de iOS,el cartel original probablemente significaba entre ViewControllers,no entre vistas (sin ninguna participación de los ViewControllers).Parece que todas las respuestas se centran en dos controladores de vistas,pero ¿qué pasa si la aplicación evoluciona y necesita involucrar a más de dos controladores de vistas en el intercambio de información?</target>
        </trans-unit>
        <trans-unit id="63899f87ba40f61b456ad097f7880f169dadb468" translate="yes" xml:space="preserve">
          <source>The role of a controller is to mediate between view and model. Therefore, they need a reference to one or more view objects and one or more model objects. Let's say that your model is an array of dictionaries, with each dictionary representing one row in your table. The root view for your app displays that table, and it might be responsible for loading the array from a file. When the user decides to add a new row to the table, they tap some button and your controller creates a new (mutable) dictionary and adds it to the array. In order to fill in the row, the controller creates a detail view controller and gives it the new dictionary. The detail view controller fills in the dictionary and returns. The dictionary is already part of the model, so nothing else needs to happen.</source>
          <target state="translated">El papel de un controlador es mediar entre la vista y el modelo.Por lo tanto,necesitan una referencia a uno o más objetos de la vista y a uno o más objetos del modelo.Digamos que su modelo es un conjunto de diccionarios,con cada diccionario representando una fila en su tabla.La vista raíz de tu aplicación muestra esa tabla,y puede ser la responsable de cargar el array desde un archivo.Cuando el usuario decide añadir una nueva fila a la tabla,toca algún botón y tu controlador crea un nuevo diccionario (mutable)y lo añade a la matriz.Para rellenar la fila,el controlador crea un controlador de vista detallada y le da el nuevo diccionario.El controlador de la vista de detalle rellena el diccionario y vuelve.El diccionario ya forma parte del modelo,por lo que no es necesario que ocurra nada más.</target>
        </trans-unit>
        <trans-unit id="862d75bb0f5e8e1bf177a0884bd45d4099f46cae" translate="yes" xml:space="preserve">
          <source>Then where you want to load the view eg. &lt;code&gt;didSelectRowAtIndex&lt;/code&gt; or some &lt;code&gt;IBAction&lt;/code&gt; you need to set the property in &lt;code&gt;ViewControllerB&lt;/code&gt; before you push it onto nav stack.</source>
          <target state="translated">Luego, donde desea cargar la vista, por ejemplo. &lt;code&gt;didSelectRowAtIndex&lt;/code&gt; o alguna &lt;code&gt;IBAction&lt;/code&gt; necesita configurar la propiedad en &lt;code&gt;ViewControllerB&lt;/code&gt; antes de insertarla en la pila de navegaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="5db5c8fd4b2f27895e7362cba1af3ede532b9753" translate="yes" xml:space="preserve">
          <source>There are addition tools that also help pass along data:</source>
          <target state="translated">Hay herramientas adicionales que también ayudan a transmitir los datos:</target>
        </trans-unit>
        <trans-unit id="31d86b3beff40f0926f74e37f90530611aeeffd6" translate="yes" xml:space="preserve">
          <source>There are four view controllers in the application. It is a tab-based application for managing home inventory. Three view controllers present differently filtered views of the same data:</source>
          <target state="translated">Hay cuatro controladores de vista en la aplicación.Es una aplicación basada en pestañas para administrar el inventario de la casa.Tres controladores de vista presentan diferentes vistas filtradas de los mismos datos:</target>
        </trans-unit>
        <trans-unit id="e97a58b0ba4425fd3070b8fbcc8e0520fcec97d9" translate="yes" xml:space="preserve">
          <source>There are many answers to this questions offering many different ways to perform view controller communication that would indeed work, but I don't see anywhere mentioned which one are actually best to use and which ones to avoid.</source>
          <target state="translated">Hay muchas respuestas a estas preguntas que ofrecen muchas formas diferentes de llevar a cabo la comunicación del controlador de la vista que,de hecho,funcionaría,pero no veo que en ninguna parte se mencione cuáles son realmente las mejores para usar y cuáles para evitar.</target>
        </trans-unit>
        <trans-unit id="dbd19e78c5369d7ba92070651ccf13b36f340393" translate="yes" xml:space="preserve">
          <source>There are multiple methods for sharing data.</source>
          <target state="translated">Existen múltiples métodos para compartir datos.</target>
        </trans-unit>
        <trans-unit id="e8c21a80ff30368c9db68fd252bbe172753c326e" translate="yes" xml:space="preserve">
          <source>There are multiple options for Passing Data between View Controllers.</source>
          <target state="translated">Hay múltiples opciones para pasar datos entre los controladores de la vista.</target>
        </trans-unit>
        <trans-unit id="6b070a9e49cdb6fb5eedc6805c49fc2267e7f279" translate="yes" xml:space="preserve">
          <source>There are three parts.</source>
          <target state="translated">Hay tres partes.</target>
        </trans-unit>
        <trans-unit id="960919526c1232c2ceccc14249d25e632af94356" translate="yes" xml:space="preserve">
          <source>There are tons and tons of explanations here and around StackOverflow, but if you are a beginner just trying to get something basic to work, try watching this YouTube tutorial (It's what helped me to finally understand how to do it).</source>
          <target state="translated">Hay toneladas y toneladas de explicaciones aquí y alrededor de StackOverflow,pero si eres un principiante tratando de conseguir que algo básico funcione,intenta ver este tutorial de YouTube (es lo que me ayudó a entender finalmente cómo hacerlo).</target>
        </trans-unit>
        <trans-unit id="e8afd6f06c1bbab721680e593a168e06c21f9e95" translate="yes" xml:space="preserve">
          <source>There are tons of ways to do this and it's important to pick the right one. Probably one of the biggest architectural decisions lies on how the model code will be shared or accessed throughout the app.</source>
          <target state="translated">Hay muchas maneras de hacer esto y es importante elegir la correcta.Probablemente una de las decisiones arquitectónicas más importantes es cómo se compartirá o se accederá al código del modelo a través de la aplicación.</target>
        </trans-unit>
        <trans-unit id="add7b260a0c3a797d43225e8dd73c9d548468567" translate="yes" xml:space="preserve">
          <source>There are two view controllers in the application. There is a ViewControllerA (Data Entry Form), and View Controller B (Product List). The items selected in the product list must match the items displayed in the text box in the data entry form. In this scenario, ViewControllerA and ViewControllerB must communicate directly with each other and no other view controllers.</source>
          <target state="translated">Hay dos controladores de vista en la aplicación.Hay un ViewControllerA (Formulario de entrada de datos),y un View Controller B (Lista de productos).Los elementos seleccionados en la lista de productos deben coincidir con los elementos que se muestran en el cuadro de texto del formulario de entrada de datos.En este escenario,el ViewControllerA y el ViewControllerB deben comunicarse directamente entre sí y no con otros controladores de vista.</target>
        </trans-unit>
        <trans-unit id="5ad48280e06634ee952854dfb7d646a39384f662" translate="yes" xml:space="preserve">
          <source>There are various ways by which a data can be received to a different class in iOS. For example -</source>
          <target state="translated">Hay varias formas de recibir datos a una clase diferente en el iOS.Por ejemplo...</target>
        </trans-unit>
        <trans-unit id="6366268fa2a29045a4f2964c6049a44dee20ec43" translate="yes" xml:space="preserve">
          <source>There is some good information in many of the answers given, but none address the question fully.</source>
          <target state="translated">Hay alguna buena información en muchas de las respuestas dadas,pero ninguna aborda la cuestión en su totalidad.</target>
        </trans-unit>
        <trans-unit id="2244b353f7eacc064ac43be42125be2888874124" translate="yes" xml:space="preserve">
          <source>These solutions, although working in the short term, introduce too many dependencies that will garble the architecture of the app and create more problems later.</source>
          <target state="translated">Estas soluciones,aunque funcionan a corto plazo,introducen demasiadas dependencias que tergiversarán la arquitectura de la aplicación y crearán más problemas más tarde.</target>
        </trans-unit>
        <trans-unit id="4feffb40e53daab15d1fd2a31b491d1a986d94e5" translate="yes" xml:space="preserve">
          <source>This example passes data from &lt;strong&gt;Controller B&lt;/strong&gt; to &lt;strong&gt;Controller A&lt;/strong&gt;</source>
          <target state="translated">Este ejemplo pasa datos del &lt;strong&gt;controlador B&lt;/strong&gt; al &lt;strong&gt;controlador A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72942e4d622ebca94f54d92fc991209dbbc62e1b" translate="yes" xml:space="preserve">
          <source>This is a very simple view layout with a segue between them.</source>
          <target state="translated">Este es un diseño de vista muy simple con una transición entre ellos.</target>
        </trans-unit>
        <trans-unit id="dc585b46d7fdc70eda1e5bd71fce0fb21a21baaf" translate="yes" xml:space="preserve">
          <source>This is not the way to do it, you should use delegates, I'll assume we have two view controllers ViewController1 and ViewController2 and this check thing is in the first one and when its state changes, you want to do something in ViewController2, to achieve that in the proper way, you should do the below:</source>
          <target state="translated">Esta no es la forma de hacerlo,deberías usar delegados,asumo que tenemos dos controladores de vista ViewController1 y ViewController2 y este chequeo está en el primero y cuando su estado cambia,quieres hacer algo en ViewController2,para lograrlo de la forma adecuada,deberías hacer lo siguiente:</target>
        </trans-unit>
        <trans-unit id="8073a2ecfc42ee7250cf1e560c182673934a6f7f" translate="yes" xml:space="preserve">
          <source>This page just sends the value of the variable to the console when it loads.  By this point, our favorite movie should be in that variable.</source>
          <target state="translated">Esta página sólo envía el valor de la variable a la consola cuando se carga.En este punto,nuestra película favorita debería estar en esa variable.</target>
        </trans-unit>
        <trans-unit id="53aebdd79abe6d5b1bdd1f334b4ef03089ec8441" translate="yes" xml:space="preserve">
          <source>This page takes the initially loaded value and passes it along.</source>
          <target state="translated">Esta página toma el valor cargado inicialmente y lo pasa.</target>
        </trans-unit>
        <trans-unit id="7c7f8bc26f34edac64e4f9e9a10d6758f2fd6803" translate="yes" xml:space="preserve">
          <source>This question seems to be very popular here on stackoverflow so I thought I would try and give a better answer to help out people starting in the world of iOS like me.</source>
          <target state="translated">Esta pregunta parece ser muy popular aquí en stackoverflow así que pensé en intentar dar una mejor respuesta para ayudar a la gente que empieza en el mundo del iOS como yo.</target>
        </trans-unit>
        <trans-unit id="17b7883c0d9c134005d8b98f4a635cdcdce103d0" translate="yes" xml:space="preserve">
          <source>This second example shows passing a callback block for the second argument.  I like using blocks because it keeps the relevant details close together in the source - the higher level source.</source>
          <target state="translated">Este segundo ejemplo muestra el paso de un bloqueo de retrollamada para el segundo argumento.Me gusta usar bloques porque mantiene los detalles relevantes cerca de la fuente,la fuente de mayor nivel.</target>
        </trans-unit>
        <trans-unit id="5f05e53b88ac8f87becf055c72279b70a06d25c6" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;isSomethingEnabled&lt;/code&gt; in &lt;code&gt;ViewControllerB&lt;/code&gt; to &lt;code&gt;BOOL&lt;/code&gt; value &lt;code&gt;YES&lt;/code&gt;.</source>
          <target state="translated">Esto establecer&amp;aacute; &lt;code&gt;isSomethingEnabled&lt;/code&gt; en &lt;code&gt;ViewControllerB&lt;/code&gt; en el valor &lt;code&gt;BOOL&lt;/code&gt; &lt;code&gt;YES&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="702efc9cba1bbd3afb5e2a9f9ce7d9ec865cbd29" translate="yes" xml:space="preserve">
          <source>Those were  discussed here already.</source>
          <target state="translated">Eso ya fue discutido aquí.</target>
        </trans-unit>
        <trans-unit id="83ec681c5928fb675fe4016bcba307422f910286" translate="yes" xml:space="preserve">
          <source>To do this we will make &lt;code&gt;ViewControllerA&lt;/code&gt; a delegate of &lt;code&gt;ViewControllerB&lt;/code&gt;. This allows &lt;code&gt;ViewControllerB&lt;/code&gt; to send a message back to &lt;code&gt;ViewControllerA&lt;/code&gt; enabling us to send data back.</source>
          <target state="translated">Para hacer esto, haremos que &lt;code&gt;ViewControllerA&lt;/code&gt; sea un delegado de &lt;code&gt;ViewControllerB&lt;/code&gt; . Esto permite que &lt;code&gt;ViewControllerB&lt;/code&gt; env&amp;iacute;e un mensaje de regreso a &lt;code&gt;ViewControllerA&lt;/code&gt; , lo que nos permite enviar datos de vuelta.</target>
        </trans-unit>
        <trans-unit id="3555496de4df0b39a8ca1903be2fae52ab2bbaf3" translate="yes" xml:space="preserve">
          <source>To help anyone else looking at this question, who wants a full answer, I'm going to attempt to provide it.</source>
          <target state="translated">Para ayudar a cualquier otra persona que quiera una respuesta completa a esta pregunta,voy a tratar de proporcionarla.</target>
        </trans-unit>
        <trans-unit id="86f2cf886389b424cfb810b4716cc6f04bb3d86b" translate="yes" xml:space="preserve">
          <source>To pass a &lt;code&gt;BOOL&lt;/code&gt; value from &lt;code&gt;ViewControllerA&lt;/code&gt; to &lt;code&gt;ViewControllerB&lt;/code&gt; we would do the following.</source>
          <target state="translated">Para pasar un valor &lt;code&gt;BOOL&lt;/code&gt; de &lt;code&gt;ViewControllerA&lt;/code&gt; a &lt;code&gt;ViewControllerB&lt;/code&gt; , har&amp;iacute;amos lo siguiente.</target>
        </trans-unit>
        <trans-unit id="76a9d2c2e66054b80996174e8affc8b1fb823ba9" translate="yes" xml:space="preserve">
          <source>To pass data back from &lt;code&gt;ViewControllerB&lt;/code&gt; to &lt;code&gt;ViewControllerA&lt;/code&gt; you need to use &lt;em&gt;Protocols and Delegates&lt;/em&gt; or &lt;em&gt;Blocks&lt;/em&gt;, the latter can be used as a loosely coupled mechanism for callbacks.</source>
          <target state="translated">Para pasar datos de &lt;code&gt;ViewControllerB&lt;/code&gt; a &lt;code&gt;ViewControllerA&lt;/code&gt; , debe usar &lt;em&gt;Protocolos y Delegados&lt;/em&gt; o &lt;em&gt;Bloques&lt;/em&gt; , este &amp;uacute;ltimo puede usarse como un mecanismo d&amp;eacute;bilmente acoplado para devoluciones de llamada.</target>
        </trans-unit>
        <trans-unit id="e3d70b08f9dc80f74d10c82b4cd60670d8719e71" translate="yes" xml:space="preserve">
          <source>To pass data back from the second view controller to the first view controller, you use &lt;a href=&quot;https://stackoverflow.com/a/33549729/3681880&quot;&gt;a protocol and a delegate&lt;/a&gt;. This video is a very clear walk though of that process:</source>
          <target state="translated">Para pasar datos desde el segundo controlador de vista al primer controlador de vista, utilice &lt;a href=&quot;https://stackoverflow.com/a/33549729/3681880&quot;&gt;un protocolo y un delegado&lt;/a&gt; . Este video es un paseo muy claro sobre ese proceso:</target>
        </trans-unit>
        <trans-unit id="af916557c74c3f51d623fa988c413ad3e34f0d4f" translate="yes" xml:space="preserve">
          <source>To pass data backwards</source>
          <target state="translated">Para pasar los datos hacia atrás</target>
        </trans-unit>
        <trans-unit id="4441e2165a2cbe180a97d71650d577cbf837d6f0" translate="yes" xml:space="preserve">
          <source>To pass data forward:</source>
          <target state="translated">Para pasar los datos hacia adelante:</target>
        </trans-unit>
        <trans-unit id="7c739773a6d176365e02604ef2ba8b5fd773295f" translate="yes" xml:space="preserve">
          <source>To pass multiple values you can use the multiple parameters like :-</source>
          <target state="translated">Para pasar múltiples valores puedes usar los múltiples parámetros como:-</target>
        </trans-unit>
        <trans-unit id="6f53c9cc79789d2d8364b25f78aa09dd33f52a64" translate="yes" xml:space="preserve">
          <source>Understanding the Core Architectural Principles of iOS Development with a Practical Example</source>
          <target state="translated">Comprensión de los principios arquitectónicos básicos del desarrollo del iOS con un ejemplo práctico</target>
        </trans-unit>
        <trans-unit id="df0a8289feb92488ac5fae24f2db741969a2acff" translate="yes" xml:space="preserve">
          <source>User defaults</source>
          <target state="translated">Los valores por defecto del usuario</target>
        </trans-unit>
        <trans-unit id="c2f8f14f958b77389a48a3fc1d929fbaf7455857" translate="yes" xml:space="preserve">
          <source>Using Block</source>
          <target state="translated">Usando el Bloque</target>
        </trans-unit>
        <trans-unit id="35e87779d93205c9cdc86bc39ef7d0b7dce13230" translate="yes" xml:space="preserve">
          <source>Using Delegate</source>
          <target state="translated">Usando el Delegado</target>
        </trans-unit>
        <trans-unit id="73cc3f60dc8287f62aa63d4644544e391cbe3bb3" translate="yes" xml:space="preserve">
          <source>Using Navigation Controller Push</source>
          <target state="translated">Usando el Controlador de Navegación Empuje</target>
        </trans-unit>
        <trans-unit id="52e7b3127ded3378ce3725c8ccc384212ac615ad" translate="yes" xml:space="preserve">
          <source>Using Notification Observer</source>
          <target state="translated">Uso del Observador de Notificaciones</target>
        </trans-unit>
        <trans-unit id="02bbe182682f0bbed6aeec5deb6f00b94667bbc3" translate="yes" xml:space="preserve">
          <source>Using Segue</source>
          <target state="translated">Usando Segue</target>
        </trans-unit>
        <trans-unit id="0d6f7bc3f49a828edf12dd0581aaa92e4ef44e6e" translate="yes" xml:space="preserve">
          <source>ViewControllerA - Luxury Items</source>
          <target state="translated">ViewControllerA-Artículos de lujo</target>
        </trans-unit>
        <trans-unit id="e5ffea5e8eb8d723ab0498aa5a4d88e881a60886" translate="yes" xml:space="preserve">
          <source>ViewControllerB - Non-insured Items</source>
          <target state="translated">ViewControllerB-Artículos no asegurados</target>
        </trans-unit>
        <trans-unit id="e7a39785336a96e44901846cba211ded9e0abc2e" translate="yes" xml:space="preserve">
          <source>ViewControllerC - Entire Home Inventory</source>
          <target state="translated">VerControladorC-Inventario de toda la casa</target>
        </trans-unit>
        <trans-unit id="135d305cf4a08db515d94b35f7f6f4250be7f807" translate="yes" xml:space="preserve">
          <source>ViewControllerD - Add New Item Form</source>
          <target state="translated">ViewControllerD-Agregar un formulario de nuevo elemento</target>
        </trans-unit>
        <trans-unit id="81942d9a4347a174680fafdd5ec8b8b344284237" translate="yes" xml:space="preserve">
          <source>We are keeping this simple so no buttons, not actions, we are simply moving data from the sender to the receiver when the application loads and then outputting the transmitted value to the console.</source>
          <target state="translated">Estamos manteniendo esto simple,así que no hay botones,ni acciones,simplemente estamos moviendo datos del emisor al receptor cuando la aplicación se carga y luego emitiendo el valor transmitido a la consola.</target>
        </trans-unit>
        <trans-unit id="ff03a716d90bbf29f516cac4b83abbaba194bc8c" translate="yes" xml:space="preserve">
          <source>We can understand it using two controllers - &lt;strong&gt;Controller1 and Controller2&lt;/strong&gt;</source>
          <target state="translated">Podemos entenderlo usando dos controladores: &lt;strong&gt;Controller1 y Controller2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f75d1fd3c3fa39412cf75f97e5bcfb258a2d5a9" translate="yes" xml:space="preserve">
          <source>Well &lt;a href=&quot;https://stackoverflow.com/a/9736559/1371853&quot;&gt;Matt Price's Answer&lt;/a&gt; is perfectly fine for passing data but I
  am going to rewrite it, in Latest Swift version because I believe new
  programmers find it quit challenging due to new Syntax and
  methods/frameworks, as original post is in Objective-C.</source>
          <target state="translated">Bueno, &lt;a href=&quot;https://stackoverflow.com/a/9736559/1371853&quot;&gt;la respuesta de Matt Price&lt;/a&gt; est&amp;aacute; perfectamente bien para pasar datos, pero voy a reescribirla en la &amp;uacute;ltima versi&amp;oacute;n de Swift porque creo que los nuevos programadores encuentran que es bastante dif&amp;iacute;cil debido a la nueva sintaxis y m&amp;eacute;todos / marcos, ya que la publicaci&amp;oacute;n original est&amp;aacute; en Objective-C.</target>
        </trans-unit>
        <trans-unit id="95ed8045cbbb7af3a960ea88cfa49e1488ceac17" translate="yes" xml:space="preserve">
          <source>What would be the correct way of performing this and how would I go about it?</source>
          <target state="translated">¿Cuál sería la forma correcta de realizar esto y cómo lo haría?</target>
        </trans-unit>
        <trans-unit id="8a4e940579167cf02a3ba46b206936601e18844d" translate="yes" xml:space="preserve">
          <source>When the collection of home inventory items changes, the view controllers need to be made aware of this change. The class definition above does not make it obvious how this will happen. We need to follow the observer pattern. The view controllers must formally observe the sharedManager. There are two ways to observe another object:</source>
          <target state="translated">Cuando la colección de artículos del inventario de la casa cambia,los controladores de la vista deben ser conscientes de este cambio.La definición de clase anterior no hace obvio cómo ocurrirá esto.Tenemos que seguir el patrón del observador.Los controladores de la vista deben observar formalmente el sharedManager.Hay dos maneras de observar otro objeto:</target>
        </trans-unit>
        <trans-unit id="d89b94ecc160001694e602dfbde749a28101857f" translate="yes" xml:space="preserve">
          <source>With UINavigators and segues, there are easy ways of passing information to the subservient controller and getting the information back.  ARC makes passing pointers to things derived from NSObjects simple so if you want the subservient controller to add/change/modify some data for you, pass it a pointer to a mutable instance.  Blocks make passing actions easy so if you want the subservient controller to invoke an action on your higher level controller, pass it a block.  You define the block to accept any number of arguments that makes sense to you.  You can also design the API to use multiple blocks if that suits things better.</source>
          <target state="translated">Con los UINavigators y los seguidores,hay maneras fáciles de pasar información al controlador subordinado y recuperar la información.ARC hace que pasar punteros a cosas derivadas de NSObjects sea sencillo,así que si quieres que el controlador subordinado añada o modifique algunos datos por ti,pásale un puntero a una instancia mutable.Los bloques facilitan el paso de acciones,así que si quieres que el controlador subordinado invoque una acción en tu controlador de nivel superior,pásale un bloque.El bloque se define para aceptar cualquier número de argumentos que tenga sentido para ti.También puedes diseñar la API para usar varios bloques si eso se ajusta mejor a las cosas.</target>
        </trans-unit>
        <trans-unit id="eb4193cf6b58cbdb5fa018799e8c3e460fd383dc" translate="yes" xml:space="preserve">
          <source>Worked fine and allowed me to pass a string and an array forward and back between my views.</source>
          <target state="translated">Funcionó bien y me permitió pasar una cuerda y una matriz adelante y atrás entre mis vistas.</target>
        </trans-unit>
        <trans-unit id="27deb3303dc171f62381c3af6e857bbf1acf83bb" translate="yes" xml:space="preserve">
          <source>You can also create custom delegates for this.</source>
          <target state="translated">También puedes crear delegados personalizados para esto.</target>
        </trans-unit>
        <trans-unit id="1a3ff3057c97981bf35a32f3b4007efceb28f6a3" translate="yes" xml:space="preserve">
          <source>You can also directly set the properties of the Controller2 class in the similar way as this:</source>
          <target state="translated">También puede establecer directamente las propiedades de la clase Controller2 de manera similar a esto:</target>
        </trans-unit>
        <trans-unit id="e9e418ef389cb9594cfd0c613d54195e941dba88" translate="yes" xml:space="preserve">
          <source>You can always share data using &lt;code&gt;NSUserDefaults&lt;/code&gt;. Set the value you want to share with respect to a key of your choice and get the value from &lt;code&gt;NSUserDefault&lt;/code&gt; associated to that key in the next view controller.</source>
          <target state="translated">Siempre puede compartir datos utilizando &lt;code&gt;NSUserDefaults&lt;/code&gt; . Establezca el valor que desea compartir con respecto a una clave de su elecci&amp;oacute;n y obtenga el valor de &lt;code&gt;NSUserDefault&lt;/code&gt; asociado a esa clave en el siguiente controlador de vista.</target>
        </trans-unit>
        <trans-unit id="a7d7d2e500cdd3b21928259a0c992d9c6ea65145" translate="yes" xml:space="preserve">
          <source>You can just create a property in &lt;code&gt;viewcontrollerA&lt;/code&gt;. Create an object of &lt;code&gt;viewcontrollerA&lt;/code&gt; in &lt;code&gt;viewcontrollerB&lt;/code&gt; and assign the desired value to that property.</source>
          <target state="translated">Simplemente puede crear una propiedad en &lt;code&gt;viewcontrollerA&lt;/code&gt; . Cree un objeto de &lt;code&gt;viewcontrollerA&lt;/code&gt; en &lt;code&gt;viewcontrollerB&lt;/code&gt; y asigne el valor deseado a esa propiedad.</target>
        </trans-unit>
        <trans-unit id="abfb49ee8dd0bcc5f71fa827feb6ceb49bd14bd1" translate="yes" xml:space="preserve">
          <source>You can save data in App delegate to access it across view controllers in your application. All you have to do is create a shared instance of app delegate</source>
          <target state="translated">Puede guardar los datos en App delegate para acceder a ellos a través de los controladores de vista de su aplicación.Todo lo que tienes que hacer es crear una instancia compartida de App Delegate</target>
        </trans-unit>
        <trans-unit id="576941d1618435efb4e91b03c919b15afddc8a68" translate="yes" xml:space="preserve">
          <source>You setup all your views in .XIB files and register them in the app delegate, while initializing the factory.</source>
          <target state="translated">Configura todas sus vistas en archivos .XIB y las registra en el delegado de la aplicación,mientras inicializa la fábrica.</target>
        </trans-unit>
        <trans-unit id="1e2fbc115bc2af08bed183bab4b31314c65a2dc1" translate="yes" xml:space="preserve">
          <source>YouTube tutorial: &lt;a href=&quot;https://www.youtube.com/watch?v=9LHDsSWc680&quot;&gt;iOS Swift Basics Tutorial: Protocols and Delegates&lt;/a&gt; But also read &lt;a href=&quot;http://krakendev.io/blog/weak-and-unowned-references-in-swift&quot;&gt;this post&lt;/a&gt; to make sure you don't get into a strong reference cycle.</source>
          <target state="translated">Tutorial de YouTube: &lt;a href=&quot;https://www.youtube.com/watch?v=9LHDsSWc680&quot;&gt;Tutorial b&amp;aacute;sico de iOS Swift: protocolos y delegados&lt;/a&gt; Pero tambi&amp;eacute;n lea &lt;a href=&quot;http://krakendev.io/blog/weak-and-unowned-references-in-swift&quot;&gt;esta publicaci&amp;oacute;n&lt;/a&gt; para asegurarse de no entrar en un ciclo de referencia s&amp;oacute;lido.</target>
        </trans-unit>
        <trans-unit id="72d5f33455747500ff0e39389f26e2a366965ae1" translate="yes" xml:space="preserve">
          <source>YouTube tutorial: &lt;a href=&quot;https://www.youtube.com/watch?v=Kpwrc1PRDsg&quot;&gt;How to send data through segue (swift)&lt;/a&gt;</source>
          <target state="translated">Tutorial de YouTube: &lt;a href=&quot;https://www.youtube.com/watch?v=Kpwrc1PRDsg&quot;&gt;c&amp;oacute;mo enviar datos a trav&amp;eacute;s de segue (swift)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd92b6a59301aaf7df021b06434d7fd97281c993" translate="yes" xml:space="preserve">
          <source>and &quot;B&quot; view controller should declare callback property, BViewController.h:</source>
          <target state="translated">y el controlador de vista &quot;B&quot; debe declarar la propiedad de devolución de llamada,BViewController.h:</target>
        </trans-unit>
        <trans-unit id="d22cdc632e153fe14ede39b227947423e9ef48b1" translate="yes" xml:space="preserve">
          <source>and in FirstViewController.h :</source>
          <target state="translated">y en FirstViewController.h :</target>
        </trans-unit>
        <trans-unit id="1303845f47ba68fca8499482aa29a0b1ca63c1c8" translate="yes" xml:space="preserve">
          <source>click on the button and drag over to the Second View Controller.</source>
          <target state="translated">haga clic en el botón y arrástrelo hasta el Controlador de la Segunda Vista.</target>
        </trans-unit>
        <trans-unit id="edb401d8d776a314f5a6c4744d5c898beb932df9" translate="yes" xml:space="preserve">
          <source>delegates</source>
          <target state="translated">delegates</target>
        </trans-unit>
        <trans-unit id="071cd75033ae8e8688a44265cb1850670988a924" translate="yes" xml:space="preserve">
          <source>do these in ViewControlerOne.h</source>
          <target state="translated">hacer esto en ViewControlerOne.h</target>
        </trans-unit>
        <trans-unit id="d2c16f26c821a75d79d3c762d88ff8151b2cef90" translate="yes" xml:space="preserve">
          <source>do these in ViewControlerOne.m</source>
          <target state="translated">hacer esto en ViewControlerOne.m</target>
        </trans-unit>
        <trans-unit id="4ab7cc959e41e827a458876138723cac6658ff71" translate="yes" xml:space="preserve">
          <source>do these in ViewControllerTwo.h</source>
          <target state="translated">hacer esto en ViewControllerTwo.h</target>
        </trans-unit>
        <trans-unit id="537d8d6119fe77d8b87bdfec992c7335ce2c30a3" translate="yes" xml:space="preserve">
          <source>do these in ViewControllerTwo.m</source>
          <target state="translated">hacer esto en ViewControllerTwo.m</target>
        </trans-unit>
        <trans-unit id="78f6225c0a29d685123f4713fb8d64650c5d455a" translate="yes" xml:space="preserve">
          <source>drag from the button to the Second View Controller. Set the segue identifier to &lt;code&gt;showSecondViewController&lt;/code&gt;. Also, don't forget to hook up the outlets and actions using the names in the following code.</source>
          <target state="translated">arrastre desde el bot&amp;oacute;n al Segundo controlador de vista. Establezca el identificador de segue en &lt;code&gt;showSecondViewController&lt;/code&gt; . Adem&amp;aacute;s, no olvide conectar las salidas y acciones utilizando los nombres en el siguiente c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="e89c71751ece180f696d67c4cc55aff1a2e78a1b" translate="yes" xml:space="preserve">
          <source>expecting that your &lt;code&gt;CustomObject&lt;/code&gt; must have a setter function with it.</source>
          <target state="translated">esperando que su &lt;code&gt;CustomObject&lt;/code&gt; debe tener una funci&amp;oacute;n de establecimiento con &amp;eacute;l.</target>
        </trans-unit>
        <trans-unit id="9a601619d63281ffad7a5e7742ff3e95493c069d" translate="yes" xml:space="preserve">
          <source>if you declare a &lt;code&gt;NSArray object *arrayXYZ&lt;/code&gt; then you can access it in any view controller by &lt;code&gt;appDelegate.arrayXYZ&lt;/code&gt;</source>
          <target state="translated">si declara un &lt;code&gt;NSArray object *arrayXYZ&lt;/code&gt; , puede acceder a &amp;eacute;l en cualquier controlador de vista mediante &lt;code&gt;appDelegate.arrayXYZ&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="782fff5ac840ff68307a9fc122193c5707e4c512" translate="yes" xml:space="preserve">
          <source>if you wants to pass data from ViewControlerOne to ViewControllerTwo try these..</source>
          <target state="translated">si quieres pasar los datos de ViewControlerOne a ViewControllerTwo prueba estos..</target>
        </trans-unit>
        <trans-unit id="be71d332d065bfca5adcf4764b2e5dcf0067a681" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;ViewControllerA&lt;/code&gt; you need to tell it about &lt;code&gt;ViewControllerB&lt;/code&gt; so use an</source>
          <target state="translated">en &lt;code&gt;ViewControllerA&lt;/code&gt; necesitas contarle sobre &lt;code&gt;ViewControllerB&lt;/code&gt; , as&amp;iacute; que usa un</target>
        </trans-unit>
        <trans-unit id="65b58b2b8602f0dcd3e15e13e48c2cf1071404f5" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;ViewControllerB.h&lt;/code&gt; create a property for the &lt;code&gt;BOOL&lt;/code&gt;</source>
          <target state="translated">en &lt;code&gt;ViewControllerB.h&lt;/code&gt; cree una propiedad para &lt;code&gt;BOOL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99069faddac71d51fb4234f0748c9713172c03f9" translate="yes" xml:space="preserve">
          <source>in ViewController.h</source>
          <target state="translated">en ViewController.h</target>
        </trans-unit>
        <trans-unit id="131175d1468a88ef378a2491456c5cb0422143b7" translate="yes" xml:space="preserve">
          <source>in ViewController.m</source>
          <target state="translated">en ViewController.m</target>
        </trans-unit>
        <trans-unit id="be71d06d1de5c0a0fdb2be6af089b062df524e57" translate="yes" xml:space="preserve">
          <source>in implementation file you can implement the function</source>
          <target state="translated">en el archivo de implementación se puede implementar la función</target>
        </trans-unit>
        <trans-unit id="a4325deae2d4ec787216962c095e8ecd5c3486e6" translate="yes" xml:space="preserve">
          <source>next still in the &lt;code&gt;ViewControllerB.h&lt;/code&gt; you need to setup a &lt;code&gt;delegate&lt;/code&gt; property and synthesize in &lt;code&gt;ViewControllerB.m&lt;/code&gt;</source>
          <target state="translated">siguiente a&amp;uacute;n en &lt;code&gt;ViewControllerB.h&lt;/code&gt; necesita configurar una propiedad de &lt;code&gt;delegate&lt;/code&gt; y sintetizar en &lt;code&gt;ViewControllerB.m&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="386cbb45fb634a4cc7cc5f0d2dd999b1d4e98035" translate="yes" xml:space="preserve">
          <source>now your basic work is done. go to the place where you want to push the &lt;code&gt;SecondViewController&lt;/code&gt; and do the following stuff</source>
          <target state="translated">ahora tu trabajo b&amp;aacute;sico est&amp;aacute; hecho. vaya al lugar donde desea empujar el &lt;code&gt;SecondViewController&lt;/code&gt; y haga lo siguiente</target>
        </trans-unit>
        <trans-unit id="37f0c63aa5984813b557482775d277cd538c0cde" translate="yes" xml:space="preserve">
          <source>on the buttons click event do this..</source>
          <target state="translated">en los botones haga clic en el evento de hacer esto..</target>
        </trans-unit>
        <trans-unit id="46a5e3a49371630a136eb9da775d08eb729e16f4" translate="yes" xml:space="preserve">
          <source>override the &lt;code&gt;prepare(for:sender:)&lt;/code&gt; method of &lt;code&gt;UIViewController&lt;/code&gt; when using a storyboard and segues</source>
          <target state="translated">anular el m&amp;eacute;todo &lt;code&gt;prepare(for:sender:)&lt;/code&gt; de &lt;code&gt;UIViewController&lt;/code&gt; cuando se usa un gui&amp;oacute;n gr&amp;aacute;fico y segues</target>
        </trans-unit>
        <trans-unit id="4d25f70727ad257203a7cb4eb327698d18e7aa99" translate="yes" xml:space="preserve">
          <source>pass data through an initializer or through properties when performing view controller transitions thtough code</source>
          <target state="translated">pasar los datos a través de un inicializador o a través de las propiedades al realizar las transiciones del controlador de vista a través del código</target>
        </trans-unit>
        <trans-unit id="7311cc1f0f20c0620db17343ab40307e824143ea" translate="yes" xml:space="preserve">
          <source>segues</source>
          <target state="translated">segues</target>
        </trans-unit>
        <trans-unit id="7f2d647110dc98a6cf4ef95feec7e141e6b5b5d7" translate="yes" xml:space="preserve">
          <source>setting properties on view controllers directly</source>
          <target state="translated">establecer las propiedades en los controladores de la vista directamente</target>
        </trans-unit>
        <trans-unit id="9e37ace74b364d63001657a8ab63e157a0a748b9" translate="yes" xml:space="preserve">
          <source>so we can pass this value in second class using below step</source>
          <target state="translated">así que podemos pasar este valor en segunda clase usando el siguiente paso</target>
        </trans-unit>
        <trans-unit id="1b1760ac8cee45ff111cddcf3355ccffae7b6192" translate="yes" xml:space="preserve">
          <source>then change its definition to</source>
          <target state="translated">y luego cambiar su definición a</target>
        </trans-unit>
        <trans-unit id="e61eda4f8db1e4d3af098df52ca88723ae4b33e4" translate="yes" xml:space="preserve">
          <source>update the app shared state (which you can pass forward between view controllers with either one of the methods above)</source>
          <target state="translated">actualizar el estado compartido de la aplicación (que se puede pasar entre los controladores de la vista con cualquiera de los métodos anteriores)</target>
        </trans-unit>
        <trans-unit id="5edd9def88440cf132c20a45c93726634b543a58" translate="yes" xml:space="preserve">
          <source>use an unwind segue</source>
          <target state="translated">usar una pista de desenvolvimiento</target>
        </trans-unit>
        <trans-unit id="1089f6b4bab9307f50a4d74cae6292d00032982e" translate="yes" xml:space="preserve">
          <source>use delegation</source>
          <target state="translated">usar la delegación</target>
        </trans-unit>
        <trans-unit id="4f77b4fd6e2ebd82da33ee94540fe10ea274781f" translate="yes" xml:space="preserve">
          <source>use it in the &lt;code&gt;prepareForSegue&lt;/code&gt; method in the VC1</source>
          <target state="translated">&lt;code&gt;prepareForSegue&lt;/code&gt; en el m&amp;eacute;todo prepareForSegue en el VC1</target>
        </trans-unit>
        <trans-unit id="3397791b6f7f7ea840ba49d831f7e5f45f3ad769" translate="yes" xml:space="preserve">
          <source>var authorizationCompletionBlock:((Bool)-&amp;gt;())? = {_ in}</source>
          <target state="translated">autorizacion varCompletionBlock: ((Bool) -&amp;gt; ())? = {_ en}</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
