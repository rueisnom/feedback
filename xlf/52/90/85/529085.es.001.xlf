<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/529085">
    <body>
      <group id="529085">
        <trans-unit id="5256ba6e715004a286881bf75f6f52fb1d901799" translate="yes" xml:space="preserve">
          <source>-&amp;gt; in that case, you should write</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt; en ese caso, deber&amp;iacute;as escribir&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b92d2040b4ab1ab2f2cbfe0316c2d2e2d1591c13" translate="yes" xml:space="preserve">
          <source>-&amp;gt; in that case, you should write:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt; en ese caso, deber&amp;iacute;as escribir:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2a9adb02b942d52dbe3c314f7f5d8acbadfcb05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class&lt;/code&gt; itself is generic (declared as &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; stands for the type that the &lt;code&gt;Class&lt;/code&gt; object is representing), meaning that the type of &lt;code&gt;String.class&lt;/code&gt; is &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s&amp;iacute; es gen&amp;eacute;rica (declarada como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; representa el tipo que representa el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), lo que significa que el tipo de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78d63fad6447bcd19ccc71052e9c5bfd51e5fcff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checked&lt;/strong&gt;: &lt;em&gt;strong typing&lt;/em&gt;. &lt;code&gt;GenSet&lt;/code&gt; knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a &lt;code&gt;Class&amp;lt;E&amp;gt;&lt;/code&gt; argument, and methods will throw an exception when they are passed arguments that are not of type &lt;code&gt;E&lt;/code&gt;. See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29&quot;&gt;&lt;code&gt;Collections.checkedCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Comprobado&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mecanograf&amp;iacute;a fuerte&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; sabe expl&amp;iacute;citamente qu&amp;eacute; tipo de objetos contiene (es decir, se llam&amp;oacute; expl&amp;iacute;citamente a su constructor con un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;E&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y los m&amp;eacute;todos arrojar&amp;aacute;n una excepci&amp;oacute;n cuando se pasen argumentos que no sean del tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;E&lt;/code&gt; .&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Consulte &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29&quot;&gt; &lt;code&gt;Collections.checkedCollection&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a478f76417a8f9b71d1a58143d46c10f3a99e36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unchecked&lt;/strong&gt;: &lt;em&gt;weak typing&lt;/em&gt;. No type checking is actually done on any of the objects passed as argument.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin marcar&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;mecanograf&amp;iacute;a d&amp;eacute;bil&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No se realiza ninguna verificaci&amp;oacute;n de tipo en ninguno de los objetos pasados ​​como argumento.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fda34727fe4a8c3c6f27c6428b14c915bbf792ce" translate="yes" xml:space="preserve">
          <source>Actually an easier way to do so, is to create an array of objects and cast it to your desired type like the following example:</source>
          <target state="translated">En realidad,una forma más fácil de hacerlo,es crear una serie de objetos y lanzarlos al tipo deseado como en el siguiente ejemplo:</target>
        </trans-unit>
        <trans-unit id="b27c1ffca74b49757bb2714552acded307ac2bdc" translate="yes" xml:space="preserve">
          <source>All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so &quot;generic&quot; classes don't know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.</source>
          <target state="translated">Todo esto es el resultado de una conocida,y deliberada,debilidad de los genéricos en Java:se implementó mediante el borrado,por lo que las clases &quot;genéricas&quot; no saben con qué argumento de tipo se crearon en tiempo de ejecución,y por lo tanto no pueden proporcionar seguridad de tipo a menos que se implemente algún mecanismo explícito (comprobación de tipo).</target>
        </trans-unit>
        <trans-unit id="55c30268952da3aa86e683b07ed4972c026eb26b" translate="yes" xml:space="preserve">
          <source>Although we cannot instantiate a generic array of a specific type parameter, we can pass an already created array to a generic class constructor.</source>
          <target state="translated">Aunque no podemos instanciar un array genérico de un parámetro de tipo específico,podemos pasar un array ya creado a un constructor de clase genérica.</target>
        </trans-unit>
        <trans-unit id="d87d46e1c739b077ad3a79cd5e27875b6b946272" translate="yes" xml:space="preserve">
          <source>An easy, albeit messy workaround to this would be to nest a second &quot;holder&quot; class inside of your main class, and use it to hold your data.</source>
          <target state="translated">Una solución fácil,aunque desordenada,sería anidar una segunda clase &quot;poseedora&quot; dentro de la clase principal,y usarla para guardar sus datos.</target>
        </trans-unit>
        <trans-unit id="b1184a88ce9bf3b04a340710cf59420a373394d7" translate="yes" xml:space="preserve">
          <source>And the add function can be added like so:</source>
          <target state="translated">Y la función de añadir puede ser añadida así:</target>
        </trans-unit>
        <trans-unit id="848056b577f734df63df4cbee87e2efbb71b38f1" translate="yes" xml:space="preserve">
          <source>Arrays on the other hand &lt;em&gt;do&lt;/em&gt; know their component type at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Las matrices, por otro lado &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; conocen su tipo de componente en tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85c828fc90d47c75cff32075e7d854019d39ca8d" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code.  Should you need to return an array of a generic type to other code, the reflection &lt;code&gt;Array&lt;/code&gt; class you mention is the right way to go.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como regla general, este comportamiento es seguro siempre que la matriz de conversi&amp;oacute;n se use internamente (por ejemplo, para respaldar una estructura de datos) y no se devuelva o se exponga al c&amp;oacute;digo del cliente. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si necesita devolver una matriz de un tipo gen&amp;eacute;rico a otro c&amp;oacute;digo, la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;clase de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; reflexi&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;que menciona es el camino correcto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ae02f7d3480c40e465ef8f1cc2fcc7143d064d3" translate="yes" xml:space="preserve">
          <source>As others have said generics are &quot;erased&quot; during compilation. So at runtime an instance of a generic doesn't know what its component type is. The reason for this is historical, Sun wanted to add generics without breaking the existing interface (both source and binary).</source>
          <target state="translated">Como otros han dicho,los genéricos se &quot;borran&quot; durante la compilación.Así que en tiempo de ejecución una instancia de un genérico no sabe qué tipo de componente es.La razón de esto es histórica,Sun quería añadir genéricos sin romper la interfaz existente (tanto la fuente como la binaria).</target>
        </trans-unit>
        <trans-unit id="c3427736c68c1dc9cd88d3b18d103594bb9ec6eb" translate="yes" xml:space="preserve">
          <source>BeanUtils is part of Spring.</source>
          <target state="translated">BeanUtils es parte de la primavera.</target>
        </trans-unit>
        <trans-unit id="8a4c3995e1c36a52527e4933fe77e46b13e4a216" translate="yes" xml:space="preserve">
          <source>But I really don't get what's going on.</source>
          <target state="translated">Pero realmente no entiendo lo que está pasando.</target>
        </trans-unit>
        <trans-unit id="6491ec2981a44a2be8839f5e8ef424385764dc71" translate="yes" xml:space="preserve">
          <source>Check this:</source>
          <target state="translated">Mira esto:</target>
        </trans-unit>
        <trans-unit id="e9643af0511ba009bd3d8c9053fe41234a24cb86" translate="yes" xml:space="preserve">
          <source>Do don't worry about typecasting warnings when you are writing generic class. Worry when you are using it.</source>
          <target state="translated">No se preocupe por las advertencias de mecanografía cuando esté escribiendo la clase genérica.Preocúpate cuando lo estés usando.</target>
        </trans-unit>
        <trans-unit id="1ae85e1afab64ec789fd9cc6abc7831ca23fd44d" translate="yes" xml:space="preserve">
          <source>Due to the implementation of Java generics, you can't have code like this:</source>
          <target state="translated">Debido a la implementación de los genéricos de Java,no se puede tener un código como este:</target>
        </trans-unit>
        <trans-unit id="a070cb875ce38f617daa7725277ba55fda758cdb" translate="yes" xml:space="preserve">
          <source>Edit regarding Ingo's comments:</source>
          <target state="translated">Edita sobre los comentarios de Ingo:</target>
        </trans-unit>
        <trans-unit id="6f9abcab08970ebf58b6e42e52ff550eb98adc7c" translate="yes" xml:space="preserve">
          <source>Edit: Perhaps an alternate way of creating such an array, if the size you required was known and small, would be to simply feed the required number of &quot;null&quot;s into the zeroArray command?</source>
          <target state="translated">Editar:¿Quizás una forma alternativa de crear tal arreglo,si el tamaño requerido fuera conocido y pequeño,sería simplemente alimentar el número requerido de &quot;nulos&quot; en el comando de arreglo cero?</target>
        </trans-unit>
        <trans-unit id="72ff74127a0f808b8c6a3dd63fb3e33e1c3cc7cf" translate="yes" xml:space="preserve">
          <source>Finally we have a type cast because the compiler has no way of knowing that the array returned by &lt;code&gt;Array#newInstance()&lt;/code&gt; is the correct type (even though we know).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Finalmente, tenemos un tipo de conversi&amp;oacute;n porque el compilador no tiene forma de saber que la matriz devuelta por &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array#newInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el tipo correcto (aunque lo sepamos).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9caf0a34f39780f9e5d8f33e38f78e286553419" translate="yes" xml:space="preserve">
          <source>For example, this is used by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-&quot;&gt;&lt;code&gt;&amp;lt;A&amp;gt; A[] Stream.toArray(IntFunction&amp;lt;A[]&amp;gt;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-&quot;&gt; &lt;code&gt;&amp;lt;A&amp;gt; A[] Stream.toArray(IntFunction&amp;lt;A[]&amp;gt;)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20e889c7939e047d457f409d0b44dea04a0cc1b9" translate="yes" xml:space="preserve">
          <source>For more flexibility with your arrays you can use a linked list eg. the ArrayList and other methods found in the Java.util.ArrayList class.</source>
          <target state="translated">Para una mayor flexibilidad con tus arrays puedes usar una lista enlazada,por ejemplo,la ArrayList y otros métodos que se encuentran en la clase Java.util.ArrayList.</target>
        </trans-unit>
        <trans-unit id="bb706c17ccc1b003bb39f24acd6128c68fc3ecb5" translate="yes" xml:space="preserve">
          <source>Generic array creation is disallowed in java but you can do it like</source>
          <target state="translated">La creación de matrices genéricas no está permitida en Java,pero puedes hacerlo como</target>
        </trans-unit>
        <trans-unit id="6b103b2ec12d0f79896e129fa04e9ac22f011751" translate="yes" xml:space="preserve">
          <source>Generics is used for type checking during compile time:</source>
          <target state="translated">Los genéricos se utilizan para la comprobación de tipos durante el tiempo de compilación:</target>
        </trans-unit>
        <trans-unit id="dae8b29e8c574cffe0e2ae657ea0ce2578078c3d" translate="yes" xml:space="preserve">
          <source>Here's how to use generics to get an array of precisely the type you&amp;rsquo;re looking for while preserving type safety (as opposed to the other answers, which will either give you back an &lt;code&gt;Object&lt;/code&gt; array or result in warnings at compile time):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; le mostramos c&amp;oacute;mo usar los gen&amp;eacute;ricos para obtener una matriz del tipo que est&amp;aacute; buscando y al mismo tiempo preservar la seguridad de la fuente (a diferencia de las otras respuestas, que le devolver&amp;aacute;n una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;matriz de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;generar&amp;aacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;advertencias en el momento de la compilaci&amp;oacute;n):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e30cac4fe4524f6b8750c485a3528b017c302b3" translate="yes" xml:space="preserve">
          <source>Hi although the thread is dead, I would like to draw your attention to this:</source>
          <target state="translated">Hola,aunque el hilo está muerto,me gustaría llamar su atención sobre esto:</target>
        </trans-unit>
        <trans-unit id="7092545bda55e9d49db1a3020b4de85b0af6aea3" translate="yes" xml:space="preserve">
          <source>How can I implement this while maintaining type safety?</source>
          <target state="translated">¿Cómo puedo implementar esto mientras mantengo la seguridad del tipo?</target>
        </trans-unit>
        <trans-unit id="b02fd75a6218b3d96c8fba8d980ab75ca6bc25b0" translate="yes" xml:space="preserve">
          <source>How to create a generic array in Java</source>
          <target state="translated">Cómo crear una matriz genérica en Java</target>
        </trans-unit>
        <trans-unit id="2648e8d91872250ab267f8d15aff7b213e879359" translate="yes" xml:space="preserve">
          <source>However if I encapsulate &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in a separate class, it works.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si encapsulo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una clase separada, funciona.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="458c19a5b85d1c69a44e8d4db638e4a39a0ffe17" translate="yes" xml:space="preserve">
          <source>However, it would probably be better to use a List instead of an Array.</source>
          <target state="translated">Sin embargo,probablemente sería mejor usar una Lista en lugar de una Matriz.</target>
        </trans-unit>
        <trans-unit id="af35105618053cf28b99a5e842ffe519693b21fa" translate="yes" xml:space="preserve">
          <source>However, this implicit cast worked fine:</source>
          <target state="translated">Sin embargo,este molde implícito funcionó bien:</target>
        </trans-unit>
        <trans-unit id="bb998e78166bdbeb52b8f59a5580fbad5a6c7cc2" translate="yes" xml:space="preserve">
          <source>I actually found a pretty unique solution to bypass the inability to initiate a generic array. What you have to do is create a class that takes in the generic variable T like so:</source>
          <target state="translated">De hecho,encontré una solución bastante única para evitar la incapacidad de iniciar un conjunto genérico.Lo que tienes que hacer es crear una clase que tome la variable genérica T de esta manera:</target>
        </trans-unit>
        <trans-unit id="b8102d5b25d37f57b41cfb492919248f4aec49c1" translate="yes" xml:space="preserve">
          <source>I find out the following works (and worked for me) with  &lt;code&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Descubr&amp;iacute; los siguientes trabajos (y funcion&amp;oacute; para m&amp;iacute;) con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2077a8b7a241451326b5fd0ee3e26e18c0bb9fc" translate="yes" xml:space="preserve">
          <source>I found a sort of a work around to this problem.</source>
          <target state="translated">Encontré una especie de trabajo en torno a este problema.</target>
        </trans-unit>
        <trans-unit id="138bc620e42e624d84f25de50b69e1879367e21f" translate="yes" xml:space="preserve">
          <source>I have found a quick and easy way that works for me. Note that i have only used this on Java JDK 8. I don't know if it will work with previous versions.</source>
          <target state="translated">He encontrado una forma rápida y fácil que funciona para mí.Tengan en cuenta que sólo he usado esto en Java JDK 8.No sé si funcionará con las versiones anteriores.</target>
        </trans-unit>
        <trans-unit id="25731a7951d4cc55181699535d4e8a33ede74607" translate="yes" xml:space="preserve">
          <source>I have to ask a question in return: is your &lt;code&gt;GenSet&lt;/code&gt; &quot;checked&quot; or &quot;unchecked&quot;?
What does that mean?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tengo que hacer una pregunta a cambio: &amp;iquest;su &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; est&amp;aacute;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot;marcado&quot; o &quot;no marcado&quot;? &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Qu&amp;eacute; significa eso?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94bf3e923cdc7de99a109e4724eb5b075cdc1ee1" translate="yes" xml:space="preserve">
          <source>I made this code snippet to reflectively instantiate a class which is passed for a simple automated test utility.</source>
          <target state="translated">Hice este fragmento de código para instanciar reflexivamente una clase que se pasa por una simple utilidad de prueba automatizada.</target>
        </trans-unit>
        <trans-unit id="4739343a2e3dc3dcf192f5507297f82c33c0904e" translate="yes" xml:space="preserve">
          <source>I needed something like this in some code I was working on and this is what I did to get it to work. So far no problems.</source>
          <target state="translated">Necesitaba algo así en algún código en el que estaba trabajando y esto es lo que hice para que funcionara.Hasta ahora no hay problemas.</target>
        </trans-unit>
        <trans-unit id="b631fdf9b6d54720c72bd40b118520b2d7697f85" translate="yes" xml:space="preserve">
          <source>I saw a solution on the Java forums that goes like this:</source>
          <target state="translated">Vi una solución en los foros de Java que va así:</target>
        </trans-unit>
        <trans-unit id="3f102d0ccea342f912b579f5f17c866b0ad4b2bd" translate="yes" xml:space="preserve">
          <source>I'm wondering if this code would create an effective generic array?</source>
          <target state="translated">Me pregunto si este código crearía un conjunto genérico efectivo.</target>
        </trans-unit>
        <trans-unit id="fdb56dbfb55184785a9349344e54ed2a5d37ca3b" translate="yes" xml:space="preserve">
          <source>If you really want to wrap a generic array of fixed size you will have a method to add data to that array, hence you can initialize properly the array there doing something like this:</source>
          <target state="translated">Si realmente quieres envolver una matriz genérica de tamaño fijo tendrás un método para añadir datos a esa matriz,por lo que puedes inicializar adecuadamente la matriz allí haciendo algo como esto:</target>
        </trans-unit>
        <trans-unit id="21ceed053711f50516747d1e48937b61979c18aa" translate="yes" xml:space="preserve">
          <source>In Java 8, we can do a kind of generic array creation using a lambda or method reference. This is similar to the reflective approach (which passes a &lt;code&gt;Class&lt;/code&gt;), but here we aren't using reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En Java 8, podemos hacer una especie de creaci&amp;oacute;n de matriz gen&amp;eacute;rica utilizando una referencia de m&amp;eacute;todo o lambda. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto es similar al enfoque reflexivo (que pasa una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), pero aqu&amp;iacute; no estamos usando la reflexi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd0e74871c6e95ff64be642dc705c62f2933b08c" translate="yes" xml:space="preserve">
          <source>Inside the constructor, calling the method &lt;code&gt;cast&lt;/code&gt; returns the passed &lt;code&gt;Object&lt;/code&gt; argument cast to the class represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called. Calling the static method &lt;code&gt;newInstance&lt;/code&gt; in &lt;code&gt;java.lang.reflect.Array&lt;/code&gt; returns as an &lt;code&gt;Object&lt;/code&gt; an array of the type represented by the &lt;code&gt;Class&lt;/code&gt; object passed as the first argument and of the length specified by the &lt;code&gt;int&lt;/code&gt; passed as the second argument. Calling the method &lt;code&gt;getComponentType&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the component type of the array represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called (e.g. &lt;code&gt;String.class&lt;/code&gt; for &lt;code&gt;String[].class&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Class&lt;/code&gt; object doesn't represent an array).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dentro del constructor, al llamar al m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cast&lt;/code&gt; se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;argumento &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; emitido a la clase representada por el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el que se llam&amp;oacute; al m&amp;eacute;todo. Al llamar al m&amp;eacute;todo est&amp;aacute;tico &lt;/font&gt;&lt;/font&gt; &lt;code&gt;newInstance&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect.Array&lt;/code&gt; ,se&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve como un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una matriz del tipo representado por el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pasado como primer argumento y de la longitud especificada por el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pasado como segundo argumento. Llamar al m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;getComponentType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representa el tipo de componente de la matriz representada por la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto en el que se llam&amp;oacute; al m&amp;eacute;todo (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no representa una matriz).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab602ec3b989efd8de962f4829da4165f1c65bac" translate="yes" xml:space="preserve">
          <source>It converts a list of any kind of object to an array of the same type.</source>
          <target state="translated">Convierte una lista de cualquier tipo de objeto en un conjunto del mismo tipo.</target>
        </trans-unit>
        <trans-unit id="0d6ab1f93011bae7b26c9070c55cba2fb2e0d73a" translate="yes" xml:space="preserve">
          <source>It works and looks too simple to be true. Is there any drawback?</source>
          <target state="translated">Funciona y parece demasiado simple para ser verdad.¿Hay algún inconveniente?</target>
        </trans-unit>
        <trans-unit id="f4caa1bb1d671a9b3d20e4efc50482ed4f9fc723" translate="yes" xml:space="preserve">
          <source>It works by using class literals as runtime type tokens, as discussed in the &lt;a href=&quot;http://download.oracle.com/javase/tutorial/extra/generics/literals.html&quot;&gt;Java Tutorials&lt;/a&gt;. Class literals are treated by the compiler as instances of &lt;code&gt;java.lang.Class&lt;/code&gt;. To use one, simply follow the name of a class with &lt;code&gt;.class&lt;/code&gt;. So, &lt;code&gt;String.class&lt;/code&gt; acts as a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;. This also works for interfaces, enums, any-dimensional arrays (e.g. &lt;code&gt;String[].class&lt;/code&gt;), primitives (e.g. &lt;code&gt;int.class&lt;/code&gt;), and the keyword &lt;code&gt;void&lt;/code&gt; (i.e. &lt;code&gt;void.class&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Funciona mediante el uso de literales de clase como tokens de tipo de tiempo de ejecuci&amp;oacute;n, como se explica en los &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://download.oracle.com/javase/tutorial/extra/generics/literals.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tutoriales de Java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . El compilador trata los literales de clase como instancias de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Para usar uno, simplemente siga el nombre de una clase con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Entonces, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; act&amp;uacute;a como un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representa la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Esto tambi&amp;eacute;n funciona para interfaces, enumeraciones, matrices de cualquier dimensi&amp;oacute;n (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), primitivas (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;int.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) y la palabra clave &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (es decir, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba396f86823831061c16b320c0846d89f33589c4" translate="yes" xml:space="preserve">
          <source>Java generics work by checking types at compile time and inserting appropriate casts, but &lt;em&gt;erasing&lt;/em&gt; the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los gen&amp;eacute;ricos de Java funcionan verificando los tipos en el momento de la compilaci&amp;oacute;n e insertando las conversiones apropiadas, pero &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;borrando&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; los tipos en los archivos compilados. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto hace que las bibliotecas gen&amp;eacute;ricas sean utilizables por c&amp;oacute;digo que no comprende los gen&amp;eacute;ricos (que fue una decisi&amp;oacute;n de dise&amp;ntilde;o deliberada) pero que significa que normalmente no puede averiguar cu&amp;aacute;l es el tipo en tiempo de ejecuci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dcfea5954d6b17c1cfa4f33dba97b45fc67dfaf1" translate="yes" xml:space="preserve">
          <source>Look also to this code:</source>
          <target state="translated">Mira también este código:</target>
        </trans-unit>
        <trans-unit id="eb35d38fdf528256e3a1b9f4f0e6795a26e709f9" translate="yes" xml:space="preserve">
          <source>Maybe unrelated to this question but while I was getting the &quot;&lt;code&gt;generic array creation&lt;/code&gt;&quot; error for using</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tal vez no est&amp;eacute; relacionado con esta pregunta, pero mientras recib&amp;iacute;a el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;error &quot; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;generic array creation&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &quot; por usar&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="76d45669c37265202c1a2bf3bdc6a10caeb9d640" translate="yes" xml:space="preserve">
          <source>No one else has answered the question of what is going on in the example you posted.</source>
          <target state="translated">Nadie más ha respondido a la pregunta de qué está pasando en el ejemplo que usted publicó.</target>
        </trans-unit>
        <trans-unit id="a4ebde56988a5443e56391d78606fb01d312f7f0" translate="yes" xml:space="preserve">
          <source>Note that the component type of the array should be the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot;&gt;&lt;em&gt;erasure&lt;/em&gt;&lt;/a&gt; of the type parameter:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que el tipo de componente de la matriz debe ser la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;eliminaci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del par&amp;aacute;metro de tipo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b17452d0896601f6affcd65767ebb0c3d4e264e" translate="yes" xml:space="preserve">
          <source>Note this segment:</source>
          <target state="translated">Fíjese en este segmento:</target>
        </trans-unit>
        <trans-unit id="2f6c062767df7549894ad2c5420c2527bac277cd" translate="yes" xml:space="preserve">
          <source>Now in main we can create the array like so:</source>
          <target state="translated">Ahora,en general,podemos crear la matriz así:</target>
        </trans-unit>
        <trans-unit id="9c262fa05b18a24644a8fd81a6f55f5d93672732" translate="yes" xml:space="preserve">
          <source>Passing a list of values...</source>
          <target state="translated">Pasando una lista de valores...</target>
        </trans-unit>
        <trans-unit id="ad86bdac95c44e53082548c0e593a344b6d4c2f5" translate="yes" xml:space="preserve">
          <source>Regarding Joachim Sauer's comment on &lt;a href=&quot;https://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094&quot;&gt;this answer&lt;/a&gt; (I don't have enough reputation to comment on it myself), the example using the cast to &lt;code&gt;T[]&lt;/code&gt; will result in a warning because the compiler can't guarantee type safety in that case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Con respecto al comentario de Joachim Sauer sobre &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esta respuesta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (no tengo la reputaci&amp;oacute;n suficiente para comentarlo yo mismo), el ejemplo que usa la conversi&amp;oacute;n a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; dar&amp;aacute; como resultado una advertencia porque el compilador no puede garantizar la seguridad de tipo en ese caso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3dc19ef1adf29bc710c8cae0527da16f0c1766a" translate="yes" xml:space="preserve">
          <source>Same goes for every method in &lt;code&gt;Class&lt;/code&gt; that returns a &lt;code&gt;Class&lt;/code&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo mismo ocurre con todos los m&amp;eacute;todos en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que devuelven un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a7ed0b643ec86713d206693ab04c647d0197ceb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29&quot;&gt;&lt;code&gt;Array.newInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ver &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29&quot;&gt; &lt;code&gt;Array.newInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para m&amp;aacute;s detalles.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b15b301a124f2fbf4c643bcc7d4db7dc7feefb3b" translate="yes" xml:space="preserve">
          <source>So the application would construct the class with something like</source>
          <target state="translated">Así que la aplicación construiría la clase con algo como</target>
        </trans-unit>
        <trans-unit id="6ccbda7af81f65a30227bd7f3992b00b1b6f9903" translate="yes" xml:space="preserve">
          <source>So, whenever you call the constructor for &lt;code&gt;GenSet&lt;/code&gt;, you pass in a class literal for the first argument representing an array of the &lt;code&gt;GenSet&lt;/code&gt; instance's declared type (e.g. &lt;code&gt;String[].class&lt;/code&gt; for &lt;code&gt;GenSet&amp;lt;String&amp;gt;&lt;/code&gt;). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Entonces, cada vez que llama al constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pasa un literal de clase para el primer argumento que representa una matriz del &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;tipo declarado de la instancia de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; for &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tenga en cuenta que no podr&amp;aacute; obtener una matriz de primitivas, ya que las primitivas no se pueden usar para variables de tipo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7748f1a183c460e064f397442f9e3a24933cbd68" translate="yes" xml:space="preserve">
          <source>Still this is somewhat pointless: you store data via push and it is the signature of the method that guarantees only T elements will enter. So it is more or less irrelevant that the array is Object[] or T[].</source>
          <target state="translated">Sin embargo,esto es algo inútil:almacena los datos mediante el empuje y es la firma del método que garantiza que sólo los elementos T entrarán.Así que es más o menos irrelevante que la matriz sea Object[]o T[].</target>
        </trans-unit>
        <trans-unit id="d39d85a884e20788e0315bf98bc82e20a18d4d62" translate="yes" xml:space="preserve">
          <source>That compiles without warnings, and as you can see in &lt;code&gt;main&lt;/code&gt;, for whatever type you declare an instance of &lt;code&gt;GenSet&lt;/code&gt; as, you can assign &lt;code&gt;a&lt;/code&gt; to an array of that type, and you can assign an element from &lt;code&gt;a&lt;/code&gt; to a variable of that type, meaning that the array and the values in the array are of the correct type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Que compila sin advertencias, y como se puede ver en la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;main&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , para cualquier tipo se declara una instancia de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como, se puede asignar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una matriz de este tipo, y se puede asignar un elemento de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una variable de ese tipo, lo que significa que la matriz y los valores en la matriz son del tipo correcto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7595fdb77d727f88c1985305b9a35234a4633048" translate="yes" xml:space="preserve">
          <source>That last sentence isn't entirely accurate. Calling &lt;code&gt;String[].class.getComponentType()&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;, but its type is &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;, not &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;, which is why you can't do something like the following.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esa &amp;uacute;ltima oraci&amp;oacute;n no es del todo precisa. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Llamar a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class.getComponentType()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; devuelve un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objeto &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representa la clase &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero su tipo es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , No &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que no puede hacer algo como lo siguiente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9da9ca52822b78748b379d39530c900d12e711e" translate="yes" xml:space="preserve">
          <source>The example is using Java reflection to create an array. Doing this is generally not recommended, since it isn't typesafe. Instead, what you should do is just use an internal List, and avoid the array at all.</source>
          <target state="translated">El ejemplo es usar el reflejo de Java para crear una matriz.Hacer esto generalmente no es recomendable,ya que no es seguro para los tipos.En su lugar,lo que deberías hacer es usar una lista interna,y evitar la matriz en absoluto.</target>
        </trans-unit>
        <trans-unit id="0547ea4bb11ade38992f77ef20c40aee738e3020" translate="yes" xml:space="preserve">
          <source>The forced cast suggested by other people did not work for me, throwing an exception of illegal casting.</source>
          <target state="translated">El reparto forzado sugerido por otras personas no funcionó para mí,lanzando una excepción de reparto ilegal.</target>
        </trans-unit>
        <trans-unit id="893703448155265c4ea1af0d290978dadb62aed2" translate="yes" xml:space="preserve">
          <source>The line below throws generic array creation error</source>
          <target state="translated">La línea de abajo arroja un error de creación de arreglos genéricos</target>
        </trans-unit>
        <trans-unit id="a7e38d8de6ad16acf44e8f311f0beb087f046293" translate="yes" xml:space="preserve">
          <source>The public &lt;code&gt;Stack(Class&amp;lt;T&amp;gt; clazz,int capacity)&lt;/code&gt; constructor requires you to pass a Class object at run time, which means class information &lt;em&gt;is&lt;/em&gt; available at runtime to code that needs it. And the &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constructor &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Stack(Class&amp;lt;T&amp;gt; clazz,int capacity)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; requiere que pase un objeto Class en tiempo de ejecuci&amp;oacute;n, lo que significa que la informaci&amp;oacute;n de la clase &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;est&amp;aacute;&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; disponible en tiempo de ejecuci&amp;oacute;n para codificarla. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Y la forma de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; significa que el compilador verificar&amp;aacute; que el objeto de Clase que pasa es precisamente el objeto de Clase para el tipo T. No es una subclase de T, no una superclase de T, sino precisamente T.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28568cdbe8e2736734f26fc601403af7cfc1fbef" translate="yes" xml:space="preserve">
          <source>The rest, such as resizing the array can be done with Arrays.copyOf() like so:</source>
          <target state="translated">El resto,como redimensionar la matriz se puede hacer con Arrays.copyOf()así:</target>
        </trans-unit>
        <trans-unit id="94a865a1d9f7002ed10826aa73f099a177970f7f" translate="yes" xml:space="preserve">
          <source>There's an interesting discussion of this bug/feature on &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5105887&quot;&gt;the OpenJDK project site&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay una discusi&amp;oacute;n interesante sobre este error / caracter&amp;iacute;stica en &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5105887&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;el sitio del proyecto OpenJDK&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce7e6c77f8519fa3381d832c4b9d28a685bb49d9" translate="yes" xml:space="preserve">
          <source>Therefore the purpose is to check that what comes in is what you need.</source>
          <target state="translated">Por lo tanto,el propósito es comprobar que lo que entra es lo que necesitas.</target>
        </trans-unit>
        <trans-unit id="6dd9da45c4b8301c4568251b7ce0a967dc4a0230" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;could&lt;/em&gt; also be done pre-Java 8 using anonymous classes but it's more cumbersome.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;podr&amp;iacute;a&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n hacerse pre-Java 8 utilizando las clases an&amp;oacute;nimas pero es m&amp;aacute;s engorroso.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2d3b2df6a48a3f46de1d6c16486e3ca57ccd589" translate="yes" xml:space="preserve">
          <source>This example works around the problem by having the code that calls the constructor (which does know the type) pass a parameter telling the class the required type.</source>
          <target state="translated">Este ejemplo resuelve el problema haciendo que el código que llama al constructor (que conoce el tipo)pase un parámetro que le dice a la clase el tipo requerido.</target>
        </trans-unit>
        <trans-unit id="43333a72fe134b46dd30df8830d3288a761c204c" translate="yes" xml:space="preserve">
          <source>This is covered in Chapter 5 (Generics) of &lt;a href=&quot;http://java.sun.com/docs/books/effective/&quot;&gt;Effective Java, 2nd Edition&lt;/a&gt;, item 25...&lt;strong&gt;Prefer lists to arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto est&amp;aacute; cubierto en el Cap&amp;iacute;tulo 5 (Gen&amp;eacute;ricos) de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.sun.com/docs/books/effective/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Effective Java, 2nd Edition&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , item 25 ... &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Listas preferidas a las matrices&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="933c14cc80d735c250d51af9a1bde0fa8cd25999" translate="yes" xml:space="preserve">
          <source>This is one of the suggested ways of implementing a generic collection in &lt;em&gt;Effective Java; Item 26&lt;/em&gt;.  No type errors, no need to cast the array repeatedly.  &lt;em&gt;However&lt;/em&gt; this triggers a warning because it is potentially dangerous, and should be used with caution.  As detailed in the comments, this &lt;code&gt;Object[]&lt;/code&gt; is now masquerading as our &lt;code&gt;E[]&lt;/code&gt; type, and can cause unexpected errors or &lt;code&gt;ClassCastException&lt;/code&gt;s if used unsafely.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es una de las formas sugeridas de implementar una colecci&amp;oacute;n gen&amp;eacute;rica en &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Effective Java; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Art&amp;iacute;culo 26&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin errores de tipo, no es necesario emitir la matriz repetidamente. &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo,&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; esto genera una advertencia porque es potencialmente peligroso y debe usarse con precauci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Como se detalla en los comentarios, este &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ahora se hace pasar por nuestro tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;E[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y puede causar errores inesperados o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassCastException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si se usa de manera no segura.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bda17a7647c74183d1eefdb4c2c6bf3be6b8b220" translate="yes" xml:space="preserve">
          <source>This is the only answer that is type safe</source>
          <target state="translated">Esta es la única respuesta que es segura.</target>
        </trans-unit>
        <trans-unit id="741e75a81db3271934733f789fa51f6bcde49c40" translate="yes" xml:space="preserve">
          <source>This style is a bit ugly but it can sometimes be the least bad solution to creating generic types that do need to know their component type at runtime for whatever reason (creating arrays, or creating instances of their component type, etc.).</source>
          <target state="translated">Este estilo es un poco feo,pero a veces puede ser la solución menos mala para crear tipos genéricos que sí necesitan conocer su tipo de componente en tiempo de ejecución por cualquier motivo (creación de matrices,o creación de instancias de su tipo de componente,etc.).</target>
        </trans-unit>
        <trans-unit id="a47cffcbb04f0115e80ce033a233ed23df9c8a3b" translate="yes" xml:space="preserve">
          <source>This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.</source>
          <target state="translated">Esto significa que puede crear un objeto de matriz del tipo apropiado en su constructor,lo que significa que el tipo de los objetos que almacena en su colección tendrá sus tipos comprobados en el momento en que se añadan a la colección.</target>
        </trans-unit>
        <trans-unit id="ba545919b65dd2875da03ab1b8f0d38742918061" translate="yes" xml:space="preserve">
          <source>This way you get an array of type K (if the item only has the value) or any generic type you want defined in the class Item.</source>
          <target state="translated">De esta forma se obtiene un array de tipo K (si el ítem sólo tiene el valor)o cualquier tipo genérico que se quiera definir en la clase Item.</target>
        </trans-unit>
        <trans-unit id="511195dd067dcc78bdd746ae8e4777ea678a7035" translate="yes" xml:space="preserve">
          <source>Though obviously this isn't as versatile as using the createArray code.</source>
          <target state="translated">Aunque obviamente esto no es tan versátil como usar el código de createArray.</target>
        </trans-unit>
        <trans-unit id="0162bf370cdc88793a8cc2021a7abf97d8529b8a" translate="yes" xml:space="preserve">
          <source>To extend to more dimensions, just add &lt;code&gt;[]&lt;/code&gt;'s and dimension parameters to &lt;code&gt;newInstance()&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt; is a type parameter, &lt;code&gt;cls&lt;/code&gt; is a &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;d1&lt;/code&gt; through &lt;code&gt;d5&lt;/code&gt; are integers):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para ampliar a m&amp;aacute;s dimensiones, simplemente agregue &lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 's y par&amp;aacute;metros de dimensi&amp;oacute;n a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;newInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un par&amp;aacute;metro de tipo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;d5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son enteros):&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdc50a4d64557edca2af0f0fbe424262769abed4" translate="yes" xml:space="preserve">
          <source>To get from the array you should call the array[i].variable like so:</source>
          <target state="translated">Para salir de la matriz deberías llamar a la variable array[i].variable así:</target>
        </trans-unit>
        <trans-unit id="c063fb3fefa3d747cc629d31df8d84bd7676161f" translate="yes" xml:space="preserve">
          <source>What about this solution?</source>
          <target state="translated">¿Qué hay de esta solución?</target>
        </trans-unit>
        <trans-unit id="ee3f046aa5ffc4a045cd5a72a236056a96b84282" translate="yes" xml:space="preserve">
          <source>What you return is what the consumer needs.</source>
          <target state="translated">Lo que devuelve es lo que el consumidor necesita.</target>
        </trans-unit>
        <trans-unit id="74b00b76fb41e4de11fa5cad2aad98c166bbc7e8" translate="yes" xml:space="preserve">
          <source>Worth mentioning that wherever possible, you'll have a much happier time working with &lt;code&gt;List&lt;/code&gt;s rather than arrays if you're using generics.  Certainly sometimes you don't have a choice, but using the collections framework is far more robust.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Vale la pena mencionar que, siempre que sea posible, pasar&amp;aacute; un tiempo mucho m&amp;aacute;s feliz trabajando con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s en lugar de arrays si usa gen&amp;eacute;ricos. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ciertamente, a veces no tienes otra opci&amp;oacute;n, pero usar el marco de colecciones es mucho m&amp;aacute;s robusto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc5e54f4c9f2681608006b5b631799b3d6de7e32" translate="yes" xml:space="preserve">
          <source>You can do this:</source>
          <target state="translated">Puedes hacerlo:</target>
        </trans-unit>
        <trans-unit id="16487d3dc196a0b2dabc12b795d3bbaf54bd376e" translate="yes" xml:space="preserve">
          <source>You can expose people in the class PersonList thru a getter. The line below will give you an array, that has a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in every element. In other words array of &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede exponer a las personas en la clase PersonList a trav&amp;eacute;s de un captador. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La l&amp;iacute;nea a continuaci&amp;oacute;n le dar&amp;aacute; una matriz, que tiene una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en cada elemento. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En otras palabras, matriz de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84f8fc1632adc492daf66d87b08e5e3a1d7bf308" translate="yes" xml:space="preserve">
          <source>You could create an Object array and cast it to E everywhere. Yeah, it's not very clean way to do it but it should at least work.</source>
          <target state="translated">Podrías crear una matriz de objetos y lanzarla a E en todas partes.Sí,no es una forma muy limpia de hacerlo pero al menos debería funcionar.</target>
        </trans-unit>
        <trans-unit id="9942ed1ec2a651d493dd301971dd1a7eae9c5da2" translate="yes" xml:space="preserve">
          <source>You could use a cast:</source>
          <target state="translated">Te vendría bien una escayola:</target>
        </trans-unit>
        <trans-unit id="bad104ef691f603008fd690d83c722a18555e4fc" translate="yes" xml:space="preserve">
          <source>You do not need to pass the Class argument to the constructor.
Try this.</source>
          <target state="translated">No es necesario pasar el argumento de la clase al constructor.Pruebe esto.</target>
        </trans-unit>
        <trans-unit id="2f4831edb7ac05f03bc0826b777c23085688511b" translate="yes" xml:space="preserve">
          <source>Your code will work, although it will generate an unchecked warning (which you could suppress with the following annotation:</source>
          <target state="translated">Su código funcionará,aunque generará una advertencia no comprobada (que podría suprimir con la siguiente anotación:</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="5f8c4995fba3a45dcd60d1948211c803b4c2d015" translate="yes" xml:space="preserve">
          <source>and the constructor now knows (at runtime) what the component type is and can use that information to construct the array through the reflection API.</source>
          <target state="translated">y el constructor sabe ahora (en tiempo de ejecución)cuál es el tipo de componente y puede utilizar esa información para construir el conjunto a través de la API de reflexión.</target>
        </trans-unit>
        <trans-unit id="4d8a5b906deca90a251605c0f258b166f90b0b58" translate="yes" xml:space="preserve">
          <source>and then in your array class just have it start like so:</source>
          <target state="translated">y luego en tu clase de arreglo,haz que empiece así:</target>
        </trans-unit>
        <trans-unit id="2b12cc81f6a4d00eece3e0f6ae508cc8b4c32f59" translate="yes" xml:space="preserve">
          <source>for array initiating where &lt;strong&gt;Array.newInstance(class of array, size of array)&lt;/strong&gt;. Class can be both primitive (int.class) and object (Integer.class).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;para el inicio de la matriz donde &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Array.newInstance (clase de matriz, tama&amp;ntilde;o de matriz)&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La clase puede ser primitiva (int.class) y object (Integer.class).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13b657f1bfb3dcf5a2120341e08c0996b3657ace" translate="yes" xml:space="preserve">
          <source>in this case you use a java.lang.reflect.Array.newInstance to create the array, and it will not be an Object[], but a real T[].
You should not worry of it not being final, since it is managed inside your class.
Note that you need a non null object on the push() to be able to get the type to use, so I added a check on the data you push and throw an exception there.</source>
          <target state="translated">en este caso se utiliza un java.lang.reflect.Array.newInstance para crear la matriz,y no será un Objeto[],sino una T[]real.No debes preocuparte de que no sea definitiva,ya que se gestiona dentro de tu clase.Tened en cuenta que necesitáis un objeto no nulo en el push()para poder conseguir el tipo a utilizar,así que he añadido una comprobación de los datos que empujáis y lanzáis una excepción allí.</target>
        </trans-unit>
        <trans-unit id="d575e92f6e78dfc9ee7b6d9f6680fd8e354625d8" translate="yes" xml:space="preserve">
          <source>result:</source>
          <target state="translated">result:</target>
        </trans-unit>
        <trans-unit id="d0431ed373bfd98aaa10ea4140729e6d20c83920" translate="yes" xml:space="preserve">
          <source>starting a &lt;code&gt;new Generic Invoker[]&lt;/code&gt; will cause an issue with unchecked but there shouldn't actually be any issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;iniciar un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Generic Invoker[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; causar&amp;aacute; un problema sin marcar, pero en realidad no deber&amp;iacute;a haber ning&amp;uacute;n problema.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10eab4850ec6f4bb16c0a5e5d691b70c53338706" translate="yes" xml:space="preserve">
          <source>try this.</source>
          <target state="translated">pruebe esto.</target>
        </trans-unit>
        <trans-unit id="1a7c779c62a097b358907b5e85dd56db377c8b60" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;SIZE&lt;/code&gt; is a constant and &lt;code&gt;T&lt;/code&gt; is a type identifier</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;SIZE&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es una constante y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es un identificador de tipo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8ea2a26fb17636f2877de462b56c1020c26ddd8" translate="yes" xml:space="preserve">
          <source>where Item is a class I defined containing the member:</source>
          <target state="translated">donde Artículo es una clase I definida que contiene el miembro:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
