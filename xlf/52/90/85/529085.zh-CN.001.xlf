<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/529085">
    <body>
      <group id="529085">
        <trans-unit id="5256ba6e715004a286881bf75f6f52fb1d901799" translate="yes" xml:space="preserve">
          <source>-&amp;gt; in that case, you should write</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt;在这种情况下，您应该写&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b92d2040b4ab1ab2f2cbfe0316c2d2e2d1591c13" translate="yes" xml:space="preserve">
          <source>-&amp;gt; in that case, you should write:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;-&amp;gt;在这种情况下，您应该写：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2a9adb02b942d52dbe3c314f7f5d8acbadfcb05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class&lt;/code&gt; itself is generic (declared as &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; stands for the type that the &lt;code&gt;Class&lt;/code&gt; object is representing), meaning that the type of &lt;code&gt;String.class&lt;/code&gt; is &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本身是泛型的（声明为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代表&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象表示的类型），这意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的类型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78d63fad6447bcd19ccc71052e9c5bfd51e5fcff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Checked&lt;/strong&gt;: &lt;em&gt;strong typing&lt;/em&gt;. &lt;code&gt;GenSet&lt;/code&gt; knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a &lt;code&gt;Class&amp;lt;E&amp;gt;&lt;/code&gt; argument, and methods will throw an exception when they are passed arguments that are not of type &lt;code&gt;E&lt;/code&gt;. See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29&quot;&gt;&lt;code&gt;Collections.checkedCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;检查&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强打字&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明确知道其包含的对象类型（即，使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;E&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;显式调用了其构造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数，并且当方法传递非&lt;/font&gt;&lt;/font&gt; &lt;code&gt;E&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型的参数时，方法将引发异常&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29&quot;&gt; &lt;code&gt;Collections.checkedCollection&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a478f76417a8f9b71d1a58143d46c10f3a99e36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unchecked&lt;/strong&gt;: &lt;em&gt;weak typing&lt;/em&gt;. No type checking is actually done on any of the objects passed as argument.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;未选中&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;键入较弱&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上，不会对作为参数传递的任何对象进行类型检查。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fda34727fe4a8c3c6f27c6428b14c915bbf792ce" translate="yes" xml:space="preserve">
          <source>Actually an easier way to do so, is to create an array of objects and cast it to your desired type like the following example:</source>
          <target state="translated">其实更简单的方法是创建一个对象数组,然后将其投射到你想要的类型,比如下面的例子。</target>
        </trans-unit>
        <trans-unit id="b27c1ffca74b49757bb2714552acded307ac2bdc" translate="yes" xml:space="preserve">
          <source>All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so &quot;generic&quot; classes don't know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.</source>
          <target state="translated">所有这些都来自于Java中一个众所周知的、也是故意的弱点:它是用擦除法来实现的,所以 &quot;泛型 &quot;类不知道在运行时用什么类型参数创建的,因此无法提供类型安全,除非实现了一些显式机制(类型检查)。</target>
        </trans-unit>
        <trans-unit id="55c30268952da3aa86e683b07ed4972c026eb26b" translate="yes" xml:space="preserve">
          <source>Although we cannot instantiate a generic array of a specific type parameter, we can pass an already created array to a generic class constructor.</source>
          <target state="translated">虽然我们不能实例化一个特定类型参数的泛型数组,但我们可以将已经创建的数组传递给一个泛型类构造函数。</target>
        </trans-unit>
        <trans-unit id="d87d46e1c739b077ad3a79cd5e27875b6b946272" translate="yes" xml:space="preserve">
          <source>An easy, albeit messy workaround to this would be to nest a second &quot;holder&quot; class inside of your main class, and use it to hold your data.</source>
          <target state="translated">一个简单的方法是在主类内嵌套第二个 &quot;holder &quot;类,用它来保存数据。</target>
        </trans-unit>
        <trans-unit id="b1184a88ce9bf3b04a340710cf59420a373394d7" translate="yes" xml:space="preserve">
          <source>And the add function can be added like so:</source>
          <target state="translated">而且添加功能可以像这样添加。</target>
        </trans-unit>
        <trans-unit id="848056b577f734df63df4cbee87e2efbb71b38f1" translate="yes" xml:space="preserve">
          <source>Arrays on the other hand &lt;em&gt;do&lt;/em&gt; know their component type at runtime.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一方面，数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在运行时&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确实&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;知道其组件类型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="85c828fc90d47c75cff32075e7d854019d39ca8d" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code.  Should you need to return an array of a generic type to other code, the reflection &lt;code&gt;Array&lt;/code&gt; class you mention is the right way to go.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;根据经验，这种行为是安全的，只要在内部使用强制转换数组（例如，支持数据结构），并且不将其返回或暴露给客户端代码即可。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您需要将通用类型的数组返回给其他代码，则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您提到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的反射&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类是正确的方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ae02f7d3480c40e465ef8f1cc2fcc7143d064d3" translate="yes" xml:space="preserve">
          <source>As others have said generics are &quot;erased&quot; during compilation. So at runtime an instance of a generic doesn't know what its component type is. The reason for this is historical, Sun wanted to add generics without breaking the existing interface (both source and binary).</source>
          <target state="translated">正如其他人所说的那样,在编译过程中泛型是被 &quot;擦除 &quot;的。所以在运行时,一个泛型的实例不知道它的组件类型是什么。这是有历史原因的,Sun希望在不破坏现有接口(包括源码和二进制)的情况下添加泛型。</target>
        </trans-unit>
        <trans-unit id="c3427736c68c1dc9cd88d3b18d103594bb9ec6eb" translate="yes" xml:space="preserve">
          <source>BeanUtils is part of Spring.</source>
          <target state="translated">BeanUtils是Spring的一部分。</target>
        </trans-unit>
        <trans-unit id="8a4c3995e1c36a52527e4933fe77e46b13e4a216" translate="yes" xml:space="preserve">
          <source>But I really don't get what's going on.</source>
          <target state="translated">但我真的不明白是怎么回事。</target>
        </trans-unit>
        <trans-unit id="6491ec2981a44a2be8839f5e8ef424385764dc71" translate="yes" xml:space="preserve">
          <source>Check this:</source>
          <target state="translated">看看这个。</target>
        </trans-unit>
        <trans-unit id="e9643af0511ba009bd3d8c9053fe41234a24cb86" translate="yes" xml:space="preserve">
          <source>Do don't worry about typecasting warnings when you are writing generic class. Worry when you are using it.</source>
          <target state="translated">当你在写通用类的时候,不要担心类型化警告。在使用的时候要担心。</target>
        </trans-unit>
        <trans-unit id="1ae85e1afab64ec789fd9cc6abc7831ca23fd44d" translate="yes" xml:space="preserve">
          <source>Due to the implementation of Java generics, you can't have code like this:</source>
          <target state="translated">由于Java属性的实现,你不可能有这样的代码。</target>
        </trans-unit>
        <trans-unit id="a070cb875ce38f617daa7725277ba55fda758cdb" translate="yes" xml:space="preserve">
          <source>Edit regarding Ingo's comments:</source>
          <target state="translated">编辑关于英戈的评论。</target>
        </trans-unit>
        <trans-unit id="6f9abcab08970ebf58b6e42e52ff550eb98adc7c" translate="yes" xml:space="preserve">
          <source>Edit: Perhaps an alternate way of creating such an array, if the size you required was known and small, would be to simply feed the required number of &quot;null&quot;s into the zeroArray command?</source>
          <target state="translated">编辑:也许,如果你所需要的大小是已知的,并且很小,那么创建这样一个数组的另一种方法是将所需的 &quot;null &quot;s的数量简单地送入0Array命令中?</target>
        </trans-unit>
        <trans-unit id="72ff74127a0f808b8c6a3dd63fb3e33e1c3cc7cf" translate="yes" xml:space="preserve">
          <source>Finally we have a type cast because the compiler has no way of knowing that the array returned by &lt;code&gt;Array#newInstance()&lt;/code&gt; is the correct type (even though we know).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最后，我们进行了类型转换，因为编译器无法知道&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Array#newInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是正确的类型（即使我们知道）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9caf0a34f39780f9e5d8f33e38f78e286553419" translate="yes" xml:space="preserve">
          <source>For example, this is used by &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-&quot;&gt;&lt;code&gt;&amp;lt;A&amp;gt; A[] Stream.toArray(IntFunction&amp;lt;A[]&amp;gt;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，这由&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-&quot;&gt; &lt;code&gt;&amp;lt;A&amp;gt; A[] Stream.toArray(IntFunction&amp;lt;A[]&amp;gt;)&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20e889c7939e047d457f409d0b44dea04a0cc1b9" translate="yes" xml:space="preserve">
          <source>For more flexibility with your arrays you can use a linked list eg. the ArrayList and other methods found in the Java.util.ArrayList class.</source>
          <target state="translated">为了使你的数组更灵活,你可以使用一个链接列表,例如,在Java.util.ArrayList类中找到的ArrayList和其他方法。</target>
        </trans-unit>
        <trans-unit id="bb706c17ccc1b003bb39f24acd6128c68fc3ecb5" translate="yes" xml:space="preserve">
          <source>Generic array creation is disallowed in java but you can do it like</source>
          <target state="translated">java中不允许创建通用数组,但你可以像下面这样做</target>
        </trans-unit>
        <trans-unit id="6b103b2ec12d0f79896e129fa04e9ac22f011751" translate="yes" xml:space="preserve">
          <source>Generics is used for type checking during compile time:</source>
          <target state="translated">Generics在编译时用于类型检查。</target>
        </trans-unit>
        <trans-unit id="dae8b29e8c574cffe0e2ae657ea0ce2578078c3d" translate="yes" xml:space="preserve">
          <source>Here's how to use generics to get an array of precisely the type you&amp;rsquo;re looking for while preserving type safety (as opposed to the other answers, which will either give you back an &lt;code&gt;Object&lt;/code&gt; array or result in warnings at compile time):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是在保留类型安全性的同时，使用泛型获取与您正在寻找的类型完全相同的数组的方法（与其他答案相反，其他答案将使您返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组或在编译时产生警告）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e30cac4fe4524f6b8750c485a3528b017c302b3" translate="yes" xml:space="preserve">
          <source>Hi although the thread is dead, I would like to draw your attention to this:</source>
          <target state="translated">你好,虽然这条线已经死了,但我想请你注意一下。</target>
        </trans-unit>
        <trans-unit id="7092545bda55e9d49db1a3020b4de85b0af6aea3" translate="yes" xml:space="preserve">
          <source>How can I implement this while maintaining type safety?</source>
          <target state="translated">如何才能在保证类型安全的同时实现呢?</target>
        </trans-unit>
        <trans-unit id="b02fd75a6218b3d96c8fba8d980ab75ca6bc25b0" translate="yes" xml:space="preserve">
          <source>How to create a generic array in Java</source>
          <target state="translated">如何在Java中创建一个通用数组</target>
        </trans-unit>
        <trans-unit id="2648e8d91872250ab267f8d15aff7b213e879359" translate="yes" xml:space="preserve">
          <source>However if I encapsulate &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in a separate class, it works.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，如果我将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;封装&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在单独的类中，则它可以工作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="458c19a5b85d1c69a44e8d4db638e4a39a0ffe17" translate="yes" xml:space="preserve">
          <source>However, it would probably be better to use a List instead of an Array.</source>
          <target state="translated">但是,使用List而不是阵列可能会更好。</target>
        </trans-unit>
        <trans-unit id="af35105618053cf28b99a5e842ffe519693b21fa" translate="yes" xml:space="preserve">
          <source>However, this implicit cast worked fine:</source>
          <target state="translated">然而,这种隐含的投稿效果很好。</target>
        </trans-unit>
        <trans-unit id="bb998e78166bdbeb52b8f59a5580fbad5a6c7cc2" translate="yes" xml:space="preserve">
          <source>I actually found a pretty unique solution to bypass the inability to initiate a generic array. What you have to do is create a class that takes in the generic variable T like so:</source>
          <target state="translated">实际上,我发现了一个非常独特的解决方案,可以绕过无法启动的通用数组。你要做的是创建一个类,它可以像这样接收通用变量T。</target>
        </trans-unit>
        <trans-unit id="b8102d5b25d37f57b41cfb492919248f4aec49c1" translate="yes" xml:space="preserve">
          <source>I find out the following works (and worked for me) with  &lt;code&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我发现了&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@SuppressWarnings({&quot;unchecked&quot;})&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的以下作品（并为我工作 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d2077a8b7a241451326b5fd0ee3e26e18c0bb9fc" translate="yes" xml:space="preserve">
          <source>I found a sort of a work around to this problem.</source>
          <target state="translated">我找到了一种解决这个问题的办法。</target>
        </trans-unit>
        <trans-unit id="138bc620e42e624d84f25de50b69e1879367e21f" translate="yes" xml:space="preserve">
          <source>I have found a quick and easy way that works for me. Note that i have only used this on Java JDK 8. I don't know if it will work with previous versions.</source>
          <target state="translated">我找到了一个快速、简单的方法,对我来说很有效。注意,我只在Java JDK 8上使用过这个方法。我不知道它是否能在以前的版本中使用。</target>
        </trans-unit>
        <trans-unit id="25731a7951d4cc55181699535d4e8a33ede74607" translate="yes" xml:space="preserve">
          <source>I have to ask a question in return: is your &lt;code&gt;GenSet&lt;/code&gt; &quot;checked&quot; or &quot;unchecked&quot;?
What does that mean?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我不得不问一个问题：您的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;ldquo;选中&amp;rdquo;还是&amp;ldquo;未选中&amp;rdquo;？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着什么？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94bf3e923cdc7de99a109e4724eb5b075cdc1ee1" translate="yes" xml:space="preserve">
          <source>I made this code snippet to reflectively instantiate a class which is passed for a simple automated test utility.</source>
          <target state="translated">我做了这个代码片段,用于反射性地实例化一个类,这个类是通过一个简单的自动测试实用程序来实现的。</target>
        </trans-unit>
        <trans-unit id="4739343a2e3dc3dcf192f5507297f82c33c0904e" translate="yes" xml:space="preserve">
          <source>I needed something like this in some code I was working on and this is what I did to get it to work. So far no problems.</source>
          <target state="translated">我在一些代码中需要这样的东西,我就是这样做的,让它工作起来。到目前为止没有任何问题。</target>
        </trans-unit>
        <trans-unit id="b631fdf9b6d54720c72bd40b118520b2d7697f85" translate="yes" xml:space="preserve">
          <source>I saw a solution on the Java forums that goes like this:</source>
          <target state="translated">我在Java论坛上看到一个解决方案是这样的。</target>
        </trans-unit>
        <trans-unit id="3f102d0ccea342f912b579f5f17c866b0ad4b2bd" translate="yes" xml:space="preserve">
          <source>I'm wondering if this code would create an effective generic array?</source>
          <target state="translated">我想知道这样的代码能不能创建一个有效的通用数组?</target>
        </trans-unit>
        <trans-unit id="fdb56dbfb55184785a9349344e54ed2a5d37ca3b" translate="yes" xml:space="preserve">
          <source>If you really want to wrap a generic array of fixed size you will have a method to add data to that array, hence you can initialize properly the array there doing something like this:</source>
          <target state="translated">如果你真的想封装一个固定大小的通用数组,你将会有一个方法将数据添加到这个数组中,因此你可以在数组中正确地初始化数组,这样做是这样的。</target>
        </trans-unit>
        <trans-unit id="21ceed053711f50516747d1e48937b61979c18aa" translate="yes" xml:space="preserve">
          <source>In Java 8, we can do a kind of generic array creation using a lambda or method reference. This is similar to the reflective approach (which passes a &lt;code&gt;Class&lt;/code&gt;), but here we aren't using reflection.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在Java 8中，我们可以使用lambda或方法引用进行一种通用数组创建。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这类似于反射方法（通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），但是这里我们不使用反射。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd0e74871c6e95ff64be642dc705c62f2933b08c" translate="yes" xml:space="preserve">
          <source>Inside the constructor, calling the method &lt;code&gt;cast&lt;/code&gt; returns the passed &lt;code&gt;Object&lt;/code&gt; argument cast to the class represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called. Calling the static method &lt;code&gt;newInstance&lt;/code&gt; in &lt;code&gt;java.lang.reflect.Array&lt;/code&gt; returns as an &lt;code&gt;Object&lt;/code&gt; an array of the type represented by the &lt;code&gt;Class&lt;/code&gt; object passed as the first argument and of the length specified by the &lt;code&gt;int&lt;/code&gt; passed as the second argument. Calling the method &lt;code&gt;getComponentType&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the component type of the array represented by the &lt;code&gt;Class&lt;/code&gt; object on which the method was called (e.g. &lt;code&gt;String.class&lt;/code&gt; for &lt;code&gt;String[].class&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Class&lt;/code&gt; object doesn't represent an array).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在构造函数内部，调用方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将传递的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数强制类型转换为由&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用该方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。调用静态方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;newInstance&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.reflect.Array&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回作为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;由所表示的类型的数组&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为第一个参数，并通过指定的长度的传递的对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为第二个参数传递。调用方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;getComponentType&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象，该对象表示由&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示的数组的组件类型&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用了该方法的对象（例如&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象不表示数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则为&lt;/font&gt; &lt;code&gt;null&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ab602ec3b989efd8de962f4829da4165f1c65bac" translate="yes" xml:space="preserve">
          <source>It converts a list of any kind of object to an array of the same type.</source>
          <target state="translated">它将任何种类的对象的列表转换为相同类型的数组。</target>
        </trans-unit>
        <trans-unit id="0d6ab1f93011bae7b26c9070c55cba2fb2e0d73a" translate="yes" xml:space="preserve">
          <source>It works and looks too simple to be true. Is there any drawback?</source>
          <target state="translated">它的作用,看起来太简单了,不可能是真的。有没有什么缺点呢?</target>
        </trans-unit>
        <trans-unit id="f4caa1bb1d671a9b3d20e4efc50482ed4f9fc723" translate="yes" xml:space="preserve">
          <source>It works by using class literals as runtime type tokens, as discussed in the &lt;a href=&quot;http://download.oracle.com/javase/tutorial/extra/generics/literals.html&quot;&gt;Java Tutorials&lt;/a&gt;. Class literals are treated by the compiler as instances of &lt;code&gt;java.lang.Class&lt;/code&gt;. To use one, simply follow the name of a class with &lt;code&gt;.class&lt;/code&gt;. So, &lt;code&gt;String.class&lt;/code&gt; acts as a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;. This also works for interfaces, enums, any-dimensional arrays (e.g. &lt;code&gt;String[].class&lt;/code&gt;), primitives (e.g. &lt;code&gt;int.class&lt;/code&gt;), and the keyword &lt;code&gt;void&lt;/code&gt; (i.e. &lt;code&gt;void.class&lt;/code&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://download.oracle.com/javase/tutorial/extra/generics/literals.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java教程&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中所述，它通过将类文字用作运行时类型标记来工作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。类文字被编译器视为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;java.lang.Class&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。要使用一个，只需在类名后加上&lt;/font&gt;&lt;/font&gt; &lt;code&gt;.class&lt;/code&gt; 即可&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。因此，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;充当&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表示类&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。这也适用于接口，枚举，任意维数组（例如&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;），基元（例如&lt;/font&gt; &lt;code&gt;int.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）和关键字&lt;/font&gt; &lt;code&gt;void&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;（即&lt;/font&gt; &lt;code&gt;void.class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ba396f86823831061c16b320c0846d89f33589c4" translate="yes" xml:space="preserve">
          <source>Java generics work by checking types at compile time and inserting appropriate casts, but &lt;em&gt;erasing&lt;/em&gt; the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java泛型通过在编译时检查类型并插入适当的强制转换来工作，但会&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;擦除&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;已编译文件中的类型。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这使得泛型库可以通过不理解泛型的代码使用（这是一个有意的设计决策），但是这意味着您通常无法在运行时找出类型。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dcfea5954d6b17c1cfa4f33dba97b45fc67dfaf1" translate="yes" xml:space="preserve">
          <source>Look also to this code:</source>
          <target state="translated">也看看这个代码。</target>
        </trans-unit>
        <trans-unit id="eb35d38fdf528256e3a1b9f4f0e6795a26e709f9" translate="yes" xml:space="preserve">
          <source>Maybe unrelated to this question but while I was getting the &quot;&lt;code&gt;generic array creation&lt;/code&gt;&quot; error for using</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也许与这个问题无关，但是当我使用时出现&amp;ldquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;generic array creation&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;错误&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="76d45669c37265202c1a2bf3bdc6a10caeb9d640" translate="yes" xml:space="preserve">
          <source>No one else has answered the question of what is going on in the example you posted.</source>
          <target state="translated">没有人回答你贴出的例子是怎么回事的问题。</target>
        </trans-unit>
        <trans-unit id="a4ebde56988a5443e56391d78606fb01d312f7f0" translate="yes" xml:space="preserve">
          <source>Note that the component type of the array should be the &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot;&gt;&lt;em&gt;erasure&lt;/em&gt;&lt;/a&gt; of the type parameter:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，数组的组件类型应为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;type参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/erasure.html&quot;&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;擦除&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8b17452d0896601f6affcd65767ebb0c3d4e264e" translate="yes" xml:space="preserve">
          <source>Note this segment:</source>
          <target state="translated">注意到这一部分。</target>
        </trans-unit>
        <trans-unit id="2f6c062767df7549894ad2c5420c2527bac277cd" translate="yes" xml:space="preserve">
          <source>Now in main we can create the array like so:</source>
          <target state="translated">现在在主中,我们可以像这样创建数组。</target>
        </trans-unit>
        <trans-unit id="9c262fa05b18a24644a8fd81a6f55f5d93672732" translate="yes" xml:space="preserve">
          <source>Passing a list of values...</source>
          <target state="translated">传递一份价值清单.....</target>
        </trans-unit>
        <trans-unit id="ad86bdac95c44e53082548c0e593a344b6d4c2f5" translate="yes" xml:space="preserve">
          <source>Regarding Joachim Sauer's comment on &lt;a href=&quot;https://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094&quot;&gt;this answer&lt;/a&gt; (I don't have enough reputation to comment on it myself), the example using the cast to &lt;code&gt;T[]&lt;/code&gt; will result in a warning because the compiler can't guarantee type safety in that case.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于Joachim Sauer对&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这个答案&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的评论&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（我自己没有足够的声誉对此发表评论），使用强制转换为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的示例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将导致警告，因为在这种情况下编译器不能保证类型安全。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3dc19ef1adf29bc710c8cae0527da16f0c1766a" translate="yes" xml:space="preserve">
          <source>Same goes for every method in &lt;code&gt;Class&lt;/code&gt; that returns a &lt;code&gt;Class&lt;/code&gt; object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每个方法都一样&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a7ed0b643ec86713d206693ab04c647d0197ceb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29&quot;&gt;&lt;code&gt;Array.newInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;详细信息，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29&quot;&gt; &lt;code&gt;Array.newInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b15b301a124f2fbf4c643bcc7d4db7dc7feefb3b" translate="yes" xml:space="preserve">
          <source>So the application would construct the class with something like</source>
          <target state="translated">因此,应用程序将用以下方式构造类,如</target>
        </trans-unit>
        <trans-unit id="6ccbda7af81f65a30227bd7f3992b00b1b6f9903" translate="yes" xml:space="preserve">
          <source>So, whenever you call the constructor for &lt;code&gt;GenSet&lt;/code&gt;, you pass in a class literal for the first argument representing an array of the &lt;code&gt;GenSet&lt;/code&gt; instance's declared type (e.g. &lt;code&gt;String[].class&lt;/code&gt; for &lt;code&gt;GenSet&amp;lt;String&amp;gt;&lt;/code&gt;). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，每当您调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，您都将为第一个参数传入一个类常量，以表示&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例的声明类型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（例如，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; for &lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，您将无法获取基本数组，因为基本不能用于类型变量。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7748f1a183c460e064f397442f9e3a24933cbd68" translate="yes" xml:space="preserve">
          <source>Still this is somewhat pointless: you store data via push and it is the signature of the method that guarantees only T elements will enter. So it is more or less irrelevant that the array is Object[] or T[].</source>
          <target state="translated">不过这还是有些无意义的:你通过推送存储数据,而保证只有T元素才会进入的方法签名。所以,数组是Object[]或T[],这或多或少都是无关紧要的。</target>
        </trans-unit>
        <trans-unit id="d39d85a884e20788e0315bf98bc82e20a18d4d62" translate="yes" xml:space="preserve">
          <source>That compiles without warnings, and as you can see in &lt;code&gt;main&lt;/code&gt;, for whatever type you declare an instance of &lt;code&gt;GenSet&lt;/code&gt; as, you can assign &lt;code&gt;a&lt;/code&gt; to an array of that type, and you can assign an element from &lt;code&gt;a&lt;/code&gt; to a variable of that type, meaning that the array and the values in the array are of the correct type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那编译没有警告，并且你可以看到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;main&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，不管是什么类型，你声明的一个实例&lt;/font&gt;&lt;/font&gt; &lt;code&gt;GenSet&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为，你可以指定&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该类型的数组，你可以指定一个元素&lt;/font&gt;&lt;/font&gt; &lt;code&gt;a&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该类型的变量，表示数组和数组中的值的类型正确。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7595fdb77d727f88c1985305b9a35234a4633048" translate="yes" xml:space="preserve">
          <source>That last sentence isn't entirely accurate. Calling &lt;code&gt;String[].class.getComponentType()&lt;/code&gt; returns a &lt;code&gt;Class&lt;/code&gt; object representing the class &lt;code&gt;String&lt;/code&gt;, but its type is &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;, not &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt;, which is why you can't do something like the following.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最后一句话并不完全正确。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String[].class.getComponentType()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回一个&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代表类&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是其类型为&lt;/font&gt; &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，而不是&lt;/font&gt; &lt;code&gt;Class&amp;lt;String&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这就是为什么您不能执行以下操作的原因。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d9da9ca52822b78748b379d39530c900d12e711e" translate="yes" xml:space="preserve">
          <source>The example is using Java reflection to create an array. Doing this is generally not recommended, since it isn't typesafe. Instead, what you should do is just use an internal List, and avoid the array at all.</source>
          <target state="translated">这个例子是使用Java反射来创建一个数组。一般不建议这样做,因为它不安全。相反,你应该做的是直接使用内部List,完全避开数组。</target>
        </trans-unit>
        <trans-unit id="0547ea4bb11ade38992f77ef20c40aee738e3020" translate="yes" xml:space="preserve">
          <source>The forced cast suggested by other people did not work for me, throwing an exception of illegal casting.</source>
          <target state="translated">别人建议的强投对我来说并不奏效,抛出一个非法投的特例。</target>
        </trans-unit>
        <trans-unit id="893703448155265c4ea1af0d290978dadb62aed2" translate="yes" xml:space="preserve">
          <source>The line below throws generic array creation error</source>
          <target state="translated">下面这一行会抛出一般数组创建错误</target>
        </trans-unit>
        <trans-unit id="a7e38d8de6ad16acf44e8f311f0beb087f046293" translate="yes" xml:space="preserve">
          <source>The public &lt;code&gt;Stack(Class&amp;lt;T&amp;gt; clazz,int capacity)&lt;/code&gt; constructor requires you to pass a Class object at run time, which means class information &lt;em&gt;is&lt;/em&gt; available at runtime to code that needs it. And the &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;公共&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Stack(Class&amp;lt;T&amp;gt; clazz,int capacity)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造需要在运行时通过一类对象，这意味着类信息&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在运行时可用到的代码需要它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而且&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;形式意味着编译器将检查您传递的Class对象是否恰好是类型T的Class对象。不是T的子类，不是T的超类，而是T。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="28568cdbe8e2736734f26fc601403af7cfc1fbef" translate="yes" xml:space="preserve">
          <source>The rest, such as resizing the array can be done with Arrays.copyOf() like so:</source>
          <target state="translated">剩下的,比如调整数组的大小,可以用Arrays.copyOf()来完成,就像这样。</target>
        </trans-unit>
        <trans-unit id="94a865a1d9f7002ed10826aa73f099a177970f7f" translate="yes" xml:space="preserve">
          <source>There's an interesting discussion of this bug/feature on &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5105887&quot;&gt;the OpenJDK project site&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-5105887&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OpenJDK项目站点&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上对此错误/功能进行&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有趣的讨论&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ce7e6c77f8519fa3381d832c4b9d28a685bb49d9" translate="yes" xml:space="preserve">
          <source>Therefore the purpose is to check that what comes in is what you need.</source>
          <target state="translated">因此,目的是为了检查进来的东西是否是自己需要的。</target>
        </trans-unit>
        <trans-unit id="6dd9da45c4b8301c4568251b7ce0a967dc4a0230" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;could&lt;/em&gt; also be done pre-Java 8 using anonymous classes but it's more cumbersome.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也可以使用匿名类做预先的Java 8，但它更繁琐。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2d3b2df6a48a3f46de1d6c16486e3ca57ccd589" translate="yes" xml:space="preserve">
          <source>This example works around the problem by having the code that calls the constructor (which does know the type) pass a parameter telling the class the required type.</source>
          <target state="translated">这个例子可以通过让调用构造函数的代码(它确实知道类型)传递一个参数告诉类所需的类型来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="43333a72fe134b46dd30df8830d3288a761c204c" translate="yes" xml:space="preserve">
          <source>This is covered in Chapter 5 (Generics) of &lt;a href=&quot;http://java.sun.com/docs/books/effective/&quot;&gt;Effective Java, 2nd Edition&lt;/a&gt;, item 25...&lt;strong&gt;Prefer lists to arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是覆盖在第5章（泛型）&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://java.sun.com/docs/books/effective/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有效的Java，第二版&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，第25项...... &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不想名单阵列&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="933c14cc80d735c250d51af9a1bde0fa8cd25999" translate="yes" xml:space="preserve">
          <source>This is one of the suggested ways of implementing a generic collection in &lt;em&gt;Effective Java; Item 26&lt;/em&gt;.  No type errors, no need to cast the array repeatedly.  &lt;em&gt;However&lt;/em&gt; this triggers a warning because it is potentially dangerous, and should be used with caution.  As detailed in the comments, this &lt;code&gt;Object[]&lt;/code&gt; is now masquerading as our &lt;code&gt;E[]&lt;/code&gt; type, and can cause unexpected errors or &lt;code&gt;ClassCastException&lt;/code&gt;s if used unsafely.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是在&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有效Java&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中实现通用集合的建议方法之一&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/em&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;项目26&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有类型错误，无需重复转换数组。 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这会触发警告，因为它有潜在危险，应谨慎使用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如评论中所述，此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在伪装成我们的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;E[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用不安全&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可能会导致意外错误或&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassCastException&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bda17a7647c74183d1eefdb4c2c6bf3be6b8b220" translate="yes" xml:space="preserve">
          <source>This is the only answer that is type safe</source>
          <target state="translated">这是唯一一个安全的答案</target>
        </trans-unit>
        <trans-unit id="741e75a81db3271934733f789fa51f6bcde49c40" translate="yes" xml:space="preserve">
          <source>This style is a bit ugly but it can sometimes be the least bad solution to creating generic types that do need to know their component type at runtime for whatever reason (creating arrays, or creating instances of their component type, etc.).</source>
          <target state="translated">这种风格有点难看,但有时它可以成为最不坏的解决方案,因为无论出于什么原因(创建数组,或创建其组件类型的实例等),在运行时确实需要知道它们的组件类型。</target>
        </trans-unit>
        <trans-unit id="a47cffcbb04f0115e80ce033a233ed23df9c8a3b" translate="yes" xml:space="preserve">
          <source>This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.</source>
          <target state="translated">这就意味着,你可以在构造函数中创建一个适当类型的数组对象,这意味着你存储在集合中的对象的类型在被添加到集合中的时候就会被检查其类型。</target>
        </trans-unit>
        <trans-unit id="ba545919b65dd2875da03ab1b8f0d38742918061" translate="yes" xml:space="preserve">
          <source>This way you get an array of type K (if the item only has the value) or any generic type you want defined in the class Item.</source>
          <target state="translated">这样,你就可以得到一个类型为K的数组(如果项只有值的话)或任何你想在类Item中定义的通用类型。</target>
        </trans-unit>
        <trans-unit id="511195dd067dcc78bdd746ae8e4777ea678a7035" translate="yes" xml:space="preserve">
          <source>Though obviously this isn't as versatile as using the createArray code.</source>
          <target state="translated">虽然这显然不如使用creativeArray代码那样通用。</target>
        </trans-unit>
        <trans-unit id="0162bf370cdc88793a8cc2021a7abf97d8529b8a" translate="yes" xml:space="preserve">
          <source>To extend to more dimensions, just add &lt;code&gt;[]&lt;/code&gt;'s and dimension parameters to &lt;code&gt;newInstance()&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt; is a type parameter, &lt;code&gt;cls&lt;/code&gt; is a &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;d1&lt;/code&gt; through &lt;code&gt;d5&lt;/code&gt; are integers):</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要扩展更多维度，只需将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和维度参数添加到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;newInstance()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是类型参数，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;d5&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是整数）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fdc50a4d64557edca2af0f0fbe424262769abed4" translate="yes" xml:space="preserve">
          <source>To get from the array you should call the array[i].variable like so:</source>
          <target state="translated">要从数组中获取,你应该像这样调用数组[i].变量。</target>
        </trans-unit>
        <trans-unit id="c063fb3fefa3d747cc629d31df8d84bd7676161f" translate="yes" xml:space="preserve">
          <source>What about this solution?</source>
          <target state="translated">那么这个方案呢?</target>
        </trans-unit>
        <trans-unit id="ee3f046aa5ffc4a045cd5a72a236056a96b84282" translate="yes" xml:space="preserve">
          <source>What you return is what the consumer needs.</source>
          <target state="translated">你所回报的,就是消费者的需求。</target>
        </trans-unit>
        <trans-unit id="74b00b76fb41e4de11fa5cad2aad98c166bbc7e8" translate="yes" xml:space="preserve">
          <source>Worth mentioning that wherever possible, you'll have a much happier time working with &lt;code&gt;List&lt;/code&gt;s rather than arrays if you're using generics.  Certainly sometimes you don't have a choice, but using the collections framework is far more robust.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值得一提的是，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用泛型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，那么在任何可能的情况下，与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一起工作的时间将更快乐&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当然，有时您别无选择，但是使用collections框架要健壮得多。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc5e54f4c9f2681608006b5b631799b3d6de7e32" translate="yes" xml:space="preserve">
          <source>You can do this:</source>
          <target state="translated">你可以这样做。</target>
        </trans-unit>
        <trans-unit id="16487d3dc196a0b2dabc12b795d3bbaf54bd376e" translate="yes" xml:space="preserve">
          <source>You can expose people in the class PersonList thru a getter. The line below will give you an array, that has a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; in every element. In other words array of &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以通过getter公开PersonList类中的人员。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下面的行将为您提供一个数组，该数组的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每个元素&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中都有一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;换句话说，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数组&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="84f8fc1632adc492daf66d87b08e5e3a1d7bf308" translate="yes" xml:space="preserve">
          <source>You could create an Object array and cast it to E everywhere. Yeah, it's not very clean way to do it but it should at least work.</source>
          <target state="translated">你可以创建一个对象数组,然后把它投到E处。是的,这不是一个很干净的方法,但至少应该是可行的。</target>
        </trans-unit>
        <trans-unit id="9942ed1ec2a651d493dd301971dd1a7eae9c5da2" translate="yes" xml:space="preserve">
          <source>You could use a cast:</source>
          <target state="translated">你可以用一个石膏。</target>
        </trans-unit>
        <trans-unit id="bad104ef691f603008fd690d83c722a18555e4fc" translate="yes" xml:space="preserve">
          <source>You do not need to pass the Class argument to the constructor.
Try this.</source>
          <target state="translated">你不需要将Class参数传递给构造函数。试试这个。</target>
        </trans-unit>
        <trans-unit id="2f4831edb7ac05f03bc0826b777c23085688511b" translate="yes" xml:space="preserve">
          <source>Your code will work, although it will generate an unchecked warning (which you could suppress with the following annotation:</source>
          <target state="translated">你的代码将工作,尽管它将产生一个未选中的警告(你可以用下面的注解来抑制。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="5f8c4995fba3a45dcd60d1948211c803b4c2d015" translate="yes" xml:space="preserve">
          <source>and the constructor now knows (at runtime) what the component type is and can use that information to construct the array through the reflection API.</source>
          <target state="translated">和构造函数现在知道(在运行时)组件类型是什么,并可以通过反射API使用该信息来构造数组。</target>
        </trans-unit>
        <trans-unit id="4d8a5b906deca90a251605c0f258b166f90b0b58" translate="yes" xml:space="preserve">
          <source>and then in your array class just have it start like so:</source>
          <target state="translated">然后在你的数组类中,让它像这样开始。</target>
        </trans-unit>
        <trans-unit id="2b12cc81f6a4d00eece3e0f6ae508cc8b4c32f59" translate="yes" xml:space="preserve">
          <source>for array initiating where &lt;strong&gt;Array.newInstance(class of array, size of array)&lt;/strong&gt;. Class can be both primitive (int.class) and object (Integer.class).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于数组初始化，其中&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Array.newInstance（array的类，array的大小）&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类可以是基本类型（int.class）和对象（Integer.class）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="13b657f1bfb3dcf5a2120341e08c0996b3657ace" translate="yes" xml:space="preserve">
          <source>in this case you use a java.lang.reflect.Array.newInstance to create the array, and it will not be an Object[], but a real T[].
You should not worry of it not being final, since it is managed inside your class.
Note that you need a non null object on the push() to be able to get the type to use, so I added a check on the data you push and throw an exception there.</source>
          <target state="translated">在这种情况下,你使用java.lang.reflection.Array.newInstance来创建数组,它将不是一个Object[],而是一个真正的T[]。你不用担心它不是最终的,因为它是在你的类中管理的。注意,在push()中需要一个非null对象才能得到要使用的类型,所以我在推送的数据上添加了一个检查,并在那里抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="d575e92f6e78dfc9ee7b6d9f6680fd8e354625d8" translate="yes" xml:space="preserve">
          <source>result:</source>
          <target state="translated">result:</target>
        </trans-unit>
        <trans-unit id="d0431ed373bfd98aaa10ea4140729e6d20c83920" translate="yes" xml:space="preserve">
          <source>starting a &lt;code&gt;new Generic Invoker[]&lt;/code&gt; will cause an issue with unchecked but there shouldn't actually be any issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;启动&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Generic Invoker[]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会导致未经检查的问题，但实际上应该没有任何问题。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="10eab4850ec6f4bb16c0a5e5d691b70c53338706" translate="yes" xml:space="preserve">
          <source>try this.</source>
          <target state="translated">试试这个。</target>
        </trans-unit>
        <trans-unit id="1a7c779c62a097b358907b5e85dd56db377c8b60" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;SIZE&lt;/code&gt; is a constant and &lt;code&gt;T&lt;/code&gt; is a type identifier</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;SIZE&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是常数，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是类型标识符&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e8ea2a26fb17636f2877de462b56c1020c26ddd8" translate="yes" xml:space="preserve">
          <source>where Item is a class I defined containing the member:</source>
          <target state="translated">其中Item是定义了包含成员的类I。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
