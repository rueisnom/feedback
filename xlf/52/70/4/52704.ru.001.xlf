<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/52704">
    <body>
      <group id="52704">
        <trans-unit id="fed9ac100b0f08b31a7bd88c0c53e1f0ce411dc3" translate="yes" xml:space="preserve">
          <source>-d Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is
  not removed by default. Use -f option twice if you really want to
  remove such a directory.</source>
          <target state="translated">-d Удалите неисправленные каталоги в дополнение к неисправленным файлам.Если неотслеживаемый каталог управляется другим репозиторием Git'а,то по умолчанию он не удаляется.Используйте опцию -f дважды,если вы действительно хотите удалить такой каталог.</target>
        </trans-unit>
        <trans-unit id="c0689b1195a2d2494831311528c78cbd2c81d25f" translate="yes" xml:space="preserve">
          <source>-f
  --force If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or -i.</source>
          <target state="translated">-f --force Если переменная конфигурации Git'а clean.requireForce не установлена в false,git clean откажется запускаться,если не заданы -f,-n или -i.</target>
        </trans-unit>
        <trans-unit id="afc2d1dacec6bf8a41b596c662443a54f59b539e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;&lt;code&gt;git clean&lt;/code&gt;&lt;/a&gt; removes all untracked files (&lt;strong&gt;warning&lt;/strong&gt;: while it won't delete ignored files mentioned directly in .gitignore, &lt;strong&gt;it may delete ignored files residing in folders&lt;/strong&gt;) and &lt;code&gt;git checkout&lt;/code&gt; clears all unstaged changes.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt; &lt;code&gt;git clean&lt;/code&gt; &lt;/a&gt; удаляет все неотслеживаемые файлы ( &lt;strong&gt;предупреждение&lt;/strong&gt; : хотя он не удаляет проигнорированные файлы, упомянутые непосредственно в .gitignore, &lt;strong&gt;он может удалять игнорируемые файлы, находящиеся в папках&lt;/strong&gt; ), а &lt;code&gt;git checkout&lt;/code&gt; удаляет все неотмеченные изменения.</target>
        </trans-unit>
        <trans-unit id="2d7a7ed51e610e0e5e84ca28c30ed03480f47b5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; here to remove &lt;a href=&quot;https://git-scm.com/docs/git-checkout#_argument_disambiguation&quot;&gt;argument ambiguation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; здесь, чтобы убрать &lt;a href=&quot;https://git-scm.com/docs/git-checkout#_argument_disambiguation&quot;&gt;аргумент неоднозначности&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="72799af98b1f5308f3529726c1792cf61e182c2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt;: Remove untracked directories in addition to untracked files</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; : удалить неотслеживаемые каталоги в дополнение к неотслеживаемым файлам</target>
        </trans-unit>
        <trans-unit id="53f62437a5af272cdc0c0f1087ed0fd5693a62f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt;: Force (might be not necessary depending on  &lt;code&gt;clean.requireForce&lt;/code&gt; setting)</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; : Сила (может не требоваться в зависимости от настройки &lt;code&gt;clean.requireForce&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a716245a2809abce91a9d776dbbfc112b617201a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add . -A&lt;/code&gt; instead of &lt;code&gt;git add .&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add . -A&lt;/code&gt; -А вместо &lt;code&gt;git add .&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb74c3f26ce1eb8d8c4c079f858137216a815cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man git-checkout&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;man git-checkout&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="94723bfd82f0ae0caf628ef46e610c3eec39a5cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Be very careful with this later command however as you might discard files you did not intend to get rid of.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Будьте очень осторожны с этой более поздней командой, поскольку вы можете отбросить файлы, от которых вы не собираетесь избавляться.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ddd1868251030fa30ddb023ff889dd017606c761" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2019 update:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2019 обновление:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d583721fdee9eda617809d6d5f0932df533809dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Description&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27d9508a3b74080e0b435baa8bf80d7d81a6bc0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I was able to fix the problem by deleting my forked repository and all local repositories, and reforking. This alone was not enough; upstream had to rename the files in question to new filenames.&lt;/strong&gt; As long as you don't have any uncommited work, no wikis, and no issues that diverge from the upstream repository, you should be just fine. Upstream may not be very happy with you, to say the least. As for my problem, it is undoubtedly a user error as I'm not that proficient with git, but the fact that it is far from easy to fix points to an issue with git as well.</source>
          <target state="translated">&lt;strong&gt;Я смог решить эту проблему, удалив свой разветвленный репозиторий и все локальные репозитории, а затем повторив его.&lt;/strong&gt; &lt;strong&gt;Одного этого было недостаточно;&lt;/strong&gt; &lt;strong&gt;апстрим должен был переименовать файлы в новые имена файлов.&lt;/strong&gt; До тех пор, пока у вас нет ни одной незарегистрированной работы, ни вики, ни проблем, которые расходятся с вышестоящим хранилищем, все будет в порядке. Upstream может быть не очень доволен вами, если не сказать больше. Что касается моей проблемы, то это, несомненно, ошибка пользователя, так как я не настолько опытен в git, но тот факт, что исправить проблему с git также нелегко.</target>
        </trans-unit>
        <trans-unit id="1884cdfa60ba48980b662b025f75e0ba67f99cbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Options&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Options&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a648cd0606cca5d79438d4f156e8c36af2fbb7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0949b40739737db3aca0e50aed86aa96b9b8a4f" translate="yes" xml:space="preserve">
          <source>A handful of options are available for more nuanced stashing; see the documentation.</source>
          <target state="translated">Имеется несколько вариантов для более нюансированного хранения;см.документацию.</target>
        </trans-unit>
        <trans-unit id="b35af8cb225549965ddc586ff74ea587c627c5dc" translate="yes" xml:space="preserve">
          <source>A handful of other options are available for a quicker execution; see the documentation.</source>
          <target state="translated">Для более быстрого выполнения имеется несколько других опций;см.документацию.</target>
        </trans-unit>
        <trans-unit id="bdb3d9d11666a557cb5dac66319c6a3bdc844f3e" translate="yes" xml:space="preserve">
          <source>A keen eye will note that these files have dopplegangers that are a single letter in case off. Somehow, and I have no idea what led me down this path to start with (as I was not working with these files myself from the upstream repo), I had switched these files. Try the many solutions listed on this page (and other pages) did not seem to help.</source>
          <target state="translated">Увлеченный глаз заметит,что в этих файлах есть двойники,которые в случае отключения являются одной буквой.Каким-то образом,и я понятия не имею,что привело меня по этому пути (так как я сам не работал с этими файлами из upstream repo),я поменял эти файлы.Попробуйте многие решения,перечисленные на этой странице (и других страницах),похоже,не помогли.</target>
        </trans-unit>
        <trans-unit id="b39d5ddf0fc59abdea98c912f732b3c25809600a" translate="yes" xml:space="preserve">
          <source>After that, you can drop that stash with a &lt;code&gt;git stash drop&lt;/code&gt; command if you like.</source>
          <target state="translated">После этого вы можете удалить этот тайник командой &lt;code&gt;git stash drop&lt;/code&gt; , если хотите.</target>
        </trans-unit>
        <trans-unit id="98e0506021752e4d376c394e1673d4fed4834a98" translate="yes" xml:space="preserve">
          <source>All changes will be moved to Git's Stash, for possible later access.</source>
          <target state="translated">Все изменения будут перенесены в Git's Stash,для возможного последующего доступа.</target>
        </trans-unit>
        <trans-unit id="2dbf857966032bb2e5ee10d185df2f47b79c5d45" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;git checkout .&lt;/code&gt; needs to be done in the root of the repo.</source>
          <target state="translated">Кроме того, &lt;code&gt;git checkout .&lt;/code&gt; нужно сделать в корне репо.</target>
        </trans-unit>
        <trans-unit id="d4a3db2fca5b6d490e0d0666be31df78f925bfbd" translate="yes" xml:space="preserve">
          <source>And to remove all unstaged changes in the current repository:</source>
          <target state="translated">И удалить все нестационарные изменения в текущем репозитории:</target>
        </trans-unit>
        <trans-unit id="00bae78952a21817e9ff9b8f29e228f4b557b7a5" translate="yes" xml:space="preserve">
          <source>Another quicker way is:</source>
          <target state="translated">Еще один путь быстрее:</target>
        </trans-unit>
        <trans-unit id="629f09ca4ad9b66bb50fa2c4dcda91208cf09d47" translate="yes" xml:space="preserve">
          <source>Another way to get rid of new files that is more specific than git clean -df (it will allow you to get rid of some files not necessarily all), is to add the new files to the index first, then stash, then drop the stash.</source>
          <target state="translated">Другой способ избавиться от новых файлов,более специфичный,чем git clean -df (он позволит избавиться от некоторых файлов не обязательно от всех),-это сначала добавить новые файлы в индекс,затем спрятать,а потом бросить спрятать.</target>
        </trans-unit>
        <trans-unit id="3ab852661ea78d7491e0b8d339b188a5a85861c6" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;git checkout -- .&lt;/code&gt;, this will only discard changes to files tracked by Git and will not discard any new untracked files. If you want to discard any unstaged changes, including new untracked files, you could run an additional:</source>
          <target state="translated">Как с &lt;code&gt;git checkout -- .&lt;/code&gt; это только отменит изменения в файлах, отслеживаемых Git, и не отменит новые неотслеживаемые файлы. Если вы хотите отменить любые неотмеченные изменения, включая новые неотслеживаемые файлы, вы можете запустить дополнительные:</target>
        </trans-unit>
        <trans-unit id="0bb06bd83e97a5112661b65ead766c7aefb3ca6f" translate="yes" xml:space="preserve">
          <source>As you type git status, 
&lt;strong&gt;(use &quot;git checkout -- ...&quot; to discard changes in working directory)&lt;/strong&gt;
is shown.</source>
          <target state="translated">По мере ввода состояния git &lt;strong&gt;(используйте &amp;laquo;git checkout - ...&amp;raquo; для отмены изменений в рабочем каталоге)&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="9e4b2a87fb0c352693a1bd2db71c132ee44b38d5" translate="yes" xml:space="preserve">
          <source>Clean and discard changes and untracked files in working tree</source>
          <target state="translated">Очищайте и отбрасывайте изменения и неотслеживаемые файлы в рабочем дереве</target>
        </trans-unit>
        <trans-unit id="42dcbc11ebcca8013128e188e07a667fd189817d" translate="yes" xml:space="preserve">
          <source>Cleans the working tree by recursively removing files that
  are not under version control, starting from the current directory.</source>
          <target state="translated">Очищает рабочее дерево,рекурсивно удаляя из текущего каталога файлы,не находящиеся под контролем версий.</target>
        </trans-unit>
        <trans-unit id="0854cfe68459fb9743ea87944a08ab9f2f41c3f2" translate="yes" xml:space="preserve">
          <source>Discard changes in a (list of) file(s) in working tree</source>
          <target state="translated">Отбрасывать изменения в (списке)файлов в рабочем дереве</target>
        </trans-unit>
        <trans-unit id="3703c5109b970db48fd2ad0fd5b85c35cce1361a" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the ignore rules from &lt;code&gt;.gitignore&lt;/code&gt; (per directory) and &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;, but do still use the ignore rules given with &lt;code&gt;-e&lt;/code&gt; options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with &lt;code&gt;git reset&lt;/code&gt;) to create a pristine working directory to test a clean build.</source>
          <target state="translated">Не используйте правила игнорирования из &lt;code&gt;.gitignore&lt;/code&gt; (для каждого каталога) и &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; , но все же используйте правила игнорирования, заданные с опциями &lt;code&gt;-e&lt;/code&gt; . Это позволяет удалить все неотслеживаемые файлы, включая продукты сборки. Это может быть использовано (возможно, в сочетании с &lt;code&gt;git reset&lt;/code&gt; ) для создания первичного рабочего каталога для тестирования чистой сборки.</target>
        </trans-unit>
        <trans-unit id="82021c36126c9d2972b261fbe6e9eed34c3be7aa" translate="yes" xml:space="preserve">
          <source>Done. Easy.</source>
          <target state="translated">Готово.Спокойно.</target>
        </trans-unit>
        <trans-unit id="1ad395b6696331a11075129d3a05a93a404bde8f" translate="yes" xml:space="preserve">
          <source>For a specific file use:</source>
          <target state="translated">Для конкретного использования файла:</target>
        </trans-unit>
        <trans-unit id="30d953d36f4d87f6c54e1ffe33fd2c7b4568ac7f" translate="yes" xml:space="preserve">
          <source>For all unstaged files in current working directory use:</source>
          <target state="translated">Для всех нестабильных файлов в текущей рабочей директории использовать:</target>
        </trans-unit>
        <trans-unit id="2fc195e08169ea5ea29dab03ebd736643c24c496" translate="yes" xml:space="preserve">
          <source>Happened to me recently</source>
          <target state="translated">Случилось со мной недавно</target>
        </trans-unit>
        <trans-unit id="864d442672a2358879583b94bf582ea97a8424c9" translate="yes" xml:space="preserve">
          <source>How do I discard changes in my working copy that are not in the index?</source>
          <target state="translated">Как отбрасывать изменения в моей рабочей копии,которые не содержатся в индексе?</target>
        </trans-unit>
        <trans-unit id="1fce62b7a2652a934ca474f0c5c63bb8b3b6e6c2" translate="yes" xml:space="preserve">
          <source>How do I discard unstaged changes in Git</source>
          <target state="translated">Как отбросить нестационарные изменения в Git.</target>
        </trans-unit>
        <trans-unit id="eb60139211fc9388fb2f815a246c52e21943c2e4" translate="yes" xml:space="preserve">
          <source>I had a similar problem, perhaps not identical, and I'm sad to say my solution is not ideal, but it is ultimately effective.</source>
          <target state="translated">У меня была похожая проблема,возможно,не идентичная,и мне грустно говорить,что мое решение не идеально,но в конечном счете оно эффективно.</target>
        </trans-unit>
        <trans-unit id="ee7ba19ebd0319622aee0d033dc1de473768df0f" translate="yes" xml:space="preserve">
          <source>I had a weird situation where a file is always unstaged, this helps me to resolve.</source>
          <target state="translated">У меня была странная ситуация,когда файл всегда нестабилен,это помогает мне разрешить.</target>
        </trans-unit>
        <trans-unit id="ad84e904a2bcf085535faf5356692e18f46fe974" translate="yes" xml:space="preserve">
          <source>I really found this article helpful for explaining when to use what command: &lt;a href=&quot;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&quot;&gt;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&lt;/a&gt;</source>
          <target state="translated">Я действительно нашел эту статью полезной для объяснения, когда использовать какую команду: &lt;a href=&quot;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&quot;&gt;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5e6cde860870936f1e6000fe5438f36756de4bc6" translate="yes" xml:space="preserve">
          <source>I suspect that using &lt;code&gt;git stash&lt;/code&gt; is a popular choice since it's a little less dangerous.  You can always go back to it if you accidently blow too much away when using git reset.  Reset is recursive by default.</source>
          <target state="translated">Я подозреваю, что использование &lt;code&gt;git stash&lt;/code&gt; является популярным выбором, поскольку он немного менее опасен. Вы всегда можете вернуться к нему, если случайно унесете слишком много, используя Git Reset. Сброс является рекурсивным по умолчанию.</target>
        </trans-unit>
        <trans-unit id="3587b4e2335f7d08a6418b42308fa22c6a17d065" translate="yes" xml:space="preserve">
          <source>I think there is 1 more change (don't know why this worked for me before):</source>
          <target state="translated">Я думаю,что есть еще одно изменение (не знаю,почему это работало на меня раньше):</target>
        </trans-unit>
        <trans-unit id="8335e2269ae8550747eb62a058eaf6b8da22da46" translate="yes" xml:space="preserve">
          <source>I use the next alias to discard changes.</source>
          <target state="translated">Я использую следующий псевдоним,чтобы отказаться от изменений.</target>
        </trans-unit>
        <trans-unit id="3dd312407e6bafcf3506f4027cc72a8a6476cbcd" translate="yes" xml:space="preserve">
          <source>I would often have git status messages like this (involving at least 2/4 files):</source>
          <target state="translated">У меня часто бывают такие сообщения о состоянии git'а (с участием как минимум 24 файлов):</target>
        </trans-unit>
        <trans-unit id="8816b09a32358ab8c2c7fac6aad970834a86eb5e" translate="yes" xml:space="preserve">
          <source>If any optional ... arguments are given, only those paths are
  affected.</source>
          <target state="translated">Если даются необязательные ...аргументы,то затрагиваются только эти пути.</target>
        </trans-unit>
        <trans-unit id="529d47024d50b097a96e1e2122d526c7f5d4d692" translate="yes" xml:space="preserve">
          <source>If the Git configuration variable &lt;code&gt;clean.requireForce&lt;/code&gt; is not set to &lt;code&gt;false&lt;/code&gt;, Git clean will refuse to delete files or directories unless given &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;, or &lt;code&gt;-i&lt;/code&gt;. Git will refuse to delete directories within the &lt;code&gt;.git&lt;/code&gt; subdirectory or file, unless a second &lt;code&gt;-f&lt;/code&gt; is given.</source>
          <target state="translated">Если для переменной конфигурации Git &lt;code&gt;clean.requireForce&lt;/code&gt; не задано значение &lt;code&gt;false&lt;/code&gt; , Git clean откажется от удаления файлов или каталогов, если не указано &lt;code&gt;-f&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; или &lt;code&gt;-i&lt;/code&gt; . Git откажется от удаления каталогов в подкаталоге или файле &lt;code&gt;.git&lt;/code&gt; , если не указан второй &lt;code&gt;-f&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a876d321713c260c6efea388116771a1af8f9749" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;really&lt;/em&gt; care about your stash stack then you can follow with &lt;code&gt;git stash drop&lt;/code&gt;. But at that point you're better off using (from Mariusz Nowak):</source>
          <target state="translated">Если вам &lt;em&gt;действительно&lt;/em&gt; небезразличен ваш стек, тогда вы можете выполнить &lt;code&gt;git stash drop&lt;/code&gt; . Но в этот момент вам лучше использовать (от Мариуша Новака):</target>
        </trans-unit>
        <trans-unit id="6b1ae5b423635758e0a25c5cc6760e00e87b9176" translate="yes" xml:space="preserve">
          <source>If you aren't interested in keeping the unstaged changes (especially if the staged changes are new files), I found this handy:</source>
          <target state="translated">Если вы не заинтересованы в сохранении нестабильных изменений (особенно если инсценированные изменения-это новые файлы),я нашел это удобным:</target>
        </trans-unit>
        <trans-unit id="dd23bb8ae4a841004bc72ddbfb3a7f79fc1cfbac" translate="yes" xml:space="preserve">
          <source>If you have staged the file, then use git reset.  Reset changes the index to match a commit.</source>
          <target state="translated">Если вы сделали инсценировку файла,воспользуйтесь git-сбросом.Сброс изменяет индекс в соответствии с фиксацией.</target>
        </trans-unit>
        <trans-unit id="3bd1003c321636caa648ef432ab3c21b2f41bed5" translate="yes" xml:space="preserve">
          <source>If you haven't staged the file, then you use &lt;code&gt;git checkout&lt;/code&gt;.  Checkout &quot;updates files in the working tree to match the version in the index&quot;.  If the files have not been staged (aka added to the index)... this command will essentially revert the files to what your last commit was.</source>
          <target state="translated">Если вы не создали файл, вы используете &lt;code&gt;git checkout&lt;/code&gt; . Оформить заказ &quot;обновляет файлы в рабочем дереве в соответствии с версией в индексе&quot;. Если файлы не были размещены (или добавлены в индекс) ... эта команда по существу вернет файлы к тому, что было вашим последним коммитом.</target>
        </trans-unit>
        <trans-unit id="f8d19102a6786fdcfae490d52ca3fc8f40c3495a" translate="yes" xml:space="preserve">
          <source>If you merely wish &lt;strong&gt;to remove changes to existing files&lt;/strong&gt;, use &lt;code&gt;checkout&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;documented here&lt;/a&gt;).</source>
          <target state="translated">Если вы просто хотите &lt;strong&gt;удалить изменения в существующих файлах&lt;/strong&gt; , используйте &lt;code&gt;checkout&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;документировано здесь&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="79cad392748bde549e75bc03a7473563f1e11676" translate="yes" xml:space="preserve">
          <source>If you want &lt;strong&gt;to remove files added&lt;/strong&gt; since your last commit, use &lt;code&gt;clean&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;documented here&lt;/a&gt;):</source>
          <target state="translated">Если вы хотите &lt;strong&gt;удалить файлы, добавленные&lt;/strong&gt; с момента вашей последней фиксации, используйте &lt;code&gt;clean&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;задокументировано здесь&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="94bef346d72e50bfd317274138d0f36470fc38a2" translate="yes" xml:space="preserve">
          <source>If you wish &lt;strong&gt;to move changes to a holding space for later access&lt;/strong&gt;, use &lt;code&gt;stash&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-stash&quot;&gt;documented here&lt;/a&gt;):</source>
          <target state="translated">Если вы хотите &lt;strong&gt;переместить изменения в область хранения для последующего доступа&lt;/strong&gt; , используйте &lt;code&gt;stash&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-stash&quot;&gt;задокументировано здесь&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="c8f0dcd22582ea400212c4bf2bf1ecb8196f22a0" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;git status&lt;/code&gt;, now Git recommends using this command instead of &lt;code&gt;git checkout&lt;/code&gt; as it used to.</source>
          <target state="translated">В &lt;code&gt;git status&lt;/code&gt; Git рекомендует использовать эту команду вместо &lt;code&gt;git checkout&lt;/code&gt; , как это было раньше.</target>
        </trans-unit>
        <trans-unit id="6a66d8064b895089a51d39f45d330836cf5cf130" translate="yes" xml:space="preserve">
          <source>In git command, stashing of untracked files is achieved by using:</source>
          <target state="translated">В команде git'а при помощи этой команды достигается сохранение неотслеживаемых файлов:</target>
        </trans-unit>
        <trans-unit id="4f9dfa38b31d7d270d8aa454fe54f373205f54e8" translate="yes" xml:space="preserve">
          <source>In my opinion,</source>
          <target state="translated">По моему мнению,</target>
        </trans-unit>
        <trans-unit id="a710bcb2db12bb6ea9b79bfea29fc08590a3fc1e" translate="yes" xml:space="preserve">
          <source>Instead of discarding changes, I reset my remote to the origin. Note - this method is to completely restore your folder to that of the repo.</source>
          <target state="translated">Вместо того,чтобы отменить изменения,я перезагружаю свой пульт управления в исходное положение.Примечание-этот метод заключается в полном восстановлении вашей папки в папку репо.</target>
        </trans-unit>
        <trans-unit id="e4ce5f1cd096b70edf7ccafdff1608da7b9a35c2" translate="yes" xml:space="preserve">
          <source>It seems like the complete solution is:</source>
          <target state="translated">Похоже,полное решение:</target>
        </trans-unit>
        <trans-unit id="19c8ae84a2a96946e0800bd4424233488d724cbe" translate="yes" xml:space="preserve">
          <source>It will remove all your local changes. You also can use later by saying</source>
          <target state="translated">Это удалит все ваши местные изменения.Вы также можете использовать позже,сказав</target>
        </trans-unit>
        <trans-unit id="098c5131b876d1833842c7915ad8820685fc825d" translate="yes" xml:space="preserve">
          <source>Just use:</source>
          <target state="translated">Просто используй:</target>
        </trans-unit>
        <trans-unit id="94314a06159d9c31a2ff55cd1415fe59ca943e2b" translate="yes" xml:space="preserve">
          <source>My favorite is</source>
          <target state="translated">Мой любимый</target>
        </trans-unit>
        <trans-unit id="c5c68720f904987895c38abb89689c82d8316808" translate="yes" xml:space="preserve">
          <source>NOTE: If you want to keep files not yet tracked, but not in GITIGNORE you may wish to skip this step, as it will Wipe these untracked files not found on your remote repository (thanks @XtrmJosh).</source>
          <target state="translated">ПРИМЕЧАНИЕ:Если вы хотите сохранить файлы,которые еще не отслеживаются,но не в GITIGNORE,вы можете пропустить этот шаг,так как он сотрет эти неотслеживаемые файлы,не найденные в вашем удаленном репозитории (спасибо @XtrmJosh).</target>
        </trans-unit>
        <trans-unit id="90f19de07eaa816f337291f8dbf8ed55cc13ebbe" translate="yes" xml:space="preserve">
          <source>No branch is specified, so it checks out the current branch.</source>
          <target state="translated">Ветка не указана,поэтому она проверяет текущую ветку.</target>
        </trans-unit>
        <trans-unit id="b9c6e3583ee2c594287b4a6fc73da8e7b11401d3" translate="yes" xml:space="preserve">
          <source>No matter what state your repo is in you can always reset to any previous commit:</source>
          <target state="translated">Независимо от того,в каком состоянии находится ваше репо,вы всегда можете сбросить его на любой предыдущий коммит:</target>
        </trans-unit>
        <trans-unit id="a4336fe427713d23c760add6d199455e6017811f" translate="yes" xml:space="preserve">
          <source>Nonetheless, I like &lt;code&gt;git stash -u&lt;/code&gt; the best because it &quot;discards&quot; all tracked and untracked changes in just &lt;em&gt;one command&lt;/em&gt;. Yet &lt;code&gt;git checkout -- .&lt;/code&gt; only discards tracked changes,
and &lt;code&gt;git clean -df&lt;/code&gt; only discards untracked changes... and typing both commands is &lt;em&gt;far&lt;/em&gt; too much work :)</source>
          <target state="translated">Тем не менее, мне больше всего нравится &lt;code&gt;git stash -u&lt;/code&gt; , потому что он &amp;laquo;отбрасывает&amp;raquo; все отслеженные и неотслеживаемые изменения всего &lt;em&gt;одной командой&lt;/em&gt; . Все же &lt;code&gt;git checkout -- .&lt;/code&gt; только отбрасывает отслеженные изменения, а &lt;code&gt;git clean -df&lt;/code&gt; только отбрасывает неотслеживаемые изменения ... и ввод обеих команд - слишком много работы :)</target>
        </trans-unit>
        <trans-unit id="396cec2961d1019f503136da105dd323f822741b" translate="yes" xml:space="preserve">
          <source>Normally, only files unknown to Git are removed, but if the -x option
  is specified, ignored files are also removed. This can, for example,
  be useful to remove all build products.</source>
          <target state="translated">Обычно удаляются только файлы,неизвестные Git'у,но если указана опция -x,то и игнорируемые файлы тоже удаляются.Это может быть полезно,например,для удаления всех сборочных продуктов.</target>
        </trans-unit>
        <trans-unit id="6b667358b3ffd2bdbf9e8690c38a516866fc3d10" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;git restore&lt;/code&gt;: as this is a new command, &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;its man page&lt;/a&gt; gives a warning:</source>
          <target state="translated">Примечание по &lt;code&gt;git restore&lt;/code&gt; : поскольку это новая команда, &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;ее страница&lt;/a&gt; руководства выдает предупреждение:</target>
        </trans-unit>
        <trans-unit id="971dcad694fa90c95d79cb3e35f8800172a46f99" translate="yes" xml:space="preserve">
          <source>Now is available in the next Github repo which contains a lot of aliases:</source>
          <target state="translated">Теперь доступно в следующем Github репо,которое содержит много псевдонимов:</target>
        </trans-unit>
        <trans-unit id="72e095f37cbb08d62af2ddc2eb1cb1d7393138c7" translate="yes" xml:space="preserve">
          <source>Or just a file:</source>
          <target state="translated">Или просто файл:</target>
        </trans-unit>
        <trans-unit id="4d0f3ef1dd38153720613b554c65d9bbcfc7d902" translate="yes" xml:space="preserve">
          <source>Otherwise, if you want to discard all changes and also the untracked files, I use a mix of checkout and clean:</source>
          <target state="translated">В противном случае,если вы хотите отказаться от всех изменений,а также от неотслеживаемых файлов,я использую смесь проверки и очистки:</target>
        </trans-unit>
        <trans-unit id="478b2510a9b32cfb4adf26e1a8d78520b35a469c" translate="yes" xml:space="preserve">
          <source>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use &lt;code&gt;-f&lt;/code&gt; option twice if you really want to remove such a directory.</source>
          <target state="translated">Удалите неотслеживаемые каталоги в дополнение к неотслеживаемым файлам. Если неотслеживаемый каталог управляется другим Git-репозиторием, по умолчанию он не удаляется. Используйте параметр &lt;code&gt;-f&lt;/code&gt; дважды, если вы действительно хотите удалить такой каталог.</target>
        </trans-unit>
        <trans-unit id="6d80714ab625f9250b860a48bb052401b69c068c" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;git help clean&lt;/code&gt; to see the manual</source>
          <target state="translated">Запустите &lt;code&gt;git help clean&lt;/code&gt; , чтобы увидеть руководство</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="5f08bd2d55361c1ba94df735ac5ccb3fa855221c" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/git/git/commit/f496b064fc1135e0dded7f93d85d72eb0b302c22&quot;&gt;July 2019&lt;/a&gt;, there has been a new command which does exactly this: &lt;code&gt;git restore&lt;/code&gt;.</source>
          <target state="translated">С &lt;a href=&quot;https://github.com/git/git/commit/f496b064fc1135e0dded7f93d85d72eb0b302c22&quot;&gt;июля 2019&lt;/a&gt; года появилась новая команда, которая делает именно это: &lt;code&gt;git restore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04acd8c1f0e76597bca9508038665bb9b88a4344" translate="yes" xml:space="preserve">
          <source>Since no answer suggests the exact option combination that I use, here it is:</source>
          <target state="translated">Так как ни один ответ не подсказывает точную комбинацию опций,которую я использую,вот она:</target>
        </trans-unit>
        <trans-unit id="b010ecc92659c76e1f93d2a5401f106185699a12" translate="yes" xml:space="preserve">
          <source>So I do this to make sure they don't sit there when I git reset (later - excludes gitignores on the Origin/branchname)</source>
          <target state="translated">Поэтому я делаю это,чтобы убедиться,что они не сидят там,когда я перезагружаю git (позже-исключает gitignores на Originbranchname).</target>
        </trans-unit>
        <trans-unit id="32b93eceaf5edd5bbbe16dce5b2ef08bf8c1641c" translate="yes" xml:space="preserve">
          <source>So it is possible that this answer might become outdated if the behaviour does change in the future. It might thus be wise to run a quick &lt;code&gt;man git-restore&lt;/code&gt; before using it.</source>
          <target state="translated">Таким образом, вполне возможно, что этот ответ может устареть, если поведение изменится в будущем. Таким образом, может быть целесообразно быстро запустить &lt;code&gt;man git-restore&lt;/code&gt; прежде чем использовать его.</target>
        </trans-unit>
        <trans-unit id="96d550362eff6a29040d66c0bc830c58b2c76f8c" translate="yes" xml:space="preserve">
          <source>So the use is simple as next:</source>
          <target state="translated">Так что использование простое,как следующее:</target>
        </trans-unit>
        <trans-unit id="16ec2b549f9cf7514b2409954745896f69ab7d7e" translate="yes" xml:space="preserve">
          <source>So, in order to restore the files matching a pathspec (getting rid of their unstaged changes), you would do:</source>
          <target state="translated">Итак,чтобы восстановить файлы,соответствующие pathspec (избавиться от их нестационарных изменений),вы должны сделать это:</target>
        </trans-unit>
        <trans-unit id="7e6294c015403474dc533fce25008ae9e9ef152a" translate="yes" xml:space="preserve">
          <source>Take a look at the article above for further advice.</source>
          <target state="translated">Посмотрите на статью выше для получения дальнейших советов.</target>
        </trans-unit>
        <trans-unit id="8c87610aaa7616e71adb720d209bde226e5b0bdf" translate="yes" xml:space="preserve">
          <source>That lets you selectively revert chunks.</source>
          <target state="translated">Это позволяет избирательно возвращать куски.</target>
        </trans-unit>
        <trans-unit id="a625cdf5db5e1eadfae9daa74b20d41adaf50ccf" translate="yes" xml:space="preserve">
          <source>That will put it back to square one. Just like RE-Cloning the branch, WHILE keeping all my gitignored files locally and in place.</source>
          <target state="translated">Это вернет все на круги своя.Точно так же,как и при клонировании ветки RE,все мои gitignored файлы будут сохранены локально и на месте.</target>
        </trans-unit>
        <trans-unit id="6b79228633a397f43b5ec158dc62bd7b541c62f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-i&lt;/code&gt; option initiates an interactive &lt;code&gt;clean&lt;/code&gt;, to prevent mistaken deletions.</source>
          <target state="translated">Опция &lt;code&gt;-i&lt;/code&gt; запускает интерактивную &lt;code&gt;clean&lt;/code&gt; , чтобы предотвратить ошибочные удаления.</target>
        </trans-unit>
        <trans-unit id="34a4059081536a4ba0807042845f6d37b9ed4564" translate="yes" xml:space="preserve">
          <source>The answer from Bilal Maqsood with &lt;code&gt;git clean&lt;/code&gt; also worked for me, but with the stash I have more control - if I do sth accidentally, I can still get my changes back</source>
          <target state="translated">Ответ от Bilal Maqsood с &lt;code&gt;git clean&lt;/code&gt; также работал для меня, но с тайником у меня больше контроля - если я делаю что-то случайно, я все равно могу вернуть свои изменения</target>
        </trans-unit>
        <trans-unit id="62345698e50d705132cfe6c077bc2d02c9628493" translate="yes" xml:space="preserve">
          <source>The double-hyphen (&lt;code&gt;--&lt;/code&gt;) tells Git that what follows should be taken as its second argument (path), that you skipped specification of a branch.</source>
          <target state="translated">Двойной дефис ( &lt;code&gt;--&lt;/code&gt; ) говорит Git, что последующее должно быть взято как его второй аргумент (путь), что вы пропустили спецификацию ветви.</target>
        </trans-unit>
        <trans-unit id="1909fa0ba14ff86f3491b939c47fed3b8449c198" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is by using this command:</source>
          <target state="translated">Самый простой способ сделать это-использовать эту команду:</target>
        </trans-unit>
        <trans-unit id="7e827872d90fac1fb3bc15c8233749d210363511" translate="yes" xml:space="preserve">
          <source>The period (&lt;code&gt;.&lt;/code&gt;) indicates all paths.</source>
          <target state="translated">Точка ( &lt;code&gt;.&lt;/code&gt; ) Указывает все пути.</target>
        </trans-unit>
        <trans-unit id="af0d1b4328276812686a9206c83d6172e0087443" translate="yes" xml:space="preserve">
          <source>Then I</source>
          <target state="translated">Тогда я</target>
        </trans-unit>
        <trans-unit id="33de23d10db20d49224f8ef3b6bfe6a9ced5e313" translate="yes" xml:space="preserve">
          <source>Then I reset to origin</source>
          <target state="translated">Затем я перезагружаю в происхождение</target>
        </trans-unit>
        <trans-unit id="76b16061fde005910f67c6e862f0d2f89d69be22" translate="yes" xml:space="preserve">
          <source>Then you can use it as next to discard all changes:</source>
          <target state="translated">Тогда вы можете использовать его,как следующий,чтобы отказаться от всех изменений:</target>
        </trans-unit>
        <trans-unit id="8a58f32e5d8df2105e56e8f81f5a86e77ad4892f" translate="yes" xml:space="preserve">
          <source>There are a couple different cases:</source>
          <target state="translated">Есть пара разных дел:</target>
        </trans-unit>
        <trans-unit id="03c3d16189699026ec8beb0dd2eed7cb1d8710f3" translate="yes" xml:space="preserve">
          <source>This checks out the current index for the current directory, throwing away all changes in files from the current directory downwards.</source>
          <target state="translated">При этом проверяется текущий индекс для текущей директории,выбрасывая все изменения в файлах из текущей директории вниз.</target>
        </trans-unit>
        <trans-unit id="0e4a34fc85d235e5640196e9fff5dfa6f28d404f" translate="yes" xml:space="preserve">
          <source>This command is experimental. The behavior may change.</source>
          <target state="translated">Эта команда экспериментальная.Поведение может измениться.</target>
        </trans-unit>
        <trans-unit id="56c33c8ae8b1c644ac03d5c863fdcb0c359f2c14" translate="yes" xml:space="preserve">
          <source>This command is used to discard changes in working directory -</source>
          <target state="translated">Данная команда используется для отмены изменений в рабочей директории -</target>
        </trans-unit>
        <trans-unit id="5cc465bdc8bdd458dd144f1d0a2b1ddcbfd3ad74" translate="yes" xml:space="preserve">
          <source>This is the online help text for the used &lt;code&gt;git clean&lt;/code&gt; options:</source>
          <target state="translated">Это текст интерактивной справки по используемым опциям &lt;code&gt;git clean&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="80fa3a5b6d70e6761f8985fdd6e2ecdeb0b34882" translate="yes" xml:space="preserve">
          <source>This technique is useful when, for some reason, you can't easily delete all of the untracked files by some ordinary mechanism (like rm).</source>
          <target state="translated">Эта техника полезна,когда по какой-то причине невозможно легко удалить все неотслеживаемые файлы каким-то обычным механизмом (например,rm).</target>
        </trans-unit>
        <trans-unit id="1f8124b5c16b5fd081e0614cc45f57a3149cacb1" translate="yes" xml:space="preserve">
          <source>This will discard all changes which were made after that commit.</source>
          <target state="translated">Это отбросит все изменения,которые были сделаны после этого коммита.</target>
        </trans-unit>
        <trans-unit id="48ef74511807e4984a8be1b2ff03f8014e243c25" translate="yes" xml:space="preserve">
          <source>This works even in directories that are; outside of normal git permissions.</source>
          <target state="translated">Это работает даже в каталогах,которые находятся за пределами обычных разрешений git'а.</target>
        </trans-unit>
        <trans-unit id="840522ea5495652351bf360bd472b3cec13403d1" translate="yes" xml:space="preserve">
          <source>To do a permanent discard:
&lt;code&gt;git reset --hard&lt;/code&gt;</source>
          <target state="translated">Чтобы сделать постоянный &lt;code&gt;git reset --hard&lt;/code&gt; : git reset --hard</target>
        </trans-unit>
        <trans-unit id="9df261d84d1342fec04eee973e46058211d6ac08" translate="yes" xml:space="preserve">
          <source>To save changes for later:
&lt;code&gt;git stash&lt;/code&gt;</source>
          <target state="translated">Чтобы сохранить изменения на потом: &lt;code&gt;git stash&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb758e77878dc87ac9bc038e9cf5cd33895820bc" translate="yes" xml:space="preserve">
          <source>Tried all the solutions above but still couldn't get rid of new, unstaged files.</source>
          <target state="translated">Пробовали все вышеперечисленные решения,но так и не смогли избавиться от новых,нестабильных файлов.</target>
        </trans-unit>
        <trans-unit id="34ac0e36e8b6f6dc6c81473bc49f174e7c451fef" translate="yes" xml:space="preserve">
          <source>Updated per user comment below:
Variation to reset the to whatever current branch the user is on.</source>
          <target state="translated">Обновлено для каждого пользовательского комментария ниже:Вариант сброса в любую текущую ветку,в которой находится пользователь.</target>
        </trans-unit>
        <trans-unit id="0fae9274cadaf5a62b8d077660a2fc6bd0ccfbd1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git clean -f&lt;/code&gt; to remove those new files - &lt;em&gt;with caution though!&lt;/em&gt; Note the force option.</source>
          <target state="translated">Используйте &lt;code&gt;git clean -f&lt;/code&gt; , чтобы удалить эти новые файлы, но &lt;em&gt;с осторожностью!&lt;/em&gt; Обратите внимание на параметр силы.</target>
        </trans-unit>
        <trans-unit id="054f5391b4b0019a1b99703d8745fdb99aff680e" translate="yes" xml:space="preserve">
          <source>What follows is really only a solution if you are working with a fork of a repository where you regularly synchronize (e.g. pull request) with another repo. Short answer: delete fork and refork, but &lt;strong&gt;read the warnings on github&lt;/strong&gt;.</source>
          <target state="translated">То, что следует, действительно является только решением, если вы работаете с форком репозитория, где вы регулярно синхронизируете (например, запрос на извлечение) с другим репо. Краткий ответ: удалите fork и refork, но &lt;strong&gt;прочтите предупреждения на github&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b2d7eb083886da1526ca38a6780f9e98825df5e6" translate="yes" xml:space="preserve">
          <source>When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored.</source>
          <target state="translated">При извлечении путей из индекса не обманывайте неупорядоченные записи;вместо этого неупорядоченные записи игнорируются.</target>
        </trans-unit>
        <trans-unit id="339698f3b0818650e35a92a839071fd456c09740" translate="yes" xml:space="preserve">
          <source>When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.</source>
          <target state="translated">При переключении ветвей продолжайте,даже если индекс или рабочее дерево отличается от HEAD.Это используется для выброса локальных изменений.</target>
        </trans-unit>
        <trans-unit id="cf4964dd07c2993ac1859d71d57b7b394dc0ecd9" translate="yes" xml:space="preserve">
          <source>When you want to transfer a stash to someone else:</source>
          <target state="translated">Когда ты хочешь перевести тайник на кого-то другого:</target>
        </trans-unit>
        <trans-unit id="5d25f19cf7fc6045ca7bcece484c02bdf1c4549f" translate="yes" xml:space="preserve">
          <source>While this command can also be used to restore the working tree to a specific commit or to restore the content of the index, by default, the working tree is restored to the state in the index (what is asked here).</source>
          <target state="translated">Хотя эта команда также может быть использована для восстановления рабочего дерева до определенного фиксатора или для восстановления содержимого индекса,по умолчанию рабочее дерево восстанавливается до состояния в индексе (то,что запрашивается здесь).</target>
        </trans-unit>
        <trans-unit id="91d13c281a07ada3b09124fbcef665fe08376db0" translate="yes" xml:space="preserve">
          <source>You can use git stash - if something goes wrong, you can still revert from the stash.
Similar to some other answer here, but this one also removes all unstaged files and also all unstaged deletes:</source>
          <target state="translated">Вы можете использовать git тайник-если что-то пойдет не так,вы все равно можете вернуться из тайника.Как и в случае с другим ответом,здесь также удаляются все нестационарные файлы,а также все нестационарные удаляемые файлы:</target>
        </trans-unit>
        <trans-unit id="3a786b2c6474e9d4945f7bd1392ad1016bb4e52c" translate="yes" xml:space="preserve">
          <source>You could create your own alias which describes how to do it in a descriptive way.</source>
          <target state="translated">Вы можете создать свой собственный псевдоним,который описывает,как это сделать описательным образом.</target>
        </trans-unit>
        <trans-unit id="850fc0cdc183d0805afc8909ccea1eda9e804430" translate="yes" xml:space="preserve">
          <source>You don't need to include &lt;code&gt;--include-untracked&lt;/code&gt; if you don't want to be thorough about it.</source>
          <target state="translated">Вам не нужно включать &lt;code&gt;--include-untracked&lt;/code&gt; если вы не хотите быть внимательным .</target>
        </trans-unit>
        <trans-unit id="38c85a26f680cdb6e74e127bf49b223b752a9de2" translate="yes" xml:space="preserve">
          <source>[edit] as commented, it &amp;iacute;s possible to name stashes. Well, use this if you want to share your stash ;)</source>
          <target state="translated">[править] как прокомментировано, можно назвать тайники. Ну, используйте это, если вы хотите поделиться своим тайником;)</target>
        </trans-unit>
        <trans-unit id="a71f1153b1446d4f3a1c243462ede23483d27947" translate="yes" xml:space="preserve">
          <source>e.g. &lt;code&gt;git checkout -- .&lt;/code&gt;</source>
          <target state="translated">например, &lt;code&gt;git checkout -- .&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d43b64f144ca0689fea30adb6e5cb2150c971a0c" translate="yes" xml:space="preserve">
          <source>git add -A</source>
          <target state="translated">git-добавление -A</target>
        </trans-unit>
        <trans-unit id="cf136d60baf6dbfd88ddc6f362f5619f4ffa9281" translate="yes" xml:space="preserve">
          <source>git reset --hard</source>
          <target state="translated">сброс гита-жёсткий</target>
        </trans-unit>
        <trans-unit id="f939b3ea803117df2cf35178a5068615ae3309ee" translate="yes" xml:space="preserve">
          <source>git rm .gitattributes</source>
          <target state="translated">гитаттрибуты</target>
        </trans-unit>
        <trans-unit id="b36ac78bd6c3fab8ecba0ab82eec39608eda415e" translate="yes" xml:space="preserve">
          <source>git-clean - Remove untracked files from the working tree</source>
          <target state="translated">git-clean-Удаление неотслеживаемых файлов из рабочего дерева</target>
        </trans-unit>
        <trans-unit id="e3826907be3b030bedd7b5dd69ab8984357e8c0d" translate="yes" xml:space="preserve">
          <source>if you check that everything is OK, throw the stash away:</source>
          <target state="translated">если ты проверишь,что все в порядке,выбрось заначку:</target>
        </trans-unit>
        <trans-unit id="b69f8baa9971a8a8eeb12eea1571ad9075d66776" translate="yes" xml:space="preserve">
          <source>or 
    git stash pop</source>
          <target state="translated">или заначка для гитов</target>
        </trans-unit>
        <trans-unit id="981cf047b6a7f7b88ac32ad8cd8a0ed27cf1c913" translate="yes" xml:space="preserve">
          <source>or this which checks out all files from the index, overwriting working tree files.</source>
          <target state="translated">или это проверяет все файлы из индекса,перезаписывая файлы рабочего дерева.</target>
        </trans-unit>
        <trans-unit id="9072dcdd106620ddc2d34fe8b2f61bcb590fefd6" translate="yes" xml:space="preserve">
          <source>should do the trick. As per &lt;a href=&quot;https://git-scm.com/docs/git-clean/2.2.0&quot;&gt;Git documentation on git clean&lt;/a&gt;</source>
          <target state="translated">должен сделать свое дело. Согласно &lt;a href=&quot;https://git-scm.com/docs/git-clean/2.2.0&quot;&gt;документации Git по git clean&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f07da77a32a6a913637dce1c7bf34b34e362b5f" translate="yes" xml:space="preserve">
          <source>simply say</source>
          <target state="translated">проще говоря</target>
        </trans-unit>
        <trans-unit id="ffcd08491969c6b6c012c238c4b91150d946d9de" translate="yes" xml:space="preserve">
          <source>without the &lt;code&gt;-A&lt;/code&gt; the removed files will not be staged</source>
          <target state="translated">без &lt;code&gt;-A&lt;/code&gt; удаленные файлы не будут поставлены</target>
        </trans-unit>
        <trans-unit id="362810874f5225484e34025a86bc8884d1cb6217" translate="yes" xml:space="preserve">
          <source>you have a very simple git command &lt;code&gt;git checkout .&lt;/code&gt;</source>
          <target state="translated">у вас есть очень простая команда &lt;code&gt;git checkout .&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
