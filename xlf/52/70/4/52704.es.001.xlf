<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/52704">
    <body>
      <group id="52704">
        <trans-unit id="fed9ac100b0f08b31a7bd88c0c53e1f0ce411dc3" translate="yes" xml:space="preserve">
          <source>-d Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is
  not removed by default. Use -f option twice if you really want to
  remove such a directory.</source>
          <target state="translated">-d Eliminar los directorios no rastreados además de los archivos no rastreados.Si un directorio no rastreado es administrado por un repositorio Git diferente,no se elimina por defecto.Usa la opción -f dos veces si realmente quieres eliminar dicho directorio.</target>
        </trans-unit>
        <trans-unit id="c0689b1195a2d2494831311528c78cbd2c81d25f" translate="yes" xml:space="preserve">
          <source>-f
  --force If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or -i.</source>
          <target state="translated">-f --force Si la variable de configuración de Git clean.requireForce no se establece como falsa,git clean se negará a funcionar a menos que se le dé -f,-n o -i.</target>
        </trans-unit>
        <trans-unit id="afc2d1dacec6bf8a41b596c662443a54f59b539e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;&lt;code&gt;git clean&lt;/code&gt;&lt;/a&gt; removes all untracked files (&lt;strong&gt;warning&lt;/strong&gt;: while it won't delete ignored files mentioned directly in .gitignore, &lt;strong&gt;it may delete ignored files residing in folders&lt;/strong&gt;) and &lt;code&gt;git checkout&lt;/code&gt; clears all unstaged changes.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt; &lt;code&gt;git clean&lt;/code&gt; &lt;/a&gt; elimina todos los archivos no rastreados ( &lt;strong&gt;advertencia&lt;/strong&gt; : si bien no eliminar&amp;aacute; los archivos ignorados mencionados directamente en .gitignore, &lt;strong&gt;puede eliminar los archivos ignorados que residen en las carpetas&lt;/strong&gt; ) y &lt;code&gt;git checkout&lt;/code&gt; borra todos los cambios no organizados.</target>
        </trans-unit>
        <trans-unit id="2d7a7ed51e610e0e5e84ca28c30ed03480f47b5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt; here to remove &lt;a href=&quot;https://git-scm.com/docs/git-checkout#_argument_disambiguation&quot;&gt;argument ambiguation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; Aqu&amp;iacute; para eliminar la &lt;a href=&quot;https://git-scm.com/docs/git-checkout#_argument_disambiguation&quot;&gt;ambig&amp;uuml;edad del argumento&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="72799af98b1f5308f3529726c1792cf61e182c2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt;: Remove untracked directories in addition to untracked files</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; : Eliminar directorios no rastreados adem&amp;aacute;s de archivos no rastreados</target>
        </trans-unit>
        <trans-unit id="53f62437a5af272cdc0c0f1087ed0fd5693a62f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt;: Force (might be not necessary depending on  &lt;code&gt;clean.requireForce&lt;/code&gt; setting)</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; : Fuerza (puede no ser necesario dependiendo de la configuraci&amp;oacute;n &lt;code&gt;clean.requireForce&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="a716245a2809abce91a9d776dbbfc112b617201a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git add . -A&lt;/code&gt; instead of &lt;code&gt;git add .&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git add . -A&lt;/code&gt; -A en lugar de &lt;code&gt;git add .&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb74c3f26ce1eb8d8c4c079f858137216a815cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man git-checkout&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;man git-checkout&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="94723bfd82f0ae0caf628ef46e610c3eec39a5cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Be very careful with this later command however as you might discard files you did not intend to get rid of.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Sin embargo, tenga mucho cuidado con este comando posterior, ya que podr&amp;iacute;a descartar archivos de los que no ten&amp;iacute;a intenci&amp;oacute;n de deshacerse.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ddd1868251030fa30ddb023ff889dd017606c761" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2019 update:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Actualizaci&amp;oacute;n 2019:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d583721fdee9eda617809d6d5f0932df533809dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Description&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27d9508a3b74080e0b435baa8bf80d7d81a6bc0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I was able to fix the problem by deleting my forked repository and all local repositories, and reforking. This alone was not enough; upstream had to rename the files in question to new filenames.&lt;/strong&gt; As long as you don't have any uncommited work, no wikis, and no issues that diverge from the upstream repository, you should be just fine. Upstream may not be very happy with you, to say the least. As for my problem, it is undoubtedly a user error as I'm not that proficient with git, but the fact that it is far from easy to fix points to an issue with git as well.</source>
          <target state="translated">&lt;strong&gt;Pude solucionar el problema eliminando mi repositorio bifurcado y todos los repositorios locales, y reformateando.&lt;/strong&gt; &lt;strong&gt;Esto por s&amp;iacute; solo no fue suficiente;&lt;/strong&gt; &lt;strong&gt;Upstream tuvo que renombrar los archivos en cuesti&amp;oacute;n a nuevos nombres de archivo.&lt;/strong&gt; Mientras no tenga ning&amp;uacute;n trabajo no comprometido, sin wikis y sin problemas que difieran del repositorio ascendente, deber&amp;iacute;a estar bien. Upstream puede no estar muy contento con usted, por decir lo menos. En cuanto a mi problema, es sin duda un error del usuario, ya que no soy tan h&amp;aacute;bil con git, pero el hecho de que est&amp;aacute; lejos de ser f&amp;aacute;cil de solucionar, tambi&amp;eacute;n es un problema con git.</target>
        </trans-unit>
        <trans-unit id="1884cdfa60ba48980b662b025f75e0ba67f99cbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Options&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Options&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a648cd0606cca5d79438d4f156e8c36af2fbb7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UPDATE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UPDATE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0949b40739737db3aca0e50aed86aa96b9b8a4f" translate="yes" xml:space="preserve">
          <source>A handful of options are available for more nuanced stashing; see the documentation.</source>
          <target state="translated">Hay un puñado de opciones disponibles para un almacenamiento más matizado;véase la documentación.</target>
        </trans-unit>
        <trans-unit id="b35af8cb225549965ddc586ff74ea587c627c5dc" translate="yes" xml:space="preserve">
          <source>A handful of other options are available for a quicker execution; see the documentation.</source>
          <target state="translated">Hay un puñado de otras opciones para una ejecución más rápida;véase la documentación.</target>
        </trans-unit>
        <trans-unit id="bdb3d9d11666a557cb5dac66319c6a3bdc844f3e" translate="yes" xml:space="preserve">
          <source>A keen eye will note that these files have dopplegangers that are a single letter in case off. Somehow, and I have no idea what led me down this path to start with (as I was not working with these files myself from the upstream repo), I had switched these files. Try the many solutions listed on this page (and other pages) did not seem to help.</source>
          <target state="translated">Un ojo perspicaz notará que estos archivos tienen dopplegangers que son una sola letra por si acaso.De alguna manera,y no tengo ni idea de lo que me llevó por este camino para empezar (ya que no estaba trabajando con estos archivos yo mismo desde el repo de arriba),había cambiado estos archivos.Intentar las muchas soluciones listadas en esta página (y otras páginas)no parecía ayudar.</target>
        </trans-unit>
        <trans-unit id="b39d5ddf0fc59abdea98c912f732b3c25809600a" translate="yes" xml:space="preserve">
          <source>After that, you can drop that stash with a &lt;code&gt;git stash drop&lt;/code&gt; command if you like.</source>
          <target state="translated">Despu&amp;eacute;s de eso, puede soltar ese alijo con un comando &lt;code&gt;git stash drop&lt;/code&gt; si lo desea.</target>
        </trans-unit>
        <trans-unit id="98e0506021752e4d376c394e1673d4fed4834a98" translate="yes" xml:space="preserve">
          <source>All changes will be moved to Git's Stash, for possible later access.</source>
          <target state="translated">Todos los cambios serán trasladados a Git's Stash,para un posible acceso posterior.</target>
        </trans-unit>
        <trans-unit id="2dbf857966032bb2e5ee10d185df2f47b79c5d45" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;git checkout .&lt;/code&gt; needs to be done in the root of the repo.</source>
          <target state="translated">Adem&amp;aacute;s, &lt;code&gt;git checkout .&lt;/code&gt; debe hacerse en la ra&amp;iacute;z del repositorio.</target>
        </trans-unit>
        <trans-unit id="d4a3db2fca5b6d490e0d0666be31df78f925bfbd" translate="yes" xml:space="preserve">
          <source>And to remove all unstaged changes in the current repository:</source>
          <target state="translated">Y para eliminar todos los cambios sin etapas en el repositorio actual:</target>
        </trans-unit>
        <trans-unit id="00bae78952a21817e9ff9b8f29e228f4b557b7a5" translate="yes" xml:space="preserve">
          <source>Another quicker way is:</source>
          <target state="translated">Otra forma más rápida es:</target>
        </trans-unit>
        <trans-unit id="629f09ca4ad9b66bb50fa2c4dcda91208cf09d47" translate="yes" xml:space="preserve">
          <source>Another way to get rid of new files that is more specific than git clean -df (it will allow you to get rid of some files not necessarily all), is to add the new files to the index first, then stash, then drop the stash.</source>
          <target state="translated">Otra forma de deshacerse de los nuevos archivos que es más específica que git clean -df (te permitirá deshacerte de algunos archivos no necesariamente todos),es añadir primero los nuevos archivos al índice,luego esconderlos y luego dejarlos caer.</target>
        </trans-unit>
        <trans-unit id="3ab852661ea78d7491e0b8d339b188a5a85861c6" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;git checkout -- .&lt;/code&gt;, this will only discard changes to files tracked by Git and will not discard any new untracked files. If you want to discard any unstaged changes, including new untracked files, you could run an additional:</source>
          <target state="translated">Al igual que con &lt;code&gt;git checkout -- .&lt;/code&gt; , esto solo descartar&amp;aacute; los cambios en los archivos rastreados por Git y no descartar&amp;aacute; ning&amp;uacute;n archivo nuevo no rastreado. Si desea descartar cualquier cambio sin clasificar, incluidos los nuevos archivos sin seguimiento, puede ejecutar un adicional:</target>
        </trans-unit>
        <trans-unit id="0bb06bd83e97a5112661b65ead766c7aefb3ca6f" translate="yes" xml:space="preserve">
          <source>As you type git status, 
&lt;strong&gt;(use &quot;git checkout -- ...&quot; to discard changes in working directory)&lt;/strong&gt;
is shown.</source>
          <target state="translated">A medida que escribe git status, se muestra &lt;strong&gt;(use &quot;git checkout - ...&quot; para descartar cambios en el directorio de trabajo)&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="9e4b2a87fb0c352693a1bd2db71c132ee44b38d5" translate="yes" xml:space="preserve">
          <source>Clean and discard changes and untracked files in working tree</source>
          <target state="translated">Limpiar y descartar los cambios y los archivos sin seguimiento en el árbol de trabajo</target>
        </trans-unit>
        <trans-unit id="42dcbc11ebcca8013128e188e07a667fd189817d" translate="yes" xml:space="preserve">
          <source>Cleans the working tree by recursively removing files that
  are not under version control, starting from the current directory.</source>
          <target state="translated">Limpia el árbol de trabajo eliminando recursivamente los archivos que no están bajo control de versiones,empezando por el directorio actual.</target>
        </trans-unit>
        <trans-unit id="0854cfe68459fb9743ea87944a08ab9f2f41c3f2" translate="yes" xml:space="preserve">
          <source>Discard changes in a (list of) file(s) in working tree</source>
          <target state="translated">Descartar los cambios en un (lista de)archivo(s)en el árbol de trabajo</target>
        </trans-unit>
        <trans-unit id="3703c5109b970db48fd2ad0fd5b85c35cce1361a" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the ignore rules from &lt;code&gt;.gitignore&lt;/code&gt; (per directory) and &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;, but do still use the ignore rules given with &lt;code&gt;-e&lt;/code&gt; options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with &lt;code&gt;git reset&lt;/code&gt;) to create a pristine working directory to test a clean build.</source>
          <target state="translated">No use las reglas de ignorar de &lt;code&gt;.gitignore&lt;/code&gt; (por directorio) y &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; , pero a&amp;uacute;n use las reglas de ignorar dadas con las opciones &lt;code&gt;-e&lt;/code&gt; . Esto permite eliminar todos los archivos sin seguimiento, incluidos los productos de compilaci&amp;oacute;n. Esto se puede usar (posiblemente junto con &lt;code&gt;git reset&lt;/code&gt; ) para crear un directorio de trabajo pr&amp;iacute;stino para probar una compilaci&amp;oacute;n limpia.</target>
        </trans-unit>
        <trans-unit id="82021c36126c9d2972b261fbe6e9eed34c3be7aa" translate="yes" xml:space="preserve">
          <source>Done. Easy.</source>
          <target state="translated">Hecho.Fácil.</target>
        </trans-unit>
        <trans-unit id="1ad395b6696331a11075129d3a05a93a404bde8f" translate="yes" xml:space="preserve">
          <source>For a specific file use:</source>
          <target state="translated">Para un uso específico del archivo:</target>
        </trans-unit>
        <trans-unit id="30d953d36f4d87f6c54e1ffe33fd2c7b4568ac7f" translate="yes" xml:space="preserve">
          <source>For all unstaged files in current working directory use:</source>
          <target state="translated">Para todos los archivos sin preparar en el directorio de trabajo actual,use:</target>
        </trans-unit>
        <trans-unit id="2fc195e08169ea5ea29dab03ebd736643c24c496" translate="yes" xml:space="preserve">
          <source>Happened to me recently</source>
          <target state="translated">Me pasó recientemente</target>
        </trans-unit>
        <trans-unit id="864d442672a2358879583b94bf582ea97a8424c9" translate="yes" xml:space="preserve">
          <source>How do I discard changes in my working copy that are not in the index?</source>
          <target state="translated">¿Cómo puedo descartar los cambios en mi copia de trabajo que no están en el índice?</target>
        </trans-unit>
        <trans-unit id="1fce62b7a2652a934ca474f0c5c63bb8b3b6e6c2" translate="yes" xml:space="preserve">
          <source>How do I discard unstaged changes in Git</source>
          <target state="translated">¿Cómo puedo descartar los cambios no realizados en Git</target>
        </trans-unit>
        <trans-unit id="eb60139211fc9388fb2f815a246c52e21943c2e4" translate="yes" xml:space="preserve">
          <source>I had a similar problem, perhaps not identical, and I'm sad to say my solution is not ideal, but it is ultimately effective.</source>
          <target state="translated">Tuve un problema similar,quizás no idéntico,y me entristece decir que mi solución no es ideal,pero es finalmente efectiva.</target>
        </trans-unit>
        <trans-unit id="ee7ba19ebd0319622aee0d033dc1de473768df0f" translate="yes" xml:space="preserve">
          <source>I had a weird situation where a file is always unstaged, this helps me to resolve.</source>
          <target state="translated">Tuve una situación extraña en la que un archivo siempre está sin preparar,esto me ayuda a resolver.</target>
        </trans-unit>
        <trans-unit id="ad84e904a2bcf085535faf5356692e18f46fe974" translate="yes" xml:space="preserve">
          <source>I really found this article helpful for explaining when to use what command: &lt;a href=&quot;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&quot;&gt;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&lt;/a&gt;</source>
          <target state="translated">Realmente encontr&amp;eacute; este art&amp;iacute;culo &amp;uacute;til para explicar cu&amp;aacute;ndo usar qu&amp;eacute; comando: &lt;a href=&quot;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&quot;&gt;http://www.szakmeister.net/blog/2011/oct/12/reverting-changes-git/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5e6cde860870936f1e6000fe5438f36756de4bc6" translate="yes" xml:space="preserve">
          <source>I suspect that using &lt;code&gt;git stash&lt;/code&gt; is a popular choice since it's a little less dangerous.  You can always go back to it if you accidently blow too much away when using git reset.  Reset is recursive by default.</source>
          <target state="translated">Sospecho que usar &lt;code&gt;git stash&lt;/code&gt; es una opci&amp;oacute;n popular ya que es un poco menos peligroso. Siempre puede volver a hacerlo si accidentalmente vuela demasiado cuando usa git reset. El reinicio es recursivo por defecto.</target>
        </trans-unit>
        <trans-unit id="3587b4e2335f7d08a6418b42308fa22c6a17d065" translate="yes" xml:space="preserve">
          <source>I think there is 1 more change (don't know why this worked for me before):</source>
          <target state="translated">Creo que hay un cambio más (no sé por qué esto funcionó para mí antes):</target>
        </trans-unit>
        <trans-unit id="8335e2269ae8550747eb62a058eaf6b8da22da46" translate="yes" xml:space="preserve">
          <source>I use the next alias to discard changes.</source>
          <target state="translated">Uso el siguiente alias para descartar los cambios.</target>
        </trans-unit>
        <trans-unit id="3dd312407e6bafcf3506f4027cc72a8a6476cbcd" translate="yes" xml:space="preserve">
          <source>I would often have git status messages like this (involving at least 2/4 files):</source>
          <target state="translated">A menudo tenía mensajes de estado de imbécil como este (que involucraban al menos 24 archivos):</target>
        </trans-unit>
        <trans-unit id="8816b09a32358ab8c2c7fac6aad970834a86eb5e" translate="yes" xml:space="preserve">
          <source>If any optional ... arguments are given, only those paths are
  affected.</source>
          <target state="translated">Si se da algún argumento opcional...sólo se afectan esos caminos.</target>
        </trans-unit>
        <trans-unit id="529d47024d50b097a96e1e2122d526c7f5d4d692" translate="yes" xml:space="preserve">
          <source>If the Git configuration variable &lt;code&gt;clean.requireForce&lt;/code&gt; is not set to &lt;code&gt;false&lt;/code&gt;, Git clean will refuse to delete files or directories unless given &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt;, or &lt;code&gt;-i&lt;/code&gt;. Git will refuse to delete directories within the &lt;code&gt;.git&lt;/code&gt; subdirectory or file, unless a second &lt;code&gt;-f&lt;/code&gt; is given.</source>
          <target state="translated">Si la variable de configuraci&amp;oacute;n de Git &lt;code&gt;clean.requireForce&lt;/code&gt; no est&amp;aacute; establecida en &lt;code&gt;false&lt;/code&gt; , Git clean se negar&amp;aacute; a eliminar archivos o directorios a menos que se &lt;code&gt;-f&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; o &lt;code&gt;-i&lt;/code&gt; . Git se negar&amp;aacute; a eliminar directorios dentro del subdirectorio o archivo &lt;code&gt;.git&lt;/code&gt; , a menos que se d&amp;eacute; una segunda &lt;code&gt;-f&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a876d321713c260c6efea388116771a1af8f9749" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;really&lt;/em&gt; care about your stash stack then you can follow with &lt;code&gt;git stash drop&lt;/code&gt;. But at that point you're better off using (from Mariusz Nowak):</source>
          <target state="translated">Si &lt;em&gt;realmente&lt;/em&gt; te importa tu pila de alijo, puedes seguir con &lt;code&gt;git stash drop&lt;/code&gt; . Pero en ese momento es mejor usar (de Mariusz Nowak):</target>
        </trans-unit>
        <trans-unit id="6b1ae5b423635758e0a25c5cc6760e00e87b9176" translate="yes" xml:space="preserve">
          <source>If you aren't interested in keeping the unstaged changes (especially if the staged changes are new files), I found this handy:</source>
          <target state="translated">Si no estás interesado en mantener los cambios sin preparar (especialmente si los cambios preparados son archivos nuevos),encontré esto a mano:</target>
        </trans-unit>
        <trans-unit id="dd23bb8ae4a841004bc72ddbfb3a7f79fc1cfbac" translate="yes" xml:space="preserve">
          <source>If you have staged the file, then use git reset.  Reset changes the index to match a commit.</source>
          <target state="translated">Si has preparado el archivo,entonces usa git reset.Reset cambia el índice para que coincida con una confirmación.</target>
        </trans-unit>
        <trans-unit id="3bd1003c321636caa648ef432ab3c21b2f41bed5" translate="yes" xml:space="preserve">
          <source>If you haven't staged the file, then you use &lt;code&gt;git checkout&lt;/code&gt;.  Checkout &quot;updates files in the working tree to match the version in the index&quot;.  If the files have not been staged (aka added to the index)... this command will essentially revert the files to what your last commit was.</source>
          <target state="translated">Si no ha organizado el archivo, entonces usa &lt;code&gt;git checkout&lt;/code&gt; . Checkout &quot;actualiza los archivos en el &amp;aacute;rbol de trabajo para que coincidan con la versi&amp;oacute;n en el &amp;iacute;ndice&quot;. Si los archivos no se han organizado (tambi&amp;eacute;n se ha agregado al &amp;iacute;ndice) ... este comando esencialmente revertir&amp;aacute; los archivos a la &amp;uacute;ltima confirmaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="f8d19102a6786fdcfae490d52ca3fc8f40c3495a" translate="yes" xml:space="preserve">
          <source>If you merely wish &lt;strong&gt;to remove changes to existing files&lt;/strong&gt;, use &lt;code&gt;checkout&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;documented here&lt;/a&gt;).</source>
          <target state="translated">Si simplemente desea &lt;strong&gt;eliminar los cambios en los archivos existentes&lt;/strong&gt; , utilice el proceso de &lt;code&gt;checkout&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;documentado aqu&amp;iacute;&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="79cad392748bde549e75bc03a7473563f1e11676" translate="yes" xml:space="preserve">
          <source>If you want &lt;strong&gt;to remove files added&lt;/strong&gt; since your last commit, use &lt;code&gt;clean&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;documented here&lt;/a&gt;):</source>
          <target state="translated">Si desea &lt;strong&gt;eliminar archivos agregados&lt;/strong&gt; desde su &amp;uacute;ltima confirmaci&amp;oacute;n, use &lt;code&gt;clean&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;documentado aqu&amp;iacute;&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="94bef346d72e50bfd317274138d0f36470fc38a2" translate="yes" xml:space="preserve">
          <source>If you wish &lt;strong&gt;to move changes to a holding space for later access&lt;/strong&gt;, use &lt;code&gt;stash&lt;/code&gt; (&lt;a href=&quot;https://git-scm.com/docs/git-stash&quot;&gt;documented here&lt;/a&gt;):</source>
          <target state="translated">Si desea &lt;strong&gt;mover los cambios a un espacio de espera para un acceso posterior&lt;/strong&gt; , use &lt;code&gt;stash&lt;/code&gt; ( &lt;a href=&quot;https://git-scm.com/docs/git-stash&quot;&gt;documentado aqu&amp;iacute;&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="c8f0dcd22582ea400212c4bf2bf1ecb8196f22a0" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;git status&lt;/code&gt;, now Git recommends using this command instead of &lt;code&gt;git checkout&lt;/code&gt; as it used to.</source>
          <target state="translated">En &lt;code&gt;git status&lt;/code&gt; , ahora Git recomienda usar este comando en lugar de &lt;code&gt;git checkout&lt;/code&gt; como sol&amp;iacute;a hacerlo.</target>
        </trans-unit>
        <trans-unit id="6a66d8064b895089a51d39f45d330836cf5cf130" translate="yes" xml:space="preserve">
          <source>In git command, stashing of untracked files is achieved by using:</source>
          <target state="translated">En el comando git,el almacenamiento de archivos no rastreados se logra usando:</target>
        </trans-unit>
        <trans-unit id="4f9dfa38b31d7d270d8aa454fe54f373205f54e8" translate="yes" xml:space="preserve">
          <source>In my opinion,</source>
          <target state="translated">En mi opinión,</target>
        </trans-unit>
        <trans-unit id="a710bcb2db12bb6ea9b79bfea29fc08590a3fc1e" translate="yes" xml:space="preserve">
          <source>Instead of discarding changes, I reset my remote to the origin. Note - this method is to completely restore your folder to that of the repo.</source>
          <target state="translated">En lugar de descartar los cambios,reajusto mi mando a distancia al origen.Nota-este método es para restaurar completamente su carpeta a la del repo.</target>
        </trans-unit>
        <trans-unit id="e4ce5f1cd096b70edf7ccafdff1608da7b9a35c2" translate="yes" xml:space="preserve">
          <source>It seems like the complete solution is:</source>
          <target state="translated">Parece que la solución completa es:</target>
        </trans-unit>
        <trans-unit id="19c8ae84a2a96946e0800bd4424233488d724cbe" translate="yes" xml:space="preserve">
          <source>It will remove all your local changes. You also can use later by saying</source>
          <target state="translated">Eliminará todos los cambios locales.También puedes usar más tarde diciendo</target>
        </trans-unit>
        <trans-unit id="098c5131b876d1833842c7915ad8820685fc825d" translate="yes" xml:space="preserve">
          <source>Just use:</source>
          <target state="translated">Sólo úsalo:</target>
        </trans-unit>
        <trans-unit id="94314a06159d9c31a2ff55cd1415fe59ca943e2b" translate="yes" xml:space="preserve">
          <source>My favorite is</source>
          <target state="translated">Mi favorito es</target>
        </trans-unit>
        <trans-unit id="c5c68720f904987895c38abb89689c82d8316808" translate="yes" xml:space="preserve">
          <source>NOTE: If you want to keep files not yet tracked, but not in GITIGNORE you may wish to skip this step, as it will Wipe these untracked files not found on your remote repository (thanks @XtrmJosh).</source>
          <target state="translated">NOTA:Si quieres mantener los archivos no rastreados,pero no en GITIGNORE puedes saltarte este paso,ya que borrará estos archivos no rastreados que no se encuentran en tu repositorio remoto (gracias @XtrmJosh).</target>
        </trans-unit>
        <trans-unit id="90f19de07eaa816f337291f8dbf8ed55cc13ebbe" translate="yes" xml:space="preserve">
          <source>No branch is specified, so it checks out the current branch.</source>
          <target state="translated">No se especifica ninguna rama,así que comprueba la rama actual.</target>
        </trans-unit>
        <trans-unit id="b9c6e3583ee2c594287b4a6fc73da8e7b11401d3" translate="yes" xml:space="preserve">
          <source>No matter what state your repo is in you can always reset to any previous commit:</source>
          <target state="translated">No importa en qué estado esté tu repo,siempre puedes volver a cualquier compromiso anterior:</target>
        </trans-unit>
        <trans-unit id="a4336fe427713d23c760add6d199455e6017811f" translate="yes" xml:space="preserve">
          <source>Nonetheless, I like &lt;code&gt;git stash -u&lt;/code&gt; the best because it &quot;discards&quot; all tracked and untracked changes in just &lt;em&gt;one command&lt;/em&gt;. Yet &lt;code&gt;git checkout -- .&lt;/code&gt; only discards tracked changes,
and &lt;code&gt;git clean -df&lt;/code&gt; only discards untracked changes... and typing both commands is &lt;em&gt;far&lt;/em&gt; too much work :)</source>
          <target state="translated">Sin embargo, me gusta &lt;code&gt;git stash -u&lt;/code&gt; lo mejor porque &quot;descarta&quot; todos los cambios rastreados y no rastreados en &lt;em&gt;un&lt;/em&gt; solo &lt;em&gt;comando&lt;/em&gt; . Sin embargo, &lt;code&gt;git checkout -- .&lt;/code&gt; solo descarta los cambios rastreados, y &lt;code&gt;git clean -df&lt;/code&gt; solo descarta los cambios no rastreados ... y escribir ambos comandos es demasiado trabajo :)</target>
        </trans-unit>
        <trans-unit id="396cec2961d1019f503136da105dd323f822741b" translate="yes" xml:space="preserve">
          <source>Normally, only files unknown to Git are removed, but if the -x option
  is specified, ignored files are also removed. This can, for example,
  be useful to remove all build products.</source>
          <target state="translated">Normalmente,sólo se eliminan los archivos desconocidos para Git,pero si se especifica la opción -x,también se eliminan los archivos ignorados.Esto puede ser útil,por ejemplo,para eliminar todos los productos de construcción.</target>
        </trans-unit>
        <trans-unit id="6b667358b3ffd2bdbf9e8690c38a516866fc3d10" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;git restore&lt;/code&gt;: as this is a new command, &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;its man page&lt;/a&gt; gives a warning:</source>
          <target state="translated">Nota sobre &lt;code&gt;git restore&lt;/code&gt; : como se trata de un nuevo comando, &lt;a href=&quot;https://git-scm.com/docs/git-restore/2.23.0&quot;&gt;su p&amp;aacute;gina de manual&lt;/a&gt; muestra una advertencia:</target>
        </trans-unit>
        <trans-unit id="971dcad694fa90c95d79cb3e35f8800172a46f99" translate="yes" xml:space="preserve">
          <source>Now is available in the next Github repo which contains a lot of aliases:</source>
          <target state="translated">Ahora está disponible en el próximo repo de Github que contiene muchos alias:</target>
        </trans-unit>
        <trans-unit id="72e095f37cbb08d62af2ddc2eb1cb1d7393138c7" translate="yes" xml:space="preserve">
          <source>Or just a file:</source>
          <target state="translated">O sólo un archivo:</target>
        </trans-unit>
        <trans-unit id="4d0f3ef1dd38153720613b554c65d9bbcfc7d902" translate="yes" xml:space="preserve">
          <source>Otherwise, if you want to discard all changes and also the untracked files, I use a mix of checkout and clean:</source>
          <target state="translated">De lo contrario,si quieres descartar todos los cambios y también los archivos no rastreados,utilizo una mezcla de comprobación y limpieza:</target>
        </trans-unit>
        <trans-unit id="478b2510a9b32cfb4adf26e1a8d78520b35a469c" translate="yes" xml:space="preserve">
          <source>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use &lt;code&gt;-f&lt;/code&gt; option twice if you really want to remove such a directory.</source>
          <target state="translated">Elimine los directorios sin seguimiento adem&amp;aacute;s de los archivos sin seguimiento. Si un directorio no rastreado es administrado por un repositorio Git diferente, no se elimina de manera predeterminada. Use la opci&amp;oacute;n &lt;code&gt;-f&lt;/code&gt; dos veces si realmente desea eliminar dicho directorio.</target>
        </trans-unit>
        <trans-unit id="6d80714ab625f9250b860a48bb052401b69c068c" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;git help clean&lt;/code&gt; to see the manual</source>
          <target state="translated">Ejecute &lt;code&gt;git help clean&lt;/code&gt; para ver el manual</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">Ver también:</target>
        </trans-unit>
        <trans-unit id="5f08bd2d55361c1ba94df735ac5ccb3fa855221c" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://github.com/git/git/commit/f496b064fc1135e0dded7f93d85d72eb0b302c22&quot;&gt;July 2019&lt;/a&gt;, there has been a new command which does exactly this: &lt;code&gt;git restore&lt;/code&gt;.</source>
          <target state="translated">Desde &lt;a href=&quot;https://github.com/git/git/commit/f496b064fc1135e0dded7f93d85d72eb0b302c22&quot;&gt;julio de 2019&lt;/a&gt; , ha habido un nuevo comando que hace exactamente esto: &lt;code&gt;git restore&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04acd8c1f0e76597bca9508038665bb9b88a4344" translate="yes" xml:space="preserve">
          <source>Since no answer suggests the exact option combination that I use, here it is:</source>
          <target state="translated">Como ninguna respuesta sugiere la combinación exacta de opciones que uso,aquí está:</target>
        </trans-unit>
        <trans-unit id="b010ecc92659c76e1f93d2a5401f106185699a12" translate="yes" xml:space="preserve">
          <source>So I do this to make sure they don't sit there when I git reset (later - excludes gitignores on the Origin/branchname)</source>
          <target state="translated">Así que hago esto para asegurarme de que no se sienten allí cuando reajuste el git (más tarde-excluye los gitiriteros en el Originbranchname)</target>
        </trans-unit>
        <trans-unit id="32b93eceaf5edd5bbbe16dce5b2ef08bf8c1641c" translate="yes" xml:space="preserve">
          <source>So it is possible that this answer might become outdated if the behaviour does change in the future. It might thus be wise to run a quick &lt;code&gt;man git-restore&lt;/code&gt; before using it.</source>
          <target state="translated">Por lo tanto, es posible que esta respuesta quede desactualizada si el comportamiento cambia en el futuro. Por lo tanto, ser&amp;iacute;a aconsejable ejecutar un r&amp;aacute;pido &lt;code&gt;man git-restore&lt;/code&gt; antes de usarlo.</target>
        </trans-unit>
        <trans-unit id="96d550362eff6a29040d66c0bc830c58b2c76f8c" translate="yes" xml:space="preserve">
          <source>So the use is simple as next:</source>
          <target state="translated">Así que el uso es tan simple como el siguiente:</target>
        </trans-unit>
        <trans-unit id="16ec2b549f9cf7514b2409954745896f69ab7d7e" translate="yes" xml:space="preserve">
          <source>So, in order to restore the files matching a pathspec (getting rid of their unstaged changes), you would do:</source>
          <target state="translated">Así que,para restaurar los archivos que coinciden con un pathspec (deshacerse de sus cambios sin etapas),lo harías:</target>
        </trans-unit>
        <trans-unit id="7e6294c015403474dc533fce25008ae9e9ef152a" translate="yes" xml:space="preserve">
          <source>Take a look at the article above for further advice.</source>
          <target state="translated">Echa un vistazo al artículo anterior para obtener más consejos.</target>
        </trans-unit>
        <trans-unit id="8c87610aaa7616e71adb720d209bde226e5b0bdf" translate="yes" xml:space="preserve">
          <source>That lets you selectively revert chunks.</source>
          <target state="translated">Eso te permite revertir selectivamente los trozos.</target>
        </trans-unit>
        <trans-unit id="a625cdf5db5e1eadfae9daa74b20d41adaf50ccf" translate="yes" xml:space="preserve">
          <source>That will put it back to square one. Just like RE-Cloning the branch, WHILE keeping all my gitignored files locally and in place.</source>
          <target state="translated">Eso lo pondrá de nuevo en el punto de partida.Al igual que la reconstrucción de la sucursal,mientras mantengo todos mis archivos ignorados localmente y en su lugar.</target>
        </trans-unit>
        <trans-unit id="6b79228633a397f43b5ec158dc62bd7b541c62f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-i&lt;/code&gt; option initiates an interactive &lt;code&gt;clean&lt;/code&gt;, to prevent mistaken deletions.</source>
          <target state="translated">La opci&amp;oacute;n &lt;code&gt;-i&lt;/code&gt; inicia una &lt;code&gt;clean&lt;/code&gt; interactiva, para evitar eliminaciones err&amp;oacute;neas.</target>
        </trans-unit>
        <trans-unit id="34a4059081536a4ba0807042845f6d37b9ed4564" translate="yes" xml:space="preserve">
          <source>The answer from Bilal Maqsood with &lt;code&gt;git clean&lt;/code&gt; also worked for me, but with the stash I have more control - if I do sth accidentally, I can still get my changes back</source>
          <target state="translated">La respuesta de Bilal Maqsood con &lt;code&gt;git clean&lt;/code&gt; tambi&amp;eacute;n funcion&amp;oacute; para m&amp;iacute;, pero con el alijo tengo m&amp;aacute;s control: si hago algo accidentalmente, a&amp;uacute;n puedo recuperar mis cambios</target>
        </trans-unit>
        <trans-unit id="62345698e50d705132cfe6c077bc2d02c9628493" translate="yes" xml:space="preserve">
          <source>The double-hyphen (&lt;code&gt;--&lt;/code&gt;) tells Git that what follows should be taken as its second argument (path), that you skipped specification of a branch.</source>
          <target state="translated">El gui&amp;oacute;n doble ( &lt;code&gt;--&lt;/code&gt; ) le dice a Git que lo que sigue debe tomarse como su segundo argumento (ruta), que omiti&amp;oacute; la especificaci&amp;oacute;n de una rama.</target>
        </trans-unit>
        <trans-unit id="1909fa0ba14ff86f3491b939c47fed3b8449c198" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is by using this command:</source>
          <target state="translated">La forma más fácil de hacerlo es usando este comando:</target>
        </trans-unit>
        <trans-unit id="7e827872d90fac1fb3bc15c8233749d210363511" translate="yes" xml:space="preserve">
          <source>The period (&lt;code&gt;.&lt;/code&gt;) indicates all paths.</source>
          <target state="translated">El punto ( &lt;code&gt;.&lt;/code&gt; ) Indica todas las rutas.</target>
        </trans-unit>
        <trans-unit id="af0d1b4328276812686a9206c83d6172e0087443" translate="yes" xml:space="preserve">
          <source>Then I</source>
          <target state="translated">Entonces yo</target>
        </trans-unit>
        <trans-unit id="33de23d10db20d49224f8ef3b6bfe6a9ced5e313" translate="yes" xml:space="preserve">
          <source>Then I reset to origin</source>
          <target state="translated">Luego reajusto el origen</target>
        </trans-unit>
        <trans-unit id="76b16061fde005910f67c6e862f0d2f89d69be22" translate="yes" xml:space="preserve">
          <source>Then you can use it as next to discard all changes:</source>
          <target state="translated">Entonces puedes usarlo como próximo para descartar todos los cambios:</target>
        </trans-unit>
        <trans-unit id="8a58f32e5d8df2105e56e8f81f5a86e77ad4892f" translate="yes" xml:space="preserve">
          <source>There are a couple different cases:</source>
          <target state="translated">Hay un par de casos diferentes:</target>
        </trans-unit>
        <trans-unit id="03c3d16189699026ec8beb0dd2eed7cb1d8710f3" translate="yes" xml:space="preserve">
          <source>This checks out the current index for the current directory, throwing away all changes in files from the current directory downwards.</source>
          <target state="translated">Esto comprueba el índice actual para el directorio actual,tirando todos los cambios en los archivos del directorio actual hacia abajo.</target>
        </trans-unit>
        <trans-unit id="0e4a34fc85d235e5640196e9fff5dfa6f28d404f" translate="yes" xml:space="preserve">
          <source>This command is experimental. The behavior may change.</source>
          <target state="translated">Este comando es experimental.El comportamiento puede cambiar.</target>
        </trans-unit>
        <trans-unit id="56c33c8ae8b1c644ac03d5c863fdcb0c359f2c14" translate="yes" xml:space="preserve">
          <source>This command is used to discard changes in working directory -</source>
          <target state="translated">Este comando se usa para descartar los cambios en el directorio de trabajo -</target>
        </trans-unit>
        <trans-unit id="5cc465bdc8bdd458dd144f1d0a2b1ddcbfd3ad74" translate="yes" xml:space="preserve">
          <source>This is the online help text for the used &lt;code&gt;git clean&lt;/code&gt; options:</source>
          <target state="translated">Este es el texto de ayuda en l&amp;iacute;nea para las opciones de &lt;code&gt;git clean&lt;/code&gt; utilizadas:</target>
        </trans-unit>
        <trans-unit id="80fa3a5b6d70e6761f8985fdd6e2ecdeb0b34882" translate="yes" xml:space="preserve">
          <source>This technique is useful when, for some reason, you can't easily delete all of the untracked files by some ordinary mechanism (like rm).</source>
          <target state="translated">Esta técnica es útil cuando,por alguna razón,no se pueden eliminar fácilmente todos los archivos no rastreados por algún mecanismo ordinario (como el rm).</target>
        </trans-unit>
        <trans-unit id="1f8124b5c16b5fd081e0614cc45f57a3149cacb1" translate="yes" xml:space="preserve">
          <source>This will discard all changes which were made after that commit.</source>
          <target state="translated">Esto descartará todos los cambios que se hicieron después de ese compromiso.</target>
        </trans-unit>
        <trans-unit id="48ef74511807e4984a8be1b2ff03f8014e243c25" translate="yes" xml:space="preserve">
          <source>This works even in directories that are; outside of normal git permissions.</source>
          <target state="translated">Esto funciona incluso en directorios que están fuera de los permisos normales.</target>
        </trans-unit>
        <trans-unit id="840522ea5495652351bf360bd472b3cec13403d1" translate="yes" xml:space="preserve">
          <source>To do a permanent discard:
&lt;code&gt;git reset --hard&lt;/code&gt;</source>
          <target state="translated">Para hacer un descarte permanente: &lt;code&gt;git reset --hard&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9df261d84d1342fec04eee973e46058211d6ac08" translate="yes" xml:space="preserve">
          <source>To save changes for later:
&lt;code&gt;git stash&lt;/code&gt;</source>
          <target state="translated">Para guardar los cambios para m&amp;aacute;s adelante: &lt;code&gt;git stash&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb758e77878dc87ac9bc038e9cf5cd33895820bc" translate="yes" xml:space="preserve">
          <source>Tried all the solutions above but still couldn't get rid of new, unstaged files.</source>
          <target state="translated">Probé todas las soluciones anteriores pero aún no pude deshacerme de los nuevos archivos sin preparar.</target>
        </trans-unit>
        <trans-unit id="34ac0e36e8b6f6dc6c81473bc49f174e7c451fef" translate="yes" xml:space="preserve">
          <source>Updated per user comment below:
Variation to reset the to whatever current branch the user is on.</source>
          <target state="translated">Actualizado por comentario de usuario a continuación:Variación para restablecer el a cualquier rama actual en la que esté el usuario.</target>
        </trans-unit>
        <trans-unit id="0fae9274cadaf5a62b8d077660a2fc6bd0ccfbd1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git clean -f&lt;/code&gt; to remove those new files - &lt;em&gt;with caution though!&lt;/em&gt; Note the force option.</source>
          <target state="translated">Use &lt;code&gt;git clean -f&lt;/code&gt; para eliminar esos archivos nuevos, &amp;iexcl;pero &lt;em&gt;con precauci&amp;oacute;n!&lt;/em&gt; Tenga en cuenta la opci&amp;oacute;n de fuerza.</target>
        </trans-unit>
        <trans-unit id="054f5391b4b0019a1b99703d8745fdb99aff680e" translate="yes" xml:space="preserve">
          <source>What follows is really only a solution if you are working with a fork of a repository where you regularly synchronize (e.g. pull request) with another repo. Short answer: delete fork and refork, but &lt;strong&gt;read the warnings on github&lt;/strong&gt;.</source>
          <target state="translated">Lo que sigue es realmente solo una soluci&amp;oacute;n si est&amp;aacute; trabajando con una bifurcaci&amp;oacute;n de un repositorio donde se sincroniza regularmente (por ejemplo, solicitud de extracci&amp;oacute;n) con otro repositorio. Respuesta corta: elimina fork y reformak, pero &lt;strong&gt;lee las advertencias en github&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b2d7eb083886da1526ca38a6780f9e98825df5e6" translate="yes" xml:space="preserve">
          <source>When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored.</source>
          <target state="translated">Al revisar los caminos del índice,no falles en las entradas no fusionadas;en su lugar,las entradas no fusionadas son ignoradas.</target>
        </trans-unit>
        <trans-unit id="339698f3b0818650e35a92a839071fd456c09740" translate="yes" xml:space="preserve">
          <source>When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.</source>
          <target state="translated">Cuando cambie de rama,proceda aunque el índice o el árbol de trabajo difiera de CABEZA.Esto se utiliza para descartar los cambios locales.</target>
        </trans-unit>
        <trans-unit id="cf4964dd07c2993ac1859d71d57b7b394dc0ecd9" translate="yes" xml:space="preserve">
          <source>When you want to transfer a stash to someone else:</source>
          <target state="translated">Cuando quieres transferir un alijo a otra persona:</target>
        </trans-unit>
        <trans-unit id="5d25f19cf7fc6045ca7bcece484c02bdf1c4549f" translate="yes" xml:space="preserve">
          <source>While this command can also be used to restore the working tree to a specific commit or to restore the content of the index, by default, the working tree is restored to the state in the index (what is asked here).</source>
          <target state="translated">Aunque este comando también se puede utilizar para restaurar el árbol de trabajo a una confirmación específica o para restaurar el contenido del índice,por defecto,el árbol de trabajo se restaura al estado en el índice (lo que se pregunta aquí).</target>
        </trans-unit>
        <trans-unit id="91d13c281a07ada3b09124fbcef665fe08376db0" translate="yes" xml:space="preserve">
          <source>You can use git stash - if something goes wrong, you can still revert from the stash.
Similar to some other answer here, but this one also removes all unstaged files and also all unstaged deletes:</source>
          <target state="translated">Puedes usar el alijo de git,si algo sale mal,puedes volver al alijo.Similar a alguna otra respuesta de aquí,pero esta también elimina todos los archivos sin preparar y también todos los borrados sin preparar:</target>
        </trans-unit>
        <trans-unit id="3a786b2c6474e9d4945f7bd1392ad1016bb4e52c" translate="yes" xml:space="preserve">
          <source>You could create your own alias which describes how to do it in a descriptive way.</source>
          <target state="translated">Podrías crear tu propio alias que describa cómo hacerlo de forma descriptiva.</target>
        </trans-unit>
        <trans-unit id="850fc0cdc183d0805afc8909ccea1eda9e804430" translate="yes" xml:space="preserve">
          <source>You don't need to include &lt;code&gt;--include-untracked&lt;/code&gt; if you don't want to be thorough about it.</source>
          <target state="translated">No necesita incluir &lt;code&gt;--include-untracked&lt;/code&gt; si no desea ser exhaustivo al respecto.</target>
        </trans-unit>
        <trans-unit id="38c85a26f680cdb6e74e127bf49b223b752a9de2" translate="yes" xml:space="preserve">
          <source>[edit] as commented, it &amp;iacute;s possible to name stashes. Well, use this if you want to share your stash ;)</source>
          <target state="translated">[editar] como se coment&amp;oacute;, es posible nombrar las reservas. Bueno, usa esto si quieres compartir tu escondite;)</target>
        </trans-unit>
        <trans-unit id="a71f1153b1446d4f3a1c243462ede23483d27947" translate="yes" xml:space="preserve">
          <source>e.g. &lt;code&gt;git checkout -- .&lt;/code&gt;</source>
          <target state="translated">por ejemplo, &lt;code&gt;git checkout -- .&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d43b64f144ca0689fea30adb6e5cb2150c971a0c" translate="yes" xml:space="preserve">
          <source>git add -A</source>
          <target state="translated">git add -A</target>
        </trans-unit>
        <trans-unit id="cf136d60baf6dbfd88ddc6f362f5619f4ffa9281" translate="yes" xml:space="preserve">
          <source>git reset --hard</source>
          <target state="translated">git reset --difícil</target>
        </trans-unit>
        <trans-unit id="f939b3ea803117df2cf35178a5068615ae3309ee" translate="yes" xml:space="preserve">
          <source>git rm .gitattributes</source>
          <target state="translated">git rm .gitattributes</target>
        </trans-unit>
        <trans-unit id="b36ac78bd6c3fab8ecba0ab82eec39608eda415e" translate="yes" xml:space="preserve">
          <source>git-clean - Remove untracked files from the working tree</source>
          <target state="translated">git-clean-Eliminar los archivos no rastreados del árbol de trabajo</target>
        </trans-unit>
        <trans-unit id="e3826907be3b030bedd7b5dd69ab8984357e8c0d" translate="yes" xml:space="preserve">
          <source>if you check that everything is OK, throw the stash away:</source>
          <target state="translated">si compruebas que todo está bien,tira el alijo:</target>
        </trans-unit>
        <trans-unit id="b69f8baa9971a8a8eeb12eea1571ad9075d66776" translate="yes" xml:space="preserve">
          <source>or 
    git stash pop</source>
          <target state="translated">o un escondite de git pop...</target>
        </trans-unit>
        <trans-unit id="981cf047b6a7f7b88ac32ad8cd8a0ed27cf1c913" translate="yes" xml:space="preserve">
          <source>or this which checks out all files from the index, overwriting working tree files.</source>
          <target state="translated">o esto que comprueba todos los archivos del índice,sobrescribiendo los archivos del árbol de trabajo.</target>
        </trans-unit>
        <trans-unit id="9072dcdd106620ddc2d34fe8b2f61bcb590fefd6" translate="yes" xml:space="preserve">
          <source>should do the trick. As per &lt;a href=&quot;https://git-scm.com/docs/git-clean/2.2.0&quot;&gt;Git documentation on git clean&lt;/a&gt;</source>
          <target state="translated">deber&amp;iacute;a hacer el truco. Seg&amp;uacute;n la &lt;a href=&quot;https://git-scm.com/docs/git-clean/2.2.0&quot;&gt;documentaci&amp;oacute;n de Git sobre git clean&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f07da77a32a6a913637dce1c7bf34b34e362b5f" translate="yes" xml:space="preserve">
          <source>simply say</source>
          <target state="translated">simplemente decir</target>
        </trans-unit>
        <trans-unit id="ffcd08491969c6b6c012c238c4b91150d946d9de" translate="yes" xml:space="preserve">
          <source>without the &lt;code&gt;-A&lt;/code&gt; the removed files will not be staged</source>
          <target state="translated">sin el &lt;code&gt;-A&lt;/code&gt; los archivos eliminados no se organizar&amp;aacute;n</target>
        </trans-unit>
        <trans-unit id="362810874f5225484e34025a86bc8884d1cb6217" translate="yes" xml:space="preserve">
          <source>you have a very simple git command &lt;code&gt;git checkout .&lt;/code&gt;</source>
          <target state="translated">tienes un comando &lt;code&gt;git checkout .&lt;/code&gt; muy simple git checkout.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
