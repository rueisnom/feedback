<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/510348">
    <body>
      <group id="510348">
        <trans-unit id="566e492b1bd794dec2a063dd48ef2215def74380" translate="yes" xml:space="preserve">
          <source>&quot;hooray!&quot; is printed 3 seconds after I hit</source>
          <target state="translated">&quot;万岁!&quot;在我打了3秒后,&quot;万岁!&quot;就印在了我的手机上。</target>
        </trans-unit>
        <trans-unit id="0d9839c228bca5ef110f7eb7311afbfb1999c13e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pygame.time.wait()&lt;/code&gt; example (not recommended if you are not using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Pygame&quot;&gt;Pygame&lt;/a&gt; window, but you could exit the window instantly):</source>
          <target state="translated">&lt;code&gt;pygame.time.wait()&lt;/code&gt; 示例（如果不使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Pygame&quot;&gt;Pygame&lt;/a&gt;窗口，则不建议使用，但可以立即退出该窗口）：</target>
        </trans-unit>
        <trans-unit id="d1f725a67ab0aedfa644c528bfcf79299fbec6f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time.sleep()&lt;/code&gt; example (do not use if using &lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;time.sleep()&lt;/code&gt; 示例（如果使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter，&lt;/a&gt;则不要使用）：</target>
        </trans-unit>
        <trans-unit id="5fc7747dc7ae1bc6dfad960a3c062d6684b0f190" translate="yes" xml:space="preserve">
          <source>A bit of fun with a sleepy &lt;a href=&quot;https://wiki.python.org/moin/Generators&quot;&gt;generator&lt;/a&gt;.</source>
          <target state="translated">昏昏欲睡的&lt;a href=&quot;https://wiki.python.org/moin/Generators&quot;&gt;发电机&lt;/a&gt;有点乐趣。</target>
        </trans-unit>
        <trans-unit id="b2f204c4fc80a097c451277a372e406f02971473" translate="yes" xml:space="preserve">
          <source>After starting the timer you can also stop it by doing &lt;code&gt;timer_obj.cancel()&lt;/code&gt;.</source>
          <target state="translated">启动计时器后，您还可以通过执行 &lt;code&gt;timer_obj.cancel()&lt;/code&gt; 来停止计时器。</target>
        </trans-unit>
        <trans-unit id="615922c9bddfdc9ca3008c4a9b6d914a24c74963" translate="yes" xml:space="preserve">
          <source>Again, &lt;code&gt;sleep&lt;/code&gt; suspends your thread - it uses next to zero processing power.</source>
          <target state="translated">同样， &lt;code&gt;sleep&lt;/code&gt; 挂起您的线程-它使用接近零的处理能力。</target>
        </trans-unit>
        <trans-unit id="9ea26de5566952ec524cedbb60ee90bf6c1be0e2" translate="yes" xml:space="preserve">
          <source>An example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="5feda5d205d914a145cc74a890af48e47a8632c1" translate="yes" xml:space="preserve">
          <source>And running it we might see:</source>
          <target state="translated">而运行它,我们可能会看到。</target>
        </trans-unit>
        <trans-unit id="a3828993c920f8c4bdaeb997ffe88c74beb223aa" translate="yes" xml:space="preserve">
          <source>And running it we see:</source>
          <target state="translated">而运行它,我们看到。</target>
        </trans-unit>
        <trans-unit id="6b56bd871f30bfe0f8091287ef7c36b763921784" translate="yes" xml:space="preserve">
          <source>Another, in &lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter&lt;/a&gt;:</source>
          <target state="translated">另一个，在&lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter中&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="a7f3177fd3a57d73c651b31d3131677cbeeec3f7" translate="yes" xml:space="preserve">
          <source>As we see, this buzzer is not too rigid and allow us to catch up with regular sleepy intervals even if we oversleep and get out of regular schedule.</source>
          <target state="translated">正如我们看到的那样,这个蜂鸣器不会太死板,让我们即使睡过头了,脱离了规律的作息时间,也能赶上有规律的睡眠时间。</target>
        </trans-unit>
        <trans-unit id="2016bfd501df0c485d1243266bdf516f864be1e0" translate="yes" xml:space="preserve">
          <source>Buzzer generator</source>
          <target state="translated">蜂鸣器发生器</target>
        </trans-unit>
        <trans-unit id="411debdb78cee6e6e087d81439adeb0502a64044" translate="yes" xml:space="preserve">
          <source>Delay measured since last time (waking up regularly)</source>
          <target state="translated">自上一次醒来后测得的延迟(定期醒来)。</target>
        </trans-unit>
        <trans-unit id="7931adbb224cfbe0c0b2b9aa8f8764900c2bcfa4" translate="yes" xml:space="preserve">
          <source>Delays are done with the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time library&lt;/a&gt;, specifically the &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.sleep&quot;&gt;&lt;code&gt;time.sleep()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">延迟是通过&lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;时间库&lt;/a&gt;完成的，特别是&lt;a href=&quot;https://docs.python.org/2/library/time.html#time.sleep&quot;&gt; &lt;code&gt;time.sleep()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="cf866c42bd425e0291fd97643dcfa6f4ef378074" translate="yes" xml:space="preserve">
          <source>Delays can be also implemented by using the following methods.</source>
          <target state="translated">延迟也可以通过以下方法实现:</target>
        </trans-unit>
        <trans-unit id="e625f3dfd66c265e290de0f848e03b40adf1fdc5" translate="yes" xml:space="preserve">
          <source>Doing &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html#more-on-modules&quot;&gt;&lt;code&gt;from [library] import [function] (, [function2])&lt;/code&gt;&lt;/a&gt; is great if you just want certain parts of a module.</source>
          <target state="translated">如果只需要模块的某些部分，则可以&lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html#more-on-modules&quot;&gt; &lt;code&gt;from [library] import [function] (, [function2])&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="0d30d489b4e2d58fb26c4d464fbf024b9584317d" translate="yes" xml:space="preserve">
          <source>Example output from this script:</source>
          <target state="translated">这个脚本的输出示例。</target>
        </trans-unit>
        <trans-unit id="56a9bd508a83fe0c50056a7a20bbc0b88671c50e" translate="yes" xml:space="preserve">
          <source>Example using &lt;code&gt;sleep&lt;/code&gt; with multiple threads and processes</source>
          <target state="translated">使用具有多个线程和进程的 &lt;code&gt;sleep&lt;/code&gt; 示例</target>
        </trans-unit>
        <trans-unit id="9ed28a68bf9c1df4d3150948f5b7530982ce1c8d" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;driver.implicitly_wait()&lt;/code&gt; method (&lt;a href=&quot;http://en.wikipedia.org/wiki/Selenium_%28software%29&quot;&gt;Selenium&lt;/a&gt;):</source>
          <target state="translated">最后，使用 &lt;code&gt;driver.implicitly_wait()&lt;/code&gt; 方法（ &lt;a href=&quot;http://en.wikipedia.org/wiki/Selenium_%28software%29&quot;&gt;Selenium&lt;/a&gt; ）：</target>
        </trans-unit>
        <trans-unit id="bc6fe2650127b9a97cdd42ac94382cd11c83fa0f" translate="yes" xml:space="preserve">
          <source>Here is another example where something is run approximately once a minute:</source>
          <target state="translated">这里是另一个例子,大约每分钟跑一次的东西。</target>
        </trans-unit>
        <trans-unit id="9349218684690fa30d89e51ad6160c4b78263f4c" translate="yes" xml:space="preserve">
          <source>How can I make a time delay in Python</source>
          <target state="translated">如何在Python中做一个时间延迟</target>
        </trans-unit>
        <trans-unit id="6ef158461ff6b4d09a5e40fb28ba93e7f4323f5e" translate="yes" xml:space="preserve">
          <source>How can I make a time delay in Python?</source>
          <target state="translated">如何在Python中做一个时间延迟?</target>
        </trans-unit>
        <trans-unit id="010c7ad22a098468e1b16068db1c96342b4ab13a" translate="yes" xml:space="preserve">
          <source>However, if you want to delay the execution of a function do this:</source>
          <target state="translated">但是,如果你想延迟执行一个函数,可以这样做。</target>
        </trans-unit>
        <trans-unit id="2efca24b93aec85b6408e99ef35559acd8437df7" translate="yes" xml:space="preserve">
          <source>I would like to know how to put a time delay in a Python script.</source>
          <target state="translated">我想知道如何在Python脚本中放置一个时间延迟。</target>
        </trans-unit>
        <trans-unit id="1c714f1af81713cbc8fe5ee70c39881f8f73d3e3" translate="yes" xml:space="preserve">
          <source>If you use Tkinter, &lt;strong&gt;&lt;em&gt;do not use &lt;code&gt;time.sleep()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;, because it will muck up your program. This happened to me. Instead, use &lt;code&gt;root.after()&lt;/code&gt; and replace the values for however many seconds, with a milliseconds. For example, &lt;code&gt;time.sleep(1)&lt;/code&gt; is equivalent to &lt;code&gt;root.after(1000)&lt;/code&gt; in Tkinter.</source>
          <target state="translated">如果您使用Tkinter， &lt;strong&gt;&lt;em&gt;请不要使用 &lt;code&gt;time.sleep()&lt;/code&gt; &lt;/em&gt;&lt;/strong&gt; ，因为它会破坏您的程序。 这发生在我身上。 而是使用 &lt;code&gt;root.after()&lt;/code&gt; 并将值替换很多秒（以毫秒为单位）。 例如， &lt;code&gt;root.after(1000)&lt;/code&gt; &lt;code&gt;time.sleep(1)&lt;/code&gt; 等同于Tkinter中的root.after（1000） 。</target>
        </trans-unit>
        <trans-unit id="3191987b5a1dafb2fb8774c772a229d30bc7fa93" translate="yes" xml:space="preserve">
          <source>If you would like to put a time delay in a Python script:</source>
          <target state="translated">如果你想在Python脚本中加入一个时间延迟。</target>
        </trans-unit>
        <trans-unit id="3272590a207b5529ef220e91c9e8deb41c70f284" translate="yes" xml:space="preserve">
          <source>In a single thread I suggest the &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.sleep&quot;&gt;sleep function&lt;/a&gt;:</source>
          <target state="translated">在一个线程中，我建议使用&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.sleep&quot;&gt;sleep函数&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="6ecf47738150f09f675e67ee38cd445615f970e4" translate="yes" xml:space="preserve">
          <source>Invoking regular buzzergen</source>
          <target state="translated">调用常规的蜂鸣器源</target>
        </trans-unit>
        <trans-unit id="d928a0e8f52ebc771a3ec85278281de7921a361b" translate="yes" xml:space="preserve">
          <source>It does &lt;strong&gt;not&lt;/strong&gt; stop execution of the whole script (except for the function you pass it).</source>
          <target state="translated">它不会停止执行整个脚本（传递的函数除外）。</target>
        </trans-unit>
        <trans-unit id="b76f44367e4f988823d3600d2707b660625f407d" translate="yes" xml:space="preserve">
          <source>It is recommended to read &lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;asyncio official documentation&lt;/a&gt; for more details.</source>
          <target state="translated">建议阅读&lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;asyncio官方文档&lt;/a&gt;以获取更多详细信息。</target>
        </trans-unit>
        <trans-unit id="8a86acdcb9f782d0a3ed3f193ab37879a5d757d7" translate="yes" xml:space="preserve">
          <source>Multithreading</source>
          <target state="translated">Multithreading</target>
        </trans-unit>
        <trans-unit id="a5725b4ff118d35ba4d2b96ba356dd30ebfa9f2d" translate="yes" xml:space="preserve">
          <source>Notice in recent Python versions (Python&amp;nbsp;3.4 or higher) you can use &lt;code&gt;asyncio.sleep&lt;/code&gt;. It's related to asynchronous programming and asyncio. Check out next example:</source>
          <target state="translated">请注意，在最新的Python版本（Python 3.4或更高版本）中，您可以使用 &lt;code&gt;asyncio.sleep&lt;/code&gt; 。 它与异步编程和异步有关。 查看下一个示例：</target>
        </trans-unit>
        <trans-unit id="21d8e2fb6dc2d2ae6a8193be8ee78380d7f7cd2d" translate="yes" xml:space="preserve">
          <source>Now the shell will not crash or not react.</source>
          <target state="translated">现在壳不会崩溃或没有反应。</target>
        </trans-unit>
        <trans-unit id="47661067d0bb201448600056ba79c730b46bf55e" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;time.sleep()&lt;/code&gt;, which many answers have pointed out, which is the way to go.</source>
          <target state="translated">否则，很多答案都指出了 &lt;code&gt;time.sleep()&lt;/code&gt; ，这是要走的路。</target>
        </trans-unit>
        <trans-unit id="6ee76fa98a639a0ac269010b7032639b0a171647" translate="yes" xml:space="preserve">
          <source>Outputs:</source>
          <target state="translated">Outputs:</target>
        </trans-unit>
        <trans-unit id="dddd4b0332f3ee0b46fad826e1b107d8e90b0190" translate="yes" xml:space="preserve">
          <source>Rather than having to type out</source>
          <target state="translated">而不是必须打出</target>
        </trans-unit>
        <trans-unit id="5f21429317bfa35bf5d95f836b0c87122d45f3ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter&lt;/a&gt; library in the Python standard library is an interactive tool which you can import. Basically, you can create buttons and boxes and popups and stuff that appear as windows which you manipulate with code.</source>
          <target state="translated">Python标准库中的&lt;a href=&quot;http://en.wikipedia.org/wiki/Tkinter&quot;&gt;Tkinter&lt;/a&gt;库是一个可以导入的交互式工具。 基本上，您可以创建按钮，框，弹出窗口以及显示为窗口的内容，并使用代码进行操作。</target>
        </trans-unit>
        <trans-unit id="b12616c6907d010defcd3b82df4a9e419c2793ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.after()&lt;/code&gt; method (best with Tkinter):</source>
          <target state="translated">&lt;code&gt;.after()&lt;/code&gt; 方法（Tkinter最好）：</target>
        </trans-unit>
        <trans-unit id="1a5741b227a8b2f636ae72b12b81e6a2dcd47301" translate="yes" xml:space="preserve">
          <source>The blank line illustrates that the function printed to my standard output, and I had to hit</source>
          <target state="translated">空行说明功能打印到我的标准输出,我不得不打了</target>
        </trans-unit>
        <trans-unit id="8e1249068a2d6ae5c9d1c909d94784cf04ebcfa5" translate="yes" xml:space="preserve">
          <source>The first method:</source>
          <target state="translated">第一种方法。</target>
        </trans-unit>
        <trans-unit id="56655af0fd50a725a072a1767ade7068ea03d24f" translate="yes" xml:space="preserve">
          <source>The following code (&lt;strong&gt;sleepy.py&lt;/strong&gt;) defines a &lt;code&gt;buzzergen&lt;/code&gt; generator:</source>
          <target state="translated">以下代码（ &lt;strong&gt;sleepy.py&lt;/strong&gt; ）定义了一个 &lt;code&gt;buzzergen&lt;/code&gt; 生成器：</target>
        </trans-unit>
        <trans-unit id="a9b3859fc0b5da273d0cb725a4e6903de0a012f4" translate="yes" xml:space="preserve">
          <source>The question is about time delay. It can be fixed time, but in some cases we might need a delay measured since last time. Here is one possible solution:</source>
          <target state="translated">这个问题是关于时间延迟的问题。它可以是固定的时间,但在某些情况下,我们可能需要一个从上一次开始测量的延时。这里有一个可能的解决方案。</target>
        </trans-unit>
        <trans-unit id="09cf6ba31a19a8544a7078dfc7cbc87df1f0d3f5" translate="yes" xml:space="preserve">
          <source>The second method to delay would be using the implicit wait method:</source>
          <target state="translated">第二种延迟的方法是使用隐含等待法。</target>
        </trans-unit>
        <trans-unit id="ad95615af4809a9f28fd1400b09cecc5ef14e4c3" translate="yes" xml:space="preserve">
          <source>The situation can be, we want to do something as regularly as possible and we do not want to bother with all the &lt;code&gt;last_time&lt;/code&gt;, &lt;code&gt;next_time&lt;/code&gt; stuff all around our code.</source>
          <target state="translated">情况可能是，我们希望尽可能有规律地做某事，并且不想在我们的代码中打扰所有 &lt;code&gt;last_time&lt;/code&gt; ， &lt;code&gt;next_time&lt;/code&gt; 东西。</target>
        </trans-unit>
        <trans-unit id="b6d84c409903d2ec4da1938a47cc600a836c310a" translate="yes" xml:space="preserve">
          <source>The third method is more useful when you have to wait until a particular action is completed or until an element is found:</source>
          <target state="translated">第三种方法在你必须等到某个特定的动作完成或找到一个元素时才会更有用。</target>
        </trans-unit>
        <trans-unit id="3d3a367f185472ef2e8c8298b3c166d5c5ed3a75" translate="yes" xml:space="preserve">
          <source>The upside of this method is that while the &lt;code&gt;Timer&lt;/code&gt; thread was waiting, I was able to do other things, in this case, hitting</source>
          <target state="translated">这种方法的好处是，在 &lt;code&gt;Timer&lt;/code&gt; 线程等待期间，我能够执行其他操作，在这种情况下，</target>
        </trans-unit>
        <trans-unit id="beb26c167c5de46f70cc2fc5f9553ca6c6477b28" translate="yes" xml:space="preserve">
          <source>There are five methods which I know: &lt;code&gt;time.sleep()&lt;/code&gt;, &lt;code&gt;pygame.time.wait()&lt;/code&gt;, matplotlib's &lt;code&gt;pyplot.pause()&lt;/code&gt;, &lt;code&gt;.after()&lt;/code&gt;, and &lt;code&gt;driver.implicitly_wait()&lt;/code&gt;.</source>
          <target state="translated">我知道五种方法： &lt;code&gt;pygame.time.wait()&lt;/code&gt; &lt;code&gt;time.sleep()&lt;/code&gt; ， pygame.time.wait（） ，matplotlib的 &lt;code&gt;pyplot.pause()&lt;/code&gt; ,.after()和 &lt;code&gt;driver.implicitly_wait()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ca911a37989616cdfd14bc5d7083e9015f2c4c1" translate="yes" xml:space="preserve">
          <source>There isn't a respective object in the &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;multiprocessing library&lt;/a&gt;. You can create one, but it probably doesn't exist for a reason. A sub-thread makes a lot more sense for a simple timer than a whole new subprocess.</source>
          <target state="translated">在&lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;多处理库中&lt;/a&gt;没有相应的对象。 您可以创建一个，但是由于某种原因它可能不存在。 对于一个简单的计时器，子线程比整个新的子进程更有意义。</target>
        </trans-unit>
        <trans-unit id="544902afafe606f82d482784d32fb4e6bec74483" translate="yes" xml:space="preserve">
          <source>This function actually suspends the processing of the thread in which it is called by the operating system, allowing other threads and processes to execute while it sleeps.</source>
          <target state="translated">这个功能实际上暂停了操作系统调用的线程的处理,允许其他线程和进程在休眠时执行。</target>
        </trans-unit>
        <trans-unit id="4d79e067fd2982d3e0c7bc5c71c7df90b4a8e10b" translate="yes" xml:space="preserve">
          <source>This is an easy example of a time delay:</source>
          <target state="translated">这就是一个简单的时间延迟的例子。</target>
        </trans-unit>
        <trans-unit id="ca03fdfd13e88049c9e6e57bacb28283de64dd4b" translate="yes" xml:space="preserve">
          <source>This works because by doing:</source>
          <target state="translated">这是因为通过做。</target>
        </trans-unit>
        <trans-unit id="13cce817c5c8f37c6c2b0a06062efd86dca8d136" translate="yes" xml:space="preserve">
          <source>This works on any library.</source>
          <target state="translated">这在任何图书馆都可以使用。</target>
        </trans-unit>
        <trans-unit id="56aa7e3bda8be972ce8cbfab9c3096c5e066956e" translate="yes" xml:space="preserve">
          <source>This would save you an &lt;code&gt;import&lt;/code&gt; if you already have &lt;code&gt;matplotlib&lt;/code&gt; imported.</source>
          <target state="translated">如果您已经 &lt;code&gt;import&lt;/code&gt; 了 &lt;code&gt;matplotlib&lt;/code&gt; ,这将为您节省导入时间。</target>
        </trans-unit>
        <trans-unit id="382afd30572c76fc0904bd1188fff3b66609657f" translate="yes" xml:space="preserve">
          <source>To demonstrate, create a script like this (I first attempted this in an interactive Python 3.5 shell, but sub-processes can't find the &lt;code&gt;party_later&lt;/code&gt; function for some reason):</source>
          <target state="translated">为了演示，创建一个这样的脚本（我首先在交互式Python 3.5 shell中尝试过该脚本，但是由于某些原因子进程找不到 &lt;code&gt;party_later&lt;/code&gt; 函数）：</target>
        </trans-unit>
        <trans-unit id="638cd899a4d6b4ad3c74d908a63c1b2df44972f0" translate="yes" xml:space="preserve">
          <source>To just make it wait for a second:</source>
          <target state="translated">只是为了让它等一下。</target>
        </trans-unit>
        <trans-unit id="280d2f44142a6d5c43332ff9ec79feba90c8d507" translate="yes" xml:space="preserve">
          <source>Typically this is used to prevent the plot from disappearing as soon as it is plotted or to make crude animations.</source>
          <target state="translated">通常情况下,这是为了防止剧情一被绘制出来就消失,或者是制作粗制滥造的动画。</target>
        </trans-unit>
        <trans-unit id="7ad2484a75160ab75806ea330eeeb01986cfdeaa" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://docs.python.org/2.7/library/threading.html?highlight=timer#threading.Timer&quot;&gt;&lt;strong&gt;&lt;code&gt;threading.Timer&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; like this:</source>
          <target state="translated">像这样使用&lt;a href=&quot;https://docs.python.org/2.7/library/threading.html?highlight=timer#threading.Timer&quot;&gt;&lt;strong&gt; &lt;code&gt;threading.Timer&lt;/code&gt; &lt;/strong&gt;&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="e007b7f4b3ea3a30a7f30d721046c05c8356eb72" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;&lt;code&gt;time.sleep&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;Event().wait&lt;/code&gt;&lt;/strong&gt; like this:</source>
          <target state="translated">使用&lt;strong&gt; &lt;code&gt;time.sleep&lt;/code&gt; &lt;/strong&gt;或&lt;strong&gt; &lt;code&gt;Event().wait&lt;/code&gt; &lt;/strong&gt;像这样：</target>
        </trans-unit>
        <trans-unit id="f7d8207163bc3d4fe8166336b5b19ee3e15f45bd" translate="yes" xml:space="preserve">
          <source>Use it for that purpose, or simply to delay a function from executing. For example:</source>
          <target state="translated">用它来实现这个目的,或者仅仅是为了延迟一个函数的执行。比如说。</target>
        </trans-unit>
        <trans-unit id="fcdbe0d68350d6ca3449f34069d2c2792c589d24" translate="yes" xml:space="preserve">
          <source>We can also use it directly in a loop:</source>
          <target state="translated">我们也可以直接循环使用。</target>
        </trans-unit>
        <trans-unit id="75945ab7086c08f5e9c03ce246f7219a7a1635b1" translate="yes" xml:space="preserve">
          <source>We may think it will &quot;sleep&quot; for 2 seconds for first method and then 3 seconds in the second method, a total of 5 seconds running time of this code. But it will print:</source>
          <target state="translated">我们可能会认为第一个方法会 &quot;睡眠 &quot;2秒,第二个方法会 &quot;睡眠 &quot;3秒,总共5秒的运行时间。但它会打印出来。</target>
        </trans-unit>
        <trans-unit id="218a5effffa68320d4e8009412574b3a180d9177" translate="yes" xml:space="preserve">
          <source>Which is awkwardly long to type.</source>
          <target state="translated">这是很尴尬的,打字太长了。</target>
        </trans-unit>
        <trans-unit id="99c17ffae30cb54018e04772d65dfaec1c0310e7" translate="yes" xml:space="preserve">
          <source>While everyone else has suggested the de facto &lt;code&gt;time&lt;/code&gt; module, I thought I'd share a different method using &lt;code&gt;matplotlib&lt;/code&gt;'s &lt;code&gt;pyplot&lt;/code&gt; function, &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pause.html&quot;&gt;&lt;code&gt;pause&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">尽管其他所有人都建议了事实上的 &lt;code&gt;time&lt;/code&gt; 模块，但我认为我会使用 &lt;code&gt;matplotlib&lt;/code&gt; 的 &lt;code&gt;pyplot&lt;/code&gt; 函数， &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pause.html&quot;&gt; &lt;code&gt;pause&lt;/code&gt; &lt;/a&gt;共享另一种方法。</target>
        </trans-unit>
        <trans-unit id="3a19765fc7706c4836475d68f37b774c2d0536f8" translate="yes" xml:space="preserve">
          <source>Why use the later approach?</source>
          <target state="translated">为什么要用后面的方法?</target>
        </trans-unit>
        <trans-unit id="03ab58f65a69b0c22ceafc7fa002acd8c8d8833d" translate="yes" xml:space="preserve">
          <source>With this method, you wouldn't get access to the other features of the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time library&lt;/a&gt; and you can't have a variable called &lt;code&gt;sleep&lt;/code&gt;. But you could create a variable called &lt;code&gt;time&lt;/code&gt;.</source>
          <target state="translated">使用这种方法，您将无法访问&lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;时间库&lt;/a&gt;的其他功能，也无法获得名为 &lt;code&gt;sleep&lt;/code&gt; 的变量。 但是您可以创建一个名为 &lt;code&gt;time&lt;/code&gt; 的变量。</target>
        </trans-unit>
        <trans-unit id="2a3a4ad86d5a030b538ca381ad9c0e99f0f36782" translate="yes" xml:space="preserve">
          <source>You also can try this:</source>
          <target state="translated">你也可以试试这个。</target>
        </trans-unit>
        <trans-unit id="f5e8c92fc3970623a21d507b4896a02a3b966061" translate="yes" xml:space="preserve">
          <source>You can trigger a function to be called at a later time in a separate thread with the &lt;code&gt;Timer&lt;/code&gt;&lt;a href=&quot;https://docs.python.org/3/library/threading.html&quot;&gt;threading&lt;/a&gt; object:</source>
          <target state="translated">您可以触发稍后在另一个线程中使用 &lt;code&gt;Timer&lt;/code&gt; &lt;a href=&quot;https://docs.python.org/3/library/threading.html&quot;&gt;线程&lt;/a&gt;对象调用的函数：</target>
        </trans-unit>
        <trans-unit id="f93153801181b6a70f73bebd9d5993e722102061" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://docs.python.org/library/time.html#time.sleep&quot;&gt;&lt;code&gt;sleep()&lt;/code&gt; function in the &lt;code&gt;time&lt;/code&gt; module&lt;/a&gt;. It can take a float argument for sub-second resolution.</source>
          <target state="translated">您可以&lt;a href=&quot;https://docs.python.org/library/time.html#time.sleep&quot;&gt;在 &lt;code&gt;time&lt;/code&gt; 模块中&lt;/a&gt;使用 &lt;code&gt;sleep()&lt;/code&gt; 函数 。 对于亚秒级分辨率，它可以采用float参数。</target>
        </trans-unit>
        <trans-unit id="4383d212f5953ff96f5826a13ac1ce4e08aed49d" translate="yes" xml:space="preserve">
          <source>You could equally do it as:</source>
          <target state="translated">你也可以把它当做:</target>
        </trans-unit>
        <trans-unit id="e914c626f38160956c6bd9c140804d93ee7f56ee" translate="yes" xml:space="preserve">
          <source>You extract the &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.sleep&quot;&gt;sleep function&lt;/a&gt;&lt;strong&gt;only&lt;/strong&gt; from the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time library&lt;/a&gt;, which means you can just call it with:</source>
          <target state="translated">您&lt;strong&gt;只能&lt;/strong&gt;从&lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;时间库中&lt;/a&gt;提取&lt;a href=&quot;https://docs.python.org/2/library/time.html#time.sleep&quot;&gt;sleep函数&lt;/a&gt; ，这意味着您可以使用以下命令进行调用：</target>
        </trans-unit>
        <trans-unit id="6cba0e1d6890bff82404dff03cd1f422d6e67a5c" translate="yes" xml:space="preserve">
          <source>and you would have access to the other features of the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time library&lt;/a&gt; like &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.clock&quot;&gt;&lt;code&gt;time.clock()&lt;/code&gt;&lt;/a&gt; as long as you type &lt;code&gt;time.[function]()&lt;/code&gt;, but you couldn't create the variable time because it would overwrite the import. A solution to this to do</source>
          <target state="translated">并且只要输入 &lt;code&gt;time.[function]()&lt;/code&gt; ，您就可以访问&lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;时间库&lt;/a&gt;的其他功能，例如&lt;a href=&quot;https://docs.python.org/2/library/time.html#time.clock&quot;&gt; &lt;code&gt;time.clock()&lt;/code&gt; &lt;/a&gt; （） ，但是您无法创建可变时间，因为它将覆盖导入。 解决方案</target>
        </trans-unit>
        <trans-unit id="72001f706e27aca51397df153b349ce165c37eb1" translate="yes" xml:space="preserve">
          <source>asyncio.sleep</source>
          <target state="translated">asyncio.sleep</target>
        </trans-unit>
        <trans-unit id="6ef48a43c487856e9b097f9c198fbbabc06fb848" translate="yes" xml:space="preserve">
          <source>matplotlib's function &lt;code&gt;pyplot.pause()&lt;/code&gt; example (not recommended if you are not using the graph, but you could exit the graph instantly):</source>
          <target state="translated">matplotlib的函数 &lt;code&gt;pyplot.pause()&lt;/code&gt; 示例（如果不使用图形，则不建议使用，但可以立即退出图形）：</target>
        </trans-unit>
        <trans-unit id="3ab669871abe8637f13ef4703686e62caba9dd00" translate="yes" xml:space="preserve">
          <source>one time - before the function executed (see the first empty prompt).</source>
          <target state="translated">一次-在函数执行前(见第一个空提示)。</target>
        </trans-unit>
        <trans-unit id="018175ff66842e901e103384585533b3779c8cab" translate="yes" xml:space="preserve">
          <source>to ensure I was on a prompt.</source>
          <target state="translated">以确保我是在一个提示上。</target>
        </trans-unit>
        <trans-unit id="bb8fcd5d540065a62affd4dff8028511f0daf543" translate="yes" xml:space="preserve">
          <source>which would allow you to reference the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time library&lt;/a&gt; as &lt;code&gt;t&lt;/code&gt;, allowing you to do:</source>
          <target state="translated">这将允许您将&lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;时间库&lt;/a&gt;引用为 &lt;code&gt;t&lt;/code&gt; ，从而可以执行以下操作：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
