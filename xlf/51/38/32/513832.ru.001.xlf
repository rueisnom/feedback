<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/513832">
    <body>
      <group id="513832">
        <trans-unit id="534e6e35df4d7a293d4fb797e174a5f76b1e1e74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)&quot;&gt;Objects.equals()&lt;/a&gt; checks for &lt;code&gt;null&lt;/code&gt; before calling &lt;code&gt;.equals()&lt;/code&gt; so you don't have to (available as of JDK7, also available in &lt;a href=&quot;https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals&quot;&gt;Guava&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)&quot;&gt;Objects.equals ()&lt;/a&gt; проверяет &lt;code&gt;null&lt;/code&gt; перед вызовом &lt;code&gt;.equals()&lt;/code&gt; поэтому вам не нужно (доступно с JDK7, также доступно в &lt;a href=&quot;https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals&quot;&gt;Гуаве&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="50d43f0916ad54e9845c2ad2b4e494d7973e3311" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-&quot;&gt;String.contentEquals()&lt;/a&gt; compares the content of the &lt;code&gt;String&lt;/code&gt; with the content of any &lt;code&gt;CharSequence&lt;/code&gt; (available since Java 1.5).</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-&quot;&gt;String.contentEquals ()&lt;/a&gt; сравнивает содержимое &lt;code&gt;String&lt;/code&gt; с содержимым любой &lt;code&gt;CharSequence&lt;/code&gt; (доступно начиная с Java 1.5).</target>
        </trans-unit>
        <trans-unit id="e192e0e817715cc164367bdc6257808206f7aef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; compares String values.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; сравнивает строковые значения.</target>
        </trans-unit>
        <trans-unit id="88f052486d7c3398f63c986b644896db673de477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; compares the data in a class (assuming the function is implemented).
&lt;code&gt;==&lt;/code&gt; compares pointer locations (location of the object in memory).</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; сравнивает данные в классе (при условии, что функция реализована). &lt;code&gt;==&lt;/code&gt; сравнивает местоположения указателя (расположение объекта в памяти).</target>
        </trans-unit>
        <trans-unit id="97f06596c10185b66f044c98db5fa447f42cbbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; tests for value equality (whether they are logically &quot;equal&quot;).</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; проверяет равенство значений (являются ли они логически &amp;laquo;равными&amp;raquo;).</target>
        </trans-unit>
        <trans-unit id="2d0683433eb16443cb6ac4e5d95688372936574c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; compares Object references.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; сравнивает ссылки на объекты.</target>
        </trans-unit>
        <trans-unit id="d99d8255c217ecd40d6e336608014d1c046139ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; compares the reference value of objects whereas the &lt;code&gt;equals()&lt;/code&gt; method present in the &lt;code&gt;java.lang.String&lt;/code&gt; class compares the contents of the &lt;code&gt;String&lt;/code&gt; object (to another object).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; сравнивает эталонное значение объектов, тогда как метод &lt;code&gt;equals()&lt;/code&gt; представленный в классе &lt;code&gt;java.lang.String&lt;/code&gt; , сравнивает содержимое объекта &lt;code&gt;String&lt;/code&gt; (с другим объектом).</target>
        </trans-unit>
        <trans-unit id="a7845d5fc79d961485ccf489239e9b8562c7adcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; handles &lt;code&gt;null&lt;/code&gt; strings fine, but calling &lt;code&gt;.equals()&lt;/code&gt; from a null string will cause an exception:</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; отлично обрабатывает &lt;code&gt;null&lt;/code&gt; строки, но вызов &lt;code&gt;.equals()&lt;/code&gt; из пустой строки вызовет исключение:</target>
        </trans-unit>
        <trans-unit id="127a53ded3ac4bf04076d5f594c50d3375520fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; означает, что ваши две строковые ссылки - это один и тот же объект. Возможно, вы слышали, что это так, потому что Java хранит своего рода буквальную таблицу (что она делает), но это не всегда так. Некоторые строки загружаются по-разному, создаются из других строк и т. Д., Поэтому вы никогда не должны предполагать, что две одинаковые строки хранятся в одном месте.</target>
        </trans-unit>
        <trans-unit id="972cd1c4c26a9b3d5a65d2854333166a32a64472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; performs a &lt;strong&gt;reference&lt;/strong&gt; equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; выполняет проверку на равенство &lt;strong&gt;ссылок, ссылаются&lt;/strong&gt; ли 2 объекта (в данном случае на строки) на один и тот же объект в памяти.</target>
        </trans-unit>
        <trans-unit id="3e8ab4bbb062dbd444c07ca3191ce5b49b24c15e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance.
&lt;code&gt;.equals()&lt;/code&gt; returns true if the two objects contain the same data &lt;a href=&quot;http://www.java-samples.com/showtutorial.php?tutorialid=221&quot;&gt;&lt;code&gt;equals()&lt;/code&gt; Versus &lt;code&gt;==&lt;/code&gt; in Java&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; возвращает истину, если оба объекта (НЕ ОБРАЩАЯСЯ О ПРИМИТИВАХ) указывают на тот же экземпляр объекта. &lt;code&gt;.equals()&lt;/code&gt; возвращает true, если два объекта содержат одинаковые данные: &lt;a href=&quot;http://www.java-samples.com/showtutorial.php?tutorialid=221&quot;&gt; &lt;code&gt;equals()&lt;/code&gt; Versus &lt;code&gt;==&lt;/code&gt; в Java&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65bb9efb919c1b1b9f8f00a8ab69486e0c1f6fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; tests for reference equality (whether they are the same object).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; проверяет равенство ссылок (являются ли они одним и тем же объектом).</target>
        </trans-unit>
        <trans-unit id="a40f8dacba2a1950f6ea624f0d2317bcc2a772dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; tests object references, &lt;code&gt;.equals()&lt;/code&gt; tests the string values.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; проверяет ссылки на объекты, &lt;code&gt;.equals()&lt;/code&gt; проверяет строковые значения.</target>
        </trans-unit>
        <trans-unit id="a6e3babe176e5f525115bc259e2f5e512d8d9667" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equals&lt;/code&gt; is actually the method of the Object class, but it is Overridden into the String class and a new definition is given which compares the contents of object.</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; на самом деле является методом класса Object, но он переопределяется в класс String, и дается новое определение, которое сравнивает содержимое объекта.</target>
        </trans-unit>
        <trans-unit id="ce16c9cf4f660e1842cc8af2704dd6ef8946c75c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Example&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8218a9a9840123be7b37c5258175c475d6d3d5f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(a==b) ===&amp;gt; true&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;(a == b) ===&amp;gt; верно&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de97c48c26c2975344975ab7fd565ec5f47f43e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;==&lt;/code&gt; compares object references in Java&lt;/strong&gt;, and that is no exception for &lt;code&gt;String&lt;/code&gt; objects.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;==&lt;/code&gt; сравнивает ссылки на объекты в Java&lt;/strong&gt; , и это не исключение для объектов &lt;code&gt;String&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f9b336e70ecf3d8434ca63a79793c6e9a5a5306" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;But beware of nulls!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Но остерегайтесь нулей!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c83aa0f60e0ba5d1766913ffd675fc9f79c342e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Дело 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf6e653fe9d46dc5857806ccff042fa746c23fc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Дело 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c83e5f944d3f32a33f78893b1ae58827ce8aa54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For comparing the actual contents of objects (including &lt;code&gt;String&lt;/code&gt;), one must use the &lt;code&gt;equals&lt;/code&gt; method&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Для сравнения фактического содержимого объектов (включая &lt;code&gt;String&lt;/code&gt; ) необходимо использовать метод &lt;code&gt;equals&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="380badf346b49077ad347f903d9e64bdfc6c0961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 1: Java String comparison with the equals method&lt;/strong&gt;
Most of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:</source>
          <target state="translated">&lt;strong&gt;Вариант 1. Сравнение строк Java с помощью метода equals В&lt;/strong&gt; большинстве случаев (возможно, в 95% случаев) я сравниваю строки с методом equals класса Java String, например:</target>
        </trans-unit>
        <trans-unit id="eb85d4a727a36caf962b7bac941d7c46f894a6a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 2: String comparison with the equalsIgnoreCase method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вариант 2. Сравнение строк с помощью метода equalsIgnoreCase&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42bd1a8a45eb4097779363d21181e70e60ef953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 3: Java String comparison with the compareTo method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вариант 3: сравнение строк Java с помощью метода CompareTo&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae8b1214c75a26ad44633cb7ce38b5eea68d2fd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;if(a==b) ===&amp;gt; false.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;если (a == b) ===&amp;gt; false.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc8538d9ce17c45cfa160ccf33b7ac0efa63fee" translate="yes" xml:space="preserve">
          <source>A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the &lt;code&gt;StringBuilder&lt;/code&gt; classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same &lt;code&gt;==&lt;/code&gt; would be a fine way to go. Strings themselves do not.</source>
          <target state="translated">Ключевым моментом является то, что строки хранятся в одном объединенном пуле, поэтому после создания строки она всегда сохраняется в программе по одному и тому же адресу. Строки не меняются, они неизменны. Вот почему плохая идея использовать обычную конкатенацию строк, если у вас есть серьезный объем обработки строки. Вместо этого вы должны использовать предоставленные классы &lt;code&gt;StringBuilder&lt;/code&gt; . Помните, что указатели на эту строку могут измениться, и если вам интересно узнать, совпадают ли два указателя &lt;code&gt;==&lt;/code&gt; , это был бы хороший способ. Сами струны нет.</target>
        </trans-unit>
        <trans-unit id="2e32a37850b13cf98c87aa3bc11f6bbc550512a2" translate="yes" xml:space="preserve">
          <source>All objects are guaranteed to have a &lt;code&gt;.equals()&lt;/code&gt; method since Object contains a method, &lt;code&gt;.equals()&lt;/code&gt;, that returns a boolean. It is the subclass' job to override this method if a further defining definition is required. Without it (i.e. using &lt;code&gt;==&lt;/code&gt;) only memory addresses are checked between two objects for equality. String overrides this &lt;code&gt;.equals()&lt;/code&gt; method and instead of using the memory address it returns the comparison of strings at the character level for equality.</source>
          <target state="translated">Все объекты гарантированно имеют метод &lt;code&gt;.equals()&lt;/code&gt; так как Object содержит метод &lt;code&gt;.equals()&lt;/code&gt; , который возвращает логическое значение. Задача подкласса - переопределить этот метод, если требуется дополнительное определение. Без него (т. &lt;code&gt;==&lt;/code&gt; использованием == ) только адреса памяти проверяются между двумя объектами на равенство. String переопределяет этот &lt;code&gt;.equals()&lt;/code&gt; и вместо использования адреса памяти возвращает сравнение строк на уровне символов для равенства.</target>
        </trans-unit>
        <trans-unit id="2e7d953f9e0db5183f7079c0553cc235460d97be" translate="yes" xml:space="preserve">
          <source>But mind it respects the case of String. If you want case insensitive compare then you must go for the equalsIgnoreCase method of the String class.</source>
          <target state="translated">Но имейте в виду,что он уважает случай со Стрингом.Если вы хотите нечувствительное к регистру сравнение,то вы должны использовать метод equalsIgnoreCase класса String.</target>
        </trans-unit>
        <trans-unit id="08393c6c77f96e040c5d84e5121ed2a44b0608d1" translate="yes" xml:space="preserve">
          <source>But what you can do is to call &lt;code&gt;intern()&lt;/code&gt; on your non-literal strings.</source>
          <target state="translated">Но то, что вы можете сделать, это вызвать &lt;code&gt;intern()&lt;/code&gt; для ваших не-литеральных строк.</target>
        </trans-unit>
        <trans-unit id="15a3cf51d08c5a4791935fe82b44b7c4f15102fb" translate="yes" xml:space="preserve">
          <source>But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:</source>
          <target state="translated">Но когда две строки содержат одну и ту же строку символов,метод equals вернет true,как в данном примере:</target>
        </trans-unit>
        <trans-unit id="af38a399948a04b463b546d4f948912c00118098" translate="yes" xml:space="preserve">
          <source>Consequently, if you want to test whether two strings have the same value you will probably want to use &lt;code&gt;Objects.equals()&lt;/code&gt;.</source>
          <target state="translated">Следовательно, если вы хотите проверить, имеют ли две строки одинаковое значение, вы, вероятно, захотите использовать &lt;code&gt;Objects.equals()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6aafac2f992d36c8bca828739a7404532d20a8a6" translate="yes" xml:space="preserve">
          <source>Consider two different reference variables, &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt;:</source>
          <target state="translated">Рассмотрим две разные ссылочные переменные, &lt;code&gt;str1&lt;/code&gt; и &lt;code&gt;str2&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9847ecced7aa002791c61138db5356d024636623" translate="yes" xml:space="preserve">
          <source>Definitely the use of &lt;code&gt;equals()&lt;/code&gt; method is recommended.</source>
          <target state="translated">Определенно рекомендуется использовать метод &lt;code&gt;equals()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf3bcba66a1552787dd686311371f4c3aa8ed466" translate="yes" xml:space="preserve">
          <source>Don't worry about the performance. Some things to encourage using &lt;code&gt;String.equals()&lt;/code&gt;:</source>
          <target state="translated">Не беспокойтесь о производительности. Некоторые вещи, которые следует поощрять с помощью &lt;code&gt;String.equals()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b06f25fbeed92476c87e1968ec046f4936266cc1" translate="yes" xml:space="preserve">
          <source>Equals does the real comparison for you.</source>
          <target state="translated">Равно как и реальное сравнение за тебя.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="f4fca6333e5c683fdaa7713181bcfbd25b1d2643" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot;&gt;JLS 3.10.5. &lt;em&gt;String Literals&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">Из &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot;&gt;JLS 3.10.5.&lt;/a&gt; &lt;em&gt;Строковые литералы&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="003e5d38b8c1eac244f02ac363a47c0bbaf9273c" translate="yes" xml:space="preserve">
          <source>From zacherates example:</source>
          <target state="translated">Из примера с закэратами:</target>
        </trans-unit>
        <trans-unit id="160b3670e04858fde7e4140b45e86e3c1b2090a9" translate="yes" xml:space="preserve">
          <source>Function:</source>
          <target state="translated">Function:</target>
        </trans-unit>
        <trans-unit id="14fb73b968e1433308008402842a19df1bd245b3" translate="yes" xml:space="preserve">
          <source>How do I compare strings in Java</source>
          <target state="translated">Как сравнить строки на Java</target>
        </trans-unit>
        <trans-unit id="e90775e8efad74a01524c188edc8b6dc2072c2b5" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;==&lt;/code&gt; fails in the following case:</source>
          <target state="translated">Тем не менее, &lt;code&gt;==&lt;/code&gt; не работает в следующем случае:</target>
        </trans-unit>
        <trans-unit id="ad8fc1b7115a0a617bf3361c92f8d88d012c6205" translate="yes" xml:space="preserve">
          <source>I agree with the answer from zacherates.</source>
          <target state="translated">Я согласен с ответом Закхерата.</target>
        </trans-unit>
        <trans-unit id="209b45599a8f24c29dacb03bdf122cc9869d6a84" translate="yes" xml:space="preserve">
          <source>I think that when you define a &lt;code&gt;String&lt;/code&gt; you define an object. So you need to use &lt;code&gt;.equals()&lt;/code&gt;. When you use primitive data types you use &lt;code&gt;==&lt;/code&gt; but with &lt;code&gt;String&lt;/code&gt; (and any object) you must use &lt;code&gt;.equals()&lt;/code&gt;.</source>
          <target state="translated">Я думаю, что когда вы определяете &lt;code&gt;String&lt;/code&gt; вы определяете объект. Так что вам нужно использовать &lt;code&gt;.equals()&lt;/code&gt; . Когда вы используете примитивные типы данных, вы используете &lt;code&gt;==&lt;/code&gt; , но с &lt;code&gt;String&lt;/code&gt; (и любым объектом) вы должны использовать &lt;code&gt;.equals()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c6deec886dc61621c93ed9d7b5c29032c707f83c" translate="yes" xml:space="preserve">
          <source>I've been using the &lt;code&gt;==&lt;/code&gt; operator in my program to compare all my strings so far.
However, I ran into a bug, changed one of them into &lt;code&gt;.equals()&lt;/code&gt; instead, and it fixed the bug.</source>
          <target state="translated">До сих пор я использовал оператор &lt;code&gt;==&lt;/code&gt; в моей программе для сравнения всех моих строк. Однако я столкнулся с ошибкой, вместо этого изменил одну из них на &lt;code&gt;.equals()&lt;/code&gt; , и она исправила ошибку.</target>
        </trans-unit>
        <trans-unit id="ee1db44f97923a97f6aa14945a8e524aef45e729" translate="yes" xml:space="preserve">
          <source>If a comparison of two &lt;code&gt;String&lt;/code&gt; objects using &lt;code&gt;==&lt;/code&gt; turns out to be &lt;code&gt;true&lt;/code&gt;, that is because the &lt;code&gt;String&lt;/code&gt; objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of &lt;code&gt;String&lt;/code&gt;. One should not expect that comparing one &lt;code&gt;String&lt;/code&gt; object containing the same contents as another &lt;code&gt;String&lt;/code&gt; object using &lt;code&gt;==&lt;/code&gt; to evaluate as &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Если сравнение двух объектов &lt;code&gt;String&lt;/code&gt; с использованием &lt;code&gt;==&lt;/code&gt; оказывается &lt;code&gt;true&lt;/code&gt; , то это потому, что объекты &lt;code&gt;String&lt;/code&gt; были интернированы, а виртуальная машина Java имеет несколько ссылок на один и тот же экземпляр &lt;code&gt;String&lt;/code&gt; . Не следует ожидать, что при сравнении одного объекта &lt;code&gt;String&lt;/code&gt; , содержащего то же содержимое, что и другой объект &lt;code&gt;String&lt;/code&gt; , используется &lt;code&gt;==&lt;/code&gt; для оценки как &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0975ad48f5593aec2b3883279cad972877d542d2" translate="yes" xml:space="preserve">
          <source>If the 2 string references are not the same, &lt;code&gt;String.equals()&lt;/code&gt; will next check the lengths of the strings. This is also a fast operation because the &lt;code&gt;String&lt;/code&gt; class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.</source>
          <target state="translated">Если 2 строковые ссылки не совпадают, &lt;code&gt;String.equals()&lt;/code&gt; затем проверит длину строк. Это также быстрая операция, потому что класс &lt;code&gt;String&lt;/code&gt; хранит длину строки, не нужно подсчитывать символы или кодовые точки. Если длины различаются, дальнейшая проверка не выполняется, мы знаем, что они не могут быть равны.</target>
        </trans-unit>
        <trans-unit id="622b2c72cef877135d3204c3e9e609ea0df5f20c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;equals()&lt;/code&gt; method is present in the &lt;code&gt;java.lang.Object&lt;/code&gt; class, and it is expected to check for the equivalence of the state of objects! That means, the contents of the objects. Whereas the &lt;code&gt;==&lt;/code&gt; operator is expected to check the actual object instances are same or not.</source>
          <target state="translated">Если метод &lt;code&gt;equals()&lt;/code&gt; присутствует в классе &lt;code&gt;java.lang.Object&lt;/code&gt; , и ожидается, что он проверит эквивалентность состояния объектов! Это означает, что содержимое объектов. В то время как оператор &lt;code&gt;==&lt;/code&gt; должен проверять фактические экземпляры объекта одинаковы или нет.</target>
        </trans-unit>
        <trans-unit id="d701e5196e6f58abe2f4c8d3e765a337b6d5958c" translate="yes" xml:space="preserve">
          <source>If you intern the non-literal String equality is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">Если вы интернировать не буквальное String равенство &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a18409dd8aad86765bdf0eb5ade6c3e9c27a06b1" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;equals()&lt;/code&gt;</source>
          <target state="translated">Если вы используете &lt;code&gt;equals()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a606952753cf3dc70cfcd11f34796ac37f150100" translate="yes" xml:space="preserve">
          <source>If you're like me, when I first started using Java, I wanted to use the &quot;==&quot; operator to test whether two String instances were equal, but for better or worse, that's not the correct way to do it in Java.</source>
          <target state="translated">Если вы,как и я,когда я впервые начал использовать Java,я хотел использовать оператор &quot;==&quot;,чтобы проверить,равны ли два экземпляра Строки,но к лучшему или к худшему,это не правильный способ сделать это на Java.</target>
        </trans-unit>
        <trans-unit id="19563d43dbd1fb12946c8b55472adc3ce8a4a839" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;code&gt;String.equals()&lt;/code&gt; first checks for reference equality (using &lt;code&gt;==&lt;/code&gt;), and if the 2 strings are the same by reference, no further calculation is performed!</source>
          <target state="translated">Реализация &lt;code&gt;String.equals()&lt;/code&gt; сначала проверяет равенство ссылок (используя &lt;code&gt;==&lt;/code&gt; ), и если две строки одинаковы по ссылке, дальнейшие вычисления не выполняются!</target>
        </trans-unit>
        <trans-unit id="df7f3b75bfe7cc351d7943de807b0754f7e73609" translate="yes" xml:space="preserve">
          <source>In Java, when the &lt;strong&gt;&amp;ldquo;==&amp;rdquo;&lt;/strong&gt; operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location.</source>
          <target state="translated">В Java, когда оператор &lt;strong&gt;&amp;laquo;==&amp;raquo;&lt;/strong&gt; используется для сравнения 2 объектов, он проверяет, ссылаются ли объекты на одно и то же место в памяти. Другими словами, он проверяет, являются ли два имени объекта в основном ссылками на одну и ту же ячейку памяти.</target>
        </trans-unit>
        <trans-unit id="f9de1f4d7b9c7548a170b2aee63ef265f6232437" translate="yes" xml:space="preserve">
          <source>In some string comparison tests you'll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:</source>
          <target state="translated">В некоторых тестах сравнения строк вам захочется проигнорировать,заглавные или строчные.Когда вы хотите проверить строки на равенство таким нечувствительным к регистру способом,используйте метод equalsIgnoreCase класса String,например,вот так:</target>
        </trans-unit>
        <trans-unit id="5096e9095a26aead7dd77a00dd73649fb297b01c" translate="yes" xml:space="preserve">
          <source>In this case for &lt;code&gt;new String(&quot;test&quot;)&lt;/code&gt; the statement new String will be created on the heap, and that reference will be given to &lt;code&gt;b&lt;/code&gt;, so &lt;code&gt;b&lt;/code&gt; will be given a reference on the heap, not in String pool.</source>
          <target state="translated">В этом случае для &lt;code&gt;new String(&quot;test&quot;)&lt;/code&gt; в куче будет создан оператор new String, и эта ссылка будет передана &lt;code&gt;b&lt;/code&gt; , поэтому &lt;code&gt;b&lt;/code&gt; будет дана ссылка на кучу, а не в пул строк.</target>
        </trans-unit>
        <trans-unit id="ca3a426a66508840a27f96c237b38e05c70f30b4" translate="yes" xml:space="preserve">
          <source>In this tutorial I'll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I'll also discuss why the &quot;==&quot; operator doesn't work when comparing Java strings.</source>
          <target state="translated">В этом уроке я продемонстрирую несколько различных способов корректного сравнения Java-строк,начиная с подхода,который я использую большую часть времени.В конце данного урока я также расскажу,почему оператор &quot;==&quot; не работает при сравнении Java-строк.</target>
        </trans-unit>
        <trans-unit id="66c5627d8cfe42bc4a6e93001ed6714eba02b7c5" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;==&lt;/code&gt; bad? When should it and should it not be used? What's the difference?</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; плохо? Когда это должно и не должно быть использовано? Какая разница?</target>
        </trans-unit>
        <trans-unit id="44ed4293c7fc2288444421274472d44a6e861151" translate="yes" xml:space="preserve">
          <source>Java also talks about the function intern() that can be used on a string to make it part of the cache so &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;).intern()&lt;/code&gt; will return true.</source>
          <target state="translated">Java также говорит о функции intern (), которая может использоваться в строке, чтобы сделать ее частью кэша, поэтому &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;).intern()&lt;/code&gt; вернет true.</target>
        </trans-unit>
        <trans-unit id="bbcdbf601957f23cebef96d44f7ff1ddf50b5aff" translate="yes" xml:space="preserve">
          <source>Java have a String pool under which Java manages the memory allocation for the String objects. See &lt;a href=&quot;https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java&quot;&gt;&lt;strong&gt;String Pools in Java&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">У Java есть пул String, в котором Java управляет распределением памяти для объектов String. Посмотрите &lt;a href=&quot;https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java&quot;&gt;&lt;strong&gt;Струнные Бассейны в Java&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed8dd2b96dbe38262e709c95739664151e953eb1" translate="yes" xml:space="preserve">
          <source>Let's See:</source>
          <target state="translated">Давай посмотрим:</target>
        </trans-unit>
        <trans-unit id="a73fa850bcd40c5192a74b3a633598a1eeddab8d" translate="yes" xml:space="preserve">
          <source>Make sure you understand why.  It's because the &lt;code&gt;==&lt;/code&gt; comparison only compares references; the &lt;code&gt;equals()&lt;/code&gt; method does a character-by-character comparison of the contents.</source>
          <target state="translated">Убедитесь, что вы понимаете, почему. Это потому, что сравнение &lt;code&gt;==&lt;/code&gt; сравнивает только ссылки; метод &lt;code&gt;equals()&lt;/code&gt; выполняет посимвольное сравнение содержимого.</target>
        </trans-unit>
        <trans-unit id="91794435135957626e3496e47088bf3118716d4a" translate="yes" xml:space="preserve">
          <source>Moreover, a string literal always refers to the &lt;em&gt;same&lt;/em&gt; instance of class &lt;code&gt;String&lt;/code&gt;. This is because string literals - or, more generally, strings that are the values of constant expressions (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28&quot;&gt;&amp;sect;15.28&lt;/a&gt;) - are &quot;interned&quot; so as to share unique instances, using the method &lt;code&gt;String.intern&lt;/code&gt;.</source>
          <target state="translated">Более того, строковый литерал всегда ссылается на один и тот &lt;em&gt;же&lt;/em&gt; экземпляр класса &lt;code&gt;String&lt;/code&gt; . Это связано с тем, что строковые литералы - или, в более общем смысле, строки, являющиеся значениями константных выражений ( &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28&quot;&gt;&amp;sect;15.28&lt;/a&gt; ), - являются &quot;интернированными&quot;, чтобы совместно использовать уникальные экземпляры, используя метод &lt;code&gt;String.intern&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c374a8d811dc06c407f72b0c1bd01c73410b563a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;.equals()&lt;/code&gt; method belongs to class &lt;code&gt;Object&lt;/code&gt; (super class of all classes). You need to override it as per you class requirement, but for String it is already implemented, and it checks whether two strings have the same value or not.</source>
          <target state="translated">Обратите внимание, что метод &lt;code&gt;.equals()&lt;/code&gt; принадлежит классу &lt;code&gt;Object&lt;/code&gt; (суперкласс всех классов). Вам необходимо переопределить его в соответствии с требованиями вашего класса, но для String он уже реализован и проверяет, имеют ли две строки одинаковое значение или нет.</target>
        </trans-unit>
        <trans-unit id="ef7869c142e8b9c650d51fd7d526dffaf522ae76" translate="yes" xml:space="preserve">
          <source>Note: == operator is much faster than equals just because you are comparing two memory addresses, but you need to be sure that the code isn't creating new String instances in the code. Otherwise you will encounter bugs.</source>
          <target state="translated">Замечание:оператор ==намного быстрее,чем equals,только потому,что вы сравниваете два адреса памяти,но нужно быть уверенным,что код не создает в коде новые экземпляры строк.Иначе вы столкнетесь с ошибками.</target>
        </trans-unit>
        <trans-unit id="05f4a05acd2ff60019ca1cc57a02118ad5e2b4c8" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;a&lt;/code&gt; is pointing to a String in the String pool while &lt;code&gt;b&lt;/code&gt; is pointing to a String on the heap. Because of that we get:</source>
          <target state="translated">Теперь &lt;code&gt;a&lt;/code&gt; указывает на строку в пуле строк, а &lt;code&gt;b&lt;/code&gt; указывает на строку в куче. Из-за этого мы получаем:</target>
        </trans-unit>
        <trans-unit id="3ae4c4c99288daf3be8f6b076a1e030bc8f2a226" translate="yes" xml:space="preserve">
          <source>Now you will get the &lt;code&gt;FALSE&lt;/code&gt; as output, because both &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; are pointing to two different objects even though both of them share the same string content. It is because of &lt;code&gt;new String()&lt;/code&gt; a new object is created every time.</source>
          <target state="translated">Теперь вы получите &lt;code&gt;FALSE&lt;/code&gt; в качестве вывода, потому что и &lt;code&gt;str1&lt;/code&gt; , и &lt;code&gt;str2&lt;/code&gt; указывают на два разных объекта, хотя оба они имеют одинаковое строковое содержимое. Именно из-за &lt;code&gt;new String()&lt;/code&gt; каждый раз создается новый объект.</target>
        </trans-unit>
        <trans-unit id="77c5595bc439eb350a3083fde96d4b94b19d4d24" translate="yes" xml:space="preserve">
          <source>Obviously &lt;code&gt;==&lt;/code&gt; is faster, but will (might) give false results in many cases if you just want to tell if 2 &lt;code&gt;String&lt;/code&gt;s hold the same text.</source>
          <target state="translated">Очевидно, что &lt;code&gt;==&lt;/code&gt; быстрее, но будет (может) давать ложные результаты во многих случаях, если вы просто хотите сказать, содержат ли 2 &lt;code&gt;String&lt;/code&gt; и тот же текст.</target>
        </trans-unit>
        <trans-unit id="3f5984755ab3c60967abd3d47569bff195c24d31" translate="yes" xml:space="preserve">
          <source>Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a mismatching character (at the same position in the 2 strings), no further characters will be checked.</source>
          <target state="translated">Только если мы зашли так далеко,содержимое 2-х строк будет реально сравниваться,и это будет короткое сравнение:не все символы будут сравниваться,если мы найдем несовпадающий символ (на той же позиции в 2-х строках),никакие другие символы не будут проверяться.</target>
        </trans-unit>
        <trans-unit id="4931a37091118ff489ec2354e6f1916dc8e35e55" translate="yes" xml:space="preserve">
          <source>Operator &lt;em&gt;==&lt;/em&gt; is always meant for &lt;strong&gt;object reference comparison&lt;/strong&gt;, whereas the String class &lt;em&gt;.equals()&lt;/em&gt; method is overridden for &lt;strong&gt;content comparison&lt;/strong&gt;:</source>
          <target state="translated">Оператор &lt;em&gt;==&lt;/em&gt; всегда предназначен для &lt;strong&gt;сравнения ссылок&lt;/strong&gt; на &lt;strong&gt;объекты&lt;/strong&gt; , тогда как метод класса String &lt;em&gt;.equals ()&lt;/em&gt; переопределяется для &lt;strong&gt;сравнения содержимого&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="62d3323f1a4b43a5308396720b3529bdc784b601" translate="yes" xml:space="preserve">
          <source>Reason: If you create a String object using the &lt;code&gt;new&lt;/code&gt; keyword a separate space is allocated to it on the heap.</source>
          <target state="translated">Причина: если вы создаете объект String, используя ключевое слово &lt;code&gt;new&lt;/code&gt; ,ему выделяется отдельное пространство в куче.</target>
        </trans-unit>
        <trans-unit id="e004e448e24213231c66b0837a3d3ab87e6c6817" translate="yes" xml:space="preserve">
          <source>Reason: String literals created without null are stored in the String pool in the permgen area of heap. So both s1 and s2 point to same object in the pool.</source>
          <target state="translated">Причина:Строковые литералы,созданные без нуля,хранятся в пуле строк в области пермгена кучи.Таким образом,и s1,и s2 указывают на один и тот же объект в пуле.</target>
        </trans-unit>
        <trans-unit id="e9694929438ff9ef921133d3e537bf55f70f6175" translate="yes" xml:space="preserve">
          <source>Similar examples can also be found in &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634&quot;&gt;JLS 3.10.5-1&lt;/a&gt;.</source>
          <target state="translated">Подобные примеры также можно найти в &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634&quot;&gt;JLS 3.10.5-1&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7678ffc7a34ab9b5bce1ba690a307007c3bc4cb7" translate="yes" xml:space="preserve">
          <source>So if you know that &lt;code&gt;fooString1&lt;/code&gt; may be null, tell the reader that by writing</source>
          <target state="translated">Так что, если вы знаете, что &lt;code&gt;fooString1&lt;/code&gt; может быть нулевым, скажите читателю, что, написав</target>
        </trans-unit>
        <trans-unit id="6364ba01158454f664dad6de332f337ba05f8043" translate="yes" xml:space="preserve">
          <source>So the question is if all the strings are cached in the system, how come &lt;code&gt;==&lt;/code&gt; returns false whereas equals return true? Well, this is possible. If you make a new string like &lt;code&gt;String str = new String(&quot;Testing&quot;)&lt;/code&gt; you end up creating a new string in the cache even if the cache already contains a string having the same content. In short &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;)&lt;/code&gt; will always return false.</source>
          <target state="translated">Итак, вопрос в том, все ли строки кэшированы в системе. Почему &lt;code&gt;==&lt;/code&gt; возвращает false, а equals возвращает true? Ну, это возможно. Если вы создадите новую строку, такую ​​как &lt;code&gt;String str = new String(&quot;Testing&quot;)&lt;/code&gt; вы в конечном итоге создадите новую строку в кеше, даже если кеш уже содержит строку с таким же содержимым. Короче говоря, &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;)&lt;/code&gt; всегда будет возвращать false.</target>
        </trans-unit>
        <trans-unit id="925bf81cb272f91e408e2585dfe66406073ec384" translate="yes" xml:space="preserve">
          <source>So using &lt;code&gt;.equals()&lt;/code&gt; is always better.</source>
          <target state="translated">Так что использование &lt;code&gt;.equals()&lt;/code&gt; всегда лучше.</target>
        </trans-unit>
        <trans-unit id="64e94d29a587c1b43ed1ff2b1f5eea22f76e7e69" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;code&gt;==&lt;/code&gt; gives illusions of comparing String values, as in following cases:</source>
          <target state="translated">Иногда &lt;code&gt;==&lt;/code&gt; дает иллюзии сравнения значений String, как в следующих случаях:</target>
        </trans-unit>
        <trans-unit id="ef7777dabf10c38fea3b84a7896afa72857e8048" translate="yes" xml:space="preserve">
          <source>Sometimes it looks as if &lt;code&gt;==&lt;/code&gt; compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.</source>
          <target state="translated">Иногда это выглядит так, как будто &lt;code&gt;==&lt;/code&gt; сравнивает значения, потому что Java делает некоторые закулисные вещи, чтобы убедиться, что идентичные строки в действительности являются одним и тем же объектом.</target>
        </trans-unit>
        <trans-unit id="dc72f9ad1e0fe392b547dcb502b649489b4e684e" translate="yes" xml:space="preserve">
          <source>Strings in Java are immutable. That means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.</source>
          <target state="translated">Строки на Java неизменны.Это означает,что всякий раз,когда вы пытаетесь изменить строку,вы получаете новый экземпляр.Вы не можете изменить исходную строку.Это сделано для того,чтобы эти экземпляры строк могли быть кэшированы.Типичная программа содержит большое количество ссылок на строки,и кэширование этих экземпляров может уменьшить объем памяти и увеличить производительность программы.</target>
        </trans-unit>
        <trans-unit id="1a5b82a90623ced9b5ebfc731549926d882846eb" translate="yes" xml:space="preserve">
          <source>Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):</source>
          <target state="translated">Рассмотрим пример быстрого сравнения строк с методом equals,если бы был запущен следующий тест,то две строки не считались бы равными,так как символы не совсем одинаковые (случай символов разный):</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="b0163278938a7a8c6bd706310467bbb52b4e5811" translate="yes" xml:space="preserve">
          <source>That may help you.</source>
          <target state="translated">Это может тебе помочь.</target>
        </trans-unit>
        <trans-unit id="956e0cfc5f2a662f8be4c8e1953a725f10223a4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.equals()&lt;/code&gt; method  check if the two strings have the same value.</source>
          <target state="translated">Метод &lt;code&gt;.equals()&lt;/code&gt; проверяет, имеют ли две строки одинаковое значение.</target>
        </trans-unit>
        <trans-unit id="3e72766ae6883a1ca99b3e34b1d125ce6dbd4582" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.equals()&lt;/code&gt; method will check if the two strings have the same value.</source>
          <target state="translated">Метод &lt;code&gt;.equals()&lt;/code&gt; проверит, имеют ли две строки одинаковое значение.</target>
        </trans-unit>
        <trans-unit id="3978d062c149bf7accbca4cf5ab4522220f8fe12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; compares the references and does not compare the actual strings. If you did create every string using &lt;code&gt;new String(somestring).intern()&lt;/code&gt; then you can use the &lt;code&gt;==&lt;/code&gt; operator to compare two strings, otherwise equals() or compareTo methods can only be used.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; сравнивает ссылки и не сравнивает фактические строки. Если вы создали каждую строку, используя &lt;code&gt;new String(somestring).intern()&lt;/code&gt; вы можете использовать оператор &lt;code&gt;==&lt;/code&gt; для сравнения двух строк, в противном случае можно использовать только методы equals () или compareTo.</target>
        </trans-unit>
        <trans-unit id="5512073b994a06023b1cc12815e391ae76326db3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator check if the two references point to the same object or not. &lt;code&gt;.equals()&lt;/code&gt; check for the actual string content (value).</source>
          <target state="translated">Оператор &lt;code&gt;==&lt;/code&gt; проверяет, указывают ли две ссылки на один и тот же объект или нет. &lt;code&gt;.equals()&lt;/code&gt; проверяет фактическое содержимое строки (значение).</target>
        </trans-unit>
        <trans-unit id="38eb3a4f9caacaa06f820fa599872a9b24a84e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator checks if the two strings are exactly the same object.</source>
          <target state="translated">Оператор &lt;code&gt;==&lt;/code&gt; проверяет, являются ли две строки одним и тем же объектом.</target>
        </trans-unit>
        <trans-unit id="a9a0606a28ccdd73d47713f4b0a9ffe7105e4faa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator checks to see if the two strings are exactly the same object.</source>
          <target state="translated">Оператор &lt;code&gt;==&lt;/code&gt; проверяет, являются ли две строки одним и тем же объектом.</target>
        </trans-unit>
        <trans-unit id="d48da5a819a7433506b69dd9c4156df1be51f528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method will check whether the &lt;strong&gt;contents&lt;/strong&gt; or the &lt;strong&gt;states&lt;/strong&gt; of 2 objects are the same.</source>
          <target state="translated">Метод &lt;code&gt;equals()&lt;/code&gt; проверит, совпадают ли &lt;strong&gt;содержимое&lt;/strong&gt; или &lt;strong&gt;состояния&lt;/strong&gt; двух объектов.</target>
        </trans-unit>
        <trans-unit id="4c712b2bf82e618b0042ca50c72334d695ff56a7" translate="yes" xml:space="preserve">
          <source>The Java String class actually overrides the default equals() implementation in the Object class &amp;ndash; and it overrides the method so that it checks only the values of the strings, not their locations in memory.
 This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.</source>
          <target state="translated">Класс Java String фактически переопределяет реализацию equals () по умолчанию в классе Object - и он переопределяет метод так, что он проверяет только значения строк, а не их расположение в памяти. Это означает, что если вы вызываете метод equals () для сравнения двух строковых объектов, то при условии, что фактическая последовательность символов равна, оба объекта считаются равными.</target>
        </trans-unit>
        <trans-unit id="b255548604584b6fe35e432b209faddbe10a7980" translate="yes" xml:space="preserve">
          <source>The following is shorter, but it&amp;rsquo;s less obvious that it checks for null (from Java 7):</source>
          <target state="translated">Ниже короче, но менее очевидно, что он проверяет на ноль (из Java 7):</target>
        </trans-unit>
        <trans-unit id="3caa790aba81043457285ebcb715deab21762bd6" translate="yes" xml:space="preserve">
          <source>There is also a third, less common way to compare Java strings, and that's with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here's a quick example of what this String comparison approach looks like:</source>
          <target state="translated">Существует также третий,менее распространенный способ сравнения Java-строк,и это с помощью метода String class comparisonTo.Если две строки одинаковы,то метод compareTo вернет значение 0 (ноль).Приведем небольшой пример того,как выглядит этот метод сравнения String:</target>
        </trans-unit>
        <trans-unit id="bd99e0fef1de55924764a54805cc9bf8add6c76c" translate="yes" xml:space="preserve">
          <source>This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.</source>
          <target state="translated">Этот метод String equals смотрит на две Java-строки,и если они содержат одну и ту же строку символов,то они считаются равными.</target>
        </trans-unit>
        <trans-unit id="e9a6798a3b8ca94cbcd2c60ca2d18c6ff69b9779" translate="yes" xml:space="preserve">
          <source>This is because when you create any String literal, the JVM first searches for that literal in the String pool, and if it finds a match, that same reference will be given to the new String. Because of this, we get:</source>
          <target state="translated">Это потому,что когда вы создаете любой строковый литерал,JVM сначала ищет этот литерал в пуле строк,и если он находит совпадение,то эта же ссылка будет дана на новую строку.Из-за этого мы получаем:</target>
        </trans-unit>
        <trans-unit id="9123a723dd721a4c3eb2ba822a7a05286c4f3051" translate="yes" xml:space="preserve">
          <source>When all is said and done, even if we have guarantee that the strings are interns, using the &lt;code&gt;equals()&lt;/code&gt; method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).</source>
          <target state="translated">Когда все сказано и сделано, даже если у нас есть гарантия того, что строки являются интернами, использование метода &lt;code&gt;equals()&lt;/code&gt; по-прежнему не так уж сложно, как можно подумать, определенно рекомендуемый способ. Если вам нужна эффективная проверка ссылок, используйте перечисления, если в спецификации и реализации языка гарантируется, что одно и то же значение перечисления будет одним и тем же объектом (посредством ссылки).</target>
        </trans-unit>
        <trans-unit id="c6dbba253687916f57aa803f9e2177e9867ca001" translate="yes" xml:space="preserve">
          <source>When using == operator for string comparison you are not comparing the contents of the string, but are actually comparing the memory address. If they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.</source>
          <target state="translated">При использовании оператора ==для сравнения строк вы не сравниваете содержимое строки,а фактически сравниваете адрес памяти.Если они оба равны,то в противном случае будет возвращено true и false.В то время как оператор equals в строке сравнивает содержимое строки.</target>
        </trans-unit>
        <trans-unit id="8d70775b46e120808e9850984c65117158958e7d" translate="yes" xml:space="preserve">
          <source>When you call new for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, each one gets a new reference that points to the &lt;code&gt;&quot;foo&quot;&lt;/code&gt; in the string table.  The references are different, but the content is the same.</source>
          <target state="translated">Когда вы вызываете new для &lt;code&gt;a&lt;/code&gt; и &lt;code&gt;b&lt;/code&gt; , каждый получает новую ссылку, которая указывает на &lt;code&gt;&quot;foo&quot;&lt;/code&gt; в таблице строк. Ссылки разные, но содержание одинаковое.</target>
        </trans-unit>
        <trans-unit id="4d0a9e43f42077a13b12f40c79f0b6c8bc2da63a" translate="yes" xml:space="preserve">
          <source>When you check (compare) two objects using the &lt;code&gt;==&lt;/code&gt; operator it compares the address equality into the string-pool. If the two String objects have the same address references then it returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. But if you want to compare the contents of two String objects then you must override the &lt;code&gt;equals&lt;/code&gt; method.</source>
          <target state="translated">Когда вы проверяете (сравниваете) два объекта с помощью оператора &lt;code&gt;==&lt;/code&gt; , он сравнивает равенство адресов в пуле строк. Если два объекта String имеют одинаковые адреса адресов, он возвращает &lt;code&gt;true&lt;/code&gt; , в противном случае - &lt;code&gt;false&lt;/code&gt; . Но если вы хотите сравнить содержимое двух объектов String, вы должны переопределить метод &lt;code&gt;equals&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="586e208e279cd35f608e8fe3160362705865c64d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;.equals()&lt;/code&gt; always compares a value of String so it gives true in both cases:</source>
          <target state="translated">В то время как &lt;code&gt;.equals()&lt;/code&gt; всегда сравнивает значение String, поэтому оно дает true в обоих случаях:</target>
        </trans-unit>
        <trans-unit id="41629ab5d619a837a7d228c06888aa2337ba8eac" translate="yes" xml:space="preserve">
          <source>While I'm writing about this concept of equality in Java, it's important to note that the Java language includes an equals method in the base Java Object class. Whenever you're creating your own objects and you want to provide a means to see if two instances of your object are &quot;equal&quot;, you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).</source>
          <target state="translated">Пока я пишу об этом понятии равенства в Java,важно отметить,что язык Java включает метод equals в базовый класс Java Object.Всякий раз,когда вы создаёте свои собственные объекты и хотите предоставить средство,чтобы увидеть,что два экземпляра вашего объекта &quot;равны&quot;,вы должны переопределить (и реализовать)этот метод equals в вашем классе (точно так же,как язык Java обеспечивает такое же поведение эквитикомсравнения в методе String equals).</target>
        </trans-unit>
        <trans-unit id="dce24af4033f2e3a02feb720dd5df0c2bafd0e35" translate="yes" xml:space="preserve">
          <source>Yea, it's bad...</source>
          <target state="translated">Да,это плохо...</target>
        </trans-unit>
        <trans-unit id="d6e11d8f251b17000089bf6e46de65e7004dda75" translate="yes" xml:space="preserve">
          <source>Yes, &lt;code&gt;==&lt;/code&gt; is bad for comparing Strings (any objects really, unless you know they're canonical).  &lt;code&gt;==&lt;/code&gt; just compares object references.  &lt;code&gt;.equals()&lt;/code&gt; tests for equality. For Strings, often they'll be the same but as you've discovered, that's not guaranteed always.</source>
          <target state="translated">Да, &lt;code&gt;==&lt;/code&gt; плохо подходит для сравнения строк (любые объекты на самом деле, если вы не знаете, что они канонические). &lt;code&gt;==&lt;/code&gt; просто сравнивает ссылки на объекты. &lt;code&gt;.equals()&lt;/code&gt; проверяет на равенство. Для строк часто они будут одинаковыми, но, как вы обнаружили, это не гарантируется всегда.</target>
        </trans-unit>
        <trans-unit id="f8e7716ea4c3e20c7bdf723f23756bb919d9eaad" translate="yes" xml:space="preserve">
          <source>You almost &lt;strong&gt;always&lt;/strong&gt; want to use &lt;code&gt;Objects.equals()&lt;/code&gt;. In the &lt;strong&gt;rare&lt;/strong&gt; situation where you &lt;strong&gt;know&lt;/strong&gt; you're dealing with &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--&quot;&gt;interned&lt;/a&gt; strings, you &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">Вы почти &lt;strong&gt;всегда&lt;/strong&gt; хотите использовать &lt;code&gt;Objects.equals()&lt;/code&gt; . В &lt;strong&gt;редкой&lt;/strong&gt; ситуации, когда вы &lt;strong&gt;знаете,&lt;/strong&gt; что имеете дело с &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--&quot;&gt;интернированными&lt;/a&gt; строками, вы &lt;em&gt;можете&lt;/em&gt; использовать &lt;code&gt;==&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5161c797f0345d83c726119d178d75aa5610fb2c" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;compareTo()&lt;/code&gt; method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal.</source>
          <target state="translated">Вы также можете использовать метод &lt;code&gt;compareTo()&lt;/code&gt; для сравнения двух строк. Если результат CompareTo равен 0, то две строки равны, иначе сравниваемые строки не равны.</target>
        </trans-unit>
        <trans-unit id="0afb8ff09e0f16ede865ab95dfcdc15300c82b5a" translate="yes" xml:space="preserve">
          <source>You may want to have a look at this &lt;a href=&quot;http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html&quot;&gt;==, .equals(), compareTo(), and compare()&lt;/a&gt;</source>
          <target state="translated">Возможно, вы захотите взглянуть на это &lt;a href=&quot;http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html&quot;&gt;==, .equals (), compareTo () и сравнить ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ea16d98d575b2b8348dcba9edc206a8a0907873" translate="yes" xml:space="preserve">
          <source>You will get the output as &lt;code&gt;TRUE&lt;/code&gt; if you use &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">Вы получите вывод как &lt;code&gt;TRUE&lt;/code&gt; , если будете использовать &lt;code&gt;==&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
