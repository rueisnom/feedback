<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/513832">
    <body>
      <group id="513832">
        <trans-unit id="534e6e35df4d7a293d4fb797e174a5f76b1e1e74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)&quot;&gt;Objects.equals()&lt;/a&gt; checks for &lt;code&gt;null&lt;/code&gt; before calling &lt;code&gt;.equals()&lt;/code&gt; so you don't have to (available as of JDK7, also available in &lt;a href=&quot;https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals&quot;&gt;Guava&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)&quot;&gt;Objects.equals ()&lt;/a&gt; 는 &lt;code&gt;.equals()&lt;/code&gt; 를 호출하기 전에 &lt;code&gt;null&lt;/code&gt; 을 확인하므로 필요하지 않습니다 (JDK7부터 사용 가능, &lt;a href=&quot;https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals&quot;&gt;Guava&lt;/a&gt; 에서도 사용 가능).</target>
        </trans-unit>
        <trans-unit id="50d43f0916ad54e9845c2ad2b4e494d7973e3311" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-&quot;&gt;String.contentEquals()&lt;/a&gt; compares the content of the &lt;code&gt;String&lt;/code&gt; with the content of any &lt;code&gt;CharSequence&lt;/code&gt; (available since Java 1.5).</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contentEquals-java.lang.CharSequence-&quot;&gt;String.contentEquals ()&lt;/a&gt; 는 &lt;code&gt;String&lt;/code&gt; 의 내용을 &lt;code&gt;CharSequence&lt;/code&gt; 의 내용 (Java 1.5부터 사용 가능 ) 과 비교합니다.</target>
        </trans-unit>
        <trans-unit id="e192e0e817715cc164367bdc6257808206f7aef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; compares String values.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 는 문자열 값을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="88f052486d7c3398f63c986b644896db673de477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; compares the data in a class (assuming the function is implemented).
&lt;code&gt;==&lt;/code&gt; compares pointer locations (location of the object in memory).</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 는 클래스의 데이터를 비교합니다 (함수가 구현되었다고 가정). &lt;code&gt;==&lt;/code&gt; 포인터 위치 (메모리에서 객체의 위치)를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="97f06596c10185b66f044c98db5fa447f42cbbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; tests for value equality (whether they are logically &quot;equal&quot;).</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 는 값의 동등성 (논리적으로 &quot;동일한 지&quot;여부 )을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="2d0683433eb16443cb6ac4e5d95688372936574c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; compares Object references.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 객체 참조를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="d99d8255c217ecd40d6e336608014d1c046139ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; compares the reference value of objects whereas the &lt;code&gt;equals()&lt;/code&gt; method present in the &lt;code&gt;java.lang.String&lt;/code&gt; class compares the contents of the &lt;code&gt;String&lt;/code&gt; object (to another object).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 객체의 참조 값을 비교하는 반면 &lt;code&gt;java.lang.String&lt;/code&gt; 클래스에있는 &lt;code&gt;equals()&lt;/code&gt; 메소드는 &lt;code&gt;String&lt;/code&gt; 객체의 내용을 다른 객체와 비교합니다.</target>
        </trans-unit>
        <trans-unit id="a7845d5fc79d961485ccf489239e9b8562c7adcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; handles &lt;code&gt;null&lt;/code&gt; strings fine, but calling &lt;code&gt;.equals()&lt;/code&gt; from a null string will cause an exception:</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; &lt;code&gt;null&lt;/code&gt; 문자열을 잘 처리하지만 null 문자열에서 &lt;code&gt;.equals()&lt;/code&gt; 를 호출하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="127a53ded3ac4bf04076d5f594c50d3375520fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 는 두 문자열 참조가 정확히 동일한 객체임을 의미합니다. Java가 일종의 리터럴 테이블을 유지하기 때문에 이것이 사실이라고 들었을 수도 있지만, 항상 그런 것은 아닙니다. 일부 문자열은 다른 문자열 등으로 구성된 다른 방식으로로드되므로 두 개의 동일한 문자열이 동일한 위치에 저장되어 있다고 가정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="972cd1c4c26a9b3d5a65d2854333166a32a64472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; performs a &lt;strong&gt;reference&lt;/strong&gt; equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 는 2 개의 객체 (이 경우 문자열)가 메모리에서 동일한 객체를 참조하는지 여부에 따라 &lt;strong&gt;참조&lt;/strong&gt; 동등성 검사를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="3e8ab4bbb062dbd444c07ca3191ce5b49b24c15e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance.
&lt;code&gt;.equals()&lt;/code&gt; returns true if the two objects contain the same data &lt;a href=&quot;http://www.java-samples.com/showtutorial.php?tutorialid=221&quot;&gt;&lt;code&gt;equals()&lt;/code&gt; Versus &lt;code&gt;==&lt;/code&gt; in Java&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; TALKING ABOUT PRIMITIVES가 아닌 두 개체가 모두 SAME 개체 인스턴스를 가리키는 경우 ==를 반환합니다. &lt;code&gt;.equals()&lt;/code&gt; 는 두 객체에 동일한 데이터 &lt;a href=&quot;http://www.java-samples.com/showtutorial.php?tutorialid=221&quot;&gt; &lt;code&gt;equals()&lt;/code&gt; 와 Java의 &lt;code&gt;==&lt;/code&gt; 가&lt;/a&gt; 포함되어 있으면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="65bb9efb919c1b1b9f8f00a8ab69486e0c1f6fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; tests for reference equality (whether they are the same object).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 참조 동등성을 테스트합니다 (동일한 오브젝트인지 여부).</target>
        </trans-unit>
        <trans-unit id="a40f8dacba2a1950f6ea624f0d2317bcc2a772dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt; tests object references, &lt;code&gt;.equals()&lt;/code&gt; tests the string values.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 객체 참조를 테스트하고 &lt;code&gt;.equals()&lt;/code&gt; 는 문자열 값을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="a6e3babe176e5f525115bc259e2f5e512d8d9667" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equals&lt;/code&gt; is actually the method of the Object class, but it is Overridden into the String class and a new definition is given which compares the contents of object.</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; 는 실제로 Object 클래스의 메서드이지만 String 클래스로 재정의되며 객체의 내용을 비교하는 새로운 정의가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ce16c9cf4f660e1842cc8af2704dd6ef8946c75c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Example&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8218a9a9840123be7b37c5258175c475d6d3d5f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(a==b) ===&amp;gt; true&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;(a == b) ===&amp;gt; 참&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de97c48c26c2975344975ab7fd565ec5f47f43e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;==&lt;/code&gt; compares object references in Java&lt;/strong&gt;, and that is no exception for &lt;code&gt;String&lt;/code&gt; objects.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;==&lt;/code&gt; Java의 객체 참조를 비교&lt;/strong&gt; 하므로 &lt;code&gt;String&lt;/code&gt; 객체의 예외는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4f9b336e70ecf3d8434ca63a79793c6e9a5a5306" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;But beware of nulls!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;그러나 null을 조심하십시오!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c83aa0f60e0ba5d1766913ffd675fc9f79c342e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;사례 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf6e653fe9d46dc5857806ccff042fa746c23fc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Case 2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;사례 2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c83e5f944d3f32a33f78893b1ae58827ce8aa54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For comparing the actual contents of objects (including &lt;code&gt;String&lt;/code&gt;), one must use the &lt;code&gt;equals&lt;/code&gt; method&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;객체의 실제 내용 ( &lt;code&gt;String&lt;/code&gt; 포함)을 비교하려면 &lt;code&gt;equals&lt;/code&gt; 메소드를 사용해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="380badf346b49077ad347f903d9e64bdfc6c0961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 1: Java String comparison with the equals method&lt;/strong&gt;
Most of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:</source>
          <target state="translated">&lt;strong&gt;옵션 1 : equals 메소드를 사용한 Java 문자열 비교&lt;/strong&gt; 대부분의 경우 (시간의 95 %) 다음과 같이 Java String 클래스의 equals 메소드와 문자열을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="eb85d4a727a36caf962b7bac941d7c46f894a6a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 2: String comparison with the equalsIgnoreCase method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;옵션 2 : equalsIgnoreCase 메소드를 사용한 문자열 비교&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42bd1a8a45eb4097779363d21181e70e60ef953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Option 3: Java String comparison with the compareTo method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;옵션 3 : compareTo 메소드를 사용한 Java 문자열 비교&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae8b1214c75a26ad44633cb7ce38b5eea68d2fd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;if(a==b) ===&amp;gt; false.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;if (a == b) ===&amp;gt; 거짓.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc8538d9ce17c45cfa160ccf33b7ac0efa63fee" translate="yes" xml:space="preserve">
          <source>A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the &lt;code&gt;StringBuilder&lt;/code&gt; classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same &lt;code&gt;==&lt;/code&gt; would be a fine way to go. Strings themselves do not.</source>
          <target state="translated">핵심은 문자열이 하나의 덩어리 풀에 저장되므로 문자열이 생성되면 동일한 주소의 프로그램에 영원히 저장된다는 것입니다. 문자열은 변경되지 않으며 변경할 수 없습니다. 따라서 많은 양의 문자열 처리가 필요한 경우 일반 문자열 연결을 사용하는 것이 좋지 않습니다. 대신 제공된 &lt;code&gt;StringBuilder&lt;/code&gt; 클래스를 사용합니다. 이 문자열에 대한 포인터가 변경 될 수 있음을 기억하고 두 포인터가 같은지 &lt;code&gt;==&lt;/code&gt; 좋은 방법인지 확인하려면 관심이 있다면. 문자열 자체는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e32a37850b13cf98c87aa3bc11f6bbc550512a2" translate="yes" xml:space="preserve">
          <source>All objects are guaranteed to have a &lt;code&gt;.equals()&lt;/code&gt; method since Object contains a method, &lt;code&gt;.equals()&lt;/code&gt;, that returns a boolean. It is the subclass' job to override this method if a further defining definition is required. Without it (i.e. using &lt;code&gt;==&lt;/code&gt;) only memory addresses are checked between two objects for equality. String overrides this &lt;code&gt;.equals()&lt;/code&gt; method and instead of using the memory address it returns the comparison of strings at the character level for equality.</source>
          <target state="translated">Object에는 부울을 리턴하는 &lt;code&gt;.equals()&lt;/code&gt; 메소드가 포함되어 있으므로 모든 오브젝트에는 &lt;code&gt;.equals()&lt;/code&gt; 메소드가 있어야합니다. 추가 정의가 필요한 경우이 메소드를 대체하는 것이 서브 클래스의 작업입니다. 이것이 없으면 (즉, &lt;code&gt;==&lt;/code&gt; 사용) 메모리 주소 만 두 객체 사이에서 동일한 지 검사합니다. 문자열은이 &lt;code&gt;.equals()&lt;/code&gt; 메서드를 재정의하고 메모리 주소를 사용하는 대신 동일한 문자 수준에서 문자열 비교를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2e7d953f9e0db5183f7079c0553cc235460d97be" translate="yes" xml:space="preserve">
          <source>But mind it respects the case of String. If you want case insensitive compare then you must go for the equalsIgnoreCase method of the String class.</source>
          <target state="translated">그러나 String의 경우를 염두에 두십시오. 대소 문자를 구분하지 않으려면 String 클래스의 equalsIgnoreCase 메소드를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="08393c6c77f96e040c5d84e5121ed2a44b0608d1" translate="yes" xml:space="preserve">
          <source>But what you can do is to call &lt;code&gt;intern()&lt;/code&gt; on your non-literal strings.</source>
          <target state="translated">그러나 당신이 할 수있는 일은 리터럴이 아닌 문자열에서 &lt;code&gt;intern()&lt;/code&gt; 을 호출하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="15a3cf51d08c5a4791935fe82b44b7c4f15102fb" translate="yes" xml:space="preserve">
          <source>But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:</source>
          <target state="translated">그러나 두 문자열에 정확히 동일한 문자열이 포함 된 경우 equals 메소드는 다음 예제와 같이 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="af38a399948a04b463b546d4f948912c00118098" translate="yes" xml:space="preserve">
          <source>Consequently, if you want to test whether two strings have the same value you will probably want to use &lt;code&gt;Objects.equals()&lt;/code&gt;.</source>
          <target state="translated">따라서 두 문자열의 값이 같은지 테스트하려면 &lt;code&gt;Objects.equals()&lt;/code&gt; 를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6aafac2f992d36c8bca828739a7404532d20a8a6" translate="yes" xml:space="preserve">
          <source>Consider two different reference variables, &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt;:</source>
          <target state="translated">두 개의 서로 다른 참조 변수 &lt;code&gt;str1&lt;/code&gt; 과 &lt;code&gt;str2&lt;/code&gt; 를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9847ecced7aa002791c61138db5356d024636623" translate="yes" xml:space="preserve">
          <source>Definitely the use of &lt;code&gt;equals()&lt;/code&gt; method is recommended.</source>
          <target state="translated">반드시 &lt;code&gt;equals()&lt;/code&gt; 메소드를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="bf3bcba66a1552787dd686311371f4c3aa8ed466" translate="yes" xml:space="preserve">
          <source>Don't worry about the performance. Some things to encourage using &lt;code&gt;String.equals()&lt;/code&gt;:</source>
          <target state="translated">성능에 대해 걱정하지 마십시오. &lt;code&gt;String.equals()&lt;/code&gt; 사용을 권장하는 몇 가지 사항 :</target>
        </trans-unit>
        <trans-unit id="b06f25fbeed92476c87e1968ec046f4936266cc1" translate="yes" xml:space="preserve">
          <source>Equals does the real comparison for you.</source>
          <target state="translated">Equals는 실제 비교를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f4fca6333e5c683fdaa7713181bcfbd25b1d2643" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot;&gt;JLS 3.10.5. &lt;em&gt;String Literals&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot;&gt;JLS 3.10.5&lt;/a&gt; 부터 &lt;em&gt;문자열 리터럴&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="003e5d38b8c1eac244f02ac363a47c0bbaf9273c" translate="yes" xml:space="preserve">
          <source>From zacherates example:</source>
          <target state="translated">zacherates 예제에서 :</target>
        </trans-unit>
        <trans-unit id="160b3670e04858fde7e4140b45e86e3c1b2090a9" translate="yes" xml:space="preserve">
          <source>Function:</source>
          <target state="translated">Function:</target>
        </trans-unit>
        <trans-unit id="14fb73b968e1433308008402842a19df1bd245b3" translate="yes" xml:space="preserve">
          <source>How do I compare strings in Java</source>
          <target state="translated">Java에서 문자열을 비교하는 방법</target>
        </trans-unit>
        <trans-unit id="e90775e8efad74a01524c188edc8b6dc2072c2b5" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;==&lt;/code&gt; fails in the following case:</source>
          <target state="translated">그러나 다음과 같은 경우 &lt;code&gt;==&lt;/code&gt; 가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ad8fc1b7115a0a617bf3361c92f8d88d012c6205" translate="yes" xml:space="preserve">
          <source>I agree with the answer from zacherates.</source>
          <target state="translated">zacherates의 답변에 동의합니다.</target>
        </trans-unit>
        <trans-unit id="209b45599a8f24c29dacb03bdf122cc9869d6a84" translate="yes" xml:space="preserve">
          <source>I think that when you define a &lt;code&gt;String&lt;/code&gt; you define an object. So you need to use &lt;code&gt;.equals()&lt;/code&gt;. When you use primitive data types you use &lt;code&gt;==&lt;/code&gt; but with &lt;code&gt;String&lt;/code&gt; (and any object) you must use &lt;code&gt;.equals()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 을 정의 할 때 객체를 정의한다고 생각합니다. 따라서 &lt;code&gt;.equals()&lt;/code&gt; 를 사용해야합니다. 기본 데이터 유형을 사용할 때는 &lt;code&gt;==&lt;/code&gt; 을 사용하지만 &lt;code&gt;String&lt;/code&gt; (및 모든 객체)과 함께 &lt;code&gt;.equals()&lt;/code&gt; 를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c6deec886dc61621c93ed9d7b5c29032c707f83c" translate="yes" xml:space="preserve">
          <source>I've been using the &lt;code&gt;==&lt;/code&gt; operator in my program to compare all my strings so far.
However, I ran into a bug, changed one of them into &lt;code&gt;.equals()&lt;/code&gt; instead, and it fixed the bug.</source>
          <target state="translated">내 프로그램에서 &lt;code&gt;==&lt;/code&gt; 연산자를 사용하여 지금까지 모든 문자열을 비교했습니다. 그러나 버그가 발생하여 그중 하나를 &lt;code&gt;.equals()&lt;/code&gt; 로 변경했으며 버그가 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="ee1db44f97923a97f6aa14945a8e524aef45e729" translate="yes" xml:space="preserve">
          <source>If a comparison of two &lt;code&gt;String&lt;/code&gt; objects using &lt;code&gt;==&lt;/code&gt; turns out to be &lt;code&gt;true&lt;/code&gt;, that is because the &lt;code&gt;String&lt;/code&gt; objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of &lt;code&gt;String&lt;/code&gt;. One should not expect that comparing one &lt;code&gt;String&lt;/code&gt; object containing the same contents as another &lt;code&gt;String&lt;/code&gt; object using &lt;code&gt;==&lt;/code&gt; to evaluate as &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 을 사용하여 두 개의 &lt;code&gt;String&lt;/code&gt; 객체를 비교하는 것이 &lt;code&gt;true&lt;/code&gt; 로 판명되면, 이는 &lt;code&gt;String&lt;/code&gt; 객체가 인터 네팅되고 Java Virtual Machine이 동일한 &lt;code&gt;String&lt;/code&gt; 인스턴스를 가리키는 다중 참조를 갖기 때문입니다. &lt;code&gt;==&lt;/code&gt; 를 사용하여 &lt;code&gt;true&lt;/code&gt; 로 평가하는 다른 &lt;code&gt;String&lt;/code&gt; 객체와 동일한 내용을 포함하는 하나의 &lt;code&gt;String&lt;/code&gt; 객체를 비교할 것으로 기 대해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="0975ad48f5593aec2b3883279cad972877d542d2" translate="yes" xml:space="preserve">
          <source>If the 2 string references are not the same, &lt;code&gt;String.equals()&lt;/code&gt; will next check the lengths of the strings. This is also a fast operation because the &lt;code&gt;String&lt;/code&gt; class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.</source>
          <target state="translated">두 문자열 참조가 동일하지 않으면 &lt;code&gt;String.equals()&lt;/code&gt; 는 다음으로 문자열 길이를 확인합니다. &lt;code&gt;String&lt;/code&gt; 클래스는 문자열 길이를 저장하므로 문자 나 코드 포인트를 세지 않아도되므로 빠른 작업입니다. 길이가 다르면 추가 검사가 수행되지 않으므로 길이가 같을 수 없다는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="622b2c72cef877135d3204c3e9e609ea0df5f20c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;equals()&lt;/code&gt; method is present in the &lt;code&gt;java.lang.Object&lt;/code&gt; class, and it is expected to check for the equivalence of the state of objects! That means, the contents of the objects. Whereas the &lt;code&gt;==&lt;/code&gt; operator is expected to check the actual object instances are same or not.</source>
          <target state="translated">&lt;code&gt;equals()&lt;/code&gt; 메소드가 &lt;code&gt;java.lang.Object&lt;/code&gt; 클래스에 존재하고 객체 상태의 동등성을 점검해야합니다! 즉, 객체의 내용을 의미합니다. &lt;code&gt;==&lt;/code&gt; 연산자는 실제 객체 인스턴스가 동일한 지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="d701e5196e6f58abe2f4c8d3e765a337b6d5958c" translate="yes" xml:space="preserve">
          <source>If you intern the non-literal String equality is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">리터럴이 아닌 문자열 동등성을 인턴하면</target>
        </trans-unit>
        <trans-unit id="a18409dd8aad86765bdf0eb5ade6c3e9c27a06b1" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;equals()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;equals()&lt;/code&gt; 를 사용하면</target>
        </trans-unit>
        <trans-unit id="a606952753cf3dc70cfcd11f34796ac37f150100" translate="yes" xml:space="preserve">
          <source>If you're like me, when I first started using Java, I wanted to use the &quot;==&quot; operator to test whether two String instances were equal, but for better or worse, that's not the correct way to do it in Java.</source>
          <target state="translated">나 같은 사람이라면 처음 Java를 사용하기 시작할 때 &quot;==&quot;연산자를 사용하여 두 개의 String 인스턴스가 같은지 테스트하고 싶었지만 더 좋든 나쁘 든 Java에서 올바른 방법이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="19563d43dbd1fb12946c8b55472adc3ce8a4a839" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;code&gt;String.equals()&lt;/code&gt; first checks for reference equality (using &lt;code&gt;==&lt;/code&gt;), and if the 2 strings are the same by reference, no further calculation is performed!</source>
          <target state="translated">&lt;code&gt;String.equals()&lt;/code&gt; 구현은 먼저 참조 동등성을 검사하고 ( &lt;code&gt;==&lt;/code&gt; 사용) 두 문자열이 참조로 동일하면 추가 계산이 수행되지 않습니다!</target>
        </trans-unit>
        <trans-unit id="df7f3b75bfe7cc351d7943de807b0754f7e73609" translate="yes" xml:space="preserve">
          <source>In Java, when the &lt;strong&gt;&amp;ldquo;==&amp;rdquo;&lt;/strong&gt; operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location.</source>
          <target state="translated">Java에서는 &lt;strong&gt;&quot;==&quot;&lt;/strong&gt; 연산자를 사용하여 두 객체를 비교할 때 객체가 메모리에서 동일한 위치를 참조하는지 확인합니다. 다시 말해, 2 개의 객체 이름이 기본적으로 동일한 메모리 위치를 참조하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f9de1f4d7b9c7548a170b2aee63ef265f6232437" translate="yes" xml:space="preserve">
          <source>In some string comparison tests you'll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:</source>
          <target state="translated">일부 문자열 비교 테스트에서는 문자열이 대문자인지 소문자인지 무시하고 싶을 것입니다. 대소 문자를 구분하지 않는 방식으로 문자열이 동일한 지 테스트하려면 다음과 같이 String 클래스의 equalsIgnoreCase 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5096e9095a26aead7dd77a00dd73649fb297b01c" translate="yes" xml:space="preserve">
          <source>In this case for &lt;code&gt;new String(&quot;test&quot;)&lt;/code&gt; the statement new String will be created on the heap, and that reference will be given to &lt;code&gt;b&lt;/code&gt;, so &lt;code&gt;b&lt;/code&gt; will be given a reference on the heap, not in String pool.</source>
          <target state="translated">이 경우 &lt;code&gt;new String(&quot;test&quot;)&lt;/code&gt; 의 경우 새 문자열 명령문이 힙에 작성되고 해당 참조가 &lt;code&gt;b&lt;/code&gt; 에 제공되므로 &lt;code&gt;b&lt;/code&gt; 는 문자열 풀이 아닌 힙에 대한 참조를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ca3a426a66508840a27f96c237b38e05c70f30b4" translate="yes" xml:space="preserve">
          <source>In this tutorial I'll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I'll also discuss why the &quot;==&quot; operator doesn't work when comparing Java strings.</source>
          <target state="translated">이 튜토리얼에서는 Java 문자열을 올바르게 비교하는 여러 가지 방법을 보여 드리겠습니다. 이 Java String 비교 자습서의 끝에서 Java 문자열을 비교할 때 &quot;==&quot;연산자가 작동하지 않는 이유에 대해서도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="66c5627d8cfe42bc4a6e93001ed6714eba02b7c5" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;==&lt;/code&gt; bad? When should it and should it not be used? What's the difference?</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 나쁘니? 언제 사용해야합니까? 차이점이 뭐야?</target>
        </trans-unit>
        <trans-unit id="44ed4293c7fc2288444421274472d44a6e861151" translate="yes" xml:space="preserve">
          <source>Java also talks about the function intern() that can be used on a string to make it part of the cache so &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;).intern()&lt;/code&gt; will return true.</source>
          <target state="translated">Java는 또한 문자열에서 캐시의 일부로 사용할 수있는 함수 intern ()에 대해 설명하므로 &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;).intern()&lt;/code&gt; 은 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bbcdbf601957f23cebef96d44f7ff1ddf50b5aff" translate="yes" xml:space="preserve">
          <source>Java have a String pool under which Java manages the memory allocation for the String objects. See &lt;a href=&quot;https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java&quot;&gt;&lt;strong&gt;String Pools in Java&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Java에는 Java가 String 객체에 대한 메모리 할당을 관리하는 String 풀이 있습니다. &lt;a href=&quot;https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java&quot;&gt;&lt;strong&gt;Java의 문자열 풀&lt;/strong&gt;&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="ed8dd2b96dbe38262e709c95739664151e953eb1" translate="yes" xml:space="preserve">
          <source>Let's See:</source>
          <target state="translated">보자 :</target>
        </trans-unit>
        <trans-unit id="a73fa850bcd40c5192a74b3a633598a1eeddab8d" translate="yes" xml:space="preserve">
          <source>Make sure you understand why.  It's because the &lt;code&gt;==&lt;/code&gt; comparison only compares references; the &lt;code&gt;equals()&lt;/code&gt; method does a character-by-character comparison of the contents.</source>
          <target state="translated">이유를 이해해야합니다. &lt;code&gt;==&lt;/code&gt; 비교는 참조 만 비교하기 때문입니다. &lt;code&gt;equals()&lt;/code&gt; 메소드는 내용을 문자별로 비교합니다.</target>
        </trans-unit>
        <trans-unit id="91794435135957626e3496e47088bf3118716d4a" translate="yes" xml:space="preserve">
          <source>Moreover, a string literal always refers to the &lt;em&gt;same&lt;/em&gt; instance of class &lt;code&gt;String&lt;/code&gt;. This is because string literals - or, more generally, strings that are the values of constant expressions (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28&quot;&gt;&amp;sect;15.28&lt;/a&gt;) - are &quot;interned&quot; so as to share unique instances, using the method &lt;code&gt;String.intern&lt;/code&gt;.</source>
          <target state="translated">또한 문자열 리터럴은 항상 &lt;code&gt;String&lt;/code&gt; 클래스의 &lt;em&gt;동일한&lt;/em&gt; 인스턴스를 나타냅니다. &lt;code&gt;String.intern&lt;/code&gt; 메소드를 사용하여 문자열 리터럴 또는보다 일반적으로 상수 표현식 ( &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.28&quot;&gt;&amp;sect;15.28&lt;/a&gt; )의 값인 문자열이 &quot; 인터 닝 &quot;되어 고유 한 인스턴스를 공유하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="c374a8d811dc06c407f72b0c1bd01c73410b563a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;.equals()&lt;/code&gt; method belongs to class &lt;code&gt;Object&lt;/code&gt; (super class of all classes). You need to override it as per you class requirement, but for String it is already implemented, and it checks whether two strings have the same value or not.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 메소드는 &lt;code&gt;Object&lt;/code&gt; 클래스 (모든 클래스의 수퍼 클래스 )에 속합니다. 클래스 요구 사항에 따라 재정의해야하지만 String의 경우 이미 구현되어 있으며 두 문자열의 값이 같은지 여부를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ef7869c142e8b9c650d51fd7d526dffaf522ae76" translate="yes" xml:space="preserve">
          <source>Note: == operator is much faster than equals just because you are comparing two memory addresses, but you need to be sure that the code isn't creating new String instances in the code. Otherwise you will encounter bugs.</source>
          <target state="translated">참고 : == 연산자는 두 개의 메모리 주소를 비교하기 때문에 동등보다 속도가 훨씬 빠르지 만 코드에서 코드에서 새 문자열 인스턴스를 만들지 않아야합니다. 그렇지 않으면 버그가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="05f4a05acd2ff60019ca1cc57a02118ad5e2b4c8" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;a&lt;/code&gt; is pointing to a String in the String pool while &lt;code&gt;b&lt;/code&gt; is pointing to a String on the heap. Because of that we get:</source>
          <target state="translated">이제 &lt;code&gt;a&lt;/code&gt; 는 문자열 풀의 문자열을 가리키고 &lt;code&gt;b&lt;/code&gt; 는 힙의 문자열을 가리 킵니다. 그로 인해 우리는 다음을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="3ae4c4c99288daf3be8f6b076a1e030bc8f2a226" translate="yes" xml:space="preserve">
          <source>Now you will get the &lt;code&gt;FALSE&lt;/code&gt; as output, because both &lt;code&gt;str1&lt;/code&gt; and &lt;code&gt;str2&lt;/code&gt; are pointing to two different objects even though both of them share the same string content. It is because of &lt;code&gt;new String()&lt;/code&gt; a new object is created every time.</source>
          <target state="translated">&lt;code&gt;str1&lt;/code&gt; 과 &lt;code&gt;str2&lt;/code&gt; 가 모두 동일한 문자열 내용을 공유하더라도 두 개의 서로 다른 객체를 가리 키므로 &lt;code&gt;FALSE&lt;/code&gt; 를 출력으로 가져옵니다. &lt;code&gt;new String()&lt;/code&gt; 때문에 매번 새로운 객체가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="77c5595bc439eb350a3083fde96d4b94b19d4d24" translate="yes" xml:space="preserve">
          <source>Obviously &lt;code&gt;==&lt;/code&gt; is faster, but will (might) give false results in many cases if you just want to tell if 2 &lt;code&gt;String&lt;/code&gt;s hold the same text.</source>
          <target state="translated">분명히 &lt;code&gt;==&lt;/code&gt; 가 빠르지 만, 2 개의 &lt;code&gt;String&lt;/code&gt; 이 동일한 텍스트를 보유하고 있는지 알고 싶다면 많은 경우에 잘못된 결과를 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f5984755ab3c60967abd3d47569bff195c24d31" translate="yes" xml:space="preserve">
          <source>Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a mismatching character (at the same position in the 2 strings), no further characters will be checked.</source>
          <target state="translated">우리가 이것을 멀리 얻은 경우에만 2 개의 문자열의 내용이 실제로 비교되며 이것은 짧은 비교입니다 : 2 개의 문자열에서 동일한 위치에서 일치하지 않는 문자를 찾으면 모든 문자가 비교되는 것은 아닙니다 ) 문자는 더 이상 확인되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4931a37091118ff489ec2354e6f1916dc8e35e55" translate="yes" xml:space="preserve">
          <source>Operator &lt;em&gt;==&lt;/em&gt; is always meant for &lt;strong&gt;object reference comparison&lt;/strong&gt;, whereas the String class &lt;em&gt;.equals()&lt;/em&gt; method is overridden for &lt;strong&gt;content comparison&lt;/strong&gt;:</source>
          <target state="translated">연산자 &lt;em&gt;==&lt;/em&gt; 는 항상 &lt;strong&gt;객체 참조 비교를&lt;/strong&gt; 위한 반면 String 클래스 &lt;em&gt;.equals ()&lt;/em&gt; 메소드는 &lt;strong&gt;내용 비교를&lt;/strong&gt; 위해 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="62d3323f1a4b43a5308396720b3529bdc784b601" translate="yes" xml:space="preserve">
          <source>Reason: If you create a String object using the &lt;code&gt;new&lt;/code&gt; keyword a separate space is allocated to it on the heap.</source>
          <target state="translated">이유 : &lt;code&gt;new&lt;/code&gt; 키워드를 사용하여 String 객체를 만들면 별도의 공간이 힙에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="e004e448e24213231c66b0837a3d3ab87e6c6817" translate="yes" xml:space="preserve">
          <source>Reason: String literals created without null are stored in the String pool in the permgen area of heap. So both s1 and s2 point to same object in the pool.</source>
          <target state="translated">이유 : 널없이 작성된 문자열 리터럴은 힙의 permgen 영역에있는 문자열 풀에 저장됩니다. 따라서 s1과 s2는 모두 풀의 동일한 객체를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="e9694929438ff9ef921133d3e537bf55f70f6175" translate="yes" xml:space="preserve">
          <source>Similar examples can also be found in &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634&quot;&gt;JLS 3.10.5-1&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#d5e1634&quot;&gt;JLS 3.10.5-1&lt;/a&gt; 에서도 비슷한 예를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7678ffc7a34ab9b5bce1ba690a307007c3bc4cb7" translate="yes" xml:space="preserve">
          <source>So if you know that &lt;code&gt;fooString1&lt;/code&gt; may be null, tell the reader that by writing</source>
          <target state="translated">따라서 &lt;code&gt;fooString1&lt;/code&gt; 이 null 일 수 있다는 것을 알고 있다면 독자에게 다음과 같이 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="6364ba01158454f664dad6de332f337ba05f8043" translate="yes" xml:space="preserve">
          <source>So the question is if all the strings are cached in the system, how come &lt;code&gt;==&lt;/code&gt; returns false whereas equals return true? Well, this is possible. If you make a new string like &lt;code&gt;String str = new String(&quot;Testing&quot;)&lt;/code&gt; you end up creating a new string in the cache even if the cache already contains a string having the same content. In short &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;)&lt;/code&gt; will always return false.</source>
          <target state="translated">따라서 모든 문자열이 시스템에 캐시되어 있다면 come &lt;code&gt;==&lt;/code&gt; 는 어떻게 false를 반환하고 equal은 true를 반환합니까? 음, 가능합니다. &lt;code&gt;String str = new String(&quot;Testing&quot;)&lt;/code&gt; 과 같은 새 문자열을 만들면 캐시에 이미 동일한 내용의 문자열이 포함되어 있어도 캐시에 새 문자열이 만들어집니다. 요컨대 &lt;code&gt;&quot;MyString&quot; == new String(&quot;MyString&quot;)&lt;/code&gt; 은 항상 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="925bf81cb272f91e408e2585dfe66406073ec384" translate="yes" xml:space="preserve">
          <source>So using &lt;code&gt;.equals()&lt;/code&gt; is always better.</source>
          <target state="translated">따라서 &lt;code&gt;.equals()&lt;/code&gt; 것이 항상 좋습니다.</target>
        </trans-unit>
        <trans-unit id="64e94d29a587c1b43ed1ff2b1f5eea22f76e7e69" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;code&gt;==&lt;/code&gt; gives illusions of comparing String values, as in following cases:</source>
          <target state="translated">때때로 &lt;code&gt;==&lt;/code&gt; 는 다음과 같이 문자열 값을 비교하는 환상을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ef7777dabf10c38fea3b84a7896afa72857e8048" translate="yes" xml:space="preserve">
          <source>Sometimes it looks as if &lt;code&gt;==&lt;/code&gt; compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.</source>
          <target state="translated">Java가 동일한 인라인 문자열이 실제로 동일한 객체인지 확인하기 위해 일부 비하인드 스토리를 수행하기 때문에 때로는 &lt;code&gt;==&lt;/code&gt; 가 값을 비교하는 것처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="dc72f9ad1e0fe392b547dcb502b649489b4e684e" translate="yes" xml:space="preserve">
          <source>Strings in Java are immutable. That means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.</source>
          <target state="translated">Java의 문자열은 변경할 수 없습니다. 즉, 문자열을 변경 / 수정하려고 할 때마다 새 인스턴스가 생성됩니다. 원래 문자열은 변경할 수 없습니다. 이러한 문자열 인스턴스를 캐시 할 수 있도록 수행되었습니다. 일반적인 프로그램에는 많은 문자열 참조가 포함되어 있으며 이러한 인스턴스를 캐싱하면 메모리 사용 공간이 줄어들고 프로그램 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a5b82a90623ced9b5ebfc731549926d882846eb" translate="yes" xml:space="preserve">
          <source>Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):</source>
          <target state="translated">equals 메소드로 빠른 문자열 비교 예제를 살펴보면 다음 테스트를 실행하면 문자가 정확히 동일하지 않기 때문에 두 문자열이 동일하게 간주되지 않습니다 (문자의 경우가 다름).</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="b0163278938a7a8c6bd706310467bbb52b4e5811" translate="yes" xml:space="preserve">
          <source>That may help you.</source>
          <target state="translated">도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="956e0cfc5f2a662f8be4c8e1953a725f10223a4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.equals()&lt;/code&gt; method  check if the two strings have the same value.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 메소드는 두 문자열의 값이 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3e72766ae6883a1ca99b3e34b1d125ce6dbd4582" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.equals()&lt;/code&gt; method will check if the two strings have the same value.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 메서드는 두 문자열의 값이 같은지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3978d062c149bf7accbca4cf5ab4522220f8fe12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; compares the references and does not compare the actual strings. If you did create every string using &lt;code&gt;new String(somestring).intern()&lt;/code&gt; then you can use the &lt;code&gt;==&lt;/code&gt; operator to compare two strings, otherwise equals() or compareTo methods can only be used.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 는 참조를 비교하고 실제 문자열을 비교하지 않습니다. &lt;code&gt;new String(somestring).intern()&lt;/code&gt; 을 사용하여 모든 문자열을 만든 경우 &lt;code&gt;==&lt;/code&gt; 연산자를 사용하여 두 문자열을 비교할 수 있습니다. 그렇지 않으면 equals () 또는 compareTo 메서드 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5512073b994a06023b1cc12815e391ae76326db3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator check if the two references point to the same object or not. &lt;code&gt;.equals()&lt;/code&gt; check for the actual string content (value).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 연산자는 두 참조가 동일한 객체를 가리키는 지 여부를 확인합니다. &lt;code&gt;.equals()&lt;/code&gt; 실제 문자열 내용 (값)을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="38eb3a4f9caacaa06f820fa599872a9b24a84e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator checks if the two strings are exactly the same object.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 연산자는 두 문자열이 정확히 동일한 객체인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a9a0606a28ccdd73d47713f4b0a9ffe7105e4faa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;==&lt;/code&gt; operator checks to see if the two strings are exactly the same object.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 연산자는 두 문자열이 정확히 동일한 객체인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d48da5a819a7433506b69dd9c4156df1be51f528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method will check whether the &lt;strong&gt;contents&lt;/strong&gt; or the &lt;strong&gt;states&lt;/strong&gt; of 2 objects are the same.</source>
          <target state="translated">&lt;code&gt;equals()&lt;/code&gt; 메소드는 두 객체의 &lt;strong&gt;내용&lt;/strong&gt; 또는 &lt;strong&gt;상태&lt;/strong&gt; 가 동일한 지 여부를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="4c712b2bf82e618b0042ca50c72334d695ff56a7" translate="yes" xml:space="preserve">
          <source>The Java String class actually overrides the default equals() implementation in the Object class &amp;ndash; and it overrides the method so that it checks only the values of the strings, not their locations in memory.
 This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.</source>
          <target state="translated">Java String 클래스는 실제로 Object 클래스의 기본 equals () 구현을 재정의합니다.이 메서드는 메모리의 위치가 아닌 문자열 값만 확인하도록 메서드를 재정의합니다. 즉, equals () 메서드를 호출하여 2 개의 String 객체를 비교하는 경우 실제 문자 시퀀스가 ​​동일한 한 두 객체가 모두 동일한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="b255548604584b6fe35e432b209faddbe10a7980" translate="yes" xml:space="preserve">
          <source>The following is shorter, but it&amp;rsquo;s less obvious that it checks for null (from Java 7):</source>
          <target state="translated">다음은 더 짧지 만 Java 7에서 null을 확인하는 것이 확실하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3caa790aba81043457285ebcb715deab21762bd6" translate="yes" xml:space="preserve">
          <source>There is also a third, less common way to compare Java strings, and that's with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here's a quick example of what this String comparison approach looks like:</source>
          <target state="translated">Java 문자열을 비교하는 덜 일반적인 세 ​​번째 방법도 있으며 String 클래스 compareTo 메소드를 사용합니다. 두 문자열이 정확히 같은 경우 compareTo 메서드는 0 값을 반환합니다. 다음은이 문자열 비교 방식의 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="bd99e0fef1de55924764a54805cc9bf8add6c76c" translate="yes" xml:space="preserve">
          <source>This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.</source>
          <target state="translated">이 String equals 메소드는 두 개의 Java 문자열을 살펴보고 정확히 동일한 문자열을 포함하면 동일한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="e9a6798a3b8ca94cbcd2c60ca2d18c6ff69b9779" translate="yes" xml:space="preserve">
          <source>This is because when you create any String literal, the JVM first searches for that literal in the String pool, and if it finds a match, that same reference will be given to the new String. Because of this, we get:</source>
          <target state="translated">이는 문자열 리터럴을 작성할 때 JVM이 먼저 문자열 풀에서 해당 리터럴을 검색하고 일치하는 항목을 찾으면 동일한 참조가 새 문자열에 제공되기 때문입니다. 이 때문에 우리는 다음을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="9123a723dd721a4c3eb2ba822a7a05286c4f3051" translate="yes" xml:space="preserve">
          <source>When all is said and done, even if we have guarantee that the strings are interns, using the &lt;code&gt;equals()&lt;/code&gt; method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).</source>
          <target state="translated">모든 것이 말되고 완료되면 문자열이 인턴임을 보장하더라도 &lt;code&gt;equals()&lt;/code&gt; 메소드를 사용하는 것이 여전히 오버 헤드가 아니라고 생각합니다. 효율적인 참조 확인을 원하면 언어 사양 및 구현에서 동일한 열거 형 값이 동일한 객체 (참조로)가 보장되는 열거 형을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c6dbba253687916f57aa803f9e2177e9867ca001" translate="yes" xml:space="preserve">
          <source>When using == operator for string comparison you are not comparing the contents of the string, but are actually comparing the memory address. If they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.</source>
          <target state="translated">문자열 비교에 == 연산자를 사용하면 문자열의 내용을 비교하는 것이 아니라 실제로 메모리 주소를 비교하는 것입니다. 둘 다 같으면 true를 반환하고 그렇지 않으면 false를 반환합니다. 문자열에서 같음은 문자열 내용을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="8d70775b46e120808e9850984c65117158958e7d" translate="yes" xml:space="preserve">
          <source>When you call new for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, each one gets a new reference that points to the &lt;code&gt;&quot;foo&quot;&lt;/code&gt; in the string table.  The references are different, but the content is the same.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 에 대해 new를 호출하면 각각은 문자열 테이블에서 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 를 가리키는 새로운 참조를 얻습니다. 참고 문헌은 다르지만 내용은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="4d0a9e43f42077a13b12f40c79f0b6c8bc2da63a" translate="yes" xml:space="preserve">
          <source>When you check (compare) two objects using the &lt;code&gt;==&lt;/code&gt; operator it compares the address equality into the string-pool. If the two String objects have the same address references then it returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. But if you want to compare the contents of two String objects then you must override the &lt;code&gt;equals&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 연산자를 사용하여 두 객체를 확인 (비교)하면 주소 동등성을 문자열 풀과 비교합니다. 두 String 객체의 주소 참조가 동일한 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 . 그러나 두 String 객체의 내용을 비교하려면 &lt;code&gt;equals&lt;/code&gt; 메서드를 재정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="586e208e279cd35f608e8fe3160362705865c64d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;.equals()&lt;/code&gt; always compares a value of String so it gives true in both cases:</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; 항상 문자열 값을 비교하므로 두 경우 모두에 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="41629ab5d619a837a7d228c06888aa2337ba8eac" translate="yes" xml:space="preserve">
          <source>While I'm writing about this concept of equality in Java, it's important to note that the Java language includes an equals method in the base Java Object class. Whenever you're creating your own objects and you want to provide a means to see if two instances of your object are &quot;equal&quot;, you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).</source>
          <target state="translated">Java에서 이러한 평등 개념에 대해 쓰고 있지만 Java 언어에는 기본 Java Object 클래스의 equals 메소드가 포함되어 있습니다. 자신의 객체를 생성 할 때 객체의 두 인스턴스가 &quot;동일한&quot;지 여부를 확인할 수있는 방법을 제공 할 때마다 클래스에서이 동일한 메소드를 재정의 (및 구현)해야합니다 (Java 언어와 동일한 방식으로). String equals 메소드에서의이 동등 / 비교 동작).</target>
        </trans-unit>
        <trans-unit id="dce24af4033f2e3a02feb720dd5df0c2bafd0e35" translate="yes" xml:space="preserve">
          <source>Yea, it's bad...</source>
          <target state="translated">응, 나쁘다 ...</target>
        </trans-unit>
        <trans-unit id="d6e11d8f251b17000089bf6e46de65e7004dda75" translate="yes" xml:space="preserve">
          <source>Yes, &lt;code&gt;==&lt;/code&gt; is bad for comparing Strings (any objects really, unless you know they're canonical).  &lt;code&gt;==&lt;/code&gt; just compares object references.  &lt;code&gt;.equals()&lt;/code&gt; tests for equality. For Strings, often they'll be the same but as you've discovered, that's not guaranteed always.</source>
          <target state="translated">예, &lt;code&gt;==&lt;/code&gt; 는 문자열을 비교하기에 좋지 않습니다 (정규적인 것을 알지 않는 한 모든 객체). &lt;code&gt;==&lt;/code&gt; 단지 객체 참조를 비교합니다. &lt;code&gt;.equals()&lt;/code&gt; 는 동등성을 테스트합니다. 문자열의 경우 종종 동일하지만 발견 한 것처럼 항상 보장되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f8e7716ea4c3e20c7bdf723f23756bb919d9eaad" translate="yes" xml:space="preserve">
          <source>You almost &lt;strong&gt;always&lt;/strong&gt; want to use &lt;code&gt;Objects.equals()&lt;/code&gt;. In the &lt;strong&gt;rare&lt;/strong&gt; situation where you &lt;strong&gt;know&lt;/strong&gt; you're dealing with &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--&quot;&gt;interned&lt;/a&gt; strings, you &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">거의 &lt;strong&gt;항상&lt;/strong&gt; &lt;code&gt;Objects.equals()&lt;/code&gt; 를 사용하려고합니다. &lt;strong&gt;드문&lt;/strong&gt; 경우 &lt;strong&gt;이지만&lt;/strong&gt; 문자열을 다루는 경우 &lt;code&gt;==&lt;/code&gt; &lt;em&gt;를&lt;/em&gt; 사용할 &lt;em&gt;수&lt;/em&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="5161c797f0345d83c726119d178d75aa5610fb2c" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;compareTo()&lt;/code&gt; method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal.</source>
          <target state="translated">&lt;code&gt;compareTo()&lt;/code&gt; 메서드를 사용하여 두 문자열을 비교할 수도 있습니다. compareTo 결과가 0이면 두 문자열이 같고 그렇지 않으면 비교되는 문자열이 동일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0afb8ff09e0f16ede865ab95dfcdc15300c82b5a" translate="yes" xml:space="preserve">
          <source>You may want to have a look at this &lt;a href=&quot;http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html&quot;&gt;==, .equals(), compareTo(), and compare()&lt;/a&gt;</source>
          <target state="translated">이 &lt;a href=&quot;http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html&quot;&gt;==, .equals (), compareTo () 및 compare ()를&lt;/a&gt; 살펴볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ea16d98d575b2b8348dcba9edc206a8a0907873" translate="yes" xml:space="preserve">
          <source>You will get the output as &lt;code&gt;TRUE&lt;/code&gt; if you use &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 를 사용하면 출력이 &lt;code&gt;TRUE&lt;/code&gt; 로 표시 됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
