<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/34361379">
    <body>
      <group id="34361379">
        <trans-unit id="8a9305ffc2f2a21bc0e0cce734e74c2de0d90d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let sum = (...args) =&amp;gt; args.reduce((x, y) =&amp;gt; x + y, 0)&lt;/code&gt;&lt;code&gt;sum(3, 3, 1) // output - 7&lt;/code&gt;
`</source>
          <target state="translated">&lt;code&gt;let sum = (...args) =&amp;gt; args.reduce((x, y) =&amp;gt; x + y, 0)&lt;/code&gt; &lt;code&gt;sum(3, 3, 1) // output - 7&lt;/code&gt; 3、3、1 ）//出力-7 `</target>
        </trans-unit>
        <trans-unit id="d6b386be0e438dc899807a07cd58b7e487d922b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not&lt;/em&gt; replaceable:</source>
          <target state="translated">交換&lt;em&gt;不可&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="488cc993c203373e105eb766d391b5e5b46cb0cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. Lexical &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.字句の &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a7508586904c8705b34630d6f6d3c29302585ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. Arrow functions cannot be called with &lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.アロー関数は &lt;code&gt;new&lt;/code&gt; で呼び出すことはできません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fea952fbdd01d7377771649c404b2d2eebe799d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;But:&lt;/strong&gt; If the code which calls the callback explicitly sets &lt;code&gt;this&lt;/code&gt; to a specific value, as is often the case with event handlers, especially with jQuery, and the callback uses &lt;code&gt;this&lt;/code&gt; (or &lt;code&gt;arguments&lt;/code&gt;), you &lt;em&gt;cannot&lt;/em&gt; use an arrow function!</source>
          <target state="translated">&lt;strong&gt;しかし：&lt;/strong&gt;コールバックを呼び出すコードが明示的に &lt;code&gt;this&lt;/code&gt; を特定の値に設定する場合、特にjQueryのイベントハンドラーでよくあることであり、コールバックが &lt;code&gt;this&lt;/code&gt; （または &lt;code&gt;arguments&lt;/code&gt; ）を使用する場合、矢印関数&lt;em&gt;は&lt;/em&gt;使用&lt;em&gt;できません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fdddf9c3bee50f48d61f290501ea4e7b84eca27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Callbacks&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Callbacks&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="157ce55d6ebcf86d356f903b9bf6c964f06e9444" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constructor function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コンストラクター関数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="277d555f97f038c6632806bf7eef2dec6351e047" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; that this also means that is &lt;em&gt;not&lt;/em&gt; possible to set an arrow function's &lt;code&gt;this&lt;/code&gt; with &lt;code&gt;.bind&lt;/code&gt; or &lt;code&gt;.call&lt;/code&gt;.</source>
          <target state="translated">これは、アロー関数の &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;.bind&lt;/code&gt; または &lt;code&gt;.call&lt;/code&gt; で設定でき&lt;em&gt;ない&lt;/em&gt;ことも意味することに&lt;strong&gt;注意し&lt;/strong&gt;て&lt;strong&gt;ください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="eddb8d389875d6c583f94dafb1d487acd6f23364" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Object methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;オブジェクトのメソッド&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7240b41b9e7e3d421b31b87e5dced476c42e69db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prototype methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロトタイプの方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f93c5b443b5e0470526ac1a2270f433b36a7ba41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;They cannot be used with&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;new&lt;/code&gt; &lt;/strong&gt; &lt;strong&gt;では使用できません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44d0ea0505e9226c704f669fb8bc795ba50b4d5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;They do not have &lt;code&gt;this&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;彼らはこれを持っていません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53b051204da25b8b824721699dd9120b211f117a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;They do not have arguments&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;彼らは引数を持っていません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8b2ea255e5af4354b8c68a41f7d152fc208cdcdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variadic functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;可変関数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c563dcc474c861f5d23de9ea9d74cffa69cd0598" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tl;dr:&lt;/strong&gt;&lt;strong&gt;No!&lt;/strong&gt; Arrow functions and function declarations / expressions are not equivalent and cannot be replaced blindly.</source>
          <target state="translated">&lt;strong&gt;tl; dr：&lt;/strong&gt; &lt;strong&gt;いいえ！&lt;/strong&gt; アロー関数と関数宣言/式は同等ではなく、盲目的に置き換えることはできません。</target>
        </trans-unit>
        <trans-unit id="9e4f3b712458b764fee0ab7a77547075362a776d" translate="yes" xml:space="preserve">
          <source>Are 'Arrow Functions' and 'Functions' equivalent / exchangeable</source>
          <target state="translated">矢印関数」と「関数」は等価交換可能か</target>
        </trans-unit>
        <trans-unit id="097cd6bcfb4e1fe38807711e39cf37e85c2bc5a1" translate="yes" xml:space="preserve">
          <source>Arrow functions (and methods) are only callable.
&lt;code&gt;class&lt;/code&gt; constructors are only constructable.</source>
          <target state="translated">矢印関数（およびメソッド）は呼び出しのみ可能です。 &lt;code&gt;class&lt;/code&gt; コンストラクターは構築のみ可能です。</target>
        </trans-unit>
        <trans-unit id="81098c36bba344fc060ab84fa79bbfcf54aa2c3a" translate="yes" xml:space="preserve">
          <source>Arrow functions =&amp;gt; best ES6 feature so far. They are a tremendously
  powerful addition to ES6, that I use constantly.</source>
          <target state="translated">矢印関数=&amp;gt;これまでのところ最高のES6機能。 これらは、私が常に使用している、ES6への非常に強力な追加機能です。</target>
        </trans-unit>
        <trans-unit id="2ed8af4386bde5001c11d3a6063d953a276e2650" translate="yes" xml:space="preserve">
          <source>Arrow functions can't be construtors because they do not have a prototype property.</source>
          <target state="translated">矢印関数はプロトタイプのプロパティを持っていないので、コンストラクタにはなりません。</target>
        </trans-unit>
        <trans-unit id="db9f796ceaa44d107dd215efb7264dff6cf8dc8c" translate="yes" xml:space="preserve">
          <source>Arrow functions don&amp;rsquo;t have an arguments object. But the same
functionality can be achieved using rest parameters.</source>
          <target state="translated">矢印関数には引数オブジェクトはありません。 ただし、残りのパラメーターを使用して同じ機能を実現できます。</target>
        </trans-unit>
        <trans-unit id="6ac7165f3dd26e2cdc228d4ea4202fc02f30e9e4" translate="yes" xml:space="preserve">
          <source>Arrow functions don't have their own &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt; binding. Instead, those identifiers are resolved in the lexical scope like any other variable. That means that inside an arrow function, &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; refer to the values of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; in the environment the arrow function is &lt;em&gt;defined&lt;/em&gt; in (i.e. &quot;outside&quot; the arrow function):</source>
          <target state="translated">アロー関数には、独自の &lt;code&gt;this&lt;/code&gt; または &lt;code&gt;arguments&lt;/code&gt; バインディングはありません。 代わりに、これらの識別子は他の変数と同様に字句スコープで解決されます。 つまり、矢印関数の内部では、 &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;arguments&lt;/code&gt; は &lt;code&gt;this&lt;/code&gt; の値を参照し、矢印関数が&lt;em&gt;定義さ&lt;/em&gt;れている環境（つまり、矢印関数の「外部」）での引数を参照します。</target>
        </trans-unit>
        <trans-unit id="4c46e5830c1a4417ff77a66df443155bef9ddaba" translate="yes" xml:space="preserve">
          <source>Arrow functions in ES2015 provide a more concise syntax.</source>
          <target state="translated">ES2015の矢印関数は、より簡潔な構文を提供します。</target>
        </trans-unit>
        <trans-unit id="a349ca267127b5faf849c2f06a6f3ed14ab1572c" translate="yes" xml:space="preserve">
          <source>Arrow functions should NOT be used because:</source>
          <target state="translated">矢印関数は使用すべきではないからです。</target>
        </trans-unit>
        <trans-unit id="9b2bda921bc6b091d8d99377e4291396fbf26932" translate="yes" xml:space="preserve">
          <source>As so often: &lt;strong&gt;it depends&lt;/strong&gt;. Arrow functions have different behavior than function declarations / expressions, so let's have a look at the differences first:</source>
          <target state="translated">頻繁に： &lt;strong&gt;それは依存し&lt;/strong&gt;ます。 アロー関数は関数宣言/式とは異なる動作をするので、最初に違いを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="807bece96fbabe4fd1884464fe2b6613508ddb00" translate="yes" xml:space="preserve">
          <source>But you can&amp;rsquo;t use an arrow function when a dynamic context is required: defining methods, create objects with constructors, get the target from this when handling events.</source>
          <target state="translated">ただし、動的コンテキストが必要な場合は、矢印関数を使用できません。メソッドの定義、コンストラクターを使用したオブジェクトの作成、イベントの処理時にこれからターゲットを取得します。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="6f09b72943c02d70071365c301fbca77ddd1b8e1" translate="yes" xml:space="preserve">
          <source>Can I replace all my function declarations / expressions with arrow functions now?</source>
          <target state="translated">私の関数宣言式をすべて矢印関数に置き換えることはもうできますか?</target>
        </trans-unit>
        <trans-unit id="b5c9417824a65aca8745057dafb4c034175cb1b9" translate="yes" xml:space="preserve">
          <source>Constructor function</source>
          <target state="translated">コンストラクタ関数</target>
        </trans-unit>
        <trans-unit id="d14be1865dab7ff31185f4ebfd1097f17695a8ad" translate="yes" xml:space="preserve">
          <source>Constructor functions</source>
          <target state="translated">コンストラクタ関数</target>
        </trans-unit>
        <trans-unit id="ad5a6954f7216fa7344299b97657bf4b6231f0ec" translate="yes" xml:space="preserve">
          <source>Do ES6 arrow functions have their own arguments or not?</source>
          <target state="translated">ES6の矢印関数は独自の引数を持っているのか、持っていないのか。</target>
        </trans-unit>
        <trans-unit id="f05b8d2d73b2c0c0e233f2ee97f7accee054b0d7" translate="yes" xml:space="preserve">
          <source>Don't use to add function as a property in object literal because we
can not access this.</source>
          <target state="translated">アクセスできないので、オブジェクトリテラルのプロパティとして関数を追加するのはやめましょう。</target>
        </trans-unit>
        <trans-unit id="623f2a72fc475fa4b43aabb17036f57e8d86ea97" translate="yes" xml:space="preserve">
          <source>ES2015 distinguishes between functions that are &lt;em&gt;call&lt;/em&gt;able and functions that are &lt;em&gt;construct&lt;/em&gt;able. If a function is constructable, it can be called with  &lt;code&gt;new&lt;/code&gt;, i.e. &lt;code&gt;new User()&lt;/code&gt;. If a function is callable, it can be called without &lt;code&gt;new&lt;/code&gt; (i.e. normal function call).</source>
          <target state="translated">ES2015は、 &lt;em&gt;呼び出し&lt;/em&gt;可能な関数と構成可能な関数を区別します。 関数が構築可能な場合、 &lt;code&gt;new&lt;/code&gt; 、つまり &lt;code&gt;new User()&lt;/code&gt; で呼び出すことができます。 関数が呼び出し可能である場合、 &lt;code&gt;new&lt;/code&gt; 関数なしで呼び出すことができます（つまり、通常の関数呼び出し）。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">スニペットを展開</target>
        </trans-unit>
        <trans-unit id="b78884b7d6d3cd8b95d7b4912c7e6360c06df791" translate="yes" xml:space="preserve">
          <source>Function / methods added to a prototype (because they usually use &lt;code&gt;this&lt;/code&gt;)</source>
          <target state="translated">プロトタイプに追加された関数/メソッド（通常、 &lt;code&gt;this&lt;/code&gt; 使用するため ）</target>
        </trans-unit>
        <trans-unit id="393e528f5a84301cfcf4cbacaef7f7ff6975b56e" translate="yes" xml:space="preserve">
          <source>Function expressions are best for object methods. Arrow functions
are best for callbacks or methods like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, or &lt;code&gt;forEach&lt;/code&gt;.</source>
          <target state="translated">関数式はオブジェクトメソッドに最適です。 矢印関数は、 &lt;code&gt;map&lt;/code&gt; 、 &lt;code&gt;reduce&lt;/code&gt; 、 &lt;code&gt;forEach&lt;/code&gt; などのコールバックまたはメソッドに最適です。</target>
        </trans-unit>
        <trans-unit id="6362bcada6b07a59ecb435d4048f398f1bc4f0b6" translate="yes" xml:space="preserve">
          <source>Functions created through function declarations / expressions are both constructable and callable.</source>
          <target state="translated">関数宣言式で作成された関数は、構築可能なものと呼び出し可能なものの両方があります。</target>
        </trans-unit>
        <trans-unit id="f1f9e5119ab138f8bbc10a925f0aa5467120f80d" translate="yes" xml:space="preserve">
          <source>Functions that are used with &lt;code&gt;.bind(this)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.bind(this)&lt;/code&gt; で使用される関数</target>
        </trans-unit>
        <trans-unit id="456d3987ca295af904df154e6369d508e294988a" translate="yes" xml:space="preserve">
          <source>Functions that don't use &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;arguments&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; または &lt;code&gt;arguments&lt;/code&gt; 使用しない関数。</target>
        </trans-unit>
        <trans-unit id="477bc37237dcccfb60e8212ecf58c8cfd4777700" translate="yes" xml:space="preserve">
          <source>Further resources:</source>
          <target state="translated">その他のリソース。</target>
        </trans-unit>
        <trans-unit id="4e4c8f057232f689f7865d3560789790b7c4d3e2" translate="yes" xml:space="preserve">
          <source>How to use arrow functions (public class fields) as class methods?</source>
          <target state="translated">矢印関数(パブリッククラスのフィールド)をクラスメソッドとして使うには?</target>
        </trans-unit>
        <trans-unit id="880597dc01da6cbbd55a0b71debfd54b7e7772d0" translate="yes" xml:space="preserve">
          <source>If the function you want to replace does &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;arguments&lt;/code&gt; and is not called with &lt;code&gt;new&lt;/code&gt;, then yes.</source>
          <target state="translated">置き換える関数が &lt;code&gt;this&lt;/code&gt; &lt;code&gt;arguments&lt;/code&gt; を使用せ&lt;em&gt;ず&lt;/em&gt; 、 &lt;code&gt;new&lt;/code&gt; で呼び出されない場合は、yesです。</target>
        </trans-unit>
        <trans-unit id="350a68eb6569ce9ff1feb1188385b48380235995" translate="yes" xml:space="preserve">
          <source>If you are not very familiar with &lt;code&gt;this&lt;/code&gt;, consider reading</source>
          <target state="translated">これについてよく知らない場合は、読んでみてください</target>
        </trans-unit>
        <trans-unit id="635a17ff7cb2fe460b7e86b6255fd21f47b485f3" translate="yes" xml:space="preserve">
          <source>If you are trying to call a non-callable function or to construct a non-constructable function, you will get a runtime error.</source>
          <target state="translated">呼び出し不可能な関数を呼び出そうとしたり、構造化不可能な関数を構築しようとすると、実行時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2dff0492e38968e93907c861ade0d7967b3e7ebd" translate="yes" xml:space="preserve">
          <source>In the function expression case, &lt;code&gt;this&lt;/code&gt; refers to the object that was created inside the &lt;code&gt;createObject&lt;/code&gt;. In the arrow function case, &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;createObject&lt;/code&gt; itself.</source>
          <target state="translated">関数式の場合、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;createObject&lt;/code&gt; 内で作成されたオブジェクトを参照します。 アロー関数の場合、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;createObject&lt;/code&gt; 自体の &lt;code&gt;this&lt;/code&gt; を指します。</target>
        </trans-unit>
        <trans-unit id="cd42fee9d4f1683e06ea78dc3a83833b50ad5a21" translate="yes" xml:space="preserve">
          <source>It depends. You should definitely replace it if you are aliasing the outer &lt;code&gt;this&lt;/code&gt; or are using &lt;code&gt;.bind(this)&lt;/code&gt;:</source>
          <target state="translated">場合によります。 外側の &lt;code&gt;this&lt;/code&gt; にエイリアスを &lt;code&gt;.bind(this)&lt;/code&gt; 場合、または.bind（this）を使用している場合は、必ず置き換えてください。</target>
        </trans-unit>
        <trans-unit id="595fd6ec76457623f2c972ea259758fc3a7b743b" translate="yes" xml:space="preserve">
          <source>It uses &amp;ldquo;lexical scoping&amp;rdquo; to figure out what the value of &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo;
should be. In simple word lexical scoping it uses &amp;ldquo;&lt;code&gt;this&lt;/code&gt;&amp;rdquo; from the
inside the function&amp;rsquo;s body.</source>
          <target state="translated">「レキシカルスコーピング」を使用して、「 &lt;code&gt;this&lt;/code&gt; 」の値を理解します。 簡単な単語のレキシカルスコープでは、関数の本体の内部から「 &lt;code&gt;this&lt;/code&gt; 」を使用します。</target>
        </trans-unit>
        <trans-unit id="c476e80e1cdd58b7ace124f3c9a6375c30201c1a" translate="yes" xml:space="preserve">
          <source>Knowing this, we can state the following.</source>
          <target state="translated">これを知っていると、次のように述べることができます。</target>
        </trans-unit>
        <trans-unit id="77fa39a269b43e0605dcbafa7542c4f7d73394a1" translate="yes" xml:space="preserve">
          <source>Lets have a closer look at this using your examples:</source>
          <target state="translated">あなたの例を使って、これを詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="3c28b8d22d5c20da1ebd35b6a29c6adfb785832b" translate="yes" xml:space="preserve">
          <source>MDN - Arrow functions</source>
          <target state="translated">MDN-矢印関数</target>
        </trans-unit>
        <trans-unit id="645f17b142695c52e8daeb39d2e274b483222012" translate="yes" xml:space="preserve">
          <source>MDN - this</source>
          <target state="translated">MDN-これ</target>
        </trans-unit>
        <trans-unit id="55f205dca19e0070e2a06a80e90943c1dc8cdf0d" translate="yes" xml:space="preserve">
          <source>Most likely not, because prototype methods usually use &lt;code&gt;this&lt;/code&gt; to access the instance. If they don't use &lt;code&gt;this&lt;/code&gt;, then you can replace it. However, if you primarily care for concise syntax, use &lt;code&gt;class&lt;/code&gt; with its concise method syntax:</source>
          <target state="translated">プロトタイプメソッドは通常、 &lt;code&gt;this&lt;/code&gt; を使用してインスタンスにアクセスするため、おそらくそうではありません。 彼らがこれを使用しない場合は、交換できます。 ただし、主に簡潔な構文を重視する場合は、簡潔なメソッド構文で &lt;code&gt;class&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3cbdc79d3938eb210b07fab882dd77388e2e974d" translate="yes" xml:space="preserve">
          <source>Object (literal) methods</source>
          <target state="translated">オブジェクト (リテラル)メソッド</target>
        </trans-unit>
        <trans-unit id="b46ce0e46e0605a9b2dee716fba3840e125bed96" translate="yes" xml:space="preserve">
          <source>Prototype methods</source>
          <target state="translated">試作法</target>
        </trans-unit>
        <trans-unit id="d0dc8c8c213db6c4e484e26195b16c84bf3ee6b0" translate="yes" xml:space="preserve">
          <source>Related question:</source>
          <target state="translated">関連する質問です。</target>
        </trans-unit>
        <trans-unit id="cf9cf80c8a1eaa83b42cd0d57c602fa3492f586c" translate="yes" xml:space="preserve">
          <source>Replaceable:</source>
          <target state="translated">Replaceable:</target>
        </trans-unit>
        <trans-unit id="8200d713d5ab8264a2587d88340955d674688d00" translate="yes" xml:space="preserve">
          <source>Similarly for methods in an object literal. If the method wants to reference the object itself via &lt;code&gt;this&lt;/code&gt;, keep using function expressions,  or use the new method syntax:</source>
          <target state="translated">オブジェクトリテラルのメソッドについても同様です。 メソッドが &lt;code&gt;this&lt;/code&gt; を介してオブジェクト自体を参照する場合は、関数式を引き続き使用するか、新しいメソッド構文を使用します。</target>
        </trans-unit>
        <trans-unit id="cf9ecaafb20e6f09950bf5223447af4392e5fc4a" translate="yes" xml:space="preserve">
          <source>Since arrow functions don't have their own &lt;code&gt;arguments&lt;/code&gt;, you cannot simply replace them with an arrow  function. However, ES2015 introduces an alternative to using &lt;code&gt;arguments&lt;/code&gt;: the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;rest parameter&lt;/a&gt;.</source>
          <target state="translated">アロー関数には独自の &lt;code&gt;arguments&lt;/code&gt; がないため、単純にアロー関数に置き換えることはできません。 ただし、ES2015では、 &lt;code&gt;arguments&lt;/code&gt; を使用する代わりに、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;残りのパラメーター&lt;/a&gt;を導入しています 。</target>
        </trans-unit>
        <trans-unit id="44aaadc5c82a80e98f3d0f7f3525ca8a69493dab" translate="yes" xml:space="preserve">
          <source>This makes arrow functions useful if you need to access the &lt;code&gt;this&lt;/code&gt; of the current environment:</source>
          <target state="translated">これにより、現在の &lt;code&gt;this&lt;/code&gt; 環境にアクセスする必要がある場合に、矢印関数が役立ちます。</target>
        </trans-unit>
        <trans-unit id="bd3dc93f2d622ead47798f6b55203b5a4306478d" translate="yes" xml:space="preserve">
          <source>This won't work because arrow functions cannot be called with &lt;code&gt;new&lt;/code&gt;. Keep using a function declaration / expression or use &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="translated">アロー関数は &lt;code&gt;new&lt;/code&gt; で呼び出すことができないため、これは機能しません。 関数宣言/式を使い続けるか、 &lt;code&gt;class&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="72df882cfc7254f789055bbd609572ee19c64164" translate="yes" xml:space="preserve">
          <source>Use arrow functions for callbacks (because they tend to be terser).</source>
          <target state="translated">コールバックには矢印関数を使用してください (これは、より速くなる傾向があるからです)。</target>
        </trans-unit>
        <trans-unit id="fc9d2febd3cd1f00231d4d46be4a69bd3c08aa8b" translate="yes" xml:space="preserve">
          <source>Use function declarations for functions you&amp;rsquo;d call by name (because
they&amp;rsquo;re hoisted).</source>
          <target state="translated">名前で呼び出す関数には関数宣言を使用します（関数は巻き上げられるため）。</target>
        </trans-unit>
        <trans-unit id="8e36a4956d4555b32607f272180c87deea209898" translate="yes" xml:space="preserve">
          <source>Variadic functions</source>
          <target state="translated">バラエティ機能</target>
        </trans-unit>
        <trans-unit id="30a2bf360c26bbff34c038deb577bf663a9c6b04" translate="yes" xml:space="preserve">
          <source>Variadic functions (if they use &lt;code&gt;arguments&lt;/code&gt; (see below))</source>
          <target state="translated">可変個の関数（引数を使用する &lt;code&gt;arguments&lt;/code&gt; （下記参照））</target>
        </trans-unit>
        <trans-unit id="4bc73dceb4900b103dec4371d6b793953d0c286b" translate="yes" xml:space="preserve">
          <source>Wait, you can't use arrow function everywhere in your code, its not going to work in all cases like &lt;code&gt;this&lt;/code&gt; where arrow functions are not usable. Without a doubt, the arrow function is a great addition it brings code simplicity.</source>
          <target state="translated">待ってください、あなたはコードのどこでもアロー関数を使うことができません、それはアロー関数が使用できない &lt;code&gt;this&lt;/code&gt; ようなすべてのケースで機能することはないでしょう。 間違いなく、arrow関数はコードを単純化する優れた機能です。</target>
        </trans-unit>
        <trans-unit id="53efc89aa69b93c640109759ad72fe527704ada4" translate="yes" xml:space="preserve">
          <source>What are the differences (if any) between ES6 arrow functions and functions bound with Function.prototype.bind?</source>
          <target state="translated">ES6の矢印関数とFunction.prototype.bindでバインドされた関数の違い(もしあれば)は何ですか?</target>
        </trans-unit>
        <trans-unit id="6ecc2633f74ab15fa56773ce4d75cfd3a20a4109" translate="yes" xml:space="preserve">
          <source>What do I have to look out for?</source>
          <target state="translated">何に気をつければいいの?</target>
        </trans-unit>
        <trans-unit id="6efdd0660158859321165eadf5e588188a2b914c" translate="yes" xml:space="preserve">
          <source>When should I use Arrow functions in ECMAScript 6?</source>
          <target state="translated">ECMAScript 6 で矢印関数はいつ使うべきですか?</target>
        </trans-unit>
        <trans-unit id="5b3c883bebe992d46fba10eba247117da34473e0" translate="yes" xml:space="preserve">
          <source>When to use arrow function and when not:</source>
          <target state="translated">矢印機能を使うタイミングと使わないタイミング</target>
        </trans-unit>
        <trans-unit id="251aebdb1baaab67aa66626abaec6dcd0ed17728" translate="yes" xml:space="preserve">
          <source>YDKJS - Arrow functions</source>
          <target state="translated">YDKJS-矢印関数</target>
        </trans-unit>
        <trans-unit id="7ea5e2c1a61797ad69a9918d25ac545a4685999e" translate="yes" xml:space="preserve">
          <source>YDKJS - this &amp;amp; Object prototypes</source>
          <target state="translated">YDKJS-これとオブジェクトのプロトタイプ</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
