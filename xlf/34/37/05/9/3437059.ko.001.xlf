<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/3437059">
    <body>
      <group id="3437059">
        <trans-unit id="bfd5fb5461c52da5c2d99f6ba908fd0febb4ad56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if needle in haystack:&lt;/code&gt; is the normal use, as @Michael says -- it relies on the &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, more readable and faster than a method call.</source>
          <target state="translated">@Michael이 말한 것처럼 &lt;code&gt;if needle in haystack:&lt;/code&gt; 이 일반적으로 사용되는 경우-메소드 호출보다 읽기 쉽고 빠른 &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="01146fd9d9a3f09c91752db54f91830aa987835f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt; Python strings and lists</source>
          <target state="translated">파이썬 문자열과리스트</target>
        </trans-unit>
        <trans-unit id="b2f12be594d29ddea9f6f77ccdf3cb53c8a503fc" translate="yes" xml:space="preserve">
          <source>All operators in Python can be more or less found in the &lt;a href=&quot;https://docs.python.org/3.5/library/operator.html#operator.contains&quot;&gt;operator module&lt;/a&gt; including &lt;code&gt;in&lt;/code&gt;.</source>
          <target state="translated">파이썬의 모든 연산자는를 포함하여 &lt;a href=&quot;https://docs.python.org/3.5/library/operator.html#operator.contains&quot;&gt;연산자 모듈&lt;/a&gt; 에서 어느 정도 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68fca403bccaec434d318651ed2c5b191adceaf0" translate="yes" xml:space="preserve">
          <source>Also, avoid the following string methods:</source>
          <target state="translated">또한 다음 문자열 방법을 피하십시오.</target>
        </trans-unit>
        <trans-unit id="75325459a4e7811f99c055fe0b1af0155b9e5132" translate="yes" xml:space="preserve">
          <source>And now we see that using &lt;code&gt;in&lt;/code&gt; is much faster than the others.
Less time to do an equivalent operation is better:</source>
          <target state="translated">그리고 이제 우리는 &lt;code&gt;in&lt;/code&gt; 을 사용 하는 것이 다른 것보다 훨씬 빠르다는 것을 알았습니다. 동등한 작업을 수행하는 데 걸리는 시간이 짧을수록 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8148fd1d6f8868219f6aa63a5794fc7e0fa6adb6" translate="yes" xml:space="preserve">
          <source>As promised, here's the &lt;code&gt;contains&lt;/code&gt; method:</source>
          <target state="translated">약속 한대로 &lt;code&gt;contains&lt;/code&gt; 메소드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5347e596721fc056e3438ea1487acd84de052b85" translate="yes" xml:space="preserve">
          <source>Avoid using &lt;code&gt;__contains__&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__contains__&lt;/code&gt; , &lt;code&gt;find&lt;/code&gt; 및 &lt;code&gt;index&lt;/code&gt; 사용을 피하십시오</target>
        </trans-unit>
        <trans-unit id="7c0b789e68985106ecbb596d28f94ab9b4339d8c" translate="yes" xml:space="preserve">
          <source>But don't. Methods that start with underscores are considered semantically private. The only reason to use this is when extending the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; functionality (e.g. if subclassing &lt;code&gt;str&lt;/code&gt;):</source>
          <target state="translated">그러나하지 마십시오. 밑줄로 시작하는 메소드는 의미 상 개인용으로 간주됩니다. 이것을 사용하는 유일한 이유 &lt;code&gt;not in&lt;/code&gt; 기능이 아닌 in을 확장 할 때입니다 (예 : &lt;code&gt;str&lt;/code&gt; 을 서브 클래 싱하는 경우).</target>
        </trans-unit>
        <trans-unit id="95e2a1c4cf477805852b5a80a909aa55114a9b86" translate="yes" xml:space="preserve">
          <source>Caveat. Lists are iterables, and the &lt;code&gt;in&lt;/code&gt; method acts on iterables, not just strings.</source>
          <target state="translated">경고. 리스트는 이터 러블이며 &lt;code&gt;in&lt;/code&gt; 메소드는 문자열 만이 아니라 이터 러블에 작용합니다.</target>
        </trans-unit>
        <trans-unit id="112b1030a11063ada9abd769a7d957e9fdb241ff" translate="yes" xml:space="preserve">
          <source>Does Python have a string 'contains' substring method</source>
          <target state="translated">파이썬에는 문자열 'contains'하위 문자열 메소드가 있습니까?</target>
        </trans-unit>
        <trans-unit id="9f72912ade92ee5e4763b80845e6b54cb54db80b" translate="yes" xml:space="preserve">
          <source>Does Python have a string contains substring method?</source>
          <target state="translated">파이썬에 문자열에 하위 문자열 방법이 있습니까?</target>
        </trans-unit>
        <trans-unit id="cfb723bc734f1d3b2582921dd8d843aee68a906b" translate="yes" xml:space="preserve">
          <source>For checking if it is false:</source>
          <target state="translated">그것이 거짓인지 확인하기 위해 :</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed3f0437c6b445631d7d45f8bd430092bf8fd3f4" translate="yes" xml:space="preserve">
          <source>Here are a few useful examples that speak for themselves concerning the &lt;code&gt;in&lt;/code&gt; method:</source>
          <target state="translated">다음은 &lt;code&gt;in&lt;/code&gt; 메소드와 관련하여 유용한 몇 가지 유용한 예입니다.</target>
        </trans-unit>
        <trans-unit id="8d5ac7f43cc7a2945163a886f10f76b96fd43057" translate="yes" xml:space="preserve">
          <source>Here is your answer:</source>
          <target state="translated">답은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3eb9e0ad6d7e84948674947d2adb980361122f79" translate="yes" xml:space="preserve">
          <source>I want to do:</source>
          <target state="translated">나하고 싶어:</target>
        </trans-unit>
        <trans-unit id="4de7106ecb61ca45f1a59d6bd68993b91d6bbbe4" translate="yes" xml:space="preserve">
          <source>I'm looking for a &lt;code&gt;string.contains&lt;/code&gt; or &lt;code&gt;string.indexof&lt;/code&gt; method in Python.</source>
          <target state="translated">파이썬에서 &lt;code&gt;string.contains&lt;/code&gt; 또는 &lt;code&gt;string.indexof&lt;/code&gt; 메소드를 찾고 있습니다.</target>
        </trans-unit>
        <trans-unit id="2690d30ab6ef755b74cd0d5f901593c324edfe48" translate="yes" xml:space="preserve">
          <source>If it's just a substring search you can use &lt;code&gt;string.find(&quot;substring&quot;)&lt;/code&gt;.</source>
          <target state="translated">하위 문자열 검색 인 경우 &lt;code&gt;string.find(&quot;substring&quot;)&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6515f223d056601d0dc8da2838ac73db184bc620" translate="yes" xml:space="preserve">
          <source>If you are happy with &lt;code&gt;&quot;blah&quot; in somestring&lt;/code&gt; but want it to be a function/method call, you can probably do this</source>
          <target state="translated">&lt;code&gt;&quot;blah&quot; in somestring&lt;/code&gt; 만족하지만 그것이 함수 / 메소드 호출이 되길 원한다면, 아마도 이것을 할 수있을 것입니다</target>
        </trans-unit>
        <trans-unit id="28129c29562ee5cdefcca6eed73eecd312fe2cfd" translate="yes" xml:space="preserve">
          <source>If you truly need a method instead of an operator (e.g. to do some weird &lt;code&gt;key=&lt;/code&gt; for a very peculiar sort...?), that would be &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;'haystack'.__contains__&lt;/code&gt;&lt;/a&gt;.  But since your example is for use in an &lt;code&gt;if&lt;/code&gt;, I guess you don't really mean what you say;-).  It's not good form (nor readable, nor efficient) to use special methods directly -- they're meant to be used, instead, through the operators and builtins that delegate to them.</source>
          <target state="translated">연산자 대신 메소드가 정말로 필요한 경우 (예를 들어 이상한 &lt;code&gt;key=&lt;/code&gt; 매우 독특한 정렬을 위해 ...?), &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;'haystack'.__contains__&lt;/code&gt; &lt;/a&gt; 입니다. 그러나 귀하의 예제는 &lt;code&gt;if&lt;/code&gt; 에 사용하기 때문에 실제로 당신이 말하는 것을 의미하지는 않습니다. 특수한 메소드를 직접 사용하는 것은 좋은 형태 (읽기 어렵거나 효율적이지 않음)가 아닙니다. 대신에 메소드를 위임하는 연산자와 내장을 통해 사용되어야합니다.</target>
        </trans-unit>
        <trans-unit id="5fa7425ae0cbf754cfa40600913ebd7ab14c168d" translate="yes" xml:space="preserve">
          <source>It will return the integer value of the number of times a sub string appears in a string.</source>
          <target state="translated">하위 문자열이 문자열에 나타나는 횟수의 정수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="552e9e004ea940c8c7aecbd5dc9cd6e59c519337" translate="yes" xml:space="preserve">
          <source>It would print &lt;code&gt;Found 'is' in the string.&lt;/code&gt; Similarly, &lt;code&gt;if &quot;is&quot; in s:&lt;/code&gt; would evaluate to &lt;code&gt;True&lt;/code&gt;. This may or may not be what you want.</source>
          <target state="translated">&lt;code&gt;Found 'is' in the string.&lt;/code&gt; 가 인쇄 됩니다. 마찬가지로 &lt;code&gt;if &quot;is&quot; in s:&lt;/code&gt; 인 경우 &lt;code&gt;True&lt;/code&gt; 로 평가됩니다. 이것은 당신이 원하는 것일 수도 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f253cbf35cc30170ea6d83c8b71ed090a9a84a9" translate="yes" xml:space="preserve">
          <source>OR:</source>
          <target state="translated">OR:</target>
        </trans-unit>
        <trans-unit id="33404da4e6145ea7c3bba7997e0412dbc77a6e86" translate="yes" xml:space="preserve">
          <source>Other languages may have no methods to directly test for substrings, and so you would have to use these types of methods, but with Python, it is much more efficient to use the &lt;code&gt;in&lt;/code&gt; comparison operator.</source>
          <target state="translated">다른 언어에는 하위 문자열을 직접 테스트하는 메소드가 없을 수 있으므로 이러한 유형의 메소드를 사용해야하지만 Python에서는 &lt;code&gt;in&lt;/code&gt; 비교 연산자를 사용하는 것이 훨씬 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="bc98eaa2af54ad0068708bbe514ed08024de1e42" translate="yes" xml:space="preserve">
          <source>Performance comparisons</source>
          <target state="translated">성능 비교</target>
        </trans-unit>
        <trans-unit id="dff3392032b07cddb6869d7a242319d71d15ec43" translate="yes" xml:space="preserve">
          <source>So apparently there is nothing similar for vector-wise comparison. An obvious Python way to do so would be:</source>
          <target state="translated">따라서 벡터와 비교하기에는 비슷한 것이 없습니다. 그렇게하는 명백한 파이썬 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f905b5d807c34c91ff87f024ce690c79239f0a1" translate="yes" xml:space="preserve">
          <source>The opposite (complement), which the original question asks for, is &lt;code&gt;not in&lt;/code&gt;:</source>
          <target state="translated">원래 질문에서 요구하는 반대 (보완) &lt;code&gt;not in&lt;/code&gt; 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd51a0edb71147ff173671d46089c59efec8a389" translate="yes" xml:space="preserve">
          <source>This is semantically the same as &lt;code&gt;not 'foo' in '**foo**'&lt;/code&gt; but it's much more readable and explicitly provided for in the language as a readability improvement.</source>
          <target state="translated">이것은 의미 적 &lt;code&gt;not 'foo' in '**foo**'&lt;/code&gt; 것과 동일하지만 가독성 향상을 위해 언어에서 훨씬 더 읽기 쉽고 명확하게 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="70f71147033db729bfdabf0cf1989ed9ac764cbb" translate="yes" xml:space="preserve">
          <source>We can compare various ways of accomplishing the same goal.</source>
          <target state="translated">동일한 목표를 달성하는 다양한 방법을 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ca8d2c6a65f3a597d492a6786dcbede30a7b782" translate="yes" xml:space="preserve">
          <source>Yes, but Python has a comparison operator that you should use instead, because the language intends its usage, and other programmers will expect you to use it. That keyword is &lt;code&gt;in&lt;/code&gt;, which is used as a comparison operator:</source>
          <target state="translated">예, 그러나 파이썬에는 언어를 사용하려고 의도하는 다른 연산자가 있습니다. 다른 프로그래머는 그 언어를 사용할 것으로 기대하기 때문입니다. 해당 키워드는 &lt;code&gt;in&lt;/code&gt; 있으며 비교 연산자로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4a456727b68f9540e7b4745467dbd6a462d465f9" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;y.count()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;y.count()&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13e0fe4f847c9242a6ecad83c383336b16273569" translate="yes" xml:space="preserve">
          <source>You can use regular expressions to get the occurrences:</source>
          <target state="translated">정규식을 사용하여 어커런스를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fb75dd610aac869765acad0e528068a7a7611d9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt; &lt;code&gt;in&lt;/code&gt; 연산자를&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28bae2187bdb2710db68e94ee23a45761588cd22" translate="yes" xml:space="preserve">
          <source>You do have to be a little careful with &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.index&quot;&gt;&lt;code&gt;index&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-operations&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; though, as they are substring searches. In other words, this:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.index&quot;&gt; &lt;code&gt;index&lt;/code&gt; &lt;/a&gt; 및 하위 문자열 검색이므로 조심해야합니다. 다시 말해, 이것은 :</target>
        </trans-unit>
        <trans-unit id="9ed5a643d410a394491f567e56e051b01be293d5" translate="yes" xml:space="preserve">
          <source>and now:</source>
          <target state="translated">그리고 지금:</target>
        </trans-unit>
        <trans-unit id="cfbf6bf7c9fc1979bc29d656bfbc4e9419f504a1" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;True&lt;/code&gt;. You could also call this function from the instance of the superstring:</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 를 반환합니다. 수퍼 스트링 인스턴스에서이 함수를 호출 할 수도 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
