<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/3437059">
    <body>
      <group id="3437059">
        <trans-unit id="bfd5fb5461c52da5c2d99f6ba908fd0febb4ad56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if needle in haystack:&lt;/code&gt; is the normal use, as @Michael says -- it relies on the &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, more readable and faster than a method call.</source>
          <target state="translated">&lt;code&gt;if needle in haystack:&lt;/code&gt; это нормальное использование, как говорит @Michael, - оно основано на операторе &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; , более читабельно и быстрее, чем вызов метода.</target>
        </trans-unit>
        <trans-unit id="01146fd9d9a3f09c91752db54f91830aa987835f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt; Python strings and lists</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; строках и списках Python</target>
        </trans-unit>
        <trans-unit id="b2f12be594d29ddea9f6f77ccdf3cb53c8a503fc" translate="yes" xml:space="preserve">
          <source>All operators in Python can be more or less found in the &lt;a href=&quot;https://docs.python.org/3.5/library/operator.html#operator.contains&quot;&gt;operator module&lt;/a&gt; including &lt;code&gt;in&lt;/code&gt;.</source>
          <target state="translated">Все операторы в Python могут быть более или менее найдены в &lt;a href=&quot;https://docs.python.org/3.5/library/operator.html#operator.contains&quot;&gt;модуле оператора, в&lt;/a&gt; том числе &lt;code&gt;in&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="68fca403bccaec434d318651ed2c5b191adceaf0" translate="yes" xml:space="preserve">
          <source>Also, avoid the following string methods:</source>
          <target state="translated">Также избегайте следующих методов строк:</target>
        </trans-unit>
        <trans-unit id="75325459a4e7811f99c055fe0b1af0155b9e5132" translate="yes" xml:space="preserve">
          <source>And now we see that using &lt;code&gt;in&lt;/code&gt; is much faster than the others.
Less time to do an equivalent operation is better:</source>
          <target state="translated">И теперь мы видим, что использование &lt;code&gt;in&lt;/code&gt; намного быстрее, чем другие. Лучше меньше времени на выполнение эквивалентной операции:</target>
        </trans-unit>
        <trans-unit id="8148fd1d6f8868219f6aa63a5794fc7e0fa6adb6" translate="yes" xml:space="preserve">
          <source>As promised, here's the &lt;code&gt;contains&lt;/code&gt; method:</source>
          <target state="translated">Как и было обещано, вот метод &lt;code&gt;contains&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5347e596721fc056e3438ea1487acd84de052b85" translate="yes" xml:space="preserve">
          <source>Avoid using &lt;code&gt;__contains__&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">Избегайте использования &lt;code&gt;__contains__&lt;/code&gt; , &lt;code&gt;find&lt;/code&gt; и &lt;code&gt;index&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c0b789e68985106ecbb596d28f94ab9b4339d8c" translate="yes" xml:space="preserve">
          <source>But don't. Methods that start with underscores are considered semantically private. The only reason to use this is when extending the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; functionality (e.g. if subclassing &lt;code&gt;str&lt;/code&gt;):</source>
          <target state="translated">Но не надо. Методы, которые начинаются с подчеркивания, считаются семантически закрытыми. Единственная причина использовать это при расширении входных, а &lt;code&gt;not in&lt;/code&gt; функциональных возможностей (например, если подклассы &lt;code&gt;str&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="95e2a1c4cf477805852b5a80a909aa55114a9b86" translate="yes" xml:space="preserve">
          <source>Caveat. Lists are iterables, and the &lt;code&gt;in&lt;/code&gt; method acts on iterables, not just strings.</source>
          <target state="translated">Предостережение. Списки являются итеративными, а метод &lt;code&gt;in&lt;/code&gt; действует на итерируемые, а не только на строки.</target>
        </trans-unit>
        <trans-unit id="112b1030a11063ada9abd769a7d957e9fdb241ff" translate="yes" xml:space="preserve">
          <source>Does Python have a string 'contains' substring method</source>
          <target state="translated">Имеет ли Python метод подстрочной подстроки,'содержащей' строки</target>
        </trans-unit>
        <trans-unit id="9f72912ade92ee5e4763b80845e6b54cb54db80b" translate="yes" xml:space="preserve">
          <source>Does Python have a string contains substring method?</source>
          <target state="translated">Есть ли на Python строка,содержащая метод подстроек?</target>
        </trans-unit>
        <trans-unit id="cfb723bc734f1d3b2582921dd8d843aee68a906b" translate="yes" xml:space="preserve">
          <source>For checking if it is false:</source>
          <target state="translated">Для проверки,не является ли это ложью:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="ed3f0437c6b445631d7d45f8bd430092bf8fd3f4" translate="yes" xml:space="preserve">
          <source>Here are a few useful examples that speak for themselves concerning the &lt;code&gt;in&lt;/code&gt; method:</source>
          <target state="translated">Вот несколько полезных примеров, которые говорят сами за себя относительно метода &lt;code&gt;in&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8d5ac7f43cc7a2945163a886f10f76b96fd43057" translate="yes" xml:space="preserve">
          <source>Here is your answer:</source>
          <target state="translated">Вот твой ответ:</target>
        </trans-unit>
        <trans-unit id="3eb9e0ad6d7e84948674947d2adb980361122f79" translate="yes" xml:space="preserve">
          <source>I want to do:</source>
          <target state="translated">Я хочу это сделать:</target>
        </trans-unit>
        <trans-unit id="4de7106ecb61ca45f1a59d6bd68993b91d6bbbe4" translate="yes" xml:space="preserve">
          <source>I'm looking for a &lt;code&gt;string.contains&lt;/code&gt; or &lt;code&gt;string.indexof&lt;/code&gt; method in Python.</source>
          <target state="translated">Я ищу метод &lt;code&gt;string.contains&lt;/code&gt; или &lt;code&gt;string.indexof&lt;/code&gt; в Python.</target>
        </trans-unit>
        <trans-unit id="2690d30ab6ef755b74cd0d5f901593c324edfe48" translate="yes" xml:space="preserve">
          <source>If it's just a substring search you can use &lt;code&gt;string.find(&quot;substring&quot;)&lt;/code&gt;.</source>
          <target state="translated">Если это просто поиск по подстроке, вы можете использовать &lt;code&gt;string.find(&quot;substring&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6515f223d056601d0dc8da2838ac73db184bc620" translate="yes" xml:space="preserve">
          <source>If you are happy with &lt;code&gt;&quot;blah&quot; in somestring&lt;/code&gt; but want it to be a function/method call, you can probably do this</source>
          <target state="translated">Если вас устраивает &lt;code&gt;&quot;blah&quot; in somestring&lt;/code&gt; но вы хотите, чтобы это был вызов функции / метода, вы, вероятно, можете сделать это</target>
        </trans-unit>
        <trans-unit id="28129c29562ee5cdefcca6eed73eecd312fe2cfd" translate="yes" xml:space="preserve">
          <source>If you truly need a method instead of an operator (e.g. to do some weird &lt;code&gt;key=&lt;/code&gt; for a very peculiar sort...?), that would be &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;'haystack'.__contains__&lt;/code&gt;&lt;/a&gt;.  But since your example is for use in an &lt;code&gt;if&lt;/code&gt;, I guess you don't really mean what you say;-).  It's not good form (nor readable, nor efficient) to use special methods directly -- they're meant to be used, instead, through the operators and builtins that delegate to them.</source>
          <target state="translated">Если вам действительно нужен метод вместо оператора (например, чтобы сделать какой-то странный &lt;code&gt;key=&lt;/code&gt; для очень своеобразного рода ...?), Это будет &lt;a href=&quot;https://docs.python.org/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;'haystack'.__contains__&lt;/code&gt; &lt;/a&gt; . Но так как ваш пример предназначен для использования в &lt;code&gt;if&lt;/code&gt; , я думаю, вы на самом деле не имеете в виду то, что говорите ;-). Непригодно (ни читабельно, ни эффективно) использовать специальные методы напрямую - они предназначены для использования вместо них через операторы и встроенные функции, которые им делегируют.</target>
        </trans-unit>
        <trans-unit id="5fa7425ae0cbf754cfa40600913ebd7ab14c168d" translate="yes" xml:space="preserve">
          <source>It will return the integer value of the number of times a sub string appears in a string.</source>
          <target state="translated">Она вернет целое значение количества раз,когда в строке появляется подстрока.</target>
        </trans-unit>
        <trans-unit id="552e9e004ea940c8c7aecbd5dc9cd6e59c519337" translate="yes" xml:space="preserve">
          <source>It would print &lt;code&gt;Found 'is' in the string.&lt;/code&gt; Similarly, &lt;code&gt;if &quot;is&quot; in s:&lt;/code&gt; would evaluate to &lt;code&gt;True&lt;/code&gt;. This may or may not be what you want.</source>
          <target state="translated">В &lt;code&gt;Found 'is' in the string.&lt;/code&gt; будет напечатано Found 'is'. Точно так же, &lt;code&gt;if &quot;is&quot; in s:&lt;/code&gt; будет иметь значение &lt;code&gt;True&lt;/code&gt; . Это может или не может быть то, что вы хотите.</target>
        </trans-unit>
        <trans-unit id="6f253cbf35cc30170ea6d83c8b71ed090a9a84a9" translate="yes" xml:space="preserve">
          <source>OR:</source>
          <target state="translated">OR:</target>
        </trans-unit>
        <trans-unit id="33404da4e6145ea7c3bba7997e0412dbc77a6e86" translate="yes" xml:space="preserve">
          <source>Other languages may have no methods to directly test for substrings, and so you would have to use these types of methods, but with Python, it is much more efficient to use the &lt;code&gt;in&lt;/code&gt; comparison operator.</source>
          <target state="translated">Другие языки могут не иметь методов для непосредственного тестирования подстрок, и поэтому вам придется использовать эти типы методов, но с Python гораздо эффективнее использовать оператор сравнения &lt;code&gt;in&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc98eaa2af54ad0068708bbe514ed08024de1e42" translate="yes" xml:space="preserve">
          <source>Performance comparisons</source>
          <target state="translated">Сравнение производительности</target>
        </trans-unit>
        <trans-unit id="dff3392032b07cddb6869d7a242319d71d15ec43" translate="yes" xml:space="preserve">
          <source>So apparently there is nothing similar for vector-wise comparison. An obvious Python way to do so would be:</source>
          <target state="translated">Так что,видимо,нет ничего похожего на векторное сравнение.Очевидно,что на Пайтоне это можно сделать:</target>
        </trans-unit>
        <trans-unit id="6f905b5d807c34c91ff87f024ce690c79239f0a1" translate="yes" xml:space="preserve">
          <source>The opposite (complement), which the original question asks for, is &lt;code&gt;not in&lt;/code&gt;:</source>
          <target state="translated">Противоположность (дополнение), о которой просит исходный вопрос, заключается &lt;code&gt;not in&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dd51a0edb71147ff173671d46089c59efec8a389" translate="yes" xml:space="preserve">
          <source>This is semantically the same as &lt;code&gt;not 'foo' in '**foo**'&lt;/code&gt; but it's much more readable and explicitly provided for in the language as a readability improvement.</source>
          <target state="translated">Семантически это то же самое, что &lt;code&gt;not 'foo' in '**foo**'&lt;/code&gt; но гораздо более читабельно и явно предусмотрено в языке как улучшение читабельности.</target>
        </trans-unit>
        <trans-unit id="70f71147033db729bfdabf0cf1989ed9ac764cbb" translate="yes" xml:space="preserve">
          <source>We can compare various ways of accomplishing the same goal.</source>
          <target state="translated">Мы можем сравнить различные способы достижения одной и той же цели.</target>
        </trans-unit>
        <trans-unit id="5ca8d2c6a65f3a597d492a6786dcbede30a7b782" translate="yes" xml:space="preserve">
          <source>Yes, but Python has a comparison operator that you should use instead, because the language intends its usage, and other programmers will expect you to use it. That keyword is &lt;code&gt;in&lt;/code&gt;, which is used as a comparison operator:</source>
          <target state="translated">Да, но в Python есть оператор сравнения, который вы должны использовать вместо этого, потому что язык предполагает его использование, и другие программисты будут ожидать, что вы будете его использовать. Это ключевое слово, которое используется в качестве оператора сравнения:</target>
        </trans-unit>
        <trans-unit id="4a456727b68f9540e7b4745467dbd6a462d465f9" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;y.count()&lt;/code&gt;.</source>
          <target state="translated">Вы можете использовать &lt;code&gt;y.count()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13e0fe4f847c9242a6ecad83c383336b16273569" translate="yes" xml:space="preserve">
          <source>You can use regular expressions to get the occurrences:</source>
          <target state="translated">Для получения вхождений можно использовать регулярные выражения:</target>
        </trans-unit>
        <trans-unit id="3fb75dd610aac869765acad0e528068a7a7611d9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="translated">Вы можете использовать &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-details&quot;&gt;оператор &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="28bae2187bdb2710db68e94ee23a45761588cd22" translate="yes" xml:space="preserve">
          <source>You do have to be a little careful with &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.index&quot;&gt;&lt;code&gt;index&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/reference/expressions.html#membership-test-operations&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; though, as they are substring searches. In other words, this:</source>
          <target state="translated">Вы должны быть немного осторожны с &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/library/stdtypes.html#str.index&quot;&gt; &lt;code&gt;index&lt;/code&gt; &lt;/a&gt; и вводом, так как это поиск по подстроке. Другими словами, это:</target>
        </trans-unit>
        <trans-unit id="9ed5a643d410a394491f567e56e051b01be293d5" translate="yes" xml:space="preserve">
          <source>and now:</source>
          <target state="translated">и сейчас:</target>
        </trans-unit>
        <trans-unit id="cfbf6bf7c9fc1979bc29d656bfbc4e9419f504a1" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;True&lt;/code&gt;. You could also call this function from the instance of the superstring:</source>
          <target state="translated">возвращает &lt;code&gt;True&lt;/code&gt; . Вы также можете вызвать эту функцию из экземпляра суперструны:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
