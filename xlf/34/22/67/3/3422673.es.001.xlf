<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/3422673">
    <body>
      <group id="3422673">
        <trans-unit id="b189493d0723abaf0a25aabd29c10044c9aa3c0f" translate="yes" xml:space="preserve">
          <source>1 - Simple furmula</source>
          <target state="translated">1-Fórmula simple</target>
        </trans-unit>
        <trans-unit id="7b17ad8051a0cd08297c27ef47792e7a5aea6b8f" translate="yes" xml:space="preserve">
          <source>1.1 Get the next token.
1.2 If the token is:</source>
          <target state="translated">1.1 Consigue la siguiente ficha.1.2 Si la ficha es:</target>
        </trans-unit>
        <trans-unit id="70e5f660d27c4d6a729ee5eca4fc60ae93185e65" translate="yes" xml:space="preserve">
          <source>1.2.1 A number: push it onto the value stack.</source>
          <target state="translated">1.2.1 Un número:empújalo en la pila de valores.</target>
        </trans-unit>
        <trans-unit id="b54a111936c58ee5af526a780e97f447695a9829" translate="yes" xml:space="preserve">
          <source>1.2.2 A variable: get its value, and push onto the value stack.</source>
          <target state="translated">1.2.2 Una variable:obtener su valor,y empujar en la pila de valores.</target>
        </trans-unit>
        <trans-unit id="91e884a1365182e677736fc56ff9444bf690c751" translate="yes" xml:space="preserve">
          <source>1.2.3 A left parenthesis: push it onto the operator stack.</source>
          <target state="translated">1.2.3 Un paréntesis izquierdo:empújalo hacia la pila de operadores.</target>
        </trans-unit>
        <trans-unit id="87f2589084a9e2986f1c812f2dd76b001c34f226" translate="yes" xml:space="preserve">
          <source>1.2.4 A right parenthesis:</source>
          <target state="translated">1.2.4 Un paréntesis derecho:</target>
        </trans-unit>
        <trans-unit id="f0735c6d8c0d48bfee9f097e3b57bbcb2f691ff1" translate="yes" xml:space="preserve">
          <source>1.2.5 An operator (call it thisOp):</source>
          <target state="translated">1.2.5 Un operador (llámelo así):</target>
        </trans-unit>
        <trans-unit id="b70cb0631c94b280e75474fa969abb9710d178f2" translate="yes" xml:space="preserve">
          <source>2 - User defined arguments and constants</source>
          <target state="translated">2-Argumentos y constantes definidos por el usuario</target>
        </trans-unit>
        <trans-unit id="15cd0cb27cccb8c62a2245c1bf5615624c873f23" translate="yes" xml:space="preserve">
          <source>3 - User defined functions</source>
          <target state="translated">3-Funciones definidas por el usuario</target>
        </trans-unit>
        <trans-unit id="ccc6e9cea830b7494c74794e255cdb8b267b2fb4" translate="yes" xml:space="preserve">
          <source>4 - Iteration</source>
          <target state="translated">4-Iteración</target>
        </trans-unit>
        <trans-unit id="2fe4e674579e140c3dcf8a1fe81a54e3cf17b70a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot;&gt;This article&lt;/a&gt; discusses various approaches. Here are the 2 key approaches mentioned in the article:</source>
          <target state="translated">&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Este art&amp;iacute;culo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; discute varios enfoques. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Aqu&amp;iacute; est&amp;aacute;n los 2 enfoques clave mencionados en el art&amp;iacute;culo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1740655f956511dc473f3c2abef5635fa5f3f604" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot;&gt;HERE&lt;/a&gt; is another open source library on GitHub named EvalEx.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AQU&amp;Iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; hay otra biblioteca de c&amp;oacute;digo abierto en GitHub llamada EvalEx.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66851ccaa5d4bff14d124ad631290650d91d3081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MVEL&lt;/code&gt; does runtime evaluation of expressions, we can write a java code in &lt;code&gt;String&lt;/code&gt; to get it evaluated in this.</source>
          <target state="translated">&lt;code&gt;MVEL&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; realiza evaluaciones de expresiones en tiempo de ejecuci&amp;oacute;n, podemos escribir un c&amp;oacute;digo java en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para evaluarlo en esto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1da97c9df67bfe9403bc690b02dd407fa01987a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different datatypes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Diferentes tipos de datos:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea5c2c6b95749aa4e52965a30787c2b280bbfcac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Separate compilation and evaluation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Compilaci&amp;oacute;n y evaluaci&amp;oacute;n separadas:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c51f75623c112c9098f9b294cb11df633411dc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variables:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Variables:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a470a1c3c36ac43c6f08cff8179aac1bd3f98305" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;All code in this answer released &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;to the public domain&lt;/a&gt;. Have fun!&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Todo el c&amp;oacute;digo en esta respuesta se libera &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;al dominio p&amp;uacute;blico&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Que te diviertas!&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4071041dfbfbcfced9aef256cf6b920e7da9354f" translate="yes" xml:space="preserve">
          <source>A Java class that can evaluate mathematical expressions:</source>
          <target state="translated">Una clase de Java que puede evaluar las expresiones matemáticas:</target>
        </trans-unit>
        <trans-unit id="11958cfc83000edc5cd619a8e7a09c04db89d839" translate="yes" xml:space="preserve">
          <source>Allows for scripts that include references to java objects.</source>
          <target state="translated">Permite que los guiones incluyan referencias a los objetos de Java.</target>
        </trans-unit>
        <trans-unit id="a821e43c3b969654c45585b8dd96b345c961af5d" translate="yes" xml:space="preserve">
          <source>And few examples</source>
          <target state="translated">Y algunos ejemplos</target>
        </trans-unit>
        <trans-unit id="b645420a182b55b4dad7f4c15d3ff4460c22c049" translate="yes" xml:space="preserve">
          <source>Another way is to use Spring Expression Language or SpEL which does a whole lot more along with evaluating mathematical expressions therefore maybe slightly overkill. You do not have to be using Spring framework to use this expression library as it is stand-alone. Copying examples from SpEL's documentation:</source>
          <target state="translated">Otra forma es usar el Lenguaje de Expresión de Primavera o SpEL que hace mucho más junto con la evaluación de las expresiones matemáticas,por lo tanto tal vez un poco más.No tienes que usar el marco de trabajo de Spring para usar esta biblioteca de expresiones ya que es independiente.Copiando ejemplos de la documentación de SpEL:</target>
        </trans-unit>
        <trans-unit id="f183c3165e8afe8b17298049840cd2837f05e235" translate="yes" xml:space="preserve">
          <source>At this point the operator stack should be empty, and the value
stack should have only one value in it, which is the final result.</source>
          <target state="translated">En este punto la pila del operador debería estar vacía,y la pila de valores debería tener sólo un valor en ella,que es el resultado final.</target>
        </trans-unit>
        <trans-unit id="fcd813eb5299875e79422935a8b3ca8932f15b90" translate="yes" xml:space="preserve">
          <source>Best regards</source>
          <target state="translated">Saludos cordiales.</target>
        </trans-unit>
        <trans-unit id="8cbf674db3a09bc0d1ffedc4e64c64fe1229a2bd" translate="yes" xml:space="preserve">
          <source>Building and processing a parse tree (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot;&gt;TreeBuilder.java&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Crear y procesar un &amp;aacute;rbol de an&amp;aacute;lisis ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TreeBuilder.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be0db3faa728a3164e2835916a109d2d95df639" translate="yes" xml:space="preserve">
          <source>Creating a recursive descent parser is a really good learning exercise.</source>
          <target state="translated">Crear un analizador de descenso recursivo es un ejercicio de aprendizaje muy bueno.</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="6baee3a552afa63e9da9d9fb45a6ad9ce55441a4" translate="yes" xml:space="preserve">
          <source>External library like RHINO or NASHORN can be used to run javascript. And javascript can evaluate simple formula without parcing the string. No performance impact as well if code is written well.
Below is an example with RHINO -</source>
          <target state="translated">Una biblioteca externa como RHINO o NASHORN puede ser usada para ejecutar javascript.Y javascript puede evaluar fórmulas simples sin necesidad de separar la cadena.No hay impacto en el rendimiento si el código está bien escrito.A continuación se muestra un ejemplo con RHINO -</target>
        </trans-unit>
        <trans-unit id="b84959709066603663209b9212c3cbec6471419b" translate="yes" xml:space="preserve">
          <source>For example, in Sql Server or Sqlite</source>
          <target state="translated">Por ejemplo,en Sql Server o Sqlite</target>
        </trans-unit>
        <trans-unit id="7e2033bb95b31887135d46a7cf31bbffe1de185f" translate="yes" xml:space="preserve">
          <source>For my university project, I was looking for a parser / evaluator supporting both basic formulas and more complicated equations (especially iterated operators). I found very nice open source library for JAVA and .NET called mXparser. I will give a few examples to make some feeling on the syntax, for further instructions please visit project website (especially tutorial section).</source>
          <target state="translated">Para mi proyecto de universidad,buscaba un evaluador parser que apoyara tanto las fórmulas básicas como las ecuaciones más complicadas (especialmente los operadores iterados).Encontré una muy buena biblioteca de código abierto para JAVA y .NET llamada mXparser.Daré algunos ejemplos para que te hagas una idea de la sintaxis,para más instrucciones visita el sitio web del proyecto (especialmente la sección de tutoriales).</target>
        </trans-unit>
        <trans-unit id="b9b18f2943c9be49acd7bc2c77a19af47150bfaf" translate="yes" xml:space="preserve">
          <source>Found recently - in case you would like to try the syntax (and see the advanced use case) you can download the &lt;a href=&quot;https://scalarmath.org&quot;&gt;Scalar&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot;&gt;Calculator&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot;&gt;app&lt;/a&gt; that is powered by mXparser.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Encontrado recientemente: en caso de que desee probar la sintaxis (y ver el caso de uso avanzado), puede descargar la &lt;/font&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aplicaci&amp;oacute;n &lt;/font&gt;&lt;/a&gt;&lt;/font&gt;&lt;a href=&quot;https://scalarmath.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Scalar &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Calculator&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que funciona con mXparser.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3411c974c0ef8392a0d6137440c8d5198424994d" translate="yes" xml:space="preserve">
          <source>Here's a full working example in Java</source>
          <target state="translated">Aquí hay un ejemplo completo de trabajo en Java</target>
        </trans-unit>
        <trans-unit id="6629b3a9b3a5e61946b4fe5db6db2d6f8b453cc7" translate="yes" xml:space="preserve">
          <source>How about something like this:</source>
          <target state="translated">¿Qué tal algo como esto?</target>
        </trans-unit>
        <trans-unit id="6e2b7fc4783d971b7c62940ac33eb2e99955667f" translate="yes" xml:space="preserve">
          <source>How to evaluate a math expression given in string form</source>
          <target state="translated">Cómo evaluar una expresión matemática dada en forma de cuerda</target>
        </trans-unit>
        <trans-unit id="325fea76c774fe7b6356a69cb6244d8a3cbe14a7" translate="yes" xml:space="preserve">
          <source>However performance may suffer if many single expressions need to be evaluated individually, particularly when the DB is located on a network server.</source>
          <target state="translated">Sin embargo,el rendimiento puede sufrir si muchas expresiones individuales necesitan ser evaluadas individualmente,particularmente cuando la BD está ubicada en un servidor de red.</target>
        </trans-unit>
        <trans-unit id="17e55fbea734c139b96c04e349f659a632f6759a" translate="yes" xml:space="preserve">
          <source>I have implemented this to have a simple but flexible option to permit both:</source>
          <target state="translated">He implementado esto para tener una opción simple pero flexible que permita ambas cosas:</target>
        </trans-unit>
        <trans-unit id="623b29168ddac051ff09736a9aa511a71211e965" translate="yes" xml:space="preserve">
          <source>I think what ever way you do this it's going to involve a lot of conditional statements. But for single operations like in your examples you could limit it to 4 if statements with something like</source>
          <target state="translated">Creo que cualquier forma de hacer esto va a implicar un montón de declaraciones condicionales.Pero para operaciones simples como en tus ejemplos podrías limitarlo a 4 si las declaraciones con algo como</target>
        </trans-unit>
        <trans-unit id="bf168a32289f3a69ce3fd562b11028652acb4b8a" translate="yes" xml:space="preserve">
          <source>I want to avoid a lot of if-then-else statements.
How can I do this?</source>
          <target state="translated">Quiero evitar un montón de declaraciones de tipo &quot;si entonces&quot;.¿Cómo puedo hacer esto?</target>
        </trans-unit>
        <trans-unit id="f52ac2cae128448688ae1e1b88616db5220a6562" translate="yes" xml:space="preserve">
          <source>I wrote an article about it &lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot;&gt;here, with an implementation in java&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Escrib&amp;iacute; un art&amp;iacute;culo al respecto &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;, con una implementaci&amp;oacute;n en Java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db6312e4fe13c314171c46d43eed64f5e65efc3a" translate="yes" xml:space="preserve">
          <source>I'm trying to write a Java routine to evaluate simple math expressions from &lt;code&gt;String&lt;/code&gt; values like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Estoy tratando de escribir una rutina Java para evaluar expresiones matem&amp;aacute;ticas simples a partir de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valores de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36f9c78b343cf9643dbbbdbc6f7278000062a536" translate="yes" xml:space="preserve">
          <source>I've written this &lt;code&gt;eval&lt;/code&gt; method for arithmetic expressions to answer this question. It does addition, subtraction, multiplication, division, exponentiation (using the &lt;code&gt;^&lt;/code&gt; symbol), and a few basic functions like &lt;code&gt;sqrt&lt;/code&gt;. It supports grouping using &lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;, and it gets the operator &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot;&gt;precedence&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot;&gt;associativity&lt;/a&gt; rules correct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;He escrito este &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para expresiones aritm&amp;eacute;ticas para responder a esta pregunta. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hace suma, resta, multiplicaci&amp;oacute;n, divisi&amp;oacute;n, exponenciaci&amp;oacute;n (usando el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;s&amp;iacute;mbolo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;^&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) y algunas funciones b&amp;aacute;sicas como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;sqrt&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Admite la agrupaci&amp;oacute;n usando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ... &lt;/font&gt;&lt;/font&gt; &lt;code&gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y obtiene la &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;precedencia&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; del operador &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;y &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;las&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; reglas de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;asociatividad&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; correctas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d485794358ab6c11b2019cb8c6037fc4d6d8ef14" translate="yes" xml:space="preserve">
          <source>If you are trying to build a calculator then I'd surgest passing each section of the calculation separatly (each number or operator) rather than as a single string.</source>
          <target state="translated">Si estás tratando de construir una calculadora,entonces me gustaría pasar cada sección del cálculo por separado (cada número u operador)en lugar de como una sola cadena.</target>
        </trans-unit>
        <trans-unit id="74afb4bc9ddb21ecdc9d9e1cc4f78237ba415ef5" translate="yes" xml:space="preserve">
          <source>Immediate processing (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot;&gt;Calculator.java&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot;&gt;SetDemo.java&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Procesamiento inmediato ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Calculator.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SetDemo.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd682725709d7c18e33d743d1899543f49415c27" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;double&lt;/code&gt;, you could change the evaluator to use something more powerful like &lt;code&gt;BigDecimal&lt;/code&gt;, or a class that implements complex numbers, or rational numbers (fractions). You could even use &lt;code&gt;Object&lt;/code&gt;, allowing some mix of datatypes in expressions, just like a real programming language. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , puede cambiar el evaluador para usar algo m&amp;aacute;s poderoso como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , o una clase que implemente n&amp;uacute;meros complejos o n&amp;uacute;meros racionales (fracciones). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso podr&amp;iacute;a usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo que permite una combinaci&amp;oacute;n de tipos de datos en expresiones, al igual que un lenguaje de programaci&amp;oacute;n real. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bcee2c0e8b42c9ac78ae27373922ae28e2af7e5" translate="yes" xml:space="preserve">
          <source>It gets a whole lot more complicated when you want to deal with multiple operations like &quot;4+5*6&quot;.</source>
          <target state="translated">Se vuelve mucho más complicado cuando quieres lidiar con múltiples operaciones como &quot;4+5*6&quot;.</target>
        </trans-unit>
        <trans-unit id="90886e457b8b4f6e08199c1f3dda7af9a02cc8a0" translate="yes" xml:space="preserve">
          <source>It is possible to convert any expression string in infix notation to a postfix notation using &lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot;&gt;Djikstra's shunting-yard algorithm&lt;/a&gt;. The result of the algorithm can then serve as input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot;&gt;postfix algorithm&lt;/a&gt; with returns the result of the expression.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es posible convertir cualquier cadena de expresi&amp;oacute;n en notaci&amp;oacute;n infija a una notaci&amp;oacute;n postfix usando el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;algoritmo de desviaci&amp;oacute;n de Djikstra&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El resultado del algoritmo puede servir como entrada para el &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;algoritmo de postfix&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con retornos del resultado de la expresi&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d99e7906eac1cb64e40d3c92b04a679282ed195" translate="yes" xml:space="preserve">
          <source>It seems like &lt;a href=&quot;http://sourceforge.net/projects/jep/&quot;&gt;JEP&lt;/a&gt; should do the job</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Parece que &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://sourceforge.net/projects/jep/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JEP&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; deber&amp;iacute;a hacer el trabajo&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8b9b5fbb929d159cfd765eb6d2237e0dae020a7" translate="yes" xml:space="preserve">
          <source>It's too late to answer but I came across same situation to evaluate expression in java, it might help someone</source>
          <target state="translated">Es demasiado tarde para responder pero me encontré con la misma situación para evaluar la expresión en java,podría ayudar a alguien</target>
        </trans-unit>
        <trans-unit id="85b20cbf34900b61174cbfef5cba7a1f6821812a" translate="yes" xml:space="preserve">
          <source>JEXL from Apache</source>
          <target state="translated">JEXL de Apache</target>
        </trans-unit>
        <trans-unit id="2bba50be43e087d392fb4d92db31e568505a3a97" translate="yes" xml:space="preserve">
          <source>Now change all the methods that return &lt;code&gt;double&lt;/code&gt;s, so instead they return an instance of that interface. Java 8's lambda syntax works great for this. Example of one of the changed methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora cambie todos los m&amp;eacute;todos que devuelven &lt;/font&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; s, por lo que en su lugar devuelven una instancia de esa interfaz. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La sintaxis lambda de Java 8 funciona muy bien para esto. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ejemplo de uno de los m&amp;eacute;todos modificados:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa1aa70de67e04698badc45f571a75ae01d6e631" translate="yes" xml:space="preserve">
          <source>Of course you could extend the above code to handle multiple calculations at the same time.</source>
          <target state="translated">Por supuesto,podría extender el código anterior para manejar múltiples cálculos al mismo tiempo.</target>
        </trans-unit>
        <trans-unit id="fc961aeb1f377ae5820c9c4cbefba9bd2eda1d82" translate="yes" xml:space="preserve">
          <source>Output: 7.5 &lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot;&gt;(which is correct)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Salida: 7.5 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(que es correcto)&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cec43fae0cef8de67977d1383f4b49f91a935853" translate="yes" xml:space="preserve">
          <source>Read more concise SpEL examples &lt;a href=&quot;http://syntx.co/languages-frameworks/evaluating-expressions-using-spring-expression-language-spel/&quot;&gt;here&lt;/a&gt; and the complete docs &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/expressions.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lea m&amp;aacute;s ejemplos concisos de SpEL &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://syntx.co/languages-frameworks/evaluating-expressions-using-spring-expression-language-spel/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y los documentos completos &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/expressions.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;aqu&amp;iacute;.&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba8d40f12cf4b5e5c2a99a97e877c80d6edae1ff" translate="yes" xml:space="preserve">
          <source>Some databases require you to use a dummy table (eg, Oracle's &quot;dual&quot; table) and others will allow you to evaluate expressions without &quot;selecting&quot; from any table.</source>
          <target state="translated">Algunas bases de datos requieren que se utilice una tabla ficticia (por ejemplo,la tabla &quot;dual&quot; de Oracle)y otras le permitirán evaluar las expresiones sin &quot;seleccionar&quot; de ninguna tabla.</target>
        </trans-unit>
        <trans-unit id="b8092c56a98d9121844bfd753f149b6a39b3dfd8" translate="yes" xml:space="preserve">
          <source>Take note that definitively more complex expressions can be evaluated:</source>
          <target state="translated">Tome nota de que definitivamente se pueden evaluar expresiones más complejas:</target>
        </trans-unit>
        <trans-unit id="989811a1a1bfdb2953c7ad4dbb4583f10aa1b6b0" translate="yes" xml:space="preserve">
          <source>That builds a recursive tree of &lt;code&gt;Expression&lt;/code&gt; objects representing the compiled expression (an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree&lt;/a&gt;). Then you can compile it once and evaluate it repeatedly with different values:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eso crea un &amp;aacute;rbol recursivo de &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;objetos &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Expression&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que representa la expresi&amp;oacute;n compilada (un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;aacute;rbol de sintaxis abstracta&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Luego puede compilarlo una vez y evaluarlo repetidamente con diferentes valores:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="81b296efc64d139159d578efadf8e2d5e87c5c78" translate="yes" xml:space="preserve">
          <source>The TreeBuilder linked above is part of a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot;&gt;CAS demo package&lt;/a&gt; that does symbolic derivation. There is also a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot;&gt;BASIC interpreter&lt;/a&gt; example and I have started to build a &lt;a href=&quot;https://github.com/stefanhaustein/typo&quot;&gt;TypeScript interpreter&lt;/a&gt; using it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El TreeBuilder vinculado anteriormente es parte de un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;paquete de demostraci&amp;oacute;n de CAS&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que realiza una derivaci&amp;oacute;n simb&amp;oacute;lica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n hay un &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ejemplo de &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int&amp;eacute;rprete B&amp;Aacute;SICO&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y he comenzado a construir un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/typo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int&amp;eacute;rprete TypeScript&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; us&amp;aacute;ndolo.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e0c5950787f087b30e58f48e90341a41a60db767" translate="yes" xml:space="preserve">
          <source>The advantage of using a DB is that you can evaluate many expressions at the same time. Also most DB's will allow you to use highly complex expressions and   will also have a number of extra functions that can be called as necessary.</source>
          <target state="translated">La ventaja de usar una BD es que puedes evaluar muchas expresiones al mismo tiempo.Además,la mayoría de los DB te permitirán usar expresiones altamente complejas y también tendrán un número de funciones extra que pueden ser llamadas según sea necesario.</target>
        </trans-unit>
        <trans-unit id="121608a35ff952255ffc4d2dcb8fe6c1156c1acc" translate="yes" xml:space="preserve">
          <source>The bit of the parser that reads the names for functions can easily be changed to handle custom variables too, by looking up names in a variable table passed to the &lt;code&gt;eval&lt;/code&gt; method, such as a &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El bit del analizador que lee los nombres de las funciones tambi&amp;eacute;n se puede cambiar f&amp;aacute;cilmente para manejar variables personalizadas, buscando nombres en una tabla de variables pasada al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;m&amp;eacute;todo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , como las &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc76437fb404aa0973705a9b71bea5feffe95245" translate="yes" xml:space="preserve">
          <source>The correct way to solve this is with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexer&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot;&gt;parser&lt;/a&gt;. You can write simple versions of these yourself, or those pages also have links to Java lexers and parsers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La forma correcta de resolver esto es con un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lexer&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;analizador sint&amp;aacute;ctico&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede escribir versiones simples de estos usted mismo, o esas p&amp;aacute;ginas tambi&amp;eacute;n tienen enlaces a lexers y analizadores de Java.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ef27834b8576cee4eb4589abe26cae562e3ae1b" translate="yes" xml:space="preserve">
          <source>The following addresses the performance problem to some extent, by using a Sqlite in-memory database.</source>
          <target state="translated">A continuación se aborda el problema del rendimiento en cierta medida,mediante el uso de una base de datos en memoria de Sqlite.</target>
        </trans-unit>
        <trans-unit id="7f0556635ea4b80d289b2326474aac31712e9e37" translate="yes" xml:space="preserve">
          <source>The parser is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;recursive descent parser&lt;/a&gt;, so internally uses separate parse methods for each level of operator precedence in its grammar. I kept it &lt;strong&gt;short&lt;/strong&gt; so it's easy to modify, but here are some ideas you might want to expand it with:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El analizador es un &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;analizador de descenso recursivo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por lo que utiliza internamente m&amp;eacute;todos de an&amp;aacute;lisis separados para cada nivel de precedencia del operador en su gram&amp;aacute;tica. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo mantuve &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;breve&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que sea f&amp;aacute;cil de modificar, pero aqu&amp;iacute; hay algunas ideas con las que puede expandirlo:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e8a1bfb3a7ce7335feba6207a0a26567db135b4" translate="yes" xml:space="preserve">
          <source>The usage is very simple and gets the job done, for example:</source>
          <target state="translated">El uso es muy simple y hace el trabajo,por ejemplo:</target>
        </trans-unit>
        <trans-unit id="dedcd3977682849e3e0915c68cc93b738e9bdbe0" translate="yes" xml:space="preserve">
          <source>This is actually complementing the answer given by @Boann. It has a slight bug which causes &quot;-2 ^ 2&quot; to give an erroneous result of -4.0. The problem for that is the point at which the exponentiation is evaluated in his. Just move the exponentiation to the block of parseTerm(), and you'll be all fine. Have a look at the below, which is &lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;@Boann's answer&lt;/a&gt; slightly modified. Modification is in the comments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto en realidad complementa la respuesta dada por @Boann. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tiene un peque&amp;ntilde;o error que hace que &quot;-2 ^ 2&quot; d&amp;eacute; un resultado err&amp;oacute;neo de -4.0. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El problema para eso es el punto en el que se eval&amp;uacute;a la exponenciaci&amp;oacute;n en su. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Simplemente mueva la exponenciaci&amp;oacute;n al bloque de parseTerm (), y todo estar&amp;aacute; bien. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Eche un vistazo a la siguiente, que es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;la respuesta de @ Boann&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ligeramente modificada. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La modificaci&amp;oacute;n est&amp;aacute; en los comentarios.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90e2a9471c2f709fc05848b873caa40e15fd1cbf" translate="yes" xml:space="preserve">
          <source>This is another interesting alternative 
&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta es otra alternativa interesante &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be5e94b4b48e4e011e9884468cd0c470cb061bde" translate="yes" xml:space="preserve">
          <source>Try the following sample code using JDK1.6's Javascript engine with code injection handling.</source>
          <target state="translated">Pruebe el siguiente código de muestra usando el motor JDK1.6's Javascript con manejo de inyección de código.</target>
        </trans-unit>
        <trans-unit id="30915fa19fcda28878f14373f519a56dad5882c8" translate="yes" xml:space="preserve">
          <source>Unlike the JavaScript engine this library is focused in evaluating mathematical expressions only. Moreover, the library is extensible and supports use of boolean operators as well as parentheses.</source>
          <target state="translated">A diferencia del motor de JavaScript,esta biblioteca está enfocada a evaluar sólo expresiones matemáticas.Además,la biblioteca es extensible y soporta el uso de operadores booleanos así como paréntesis.</target>
        </trans-unit>
        <trans-unit id="9cbfc13d7a82087f1e8cf577c42c09a7d0a82c8d" translate="yes" xml:space="preserve">
          <source>Use the javascript engine embedded in the JDK:</source>
          <target state="translated">Utiliza el motor de javascript incrustado en el JDK:</target>
        </trans-unit>
        <trans-unit id="6204cb7e170c3d221fd87e282b3a2b3873c65a6d" translate="yes" xml:space="preserve">
          <source>What if, having added support for variables, you wanted to evaluate the same expression millions of times with changed variables, without parsing it every time? It's possible. First define an interface to use to evaluate the precompiled expression:</source>
          <target state="translated">¿Qué pasaría si,habiendo añadido soporte para las variables,quisieras evaluar la misma expresión millones de veces con variables cambiadas,sin analizarla cada vez? Es posible.Primero defina una interfaz para usar para evaluar la expresión precompilada:</target>
        </trans-unit>
        <trans-unit id="0166cedcc76e8442c40c96689443988315cbcb64" translate="yes" xml:space="preserve">
          <source>While the operator stack is not empty,
1 Pop the operator from the operator stack.
2 Pop the value stack twice, getting two operands.
3 Apply the operator to the operands, in the correct order.
4 Push the result onto the value stack.</source>
          <target state="translated">Mientras que la pila del operador no esté vacía,1 Saque el operador de la pila del operador.2 Reventar la pila de valores dos veces,obteniendo dos operandos.3 Aplicar el operador a los operandos,en el orden correcto.4 Empujar el resultado a la pila de valores.</target>
        </trans-unit>
        <trans-unit id="d6e647ec522cf4392535ce381b93391ea8a426ab" translate="yes" xml:space="preserve">
          <source>While there are still tokens to be read in,</source>
          <target state="translated">Mientras que todavía hay fichas para ser leídas,</target>
        </trans-unit>
        <trans-unit id="454b9e3af42a6c3673119746e53dc7307f0dc64c" translate="yes" xml:space="preserve">
          <source>With JDK1.6, you can use the built-in Javascript engine.</source>
          <target state="translated">Con JDK1.6,puedes usar el motor de Javascript incorporado.</target>
        </trans-unit>
        <trans-unit id="897d74cc15da0bb04ccacc416d65bcf6e84639c8" translate="yes" xml:space="preserve">
          <source>Yet another option: &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot;&gt;https://github.com/stefanhaustein/expressionparser&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otra opci&amp;oacute;n m&amp;aacute;s: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/stefanhaustein/expressionparser&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65fc69e2020c789efb9a0acd35431dce809e40bb" translate="yes" xml:space="preserve">
          <source>You can also try the &lt;a href=&quot;http://www.beanshell.org&quot;&gt;BeanShell&lt;/a&gt; interpreter:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n puede probar el &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;int&amp;eacute;rprete &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.beanshell.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BeanShell&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b623f10fdcde6b68c56c2713f37bfe43b6c78c5" translate="yes" xml:space="preserve">
          <source>You can evaluate expressions easily if your Java application already accesses a database, without using any other JARs.</source>
          <target state="translated">Puede evaluar las expresiones fácilmente si su aplicación Java ya accede a una base de datos,sin utilizar ningún otro JAR.</target>
        </trans-unit>
        <trans-unit id="4b9d403cc607c5b71149db139f6b3d9c030f467f" translate="yes" xml:space="preserve">
          <source>You might have a look at the &lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot;&gt;Symja framework&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede echar un vistazo al &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;marco de Symja&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69a3ac5cc2fdd16ba0d883dd36cdb3d9021373b3" translate="yes" xml:space="preserve">
          <source>and do the similar thing for every other mathematical operator accordingly ..</source>
          <target state="translated">y hacer lo mismo para todos los demás operadores matemáticos en consecuencia...</target>
        </trans-unit>
        <trans-unit id="0c54051c8ea84dc3cc644818d81f2b68f0685c3b" translate="yes" xml:space="preserve">
          <source>and in Oracle</source>
          <target state="translated">y en el Oráculo</target>
        </trans-unit>
        <trans-unit id="4fa697554e8a14e6d8fba6e8342c9232a0c25df0" translate="yes" xml:space="preserve">
          <source>if we are going to implement it then we can can use the below algorithm :--</source>
          <target state="translated">si vamos a implementarlo entonces podemos usar el siguiente algoritmo :--</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
