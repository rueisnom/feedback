<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/3422673">
    <body>
      <group id="3422673">
        <trans-unit id="b189493d0723abaf0a25aabd29c10044c9aa3c0f" translate="yes" xml:space="preserve">
          <source>1 - Simple furmula</source>
          <target state="translated">1-シンプルなファーミュラ</target>
        </trans-unit>
        <trans-unit id="7b17ad8051a0cd08297c27ef47792e7a5aea6b8f" translate="yes" xml:space="preserve">
          <source>1.1 Get the next token.
1.2 If the token is:</source>
          <target state="translated">1.1 次のトークンを取得する。1.2 トークンが</target>
        </trans-unit>
        <trans-unit id="70e5f660d27c4d6a729ee5eca4fc60ae93185e65" translate="yes" xml:space="preserve">
          <source>1.2.1 A number: push it onto the value stack.</source>
          <target state="translated">1.2.1 数字:値のスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="b54a111936c58ee5af526a780e97f447695a9829" translate="yes" xml:space="preserve">
          <source>1.2.2 A variable: get its value, and push onto the value stack.</source>
          <target state="translated">1.2.2 変数:その値を取得し、値スタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="91e884a1365182e677736fc56ff9444bf690c751" translate="yes" xml:space="preserve">
          <source>1.2.3 A left parenthesis: push it onto the operator stack.</source>
          <target state="translated">1.2.3 左の括弧:演算子スタックに押し込む。</target>
        </trans-unit>
        <trans-unit id="87f2589084a9e2986f1c812f2dd76b001c34f226" translate="yes" xml:space="preserve">
          <source>1.2.4 A right parenthesis:</source>
          <target state="translated">1.2.4 右の括弧。</target>
        </trans-unit>
        <trans-unit id="f0735c6d8c0d48bfee9f097e3b57bbcb2f691ff1" translate="yes" xml:space="preserve">
          <source>1.2.5 An operator (call it thisOp):</source>
          <target state="translated">1.2.5 演算子(これをthisOpと呼ぶ)。</target>
        </trans-unit>
        <trans-unit id="b70cb0631c94b280e75474fa969abb9710d178f2" translate="yes" xml:space="preserve">
          <source>2 - User defined arguments and constants</source>
          <target state="translated">2-ユーザー定義の引数と定数</target>
        </trans-unit>
        <trans-unit id="15cd0cb27cccb8c62a2245c1bf5615624c873f23" translate="yes" xml:space="preserve">
          <source>3 - User defined functions</source>
          <target state="translated">3-ユーザー定義機能</target>
        </trans-unit>
        <trans-unit id="ccc6e9cea830b7494c74794e255cdb8b267b2fb4" translate="yes" xml:space="preserve">
          <source>4 - Iteration</source>
          <target state="translated">4-イテレーション</target>
        </trans-unit>
        <trans-unit id="2fe4e674579e140c3dcf8a1fe81a54e3cf17b70a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot;&gt;This article&lt;/a&gt; discusses various approaches. Here are the 2 key approaches mentioned in the article:</source>
          <target state="translated">&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この記事で&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、さまざまなアプローチについて説明します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記事で言及されている2つの主要なアプローチは次のとおりです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1740655f956511dc473f3c2abef5635fa5f3f604" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot;&gt;HERE&lt;/a&gt; is another open source library on GitHub named EvalEx.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、EvalExという名前のGitHub上の別のオープンソースライブラリです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="66851ccaa5d4bff14d124ad631290650d91d3081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MVEL&lt;/code&gt; does runtime evaluation of expressions, we can write a java code in &lt;code&gt;String&lt;/code&gt; to get it evaluated in this.</source>
          <target state="translated">&lt;code&gt;MVEL&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;式の実行時の評価を行い、我々は中にJavaコードを書くことができます&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それはこの中で評価を取得します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1da97c9df67bfe9403bc690b02dd407fa01987a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different datatypes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さまざまなデータ型：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ea5c2c6b95749aa4e52965a30787c2b280bbfcac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Separate compilation and evaluation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;個別のコンパイルと評価：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c51f75623c112c9098f9b294cb11df633411dc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variables:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Variables:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a470a1c3c36ac43c6f08cff8179aac1bd3f98305" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;All code in this answer released &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;to the public domain&lt;/a&gt;. Have fun!&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この回答のすべてのコード&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はパブリックドメインに&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;リリースさ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;楽しんで！&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="4071041dfbfbcfced9aef256cf6b920e7da9354f" translate="yes" xml:space="preserve">
          <source>A Java class that can evaluate mathematical expressions:</source>
          <target state="translated">数式を評価することができるJavaクラス。</target>
        </trans-unit>
        <trans-unit id="11958cfc83000edc5cd619a8e7a09c04db89d839" translate="yes" xml:space="preserve">
          <source>Allows for scripts that include references to java objects.</source>
          <target state="translated">java オブジェクトへの参照を含むスクリプトを許可します。</target>
        </trans-unit>
        <trans-unit id="a821e43c3b969654c45585b8dd96b345c961af5d" translate="yes" xml:space="preserve">
          <source>And few examples</source>
          <target state="translated">そして、いくつかの例</target>
        </trans-unit>
        <trans-unit id="b645420a182b55b4dad7f4c15d3ff4460c22c049" translate="yes" xml:space="preserve">
          <source>Another way is to use Spring Expression Language or SpEL which does a whole lot more along with evaluating mathematical expressions therefore maybe slightly overkill. You do not have to be using Spring framework to use this expression library as it is stand-alone. Copying examples from SpEL's documentation:</source>
          <target state="translated">もう一つの方法は、Spring Expression LanguageやSpELを使うことです。これは数式の評価に加えて、より多くのことを行うことができます。この式ライブラリはスタンドアロンなので、Springフレームワークを使う必要はありません。SpELのドキュメントから例をコピーします。</target>
        </trans-unit>
        <trans-unit id="f183c3165e8afe8b17298049840cd2837f05e235" translate="yes" xml:space="preserve">
          <source>At this point the operator stack should be empty, and the value
stack should have only one value in it, which is the final result.</source>
          <target state="translated">この時点では演算子スタックは空で、値スタックには最終的な結果である1つの値だけが含まれているはずです。</target>
        </trans-unit>
        <trans-unit id="fcd813eb5299875e79422935a8b3ca8932f15b90" translate="yes" xml:space="preserve">
          <source>Best regards</source>
          <target state="translated">よろしくお願いします</target>
        </trans-unit>
        <trans-unit id="8cbf674db3a09bc0d1ffedc4e64c64fe1229a2bd" translate="yes" xml:space="preserve">
          <source>Building and processing a parse tree (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot;&gt;TreeBuilder.java&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解析ツリーの構築と処理（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TreeBuilder.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be0db3faa728a3164e2835916a109d2d95df639" translate="yes" xml:space="preserve">
          <source>Creating a recursive descent parser is a really good learning exercise.</source>
          <target state="translated">再帰的な降下パーサを作成することは、本当に良い勉強になります。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="6baee3a552afa63e9da9d9fb45a6ad9ce55441a4" translate="yes" xml:space="preserve">
          <source>External library like RHINO or NASHORN can be used to run javascript. And javascript can evaluate simple formula without parcing the string. No performance impact as well if code is written well.
Below is an example with RHINO -</source>
          <target state="translated">javascriptはRHINOやNASHORNなどの外部ライブラリを利用することができます。また、javascriptは文字列をパーシングしなくても簡単な数式を評価できる。コードがうまく書けていれば、パフォーマンスにも影響はありません。以下はRHINOを使った例です。</target>
        </trans-unit>
        <trans-unit id="b84959709066603663209b9212c3cbec6471419b" translate="yes" xml:space="preserve">
          <source>For example, in Sql Server or Sqlite</source>
          <target state="translated">例えば、Sql ServerやSqliteでは</target>
        </trans-unit>
        <trans-unit id="7e2033bb95b31887135d46a7cf31bbffe1de185f" translate="yes" xml:space="preserve">
          <source>For my university project, I was looking for a parser / evaluator supporting both basic formulas and more complicated equations (especially iterated operators). I found very nice open source library for JAVA and .NET called mXparser. I will give a few examples to make some feeling on the syntax, for further instructions please visit project website (especially tutorial section).</source>
          <target state="translated">大学のプロジェクトのために、基本的な数式とより複雑な方程式(特に反復演算子)の両方をサポートするパーサー評価器を探していました。JAVAと.NETのためにmXparserという素晴らしいオープンソースのライブラリを見つけました。構文についての感覚を得るためにいくつかの例をあげます。</target>
        </trans-unit>
        <trans-unit id="b9b18f2943c9be49acd7bc2c77a19af47150bfaf" translate="yes" xml:space="preserve">
          <source>Found recently - in case you would like to try the syntax (and see the advanced use case) you can download the &lt;a href=&quot;https://scalarmath.org&quot;&gt;Scalar&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot;&gt;Calculator&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot;&gt;app&lt;/a&gt; that is powered by mXparser.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最近見つかりました-構文を試したい場合（および高度な使用例を参照したい場合）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、mXparserを搭載し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;た&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://scalarmath.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スカラー&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;計算&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アプリ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ダウンロードできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3411c974c0ef8392a0d6137440c8d5198424994d" translate="yes" xml:space="preserve">
          <source>Here's a full working example in Java</source>
          <target state="translated">Javaでの完全な動作例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6629b3a9b3a5e61946b4fe5db6db2d6f8b453cc7" translate="yes" xml:space="preserve">
          <source>How about something like this:</source>
          <target state="translated">こんな感じでどうでしょうか。</target>
        </trans-unit>
        <trans-unit id="6e2b7fc4783d971b7c62940ac33eb2e99955667f" translate="yes" xml:space="preserve">
          <source>How to evaluate a math expression given in string form</source>
          <target state="translated">文字列形式で与えられた数式を評価する方法</target>
        </trans-unit>
        <trans-unit id="325fea76c774fe7b6356a69cb6244d8a3cbe14a7" translate="yes" xml:space="preserve">
          <source>However performance may suffer if many single expressions need to be evaluated individually, particularly when the DB is located on a network server.</source>
          <target state="translated">しかし、多くの単一の式を個別に評価する必要がある場合、特にDBがネットワークサーバ上にある場合には、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="17e55fbea734c139b96c04e349f659a632f6759a" translate="yes" xml:space="preserve">
          <source>I have implemented this to have a simple but flexible option to permit both:</source>
          <target state="translated">シンプルですが、両方を許可する柔軟性のあるオプションを持つために実装しました。</target>
        </trans-unit>
        <trans-unit id="623b29168ddac051ff09736a9aa511a71211e965" translate="yes" xml:space="preserve">
          <source>I think what ever way you do this it's going to involve a lot of conditional statements. But for single operations like in your examples you could limit it to 4 if statements with something like</source>
          <target state="translated">どのような方法で行うにしても、多くの条件文が必要になると思います。しかし、あなたの例のような単一の操作の場合は、以下のようなif文を4つに制限することができます。</target>
        </trans-unit>
        <trans-unit id="bf168a32289f3a69ce3fd562b11028652acb4b8a" translate="yes" xml:space="preserve">
          <source>I want to avoid a lot of if-then-else statements.
How can I do this?</source>
          <target state="translated">if-then-else文を多用するのは避けたい。どうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f52ac2cae128448688ae1e1b88616db5220a6562" translate="yes" xml:space="preserve">
          <source>I wrote an article about it &lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot;&gt;here, with an implementation in java&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私はそれに関する記事を&lt;/font&gt;&lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に書きました&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、Javaでの実装&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db6312e4fe13c314171c46d43eed64f5e65efc3a" translate="yes" xml:space="preserve">
          <source>I'm trying to write a Java routine to evaluate simple math expressions from &lt;code&gt;String&lt;/code&gt; values like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような&lt;/font&gt;&lt;/font&gt; &lt;code&gt;String&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から単純な数式を評価するJavaルーチンを記述しようとしています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36f9c78b343cf9643dbbbdbc6f7278000062a536" translate="yes" xml:space="preserve">
          <source>I've written this &lt;code&gt;eval&lt;/code&gt; method for arithmetic expressions to answer this question. It does addition, subtraction, multiplication, division, exponentiation (using the &lt;code&gt;^&lt;/code&gt; symbol), and a few basic functions like &lt;code&gt;sqrt&lt;/code&gt;. It supports grouping using &lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;, and it gets the operator &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot;&gt;precedence&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot;&gt;associativity&lt;/a&gt; rules correct.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この質問に答えるために、算術式の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この&lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを作成しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、加算、減算、乗算、除算、指数（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;^&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記号&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）、および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;sqrt&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ようないくつかの基本的な関数を実行し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ... &lt;/font&gt;&lt;/font&gt; &lt;code&gt;)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用したグループ化をサポートし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、演算子の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;優先順位&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;結合&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;規則を正しく&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;取得し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d485794358ab6c11b2019cb8c6037fc4d6d8ef14" translate="yes" xml:space="preserve">
          <source>If you are trying to build a calculator then I'd surgest passing each section of the calculation separatly (each number or operator) rather than as a single string.</source>
          <target state="translated">計算機を作ろうとしているのであれば、単一の文字列としてではなく、計算の各セクションを分離して渡すことをお勧めします (各数値や演算子)。</target>
        </trans-unit>
        <trans-unit id="74afb4bc9ddb21ecdc9d9e1cc4f78237ba415ef5" translate="yes" xml:space="preserve">
          <source>Immediate processing (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot;&gt;Calculator.java&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot;&gt;SetDemo.java&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即時処理（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Calculator.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SetDemo.java&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd682725709d7c18e33d743d1899543f49415c27" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;double&lt;/code&gt;, you could change the evaluator to use something more powerful like &lt;code&gt;BigDecimal&lt;/code&gt;, or a class that implements complex numbers, or rational numbers (fractions). You could even use &lt;code&gt;Object&lt;/code&gt;, allowing some mix of datatypes in expressions, just like a real programming language. :)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、エバリュエーターを変更して&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigDecimal&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ようなより強力なもの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または複素数または有理数（小数部）を実装するクラス&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Object&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、実際のプログラミング言語と同じように、式にデータ型を混在させる&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こともでき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;:)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7bcee2c0e8b42c9ac78ae27373922ae28e2af7e5" translate="yes" xml:space="preserve">
          <source>It gets a whole lot more complicated when you want to deal with multiple operations like &quot;4+5*6&quot;.</source>
          <target state="translated">4+5*6」のように複数の演算を処理したい場合は、さらに複雑になります。</target>
        </trans-unit>
        <trans-unit id="90886e457b8b4f6e08199c1f3dda7af9a02cc8a0" translate="yes" xml:space="preserve">
          <source>It is possible to convert any expression string in infix notation to a postfix notation using &lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot;&gt;Djikstra's shunting-yard algorithm&lt;/a&gt;. The result of the algorithm can then serve as input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot;&gt;postfix algorithm&lt;/a&gt; with returns the result of the expression.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Djikstraの分路ヤードアルゴリズム&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して、中置表記の任意の式文字列を後&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;置表&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;記に変換することが可能&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アルゴリズムの結果は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;postfixアルゴリズム&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への入力として機能し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、式の結果を返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5d99e7906eac1cb64e40d3c92b04a679282ed195" translate="yes" xml:space="preserve">
          <source>It seems like &lt;a href=&quot;http://sourceforge.net/projects/jep/&quot;&gt;JEP&lt;/a&gt; should do the job</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://sourceforge.net/projects/jep/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;JEP&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は仕事をする必要がある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;よう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b8b9b5fbb929d159cfd765eb6d2237e0dae020a7" translate="yes" xml:space="preserve">
          <source>It's too late to answer but I came across same situation to evaluate expression in java, it might help someone</source>
          <target state="translated">回答するには遅すぎますが、私はJavaで式を評価するために同じ状況に出くわしました、それは誰かの助けになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="85b20cbf34900b61174cbfef5cba7a1f6821812a" translate="yes" xml:space="preserve">
          <source>JEXL from Apache</source>
          <target state="translated">Apache からの JEXL</target>
        </trans-unit>
        <trans-unit id="2bba50be43e087d392fb4d92db31e568505a3a97" translate="yes" xml:space="preserve">
          <source>Now change all the methods that return &lt;code&gt;double&lt;/code&gt;s, so instead they return an instance of that interface. Java 8's lambda syntax works great for this. Example of one of the changed methods:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;double&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を返すすべてのメソッドを変更して、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代わりにそれらがそのインターフェースのインスタンスを返すようにします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これには、Java 8のラムダ構文が最適です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更されたメソッドの1つの例：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aa1aa70de67e04698badc45f571a75ae01d6e631" translate="yes" xml:space="preserve">
          <source>Of course you could extend the above code to handle multiple calculations at the same time.</source>
          <target state="translated">もちろん、上記のコードを拡張して、複数の計算を同時に処理することもできます。</target>
        </trans-unit>
        <trans-unit id="fc961aeb1f377ae5820c9c4cbefba9bd2eda1d82" translate="yes" xml:space="preserve">
          <source>Output: 7.5 &lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot;&gt;(which is correct)&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出力：7.5 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（これは正しい）&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cec43fae0cef8de67977d1383f4b49f91a935853" translate="yes" xml:space="preserve">
          <source>Read more concise SpEL examples &lt;a href=&quot;http://syntx.co/languages-frameworks/evaluating-expressions-using-spring-expression-language-spel/&quot;&gt;here&lt;/a&gt; and the complete docs &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/expressions.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;より簡潔なSPEL例読む&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://syntx.co/languages-frameworks/evaluating-expressions-using-spring-expression-language-spel/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で完全なドキュメント&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/expressions.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba8d40f12cf4b5e5c2a99a97e877c80d6edae1ff" translate="yes" xml:space="preserve">
          <source>Some databases require you to use a dummy table (eg, Oracle's &quot;dual&quot; table) and others will allow you to evaluate expressions without &quot;selecting&quot; from any table.</source>
          <target state="translated">データベースによってはダミーテーブル(Oracleの &quot;dual &quot;テーブルなど)を使用する必要があるものもあれば、どのテーブルからも &quot;選択 &quot;せずに式を評価することができるものもあります。</target>
        </trans-unit>
        <trans-unit id="b8092c56a98d9121844bfd753f149b6a39b3dfd8" translate="yes" xml:space="preserve">
          <source>Take note that definitively more complex expressions can be evaluated:</source>
          <target state="translated">より複雑な式を確定的に評価できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="989811a1a1bfdb2953c7ad4dbb4583f10aa1b6b0" translate="yes" xml:space="preserve">
          <source>That builds a recursive tree of &lt;code&gt;Expression&lt;/code&gt; objects representing the compiled expression (an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree&lt;/a&gt;). Then you can compile it once and evaluate it repeatedly with different values:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これにより&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、コンパイルされた式を表す&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Expression&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;オブジェクトの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再帰ツリー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抽象構文ツリー&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構築&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;その後、一度コンパイルして、さまざまな値で繰り返し評価できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="81b296efc64d139159d578efadf8e2d5e87c5c78" translate="yes" xml:space="preserve">
          <source>The TreeBuilder linked above is part of a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot;&gt;CAS demo package&lt;/a&gt; that does symbolic derivation. There is also a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot;&gt;BASIC interpreter&lt;/a&gt; example and I have started to build a &lt;a href=&quot;https://github.com/stefanhaustein/typo&quot;&gt;TypeScript interpreter&lt;/a&gt; using it.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上にリンクされているTreeBuilder &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、シンボリック派生&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を行う&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CASデモパッケージの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一部です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BASICインタープリターの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もあり、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それを使用して&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/typo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;TypeScriptインタープリターの&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作成を開始しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e0c5950787f087b30e58f48e90341a41a60db767" translate="yes" xml:space="preserve">
          <source>The advantage of using a DB is that you can evaluate many expressions at the same time. Also most DB's will allow you to use highly complex expressions and   will also have a number of extra functions that can be called as necessary.</source>
          <target state="translated">DBを使用する利点は、多くの式を同時に評価できることです。また、ほとんどのDBでは非常に複雑な式を使用することができ、必要に応じて呼び出すことができる多くの余分な関数を備えています。</target>
        </trans-unit>
        <trans-unit id="121608a35ff952255ffc4d2dcb8fe6c1156c1acc" translate="yes" xml:space="preserve">
          <source>The bit of the parser that reads the names for functions can easily be changed to handle custom variables too, by looking up names in a variable table passed to the &lt;code&gt;eval&lt;/code&gt; method, such as a &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数の名前を読み取るパーサーのビットは、&lt;/font&gt; &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;など&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;eval&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡された変数テーブルで名前を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;検索&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することにより、カスタム変数を処理するように簡単に変更でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fc76437fb404aa0973705a9b71bea5feffe95245" translate="yes" xml:space="preserve">
          <source>The correct way to solve this is with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexer&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot;&gt;parser&lt;/a&gt;. You can write simple versions of these yourself, or those pages also have links to Java lexers and parsers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを解決する正しい方法は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;レクサー&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パーサーを使用すること&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらの簡単なバージョンを自分で作成することも、それらのページにJavaレクサーやパーサーへのリンクを含めることもできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ef27834b8576cee4eb4589abe26cae562e3ae1b" translate="yes" xml:space="preserve">
          <source>The following addresses the performance problem to some extent, by using a Sqlite in-memory database.</source>
          <target state="translated">以下では、Sqliteのインメモリデータベースを使用することで、パフォーマンスの問題をある程度解決しています。</target>
        </trans-unit>
        <trans-unit id="7f0556635ea4b80d289b2326474aac31712e9e37" translate="yes" xml:space="preserve">
          <source>The parser is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;recursive descent parser&lt;/a&gt;, so internally uses separate parse methods for each level of operator precedence in its grammar. I kept it &lt;strong&gt;short&lt;/strong&gt; so it's easy to modify, but here are some ideas you might want to expand it with:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;パーサーは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再帰的降下パーサー&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であるため、文法の演算子の優先順位のレベルごとに個別の解析メソッドを内部で使用します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;簡単に変更できるよう&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;短くしまし&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たが、次のように拡張すると便利です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0e8a1bfb3a7ce7335feba6207a0a26567db135b4" translate="yes" xml:space="preserve">
          <source>The usage is very simple and gets the job done, for example:</source>
          <target state="translated">使い方は非常にシンプルで、例えば仕事がはかどります。</target>
        </trans-unit>
        <trans-unit id="dedcd3977682849e3e0915c68cc93b738e9bdbe0" translate="yes" xml:space="preserve">
          <source>This is actually complementing the answer given by @Boann. It has a slight bug which causes &quot;-2 ^ 2&quot; to give an erroneous result of -4.0. The problem for that is the point at which the exponentiation is evaluated in his. Just move the exponentiation to the block of parseTerm(), and you'll be all fine. Have a look at the below, which is &lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;@Boann's answer&lt;/a&gt; slightly modified. Modification is in the comments.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは実際に@Boannの回答を補完するものです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;「-2 ^ 2」が誤った結果-4.0を返す原因となるわずかなバグがあります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのための問題は、累乗が彼で評価されるポイントです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指数をparseTerm（）のブロックに移動するだけで大​​丈夫です。&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;@Boannの回答を&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;少し変更&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;した下記をご覧ください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修正はコメントにあります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="90e2a9471c2f709fc05848b873caa40e15fd1cbf" translate="yes" xml:space="preserve">
          <source>This is another interesting alternative 
&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは別の興味深い代替です &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be5e94b4b48e4e011e9884468cd0c470cb061bde" translate="yes" xml:space="preserve">
          <source>Try the following sample code using JDK1.6's Javascript engine with code injection handling.</source>
          <target state="translated">JDK1.6のJavascriptエンジンにコードインジェクション処理を施した以下のサンプルコードを試してみてください。</target>
        </trans-unit>
        <trans-unit id="30915fa19fcda28878f14373f519a56dad5882c8" translate="yes" xml:space="preserve">
          <source>Unlike the JavaScript engine this library is focused in evaluating mathematical expressions only. Moreover, the library is extensible and supports use of boolean operators as well as parentheses.</source>
          <target state="translated">JavaScriptエンジンとは異なり、このライブラリは数式の評価のみに焦点を当てています。さらに、このライブラリは拡張性があり、括弧だけでなくブーリアン演算子の使用もサポートしています。</target>
        </trans-unit>
        <trans-unit id="9cbfc13d7a82087f1e8cf577c42c09a7d0a82c8d" translate="yes" xml:space="preserve">
          <source>Use the javascript engine embedded in the JDK:</source>
          <target state="translated">JDKに埋め込まれたjavascriptエンジンを使用します。</target>
        </trans-unit>
        <trans-unit id="6204cb7e170c3d221fd87e282b3a2b3873c65a6d" translate="yes" xml:space="preserve">
          <source>What if, having added support for variables, you wanted to evaluate the same expression millions of times with changed variables, without parsing it every time? It's possible. First define an interface to use to evaluate the precompiled expression:</source>
          <target state="translated">変数のサポートを追加したことで、同じ式を毎回解析せずに、変数を変更して何百万回も同じ式を評価したいとしたらどうでしょうか?それは可能です。まず、コンパイル済みの式を評価するためのインターフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="0166cedcc76e8442c40c96689443988315cbcb64" translate="yes" xml:space="preserve">
          <source>While the operator stack is not empty,
1 Pop the operator from the operator stack.
2 Pop the value stack twice, getting two operands.
3 Apply the operator to the operands, in the correct order.
4 Push the result onto the value stack.</source>
          <target state="translated">演算子スタックが空でない間に、1 演算子スタックから演算子をポップします。2 値スタックを2回ポップし、2つのオペランドを取得します。3 オペランドに演算子を正しい順序で適用します。4 結果を値スタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="d6e647ec522cf4392535ce381b93391ea8a426ab" translate="yes" xml:space="preserve">
          <source>While there are still tokens to be read in,</source>
          <target state="translated">読み込まれるトークンが残っているうちに</target>
        </trans-unit>
        <trans-unit id="454b9e3af42a6c3673119746e53dc7307f0dc64c" translate="yes" xml:space="preserve">
          <source>With JDK1.6, you can use the built-in Javascript engine.</source>
          <target state="translated">JDK1.6では、内蔵のJavascriptエンジンを使用することができます。</target>
        </trans-unit>
        <trans-unit id="897d74cc15da0bb04ccacc416d65bcf6e84639c8" translate="yes" xml:space="preserve">
          <source>Yet another option: &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot;&gt;https://github.com/stefanhaustein/expressionparser&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さらに別のオプション：&lt;/font&gt;&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/stefanhaustein/expressionparser&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="65fc69e2020c789efb9a0acd35431dce809e40bb" translate="yes" xml:space="preserve">
          <source>You can also try the &lt;a href=&quot;http://www.beanshell.org&quot;&gt;BeanShell&lt;/a&gt; interpreter:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.beanshell.org&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;BeanShell&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インタープリターを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;試すこともできます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0b623f10fdcde6b68c56c2713f37bfe43b6c78c5" translate="yes" xml:space="preserve">
          <source>You can evaluate expressions easily if your Java application already accesses a database, without using any other JARs.</source>
          <target state="translated">Javaアプリケーションが既にデータベースにアクセスしている場合、他のJARを使用せずに簡単に式を評価することができます。</target>
        </trans-unit>
        <trans-unit id="4b9d403cc607c5b71149db139f6b3d9c030f467f" translate="yes" xml:space="preserve">
          <source>You might have a look at the &lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot;&gt;Symja framework&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Symjaフレームワークを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;見ているかもしれません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="69a3ac5cc2fdd16ba0d883dd36cdb3d9021373b3" translate="yes" xml:space="preserve">
          <source>and do the similar thing for every other mathematical operator accordingly ..</source>
          <target state="translated">とし、それに応じて他のすべての数学演算子にも同様のことを行う...</target>
        </trans-unit>
        <trans-unit id="0c54051c8ea84dc3cc644818d81f2b68f0685c3b" translate="yes" xml:space="preserve">
          <source>and in Oracle</source>
          <target state="translated">とオラクルでは</target>
        </trans-unit>
        <trans-unit id="4fa697554e8a14e6d8fba6e8342c9232a0c25df0" translate="yes" xml:space="preserve">
          <source>if we are going to implement it then we can can use the below algorithm :--</source>
          <target state="translated">もしそれを実装しようとしているのであれば、以下のアルゴリズムを使うことができます :--。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
