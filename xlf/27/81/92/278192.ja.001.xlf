<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/278192">
    <body>
      <group id="278192">
        <trans-unit id="3d9d2543cd9f33e80da313ba517d5dc88b1923cd" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;All Branches&lt;/code&gt;' option is checked.</source>
          <target state="translated">「 &lt;code&gt;All Branches&lt;/code&gt; 」オプションがチェックされています。</target>
        </trans-unit>
        <trans-unit id="50cb7d88e548e886c2b9dd62592e340487b8f773" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;Show Whole Project&lt;/code&gt;' option is not checked.</source>
          <target state="translated">「 &lt;code&gt;Show Whole Project&lt;/code&gt; 」オプションが選択されていません。</target>
        </trans-unit>
        <trans-unit id="3f9898a6633eef8d6e644f1d8b3f0ba85398c5eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt;&lt;code&gt;git whatchanged -p filename&lt;/code&gt;&lt;/a&gt; is also equivalent to &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt;&lt;code&gt;git log -p filename&lt;/code&gt;&lt;/a&gt; in this case.</source>
          <target state="translated">この場合、 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt; &lt;code&gt;git whatchanged -p filename&lt;/code&gt; &lt;/a&gt;も&lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt; &lt;code&gt;git log -p filename&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="f8cbe27670bf752f3ee2e7a9afb6da4fcf83b7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; give you a unified diff.</source>
          <target state="translated">&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; は、統一されたdiffを提供します。</target>
        </trans-unit>
        <trans-unit id="9ab0beb3dfd9d75c7e6a022d01bd40f5aa8a68bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59d10d1a55a9f4f2f09cbc7e16fe9fd6c8b98aae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homebrew (OS X)&lt;/strong&gt;: &lt;code&gt;$ brew install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Homebrew（OS X）&lt;/strong&gt; ： &lt;code&gt;$ brew install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d339bf632cffe1e16b96430aae9f59173359b31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apt-get&lt;/strong&gt;: &lt;code&gt;# apt-get install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;apt-get&lt;/strong&gt; ： &lt;code&gt;# apt-get install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2cdae6daebf8e3de72ac219889c8a6a2cd3765f" translate="yes" xml:space="preserve">
          <source>Add this alias to your .gitconfig:</source>
          <target state="translated">このエイリアスを .gitconfig に追加します。</target>
        </trans-unit>
        <trans-unit id="8e570f192283cf80cc37abc2a6ed39b3572b9ab5" translate="yes" xml:space="preserve">
          <source>And I'm currently using:</source>
          <target state="translated">そして、今使っているのは</target>
        </trans-unit>
        <trans-unit id="907d3b69806ca2991bb202f776e09b1d6384749f" translate="yes" xml:space="preserve">
          <source>And use the command like this:</source>
          <target state="translated">そして、このようなコマンドを使います。</target>
        </trans-unit>
        <trans-unit id="ef5b76f3c64ba20c4b2d53d26c102f3d9254d481" translate="yes" xml:space="preserve">
          <source>Behavior is to output the commit comments when relevant changes are found and start offering &lt;em&gt;vimdiff&lt;/em&gt; runs for each changed file (that's &lt;em&gt;git difftool&lt;/em&gt; behavior, but it works here).</source>
          <target state="translated">動作は、関連する変更が見つかったときにコミットコメントを出力し、変更されたファイルごとに&lt;em&gt;vimdiff&lt;/em&gt;実行の提供を開始することです（これは&lt;em&gt;git difftoolの&lt;/em&gt;動作ですが、ここで機能します）。</target>
        </trans-unit>
        <trans-unit id="7b611c28effa01e83dd6ed3c702afd1a867eaed9" translate="yes" xml:space="preserve">
          <source>But you can also use either gitk (gui) or tig (text-ui) to give much more human-readable ways of looking at it.</source>
          <target state="translated">しかし、gitk (gui)や tig (text-ui)を使うことで、より人間が読みやすい見方ができるようになります。</target>
        </trans-unit>
        <trans-unit id="ba61754bb8fbfc6f454767dd12bcf472c3fb43c2" translate="yes" xml:space="preserve">
          <source>By default, it follows the file through the renames, and the &lt;code&gt;Blame&lt;/code&gt; tab allows to see the name at a given revision.</source>
          <target state="translated">デフォルトでは、ファイルの名前を変更し、[ &lt;code&gt;Blame&lt;/code&gt; ]タブでは、特定のリビジョンの名前を確認できます。</target>
        </trans-unit>
        <trans-unit id="c232c15d8257abcac2bdd66df56ef7e4635b241d" translate="yes" xml:space="preserve">
          <source>Called with no args, this will start from the beginning of the repo history, otherwise it will start with whatever abbreviated commit hash you provide and proceed to the present - you can ctrl-C at any time to exit.  Any args after the first will limit the difference reports to include only the files listed among those args (which I think is what the OP wanted, and I'd recommend for all but tiny projects).  If you're checking changes to specific files &lt;strong&gt;and&lt;/strong&gt; want to start from the beginning, you'll need to provide an empty string for arg1.  If you're not a vim user, you can replace &lt;em&gt;vimdiff&lt;/em&gt; with your favorite diff tool.</source>
          <target state="translated">引数なしで呼び出された場合、これはリポジトリ履歴の最初から開始されます。それ以外の場合は、提供する短縮されたコミットハッシュから開始して現在に進みます。いつでもctrl-Cで終了できます。 最初の引数より後の引数は、それらの引数にリストされているファイルのみを含むように差分レポートを制限します（これはOPが望んだものであり、小さなプロジェクトを除くすべてに推奨します）。 特定のファイルへの変更をチェックしていて、最初から始めたい場合は、arg1に空の文字列を指定する必要があります。 vimユーザーでない場合は、 &lt;em&gt;vimdiff&lt;/em&gt;をお好みのdiffツールに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="9e8a14fed965c39f9d195257da284bac22347c82" translate="yes" xml:space="preserve">
          <source>For this I'd use:</source>
          <target state="translated">これには私が使います。</target>
        </trans-unit>
        <trans-unit id="cf5d18bed33cf32bad08e39d8d8e033c4d19ecf5" translate="yes" xml:space="preserve">
          <source>For your case, &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; might be what you're looking for.</source>
          <target state="translated">あなたの場合、 &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; があなたが探しているものかもしれません。</target>
        </trans-unit>
        <trans-unit id="f561722d503883a91b5447da50af1480ac6de4c4" translate="yes" xml:space="preserve">
          <source>How can I view the change history of an individual file in Git, complete details with what has changed?</source>
          <target state="translated">Git で個々のファイルの変更履歴を見るにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="6c2a3d6b045eb89c60b0319ee29277161f1bb709" translate="yes" xml:space="preserve">
          <source>I have found a very simple solution to quickly find history of the file.</source>
          <target state="translated">ファイルの履歴をすぐに見つけることができる非常にシンプルな解決策を見つけました。</target>
        </trans-unit>
        <trans-unit id="c72d2bd24775db54e7ddc9bc05306cea03461588" translate="yes" xml:space="preserve">
          <source>I have got as far as:</source>
          <target state="translated">私はここまで来ました。</target>
        </trans-unit>
        <trans-unit id="e59701d8194fdae5084e88d2ea48cda13a65de6c" translate="yes" xml:space="preserve">
          <source>I wrote &lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;git-playback&lt;/a&gt; for this exact purpose</source>
          <target state="translated">私は&lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;まさに&lt;/a&gt;この目的のためにgit-playbackを書きました</target>
        </trans-unit>
        <trans-unit id="a8cd81b6b8ce010c0e4a05a58657ebbc4cd0e8f6" translate="yes" xml:space="preserve">
          <source>I'm probably about where the OP was when this started, looking for something simple that would let me use &lt;em&gt;git difftool&lt;/em&gt; with &lt;em&gt;vimdiff&lt;/em&gt; to review changes to files in my repo starting from a specific commit.  I wasn't too happy with answers I was finding, so I threw this &lt;strong&gt;git inc&lt;/strong&gt;remental &lt;strong&gt;rep&lt;/strong&gt;orter (gitincrep) script together and it's been useful to me:</source>
          <target state="translated">私はおそらく、これが始まったときのOPの場所について、 &lt;em&gt;vimdiffで&lt;/em&gt; &lt;em&gt;git difftool&lt;/em&gt;を使用して、特定のコミットから開始する私のリポジトリ内のファイルへの変更を確認できる簡単なものを探しています。 私が見つけた答えにあまり満足していなかったので、この&lt;strong&gt;git inc&lt;/strong&gt; remental &lt;strong&gt;rep&lt;/strong&gt; orter（gitincrep）スクリプトを一緒に投げて、それは私にとって便利でした：</target>
        </trans-unit>
        <trans-unit id="0929b06e1c9a3d39f775d7b0a7093d8ceab102eb" translate="yes" xml:space="preserve">
          <source>I'm trying to make the transition from MS SourceSafe and that used to be a simple &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt;.</source>
          <target state="translated">私はMS SourceSafeからの移行を行おうとしていますが、以前は単純な &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt; でした。</target>
        </trans-unit>
        <trans-unit id="7b9c0ddeccf9d0e2407f2c4080a6fb0e35d7c9d7" translate="yes" xml:space="preserve">
          <source>If you are using eclipse with the git plugin, it has an excellent comparison view with history. Right click the file and select &quot;compare with&quot;=&amp;gt; &quot;history&quot;</source>
          <target state="translated">gitプラグインでeclipseを使用している場合、履歴との優れた比較ビューがあります。 ファイルを右クリックして、「比較」=&amp;gt;「履歴」を選択します</target>
        </trans-unit>
        <trans-unit id="a21b9093f8406e02592174ccc05238fced88400f" translate="yes" xml:space="preserve">
          <source>If you prefer to stay text-based, you may want to use &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">テキストベースのままにする場合は、 &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="06513fd53256b56f2382ecd38ba91da7c0608ba7" translate="yes" xml:space="preserve">
          <source>If you use SourceTree to visualize your repository (it's free and quite good) you can right click a file and select &lt;strong&gt;Log Selected&lt;/strong&gt;</source>
          <target state="translated">SourceTreeを使用してリポジトリを視覚化する場合（無料で非常に優れています）、ファイルを右クリックして[選択した&lt;strong&gt;ログ]&lt;/strong&gt;を選択できます。</target>
        </trans-unit>
        <trans-unit id="c4984f66360f919ef5d13b0f40807e8da46ba613" translate="yes" xml:space="preserve">
          <source>If you use TortoiseGit you should be able to right click on the file and do &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt;. In the window that pops up, make sure:</source>
          <target state="translated">TortoiseGitを使用している場合は、ファイルを右クリックして &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt; を実行できるはずです。 ポップアップウィンドウで、次のことを確認します。</target>
        </trans-unit>
        <trans-unit id="9656d3c058925e01df61b32b5c782c4e0bcbc732" translate="yes" xml:space="preserve">
          <source>If you want to see the whole history of a file, &lt;em&gt;including&lt;/em&gt; on &lt;em&gt;all other&lt;/em&gt; branches use:</source>
          <target state="translated">&lt;em&gt;他のすべての&lt;/em&gt;ブランチ&lt;em&gt;を含む&lt;/em&gt; 、ファイルの履歴全体を表示したい場合は、次&lt;em&gt;を&lt;/em&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a879610c781443f3beabfa7df17b56d994f47859" translate="yes" xml:space="preserve">
          <source>If you're using the git GUI (on Windows) under the Repository menu you can use &quot;Visualize master's History&quot;.  Highlight a commit in the top pane and a file in the lower right and you'll see the diff for that commit in the lower left.</source>
          <target state="translated">git GUI (Windows の場合)でリポジトリメニューの下にある「Visualize master's History」を使うことができます。上のペインでコミットをハイライトし、右下のペインでファイルをハイライトすると、左下にそのコミットの diff が表示されます。</target>
        </trans-unit>
        <trans-unit id="b63b3f52461317be40155db65724abad2131f0b6" translate="yes" xml:space="preserve">
          <source>In other words, if the file named &lt;code&gt;bar&lt;/code&gt; was once named &lt;code&gt;foo&lt;/code&gt;, then &lt;code&gt;git log -p bar&lt;/code&gt; (without the &lt;code&gt;--follow&lt;/code&gt; option) will only show the file's history up to the point where it was renamed -- it won't show the file's history when it was known as &lt;code&gt;foo&lt;/code&gt;. Using &lt;code&gt;git log --follow -p bar&lt;/code&gt; will show the file's entire history, including any changes to the file when it was known as &lt;code&gt;foo&lt;/code&gt;. The &lt;code&gt;-p&lt;/code&gt; option ensures that diffs are included for each change.</source>
          <target state="translated">言い換えると、 &lt;code&gt;bar&lt;/code&gt; という名前のファイルが &lt;code&gt;foo&lt;/code&gt; という名前であった場合、 &lt;code&gt;git log -p bar&lt;/code&gt; （-- &lt;code&gt;--follow&lt;/code&gt; オプションなし）は、ファイルの名前が変更された時点までのファイルの履歴のみを表示します-それは表示されません &lt;code&gt;foo&lt;/code&gt; として知られているファイルの履歴。 &lt;code&gt;git log --follow -p bar&lt;/code&gt; を使用すると、ファイルの履歴全体が表示されます。これには、ファイルが &lt;code&gt;foo&lt;/code&gt; として認識されていた場合の変更も含まれます。 &lt;code&gt;-p&lt;/code&gt; オプションは、変更ごとにdiffが含まれるようにします。</target>
        </trans-unit>
        <trans-unit id="10b10cde131cf603e0cd3ee953af7677b22fd4e3" translate="yes" xml:space="preserve">
          <source>In the menu enable to display unchanged files: View / Show unchanged files</source>
          <target state="translated">メニューでは、未変更のファイルを表示することができます。未変更ファイルの表示</target>
        </trans-unit>
        <trans-unit id="da9d2c806c9ca3a715b990f7377a5ddd66eb4470" translate="yes" xml:space="preserve">
          <source>It has some minor gotchas, like showing &lt;code&gt;fatal: Not a valid object name&lt;/code&gt; in the &lt;code&gt;View&lt;/code&gt; tab when clicking on the deletion revision, but I can live with that. :-)</source>
          <target state="translated">&lt;code&gt;fatal: Not a valid object name&lt;/code&gt; エラーを表示するなど、いくつかのマイナーな問題があり &lt;code&gt;View&lt;/code&gt; [削除]リビジョンをクリックすると、[ 表示 ]タブに有効なオブジェクト名が表示されませんが、それでも問題ありません 。 :-)</target>
        </trans-unit>
        <trans-unit id="c5170d47368bacc184b557bae26cb55c8b9aaf6d" translate="yes" xml:space="preserve">
          <source>It should be colored on red and green. If it's not, run: &lt;code&gt;git config color.ui auto&lt;/code&gt; first.</source>
          <target state="translated">赤と緑に着色されているはずです。 そうでない場合は、最初に &lt;code&gt;git config color.ui auto&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4d8f0778b71f832c5b4caceb4c33cd118c8a927a" translate="yes" xml:space="preserve">
          <source>It will show as uncommitted changes on your sourcetree</source>
          <target state="translated">これはソースツリーにコミットされていない変更として表示されます。</target>
        </trans-unit>
        <trans-unit id="518643293a3b80fb0e4b811c9dc6f767c640621a" translate="yes" xml:space="preserve">
          <source>It would show the history of all the commits.</source>
          <target state="translated">それはすべてのコミットの履歴を表示します。</target>
        </trans-unit>
        <trans-unit id="69d4650334ca7af2f36bb97bceb4b7f26a81adb9" translate="yes" xml:space="preserve">
          <source>Lately I discovered &lt;code&gt;tig&lt;/code&gt; and found it very useful. There are some cases I'd wish it does A or B but most of the time it's rather neat.</source>
          <target state="translated">最近私は &lt;code&gt;tig&lt;/code&gt; を発見し、それは非常に便利だと思いました。 AまたはBを実行したい場合もありますが、ほとんどの場合、それはかなりきちんとしています。</target>
        </trans-unit>
        <trans-unit id="b9fb34274dcd3fad3e617ac883d52d8956970ff0" translate="yes" xml:space="preserve">
          <source>Make a random change in the file</source>
          <target state="translated">ファイルにランダムな変更を加える</target>
        </trans-unit>
        <trans-unit id="102b33e8b3a60913a071f79bb77f653582ea7716" translate="yes" xml:space="preserve">
          <source>More details at &lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commands&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commandsで&lt;/a&gt;詳細をご覧ください</target>
        </trans-unit>
        <trans-unit id="996718383eca1dcb0cbdc1f04bae53d299cbf7f5" translate="yes" xml:space="preserve">
          <source>Or browse detailed repo history: &lt;code&gt;tig&lt;/code&gt;</source>
          <target state="translated">または詳細なレポ履歴を閲覧： &lt;code&gt;tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="a520a3a3229dd5e59c0c84e59603b886dd90c5d6" translate="yes" xml:space="preserve">
          <source>Quick Install:</source>
          <target state="translated">クイックインストール。</target>
        </trans-unit>
        <trans-unit id="823f8269a30661e132c61497cbae8ee6ca4e0839" translate="yes" xml:space="preserve">
          <source>Result returned would be the list of commits that modified this particular part. Command :</source>
          <target state="translated">結果は、この特定の部分を変更したコミットのリストとして返されます。コマンドは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="53c3f12659701fc4786d5e8c56f7ee9c233c4231" translate="yes" xml:space="preserve">
          <source>Right click on the file and select 'Log Selected'</source>
          <target state="translated">ファイルを右クリックし、「選択したログ」を選択します。</target>
        </trans-unit>
        <trans-unit id="4adc12e1d577535542728194a7eb79dcf9bf7700" translate="yes" xml:space="preserve">
          <source>Right click the file and select 'Log' or press 'Ctrl-L'</source>
          <target state="translated">ファイルを右クリックして「ログ」を選択するか、「Ctrl-L」キーを押します。</target>
        </trans-unit>
        <trans-unit id="ce3df4d818316dd10c7bca5ae8539c894dc07dbb" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">See</target>
        </trans-unit>
        <trans-unit id="b6419b3b81c52cefae0da0205084adfb75db266a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;gitk&lt;/code&gt; but text based. Supports colors in terminal!</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; に似ていますが、テキストベースです。 端末の色に対応！</target>
        </trans-unit>
        <trans-unit id="530e3cc53044ad9513bde41a5e2a91317986227a" translate="yes" xml:space="preserve">
          <source>SourceTree users</source>
          <target state="translated">ソースツリーユーザ</target>
        </trans-unit>
        <trans-unit id="ce66f3def7b28e5504a11663228c58d6f583a79e" translate="yes" xml:space="preserve">
          <source>Summary of other answers after reading through them and playing a bit:</source>
          <target state="translated">目を通した上で、少し遊んでみた他の回答のまとめ</target>
        </trans-unit>
        <trans-unit id="6724c570133b9688c71101ffaa731c4942695a95" translate="yes" xml:space="preserve">
          <source>The answer I was looking for that wasn't in this thread is to see changes in files that I'd staged for commit. i.e.</source>
          <target state="translated">このスレッドにはなかった私が探していた答えは、コミットのためにステージングしたファイルの変更を見ることです。</target>
        </trans-unit>
        <trans-unit id="9206092056d34d3fb3dbf8041353b11aa145e577" translate="yes" xml:space="preserve">
          <source>The display (below) is much friendlier than gitk and most the other options listed. Unfortunately (at this time) there is no easy way to launch this view from the command line &amp;mdash; SourceTree's CLI currently just opens repos.</source>
          <target state="translated">表示（下）はgitkや他のほとんどのオプションよりもずっと親しみやすいです。 残念ながら（現時点では）コマンドラインからこのビューを起動する簡単な方法はありません。SourceTreeのCLIは現在リポジトリを開いているだけです。</target>
        </trans-unit>
        <trans-unit id="22ddb69223f4f6beef48d67a9d13f1e8c5974586" translate="yes" xml:space="preserve">
          <source>The output will look almost exactly the same as the gitk output. Enjoy.</source>
          <target state="translated">gitkの出力とほぼ同じになります。お楽しみに。</target>
        </trans-unit>
        <trans-unit id="0a34a9bc15e2e9cb04b3f64178b220c2e475a375" translate="yes" xml:space="preserve">
          <source>The usual command line command would be</source>
          <target state="translated">通常のコマンドラインコマンドは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6763d6717ddf4e76d6dbc8d3e5dc5d9474e41d6e" translate="yes" xml:space="preserve">
          <source>This approach is probably pretty naive, but looking through a lot of the solutions here and at a related post, many involved installing new tools on a system where I don't have admin access, with interfaces that had their own learning curve.  The above script did what I wanted without dealing with any of that.  I'll look into the many excellent suggestions here when I need something more sophisticated - but I think this is directly responsive to the OP.</source>
          <target state="translated">このアプローチはかなりナイーブなものかもしれませんが、ここや関連記事の多くの解決策を見てみると、多くは管理者権限を持たないシステムに新しいツールをインストールしたり、独自の学習曲線を持つインターフェイスを使ったりしていました。上記のスクリプトは、そのようなことをすることなく、私が望んでいたことを実行してくれました。もっと洗練されたものが必要なときには、ここにある多くの優れた提案を見てみることにします。</target>
        </trans-unit>
        <trans-unit id="01079e380958a3399c1ba2f91f24cc53c68c5a78" translate="yes" xml:space="preserve">
          <source>This has the benefit of both displaying the results in the command line (like &lt;code&gt;git log -p&lt;/code&gt;) while also letting you step through each commit using the arrow keys (like &lt;code&gt;gitk&lt;/code&gt;).</source>
          <target state="translated">これには、コマンドライン（ &lt;code&gt;git log -p&lt;/code&gt; など ）で結果を表示すると同時に、矢印キー（ &lt;code&gt;gitk&lt;/code&gt; など ）を使用して各コミットをステップ実行できるという利点があります。</target>
        </trans-unit>
        <trans-unit id="5a27b95bc773b006676e52278be4d3b6e894e450" translate="yes" xml:space="preserve">
          <source>This will show the &lt;strong&gt;entire&lt;/strong&gt; history of the file (including history beyond renames and with diffs for each change).</source>
          <target state="translated">これにより、ファイルの履歴&lt;strong&gt;全体&lt;/strong&gt;が表示されます（名前の変更後の履歴と、変更ごとの差分を含む）。</target>
        </trans-unit>
        <trans-unit id="9f1a203ad6cb0a77f45c9e85899bf32f05d97b2f" translate="yes" xml:space="preserve">
          <source>To show what revision and author last modified each line of a file:</source>
          <target state="translated">ファイルの各行のリビジョンと作者が最終的に変更した内容を表示します。</target>
        </trans-unit>
        <trans-unit id="36f7289d9cfcc16b57ff192e9fd25b53b47150c7" translate="yes" xml:space="preserve">
          <source>Under debian/ubuntu, the install command for these lovely tools is as expected :</source>
          <target state="translated">debianubuntuでは、これらの素敵なツールのインストールコマンドは期待通りです。</target>
        </trans-unit>
        <trans-unit id="89d2bcf31e2c0e964fef82ac00f086c2d8d9ea80" translate="yes" xml:space="preserve">
          <source>Use it to view history on a single file: &lt;code&gt;tig [filename]&lt;/code&gt;</source>
          <target state="translated">これを使用して、単一のファイルの履歴を表示します： &lt;code&gt;tig [filename]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24a6a9a291acf1dfc2d52669c7b93e504ae965b6" translate="yes" xml:space="preserve">
          <source>View the change history of a file using Git versioning</source>
          <target state="translated">Git バージョニングを使ってファイルの変更履歴を見る</target>
        </trans-unit>
        <trans-unit id="51577d47db12dc36a5c6664eda0a340385a8dfd7" translate="yes" xml:space="preserve">
          <source>With the excellent &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt;, you go to a point in the history where the file still existed (if it have been deleted, otherwise just go to HEAD), switch to the &lt;code&gt;File tree&lt;/code&gt; tab, right-click on the file and choose &lt;code&gt;File history&lt;/code&gt;.</source>
          <target state="translated">優れた&lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git拡張機能&lt;/a&gt;を使用すると、ファイルがまだ存在していた履歴のポイントに移動し（削除されている場合は、それ以外の場合は単にHEADに移動します）、 &lt;code&gt;File tree&lt;/code&gt; ]ツリータブに切り替え、 ファイルを右クリックして &lt;code&gt;File history&lt;/code&gt; ]を選択します 。</target>
        </trans-unit>
        <trans-unit id="b762b8b254131e07b18d947802908a7039d6f0b8" translate="yes" xml:space="preserve">
          <source>You can also see when a specific line of code inside a file was changed with &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt;&lt;code&gt;git blame filename&lt;/code&gt;&lt;/a&gt;. This will print out a short commit id, the author, timestamp, and complete line of code for every line in the file. 
This is very useful after you've found a bug and you want to know when it was introduced (or who's fault it was).</source>
          <target state="translated">ファイル内の特定のコード行が&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt; &lt;code&gt;git blame filename&lt;/code&gt; で&lt;/a&gt;いつ変更されたかを確認することもできます 。 これにより、ファイル内のすべての行の短いコミットID、作成者、タイムスタンプ、および完全なコード行が出力されます。 これは、バグを発見し、それがいつ導入されたのか（または誰が原因であるのか）を知りたい場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="73790fbab56af7e467e6a2f75fdc69bf69e8a385" translate="yes" xml:space="preserve">
          <source>You can also try this which lists the commits that has changed a specific part of a file (Implemented in Git 1.8.4).</source>
          <target state="translated">ファイルの特定の部分を変更したコミットを一覧表示する機能もあります (Git 1.8.4 で実装されています)。</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">を使用することができます。</target>
        </trans-unit>
        <trans-unit id="be4fbe738a4b80d1879805fb57a37167185cf295" translate="yes" xml:space="preserve">
          <source>You can use vscode with &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt;, it's a very powerful tool.
After installed GitLens, go to GitLens tab, select &lt;code&gt;FILE HISTORY&lt;/code&gt; and you can browse it.</source>
          <target state="translated">vscodeは&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt;で使用できます。これは非常に強力なツールです。 GitLensをインストールしたら、[GitLens]タブに移動し、[ &lt;code&gt;FILE HISTORY&lt;/code&gt; 履歴]を選択すると、それを参照できます。</target>
        </trans-unit>
        <trans-unit id="090feec247d24b15eb17b1c7987e52e99bce5410" translate="yes" xml:space="preserve">
          <source>for more options - it can actually do a lot of nice things :) To get just the diff for a specific commit you can</source>
          <target state="translated">を参照してください。)特定のコミットの差分だけを取得するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="bf358dc3e2df36683f9a0414a02a430a810a8c1c" translate="yes" xml:space="preserve">
          <source>if you're using &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt;を使用している場合</target>
        </trans-unit>
        <trans-unit id="ae5b0611bfda360ab13caeb7bf3b2d4cb25cc286" translate="yes" xml:space="preserve">
          <source>or any other revision by identifier. Or use</source>
          <target state="translated">または識別子による他のリビジョン。または</target>
        </trans-unit>
        <trans-unit id="645102fba40918ec13b5f68f5ebd7bdd995c48bf" translate="yes" xml:space="preserve">
          <source>or if you want to use the powerful blame GUI:</source>
          <target state="translated">または、強力な blame GUI を使いたい場合。</target>
        </trans-unit>
        <trans-unit id="64d660575f741ec638e95accf2522e5b907b8ecb" translate="yes" xml:space="preserve">
          <source>or to follow filename past renames</source>
          <target state="translated">または、ファイル名の過去のリネームに従うために</target>
        </trans-unit>
        <trans-unit id="65bb9667cb1d9319a279d67162176ef74d77d614" translate="yes" xml:space="preserve">
          <source>so that I can just type &lt;code&gt;gdf dir&lt;/code&gt; to get a focussed history of everything in subdirectory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">そのため、 &lt;code&gt;gdf dir&lt;/code&gt; と入力して、サブディレクトリ &lt;code&gt;dir&lt;/code&gt; 内のすべてのフォーカスされた履歴を取得できます。</target>
        </trans-unit>
        <trans-unit id="b9c895492cb34cfa943e9d4767dd902b47e3dcee" translate="yes" xml:space="preserve">
          <source>to browse the changes visually.</source>
          <target state="translated">をクリックすると、変更点を視覚的に閲覧することができます。</target>
        </trans-unit>
        <trans-unit id="895c043a4b66f33e72db78ff834e2bd936135087" translate="yes" xml:space="preserve">
          <source>to let git generate the patches for each log entry.</source>
          <target state="translated">を使用して、git がログエントリごとにパッチを生成するようにします。</target>
        </trans-unit>
        <trans-unit id="22942d4d728e0aae43d146073f19b0f4eea93f28" translate="yes" xml:space="preserve">
          <source>where upperLimit is the start_line_number and lowerLimit is the ending_line_number of the file.</source>
          <target state="translated">ここで、 upperLimit はファイルの start_line_number、 lowerLimit はファイルの ending_line_number です。</target>
        </trans-unit>
        <trans-unit id="095dbf3d3fb0bc97895fec230d608616398419ec" translate="yes" xml:space="preserve">
          <source>which shows me the commit history of the file, but how do I get at the content of each of the file changes?</source>
          <target state="translated">これはファイルのコミット履歴を表示してくれますが、どのようにして各ファイルの変更内容を取得するのでしょうか?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
