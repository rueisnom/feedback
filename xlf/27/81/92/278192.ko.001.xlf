<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/278192">
    <body>
      <group id="278192">
        <trans-unit id="3d9d2543cd9f33e80da313ba517d5dc88b1923cd" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;All Branches&lt;/code&gt;' option is checked.</source>
          <target state="translated">' &lt;code&gt;All Branches&lt;/code&gt; '옵션이 선택되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="50cb7d88e548e886c2b9dd62592e340487b8f773" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;Show Whole Project&lt;/code&gt;' option is not checked.</source>
          <target state="translated">' &lt;code&gt;Show Whole Project&lt;/code&gt; '옵션이 선택되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3f9898a6633eef8d6e644f1d8b3f0ba85398c5eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt;&lt;code&gt;git whatchanged -p filename&lt;/code&gt;&lt;/a&gt; is also equivalent to &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt;&lt;code&gt;git log -p filename&lt;/code&gt;&lt;/a&gt; in this case.</source>
          <target state="translated">&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt; &lt;code&gt;git whatchanged -p filename&lt;/code&gt; &lt;/a&gt; 은이 경우 &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt; &lt;code&gt;git log -p filename&lt;/code&gt; &lt;/a&gt; 과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="f8cbe27670bf752f3ee2e7a9afb6da4fcf83b7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; give you a unified diff.</source>
          <target state="translated">&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; 은 통합 diff를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9ab0beb3dfd9d75c7e6a022d01bd40f5aa8a68bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59d10d1a55a9f4f2f09cbc7e16fe9fd6c8b98aae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homebrew (OS X)&lt;/strong&gt;: &lt;code&gt;$ brew install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Homebrew (OS X)&lt;/strong&gt; : &lt;code&gt;$ brew install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d339bf632cffe1e16b96430aae9f59173359b31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apt-get&lt;/strong&gt;: &lt;code&gt;# apt-get install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;apt-get&lt;/strong&gt; : &lt;code&gt;# apt-get install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2cdae6daebf8e3de72ac219889c8a6a2cd3765f" translate="yes" xml:space="preserve">
          <source>Add this alias to your .gitconfig:</source>
          <target state="translated">이 별칭을 .gitconfig에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8e570f192283cf80cc37abc2a6ed39b3572b9ab5" translate="yes" xml:space="preserve">
          <source>And I'm currently using:</source>
          <target state="translated">그리고 나는 현재 다음을 사용하고 있습니다 :</target>
        </trans-unit>
        <trans-unit id="907d3b69806ca2991bb202f776e09b1d6384749f" translate="yes" xml:space="preserve">
          <source>And use the command like this:</source>
          <target state="translated">그리고 다음과 같은 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ef5b76f3c64ba20c4b2d53d26c102f3d9254d481" translate="yes" xml:space="preserve">
          <source>Behavior is to output the commit comments when relevant changes are found and start offering &lt;em&gt;vimdiff&lt;/em&gt; runs for each changed file (that's &lt;em&gt;git difftool&lt;/em&gt; behavior, but it works here).</source>
          <target state="translated">동작은 관련 변경 사항이 발견되면 커밋 주석을 출력하고 변경된 각 파일에 대해 &lt;em&gt;vimdiff&lt;/em&gt; 실행 제공을 시작하는 것입니다 ( &lt;em&gt;git difftool&lt;/em&gt; 동작이지만 여기서 작동합니다).</target>
        </trans-unit>
        <trans-unit id="7b611c28effa01e83dd6ed3c702afd1a867eaed9" translate="yes" xml:space="preserve">
          <source>But you can also use either gitk (gui) or tig (text-ui) to give much more human-readable ways of looking at it.</source>
          <target state="translated">그러나 gitk (gui) 또는 tig (text-ui)를 사용하여 사람이 읽을 수있는 훨씬 더 읽기 쉬운 방법을 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba61754bb8fbfc6f454767dd12bcf472c3fb43c2" translate="yes" xml:space="preserve">
          <source>By default, it follows the file through the renames, and the &lt;code&gt;Blame&lt;/code&gt; tab allows to see the name at a given revision.</source>
          <target state="translated">기본적으로 파일 이름 변경을 통해 파일을 따르며 &lt;code&gt;Blame&lt;/code&gt; 탭에서는 지정된 개정판에서 이름을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c232c15d8257abcac2bdd66df56ef7e4635b241d" translate="yes" xml:space="preserve">
          <source>Called with no args, this will start from the beginning of the repo history, otherwise it will start with whatever abbreviated commit hash you provide and proceed to the present - you can ctrl-C at any time to exit.  Any args after the first will limit the difference reports to include only the files listed among those args (which I think is what the OP wanted, and I'd recommend for all but tiny projects).  If you're checking changes to specific files &lt;strong&gt;and&lt;/strong&gt; want to start from the beginning, you'll need to provide an empty string for arg1.  If you're not a vim user, you can replace &lt;em&gt;vimdiff&lt;/em&gt; with your favorite diff tool.</source>
          <target state="translated">인수없이 호출하면 리포지토리 기록의 시작 부분부터 시작합니다. 그렇지 않으면 제공하는 약식 커밋 해시로 시작하여 현재로 진행합니다. 언제든지 Ctrl-C를 눌러 종료 할 수 있습니다. 첫 번째 이후의 인수는 차이 보고서에 해당 인수 사이에 나열된 파일 만 포함하도록 제한합니다 (OP가 원했던 것으로 생각하고 작은 프로젝트를 제외한 모든 프로젝트에 권장합니다). 특정 파일의 변경 사항을 확인하고 처음부터 시작하려면 arg1에 빈 문자열을 제공해야합니다. vim 사용자가 아닌 경우 &lt;em&gt;vimdiff&lt;/em&gt; 를 자주 사용하는 diff 도구로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e8a14fed965c39f9d195257da284bac22347c82" translate="yes" xml:space="preserve">
          <source>For this I'd use:</source>
          <target state="translated">이를 위해 다음을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="cf5d18bed33cf32bad08e39d8d8e033c4d19ecf5" translate="yes" xml:space="preserve">
          <source>For your case, &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; might be what you're looking for.</source>
          <target state="translated">귀하의 경우, &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; 은 당신이 찾고있는 것일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f561722d503883a91b5447da50af1480ac6de4c4" translate="yes" xml:space="preserve">
          <source>How can I view the change history of an individual file in Git, complete details with what has changed?</source>
          <target state="translated">Git에서 개별 파일의 변경 히스토리를 어떻게 볼 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="6c2a3d6b045eb89c60b0319ee29277161f1bb709" translate="yes" xml:space="preserve">
          <source>I have found a very simple solution to quickly find history of the file.</source>
          <target state="translated">파일 기록을 빠르게 찾을 수있는 매우 간단한 솔루션을 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="c72d2bd24775db54e7ddc9bc05306cea03461588" translate="yes" xml:space="preserve">
          <source>I have got as far as:</source>
          <target state="translated">나는 다음과 같이했습니다.</target>
        </trans-unit>
        <trans-unit id="e59701d8194fdae5084e88d2ea48cda13a65de6c" translate="yes" xml:space="preserve">
          <source>I wrote &lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;git-playback&lt;/a&gt; for this exact purpose</source>
          <target state="translated">이 정확한 목적으로 &lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;git-playback&lt;/a&gt; 을 썼습니다.</target>
        </trans-unit>
        <trans-unit id="a8cd81b6b8ce010c0e4a05a58657ebbc4cd0e8f6" translate="yes" xml:space="preserve">
          <source>I'm probably about where the OP was when this started, looking for something simple that would let me use &lt;em&gt;git difftool&lt;/em&gt; with &lt;em&gt;vimdiff&lt;/em&gt; to review changes to files in my repo starting from a specific commit.  I wasn't too happy with answers I was finding, so I threw this &lt;strong&gt;git inc&lt;/strong&gt;remental &lt;strong&gt;rep&lt;/strong&gt;orter (gitincrep) script together and it's been useful to me:</source>
          <target state="translated">아마도 OP가 시작되었을 때 OP의 위치에 관한 것일 것입니다. &lt;em&gt;vimdiff&lt;/em&gt; 와 함께 &lt;em&gt;git difftool&lt;/em&gt; 을 사용하여 특정 커밋에서 시작하여 내 저장소의 파일 변경 사항을 검토 할 수있는 간단한 것을 찾고 있습니다. 나는 내가 찾은 답변에 너무 만족하지 않았 으므로이 &lt;strong&gt;git inc&lt;/strong&gt; rerep &lt;strong&gt;rep&lt;/strong&gt; orter (gitincrep) 스크립트를 함께 던졌고 나에게 유용했습니다.</target>
        </trans-unit>
        <trans-unit id="0929b06e1c9a3d39f775d7b0a7093d8ceab102eb" translate="yes" xml:space="preserve">
          <source>I'm trying to make the transition from MS SourceSafe and that used to be a simple &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt;.</source>
          <target state="translated">MS SourceSafe에서 전환을 시도하고 있는데 &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt; 했습니다 .</target>
        </trans-unit>
        <trans-unit id="7b9c0ddeccf9d0e2407f2c4080a6fb0e35d7c9d7" translate="yes" xml:space="preserve">
          <source>If you are using eclipse with the git plugin, it has an excellent comparison view with history. Right click the file and select &quot;compare with&quot;=&amp;gt; &quot;history&quot;</source>
          <target state="translated">git 플러그인과 함께 이클립스를 사용하는 경우 히스토리와 우수한 비교보기가 있습니다. 파일을 마우스 오른쪽 버튼으로 클릭하고 &quot;compare with&quot;=&amp;gt; &quot;history&quot;를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="a21b9093f8406e02592174ccc05238fced88400f" translate="yes" xml:space="preserve">
          <source>If you prefer to stay text-based, you may want to use &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">텍스트 기반을 유지하려면 &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="06513fd53256b56f2382ecd38ba91da7c0608ba7" translate="yes" xml:space="preserve">
          <source>If you use SourceTree to visualize your repository (it's free and quite good) you can right click a file and select &lt;strong&gt;Log Selected&lt;/strong&gt;</source>
          <target state="translated">SourceTree를 사용하여 리포지토리를 시각화하는 경우 (무료이며 상당히 좋음) 파일을 마우스 오른쪽 단추로 클릭하고 선택한 &lt;strong&gt;로그를&lt;/strong&gt; 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4984f66360f919ef5d13b0f40807e8da46ba613" translate="yes" xml:space="preserve">
          <source>If you use TortoiseGit you should be able to right click on the file and do &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt;. In the window that pops up, make sure:</source>
          <target state="translated">TortoiseGit을 사용하는 경우 파일을 마우스 오른쪽 버튼으로 클릭하고 &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt; 수행 할 수 있어야합니다. 팝업 창에서 다음을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="9656d3c058925e01df61b32b5c782c4e0bcbc732" translate="yes" xml:space="preserve">
          <source>If you want to see the whole history of a file, &lt;em&gt;including&lt;/em&gt; on &lt;em&gt;all other&lt;/em&gt; branches use:</source>
          <target state="translated">&lt;em&gt;다른 모든&lt;/em&gt; 분기를 &lt;em&gt;포함&lt;/em&gt; 하여 파일의 전체 기록을 보려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a879610c781443f3beabfa7df17b56d994f47859" translate="yes" xml:space="preserve">
          <source>If you're using the git GUI (on Windows) under the Repository menu you can use &quot;Visualize master's History&quot;.  Highlight a commit in the top pane and a file in the lower right and you'll see the diff for that commit in the lower left.</source>
          <target state="translated">리포지토리 메뉴에서 git GUI (Windows)를 사용하는 경우 &quot;마스터 히스토리 시각화&quot;를 사용할 수 있습니다. 상단 창에서 커밋을 강조 표시하고 오른쪽 아래에서 파일을 강조 표시하면 왼쪽 하단에 커밋에 대한 차이점이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="b63b3f52461317be40155db65724abad2131f0b6" translate="yes" xml:space="preserve">
          <source>In other words, if the file named &lt;code&gt;bar&lt;/code&gt; was once named &lt;code&gt;foo&lt;/code&gt;, then &lt;code&gt;git log -p bar&lt;/code&gt; (without the &lt;code&gt;--follow&lt;/code&gt; option) will only show the file's history up to the point where it was renamed -- it won't show the file's history when it was known as &lt;code&gt;foo&lt;/code&gt;. Using &lt;code&gt;git log --follow -p bar&lt;/code&gt; will show the file's entire history, including any changes to the file when it was known as &lt;code&gt;foo&lt;/code&gt;. The &lt;code&gt;-p&lt;/code&gt; option ensures that diffs are included for each change.</source>
          <target state="translated">즉, &lt;code&gt;bar&lt;/code&gt; 라는 파일 이름이 &lt;code&gt;foo&lt;/code&gt; 이면 &lt;code&gt;git log -p bar&lt;/code&gt; ( &lt;code&gt;--follow&lt;/code&gt; 옵션없이)는 파일 이름이 바뀐 지점까지만 파일 기록을 표시합니다. &lt;code&gt;foo&lt;/code&gt; 로 알려진 파일의 히스토리. &lt;code&gt;git log --follow -p bar&lt;/code&gt; 를 사용하면 파일이 &lt;code&gt;foo&lt;/code&gt; 로 알려진 파일의 변경 사항을 포함하여 파일의 전체 기록을 표시합니다. &lt;code&gt;-p&lt;/code&gt; 옵션은 각 변경마다 diff가 포함되도록합니다.</target>
        </trans-unit>
        <trans-unit id="10b10cde131cf603e0cd3ee953af7677b22fd4e3" translate="yes" xml:space="preserve">
          <source>In the menu enable to display unchanged files: View / Show unchanged files</source>
          <target state="translated">메뉴에서 변경되지 않은 파일을 표시 할 수 있습니다. 변경되지 않은 파일보기 / 표시</target>
        </trans-unit>
        <trans-unit id="da9d2c806c9ca3a715b990f7377a5ddd66eb4470" translate="yes" xml:space="preserve">
          <source>It has some minor gotchas, like showing &lt;code&gt;fatal: Not a valid object name&lt;/code&gt; in the &lt;code&gt;View&lt;/code&gt; tab when clicking on the deletion revision, but I can live with that. :-)</source>
          <target state="translated">삭제 개정을 클릭 할 때 &lt;code&gt;View&lt;/code&gt; 탭에 &lt;code&gt;fatal: Not a valid object name&lt;/code&gt; 입니다. :-)</target>
        </trans-unit>
        <trans-unit id="c5170d47368bacc184b557bae26cb55c8b9aaf6d" translate="yes" xml:space="preserve">
          <source>It should be colored on red and green. If it's not, run: &lt;code&gt;git config color.ui auto&lt;/code&gt; first.</source>
          <target state="translated">빨간색과 초록색으로 표시되어야합니다. 그렇지 않은 경우 &lt;code&gt;git config color.ui auto&lt;/code&gt; first를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="4d8f0778b71f832c5b4caceb4c33cd118c8a927a" translate="yes" xml:space="preserve">
          <source>It will show as uncommitted changes on your sourcetree</source>
          <target state="translated">소스 트리에서 커밋되지 않은 변경 사항으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="518643293a3b80fb0e4b811c9dc6f767c640621a" translate="yes" xml:space="preserve">
          <source>It would show the history of all the commits.</source>
          <target state="translated">그것은 모든 커밋의 역사를 보여줄 것입니다.</target>
        </trans-unit>
        <trans-unit id="69d4650334ca7af2f36bb97bceb4b7f26a81adb9" translate="yes" xml:space="preserve">
          <source>Lately I discovered &lt;code&gt;tig&lt;/code&gt; and found it very useful. There are some cases I'd wish it does A or B but most of the time it's rather neat.</source>
          <target state="translated">최근에 나는 &lt;code&gt;tig&lt;/code&gt; 를 발견하고 매우 유용하다는 것을 알았습니다. A 또는 B를하고 싶을 때가 있지만 대부분은 깔끔합니다.</target>
        </trans-unit>
        <trans-unit id="b9fb34274dcd3fad3e617ac883d52d8956970ff0" translate="yes" xml:space="preserve">
          <source>Make a random change in the file</source>
          <target state="translated">파일을 임의로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="102b33e8b3a60913a071f79bb77f653582ea7716" translate="yes" xml:space="preserve">
          <source>More details at &lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commands&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commands&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="996718383eca1dcb0cbdc1f04bae53d299cbf7f5" translate="yes" xml:space="preserve">
          <source>Or browse detailed repo history: &lt;code&gt;tig&lt;/code&gt;</source>
          <target state="translated">또는 자세한 리포 기록을 찾아보십시오 : &lt;code&gt;tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="a520a3a3229dd5e59c0c84e59603b886dd90c5d6" translate="yes" xml:space="preserve">
          <source>Quick Install:</source>
          <target state="translated">빠른 설치:</target>
        </trans-unit>
        <trans-unit id="823f8269a30661e132c61497cbae8ee6ca4e0839" translate="yes" xml:space="preserve">
          <source>Result returned would be the list of commits that modified this particular part. Command :</source>
          <target state="translated">반환 된 결과는이 특정 부분을 수정 한 커밋 목록입니다. 사령부 :</target>
        </trans-unit>
        <trans-unit id="53c3f12659701fc4786d5e8c56f7ee9c233c4231" translate="yes" xml:space="preserve">
          <source>Right click on the file and select 'Log Selected'</source>
          <target state="translated">파일을 마우스 오른쪽 버튼으로 클릭하고 '로그 선택'을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="4adc12e1d577535542728194a7eb79dcf9bf7700" translate="yes" xml:space="preserve">
          <source>Right click the file and select 'Log' or press 'Ctrl-L'</source>
          <target state="translated">파일을 마우스 오른쪽 버튼으로 클릭하고 '로그'를 선택하거나 'Ctrl-L'을 누르십시오</target>
        </trans-unit>
        <trans-unit id="ce3df4d818316dd10c7bca5ae8539c894dc07dbb" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">See</target>
        </trans-unit>
        <trans-unit id="b6419b3b81c52cefae0da0205084adfb75db266a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;gitk&lt;/code&gt; but text based. Supports colors in terminal!</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; 와 유사하지만 텍스트 기반. 터미널에서 색상을 지원합니다!</target>
        </trans-unit>
        <trans-unit id="530e3cc53044ad9513bde41a5e2a91317986227a" translate="yes" xml:space="preserve">
          <source>SourceTree users</source>
          <target state="translated">SourceTree 사용자</target>
        </trans-unit>
        <trans-unit id="ce66f3def7b28e5504a11663228c58d6f583a79e" translate="yes" xml:space="preserve">
          <source>Summary of other answers after reading through them and playing a bit:</source>
          <target state="translated">다른 답변을 읽고 조금만 연주 한 후의 다른 답변 요약 :</target>
        </trans-unit>
        <trans-unit id="6724c570133b9688c71101ffaa731c4942695a95" translate="yes" xml:space="preserve">
          <source>The answer I was looking for that wasn't in this thread is to see changes in files that I'd staged for commit. i.e.</source>
          <target state="translated">이 스레드에서 찾을 수 없었던 답은 커밋을 위해 준비한 파일의 변경 사항을 보는 것입니다. 즉</target>
        </trans-unit>
        <trans-unit id="9206092056d34d3fb3dbf8041353b11aa145e577" translate="yes" xml:space="preserve">
          <source>The display (below) is much friendlier than gitk and most the other options listed. Unfortunately (at this time) there is no easy way to launch this view from the command line &amp;mdash; SourceTree's CLI currently just opens repos.</source>
          <target state="translated">디스플레이 (아래)는 gitk 및 대부분의 다른 옵션보다 훨씬 친숙합니다. 불행히도 (현재) 명령 행에서이보기를 쉽게 시작할 수있는 방법이 없습니다. SourceTree의 CLI는 현재 저장소를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="22ddb69223f4f6beef48d67a9d13f1e8c5974586" translate="yes" xml:space="preserve">
          <source>The output will look almost exactly the same as the gitk output. Enjoy.</source>
          <target state="translated">출력은 gitk 출력과 거의 동일하게 보입니다. 즐겨.</target>
        </trans-unit>
        <trans-unit id="0a34a9bc15e2e9cb04b3f64178b220c2e475a375" translate="yes" xml:space="preserve">
          <source>The usual command line command would be</source>
          <target state="translated">일반적인 명령 줄 명령은</target>
        </trans-unit>
        <trans-unit id="6763d6717ddf4e76d6dbc8d3e5dc5d9474e41d6e" translate="yes" xml:space="preserve">
          <source>This approach is probably pretty naive, but looking through a lot of the solutions here and at a related post, many involved installing new tools on a system where I don't have admin access, with interfaces that had their own learning curve.  The above script did what I wanted without dealing with any of that.  I'll look into the many excellent suggestions here when I need something more sophisticated - but I think this is directly responsive to the OP.</source>
          <target state="translated">이 접근 방식은 아마도 순진하지만, 여기 및 관련 게시물에서 많은 솔루션을 살펴보면 관리자 액세스 권한이없는 시스템에 자체 학습 곡선이있는 인터페이스로 새로운 도구를 설치하는 것과 관련이 있습니다. 위의 스크립트는 내가 다루지 않고 원하는 것을했습니다. 좀 더 정교한 것이 필요할 때 여기에 많은 훌륭한 제안을 살펴볼 것입니다. 그러나 이것이 OP에 직접 반응한다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="01079e380958a3399c1ba2f91f24cc53c68c5a78" translate="yes" xml:space="preserve">
          <source>This has the benefit of both displaying the results in the command line (like &lt;code&gt;git log -p&lt;/code&gt;) while also letting you step through each commit using the arrow keys (like &lt;code&gt;gitk&lt;/code&gt;).</source>
          <target state="translated">이것은 &lt;code&gt;git log -p&lt;/code&gt; 와 같은 명령 행에 결과를 표시하는 동시에 화살표 키 ( &lt;code&gt;gitk&lt;/code&gt; 와 같은)를 사용하여 각 커밋을 단계별로 진행할 수있는 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a27b95bc773b006676e52278be4d3b6e894e450" translate="yes" xml:space="preserve">
          <source>This will show the &lt;strong&gt;entire&lt;/strong&gt; history of the file (including history beyond renames and with diffs for each change).</source>
          <target state="translated">파일의 &lt;strong&gt;전체&lt;/strong&gt; 히스토리가 표시됩니다 (이름 변경 이후의 히스토리 및 각 변경마다 차이가있는 히스토리 포함).</target>
        </trans-unit>
        <trans-unit id="9f1a203ad6cb0a77f45c9e85899bf32f05d97b2f" translate="yes" xml:space="preserve">
          <source>To show what revision and author last modified each line of a file:</source>
          <target state="translated">파일의 각 행을 마지막으로 수정 한 개정 및 작성자를 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="36f7289d9cfcc16b57ff192e9fd25b53b47150c7" translate="yes" xml:space="preserve">
          <source>Under debian/ubuntu, the install command for these lovely tools is as expected :</source>
          <target state="translated">debian / ubuntu에서이 멋진 도구에 대한 설치 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="89d2bcf31e2c0e964fef82ac00f086c2d8d9ea80" translate="yes" xml:space="preserve">
          <source>Use it to view history on a single file: &lt;code&gt;tig [filename]&lt;/code&gt;</source>
          <target state="translated">단일 파일에서 히스토리를 보려면 다음을 사용하십시오. &lt;code&gt;tig [filename]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24a6a9a291acf1dfc2d52669c7b93e504ae965b6" translate="yes" xml:space="preserve">
          <source>View the change history of a file using Git versioning</source>
          <target state="translated">Git 버전 관리를 사용하여 파일의 변경 내역보기</target>
        </trans-unit>
        <trans-unit id="51577d47db12dc36a5c6664eda0a340385a8dfd7" translate="yes" xml:space="preserve">
          <source>With the excellent &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt;, you go to a point in the history where the file still existed (if it have been deleted, otherwise just go to HEAD), switch to the &lt;code&gt;File tree&lt;/code&gt; tab, right-click on the file and choose &lt;code&gt;File history&lt;/code&gt;.</source>
          <target state="translated">뛰어난 &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt; 을 사용하면 파일이 여전히 존재하는 기록의 한 지점으로 이동하고 (삭제 된 경우 그렇지 않으면 HEAD로 이동) &lt;code&gt;File tree&lt;/code&gt; 탭으로 전환하고 파일을 마우스 오른쪽 버튼으로 클릭하고 &lt;code&gt;File history&lt;/code&gt; 선택하십시오 .</target>
        </trans-unit>
        <trans-unit id="b762b8b254131e07b18d947802908a7039d6f0b8" translate="yes" xml:space="preserve">
          <source>You can also see when a specific line of code inside a file was changed with &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt;&lt;code&gt;git blame filename&lt;/code&gt;&lt;/a&gt;. This will print out a short commit id, the author, timestamp, and complete line of code for every line in the file. 
This is very useful after you've found a bug and you want to know when it was introduced (or who's fault it was).</source>
          <target state="translated">파일 내부의 특정 코드 줄이 &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt; &lt;code&gt;git blame filename&lt;/code&gt; &lt;/a&gt; 으로 변경된시기도 확인할 수 있습니다. 이렇게하면 짧은 커밋 ID, 작성자, 타임 스탬프 및 파일의 모든 줄에 대한 완전한 코드 줄이 인쇄됩니다. 버그를 발견 한 후 버그가 발생한 시점 (또는 결함이 누구인지)을 알고 자 할 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="73790fbab56af7e467e6a2f75fdc69bf69e8a385" translate="yes" xml:space="preserve">
          <source>You can also try this which lists the commits that has changed a specific part of a file (Implemented in Git 1.8.4).</source>
          <target state="translated">파일의 특정 부분을 변경 한 커밋을 나열하는 이것을 시도 할 수도 있습니다 (Git 1.8.4에서 구현 됨).</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">당신이 사용할 수있는</target>
        </trans-unit>
        <trans-unit id="be4fbe738a4b80d1879805fb57a37167185cf295" translate="yes" xml:space="preserve">
          <source>You can use vscode with &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt;, it's a very powerful tool.
After installed GitLens, go to GitLens tab, select &lt;code&gt;FILE HISTORY&lt;/code&gt; and you can browse it.</source>
          <target state="translated">vscode는 GitLens와 함께 사용할 수 있으며 매우 강력한 도구입니다. GitLens를 설치 한 후 GitLens 탭으로 이동하여 &lt;code&gt;FILE HISTORY&lt;/code&gt; 선택하면 찾아 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="090feec247d24b15eb17b1c7987e52e99bce5410" translate="yes" xml:space="preserve">
          <source>for more options - it can actually do a lot of nice things :) To get just the diff for a specific commit you can</source>
          <target state="translated">더 많은 옵션-실제로 많은 좋은 일을 할 수 있습니다 :) 특정 커밋에 대한 차이점을 얻으려면</target>
        </trans-unit>
        <trans-unit id="bf358dc3e2df36683f9a0414a02a430a810a8c1c" translate="yes" xml:space="preserve">
          <source>if you're using &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx를&lt;/a&gt; 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="ae5b0611bfda360ab13caeb7bf3b2d4cb25cc286" translate="yes" xml:space="preserve">
          <source>or any other revision by identifier. Or use</source>
          <target state="translated">또는 식별자에 의한 다른 개정. 또는 사용</target>
        </trans-unit>
        <trans-unit id="645102fba40918ec13b5f68f5ebd7bdd995c48bf" translate="yes" xml:space="preserve">
          <source>or if you want to use the powerful blame GUI:</source>
          <target state="translated">또는 강력한 비난 GUI를 사용하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="64d660575f741ec638e95accf2522e5b907b8ecb" translate="yes" xml:space="preserve">
          <source>or to follow filename past renames</source>
          <target state="translated">또는 이름을 변경 한 파일 이름을 따르려면</target>
        </trans-unit>
        <trans-unit id="65bb9667cb1d9319a279d67162176ef74d77d614" translate="yes" xml:space="preserve">
          <source>so that I can just type &lt;code&gt;gdf dir&lt;/code&gt; to get a focussed history of everything in subdirectory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gdf dir&lt;/code&gt; 을 입력하여 하위 디렉토리 &lt;code&gt;dir&lt;/code&gt; 에있는 모든 것에 대한 집중된 히스토리를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9c895492cb34cfa943e9d4767dd902b47e3dcee" translate="yes" xml:space="preserve">
          <source>to browse the changes visually.</source>
          <target state="translated">변경 사항을 시각적으로 찾아 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="895c043a4b66f33e72db78ff834e2bd936135087" translate="yes" xml:space="preserve">
          <source>to let git generate the patches for each log entry.</source>
          <target state="translated">git이 각 로그 항목에 대한 패치를 생성하도록합니다.</target>
        </trans-unit>
        <trans-unit id="22942d4d728e0aae43d146073f19b0f4eea93f28" translate="yes" xml:space="preserve">
          <source>where upperLimit is the start_line_number and lowerLimit is the ending_line_number of the file.</source>
          <target state="translated">여기서 upperLimit는 start_line_number이고 lowerLimit은 파일의 ending_line_number입니다.</target>
        </trans-unit>
        <trans-unit id="095dbf3d3fb0bc97895fec230d608616398419ec" translate="yes" xml:space="preserve">
          <source>which shows me the commit history of the file, but how do I get at the content of each of the file changes?</source>
          <target state="translated">파일의 커밋 히스토리를 보여 주지만 각 파일 변경 내용을 어떻게 알 수 있습니까?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
