<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/278192">
    <body>
      <group id="278192">
        <trans-unit id="3d9d2543cd9f33e80da313ba517d5dc88b1923cd" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;All Branches&lt;/code&gt;' option is checked.</source>
          <target state="translated">La opci&amp;oacute;n ' &lt;code&gt;All Branches&lt;/code&gt; ' est&amp;aacute; marcada.</target>
        </trans-unit>
        <trans-unit id="50cb7d88e548e886c2b9dd62592e340487b8f773" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;Show Whole Project&lt;/code&gt;' option is not checked.</source>
          <target state="translated">&lt;code&gt;Show Whole Project&lt;/code&gt; opci&amp;oacute;n ' Mostrar todo el proyecto ' no est&amp;aacute; marcada.</target>
        </trans-unit>
        <trans-unit id="3f9898a6633eef8d6e644f1d8b3f0ba85398c5eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt;&lt;code&gt;git whatchanged -p filename&lt;/code&gt;&lt;/a&gt; is also equivalent to &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt;&lt;code&gt;git log -p filename&lt;/code&gt;&lt;/a&gt; in this case.</source>
          <target state="translated">&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html&quot;&gt; &lt;code&gt;git whatchanged -p filename&lt;/code&gt; &lt;/a&gt; tambi&amp;eacute;n es equivalente a &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt; &lt;code&gt;git log -p filename&lt;/code&gt; &lt;/a&gt; en este caso.</target>
        </trans-unit>
        <trans-unit id="f8cbe27670bf752f3ee2e7a9afb6da4fcf83b7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; give you a unified diff.</source>
          <target state="translated">&lt;code&gt;git diff -U &amp;lt;filename&amp;gt;&lt;/code&gt; proporciona un diff unificado.</target>
        </trans-unit>
        <trans-unit id="9ab0beb3dfd9d75c7e6a022d01bd40f5aa8a68bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/&quot;&gt;SmartGit&lt;/a&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59d10d1a55a9f4f2f09cbc7e16fe9fd6c8b98aae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Homebrew (OS X)&lt;/strong&gt;: &lt;code&gt;$ brew install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Homebrew (OS X)&lt;/strong&gt; : &lt;code&gt;$ brew install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d339bf632cffe1e16b96430aae9f59173359b31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apt-get&lt;/strong&gt;: &lt;code&gt;# apt-get install tig&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;apt-get&lt;/strong&gt; : &lt;code&gt;# apt-get install tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2cdae6daebf8e3de72ac219889c8a6a2cd3765f" translate="yes" xml:space="preserve">
          <source>Add this alias to your .gitconfig:</source>
          <target state="translated">Añade este alias a tu .gitconfig:</target>
        </trans-unit>
        <trans-unit id="8e570f192283cf80cc37abc2a6ed39b3572b9ab5" translate="yes" xml:space="preserve">
          <source>And I'm currently using:</source>
          <target state="translated">Y actualmente estoy consumiendo:</target>
        </trans-unit>
        <trans-unit id="907d3b69806ca2991bb202f776e09b1d6384749f" translate="yes" xml:space="preserve">
          <source>And use the command like this:</source>
          <target state="translated">Y usa el comando de esta manera:</target>
        </trans-unit>
        <trans-unit id="ef5b76f3c64ba20c4b2d53d26c102f3d9254d481" translate="yes" xml:space="preserve">
          <source>Behavior is to output the commit comments when relevant changes are found and start offering &lt;em&gt;vimdiff&lt;/em&gt; runs for each changed file (that's &lt;em&gt;git difftool&lt;/em&gt; behavior, but it works here).</source>
          <target state="translated">El comportamiento es generar los comentarios de confirmaci&amp;oacute;n cuando se encuentran cambios relevantes y comenzar a ofrecer &lt;em&gt;ejecuciones de vimdiff&lt;/em&gt; para cada archivo modificado (ese es el comportamiento de &lt;em&gt;git difftool&lt;/em&gt; , pero funciona aqu&amp;iacute;).</target>
        </trans-unit>
        <trans-unit id="7b611c28effa01e83dd6ed3c702afd1a867eaed9" translate="yes" xml:space="preserve">
          <source>But you can also use either gitk (gui) or tig (text-ui) to give much more human-readable ways of looking at it.</source>
          <target state="translated">Pero también puedes usar gitk (gui)o tig (text-ui)para dar una forma mucho más legible para los humanos.</target>
        </trans-unit>
        <trans-unit id="ba61754bb8fbfc6f454767dd12bcf472c3fb43c2" translate="yes" xml:space="preserve">
          <source>By default, it follows the file through the renames, and the &lt;code&gt;Blame&lt;/code&gt; tab allows to see the name at a given revision.</source>
          <target state="translated">De forma predeterminada, sigue el archivo a trav&amp;eacute;s de los cambios de nombre, y la pesta&amp;ntilde;a &lt;code&gt;Blame&lt;/code&gt; permite ver el nombre en una revisi&amp;oacute;n determinada.</target>
        </trans-unit>
        <trans-unit id="c232c15d8257abcac2bdd66df56ef7e4635b241d" translate="yes" xml:space="preserve">
          <source>Called with no args, this will start from the beginning of the repo history, otherwise it will start with whatever abbreviated commit hash you provide and proceed to the present - you can ctrl-C at any time to exit.  Any args after the first will limit the difference reports to include only the files listed among those args (which I think is what the OP wanted, and I'd recommend for all but tiny projects).  If you're checking changes to specific files &lt;strong&gt;and&lt;/strong&gt; want to start from the beginning, you'll need to provide an empty string for arg1.  If you're not a vim user, you can replace &lt;em&gt;vimdiff&lt;/em&gt; with your favorite diff tool.</source>
          <target state="translated">Llamado sin argumentos, esto comenzar&amp;aacute; desde el comienzo del historial de repositorios, de lo contrario comenzar&amp;aacute; con cualquier hash abreviado de confirmaci&amp;oacute;n que proporcione y proceda al presente: puede presionar Ctrl-C en cualquier momento para salir. Cualquier argumento despu&amp;eacute;s del primero limitar&amp;aacute; los informes de diferencias para incluir solo los archivos enumerados entre esos argumentos (lo que creo que es lo que quer&amp;iacute;a el OP, y lo recomendar&amp;iacute;a para todos menos los proyectos peque&amp;ntilde;os). Si est&amp;aacute; verificando cambios en archivos espec&amp;iacute;ficos &lt;strong&gt;y&lt;/strong&gt; desea comenzar desde el principio, deber&amp;aacute; proporcionar una cadena vac&amp;iacute;a para arg1. Si no eres un usuario de vim, puedes reemplazar &lt;em&gt;vimdiff&lt;/em&gt; con tu herramienta de diferencias favorita.</target>
        </trans-unit>
        <trans-unit id="9e8a14fed965c39f9d195257da284bac22347c82" translate="yes" xml:space="preserve">
          <source>For this I'd use:</source>
          <target state="translated">Para esto me serviría:</target>
        </trans-unit>
        <trans-unit id="cf5d18bed33cf32bad08e39d8d8e033c4d19ecf5" translate="yes" xml:space="preserve">
          <source>For your case, &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; might be what you're looking for.</source>
          <target state="translated">Para su caso, &lt;code&gt;tig &amp;lt;filename&amp;gt;&lt;/code&gt; podr&amp;iacute;a ser lo que est&amp;aacute; buscando.</target>
        </trans-unit>
        <trans-unit id="f561722d503883a91b5447da50af1480ac6de4c4" translate="yes" xml:space="preserve">
          <source>How can I view the change history of an individual file in Git, complete details with what has changed?</source>
          <target state="translated">¿Cómo puedo ver el historial de cambios de un archivo individual en Git,detalles completos con lo que ha cambiado?</target>
        </trans-unit>
        <trans-unit id="6c2a3d6b045eb89c60b0319ee29277161f1bb709" translate="yes" xml:space="preserve">
          <source>I have found a very simple solution to quickly find history of the file.</source>
          <target state="translated">He encontrado una solución muy simple para encontrar rápidamente la historia del archivo.</target>
        </trans-unit>
        <trans-unit id="c72d2bd24775db54e7ddc9bc05306cea03461588" translate="yes" xml:space="preserve">
          <source>I have got as far as:</source>
          <target state="translated">He llegado tan lejos como..:</target>
        </trans-unit>
        <trans-unit id="e59701d8194fdae5084e88d2ea48cda13a65de6c" translate="yes" xml:space="preserve">
          <source>I wrote &lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;git-playback&lt;/a&gt; for this exact purpose</source>
          <target state="translated">Escrib&amp;iacute; &lt;a href=&quot;https://github.com/jianli/git-playback&quot;&gt;git-play&lt;/a&gt; para este prop&amp;oacute;sito exacto</target>
        </trans-unit>
        <trans-unit id="a8cd81b6b8ce010c0e4a05a58657ebbc4cd0e8f6" translate="yes" xml:space="preserve">
          <source>I'm probably about where the OP was when this started, looking for something simple that would let me use &lt;em&gt;git difftool&lt;/em&gt; with &lt;em&gt;vimdiff&lt;/em&gt; to review changes to files in my repo starting from a specific commit.  I wasn't too happy with answers I was finding, so I threw this &lt;strong&gt;git inc&lt;/strong&gt;remental &lt;strong&gt;rep&lt;/strong&gt;orter (gitincrep) script together and it's been useful to me:</source>
          <target state="translated">Probablemente estoy sobre d&amp;oacute;nde estaba el OP cuando esto comenz&amp;oacute;, buscando algo simple que me permitiera usar &lt;em&gt;git difftool&lt;/em&gt; con &lt;em&gt;vimdiff&lt;/em&gt; para revisar los cambios en los archivos en mi repositorio a partir de una confirmaci&amp;oacute;n espec&amp;iacute;fica. No estaba muy contento con las respuestas que estaba encontrando, as&amp;iacute; que elabor&amp;eacute; este script de &lt;strong&gt;git inc&lt;/strong&gt; remental &lt;strong&gt;rep&lt;/strong&gt; orter (gitincrep) y me ha sido &amp;uacute;til:</target>
        </trans-unit>
        <trans-unit id="0929b06e1c9a3d39f775d7b0a7093d8ceab102eb" translate="yes" xml:space="preserve">
          <source>I'm trying to make the transition from MS SourceSafe and that used to be a simple &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt;.</source>
          <target state="translated">Estoy tratando de hacer la transici&amp;oacute;n desde MS SourceSafe y eso sol&amp;iacute;a ser un simple &lt;code&gt;right-click&lt;/code&gt; &amp;rarr; &lt;code&gt;show history&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b9c0ddeccf9d0e2407f2c4080a6fb0e35d7c9d7" translate="yes" xml:space="preserve">
          <source>If you are using eclipse with the git plugin, it has an excellent comparison view with history. Right click the file and select &quot;compare with&quot;=&amp;gt; &quot;history&quot;</source>
          <target state="translated">Si est&amp;aacute; utilizando eclipse con el complemento git, tiene una excelente vista de comparaci&amp;oacute;n con el historial. Haga clic derecho en el archivo y seleccione &quot;comparar con&quot; =&amp;gt; &quot;historial&quot;</target>
        </trans-unit>
        <trans-unit id="a21b9093f8406e02592174ccc05238fced88400f" translate="yes" xml:space="preserve">
          <source>If you prefer to stay text-based, you may want to use &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">Si prefiere permanecer basado en texto, puede usar &lt;strong&gt;&lt;a href=&quot;https://github.com/jonas/tig&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="06513fd53256b56f2382ecd38ba91da7c0608ba7" translate="yes" xml:space="preserve">
          <source>If you use SourceTree to visualize your repository (it's free and quite good) you can right click a file and select &lt;strong&gt;Log Selected&lt;/strong&gt;</source>
          <target state="translated">Si usa SourceTree para visualizar su repositorio (es gratis y bastante bueno) puede hacer clic derecho en un archivo y seleccionar &lt;strong&gt;Log Selected&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4984f66360f919ef5d13b0f40807e8da46ba613" translate="yes" xml:space="preserve">
          <source>If you use TortoiseGit you should be able to right click on the file and do &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt;. In the window that pops up, make sure:</source>
          <target state="translated">Si usa TortoiseGit, deber&amp;iacute;a poder hacer clic derecho en el archivo y hacer &lt;code&gt;TortoiseGit --&amp;gt; Show Log&lt;/code&gt; . En la ventana que aparece, aseg&amp;uacute;rese de:</target>
        </trans-unit>
        <trans-unit id="9656d3c058925e01df61b32b5c782c4e0bcbc732" translate="yes" xml:space="preserve">
          <source>If you want to see the whole history of a file, &lt;em&gt;including&lt;/em&gt; on &lt;em&gt;all other&lt;/em&gt; branches use:</source>
          <target state="translated">Si desea ver el historial completo de un archivo, &lt;em&gt;incluso&lt;/em&gt; en &lt;em&gt;todas las dem&amp;aacute;s&lt;/em&gt; ramas, use:</target>
        </trans-unit>
        <trans-unit id="a879610c781443f3beabfa7df17b56d994f47859" translate="yes" xml:space="preserve">
          <source>If you're using the git GUI (on Windows) under the Repository menu you can use &quot;Visualize master's History&quot;.  Highlight a commit in the top pane and a file in the lower right and you'll see the diff for that commit in the lower left.</source>
          <target state="translated">Si usas el GUI de git (en Windows)en el menú del repositorio puedes usar &quot;Visualizar la historia del maestro&quot;.Resalta una confirmación en el panel superior y un archivo en la parte inferior derecha y verás la diferencia para esa confirmación en la parte inferior izquierda.</target>
        </trans-unit>
        <trans-unit id="b63b3f52461317be40155db65724abad2131f0b6" translate="yes" xml:space="preserve">
          <source>In other words, if the file named &lt;code&gt;bar&lt;/code&gt; was once named &lt;code&gt;foo&lt;/code&gt;, then &lt;code&gt;git log -p bar&lt;/code&gt; (without the &lt;code&gt;--follow&lt;/code&gt; option) will only show the file's history up to the point where it was renamed -- it won't show the file's history when it was known as &lt;code&gt;foo&lt;/code&gt;. Using &lt;code&gt;git log --follow -p bar&lt;/code&gt; will show the file's entire history, including any changes to the file when it was known as &lt;code&gt;foo&lt;/code&gt;. The &lt;code&gt;-p&lt;/code&gt; option ensures that diffs are included for each change.</source>
          <target state="translated">En otras palabras, si el archivo llamado &lt;code&gt;bar&lt;/code&gt; alguna vez se llam&amp;oacute; &lt;code&gt;foo&lt;/code&gt; , entonces &lt;code&gt;git log -p bar&lt;/code&gt; (sin la opci&amp;oacute;n &lt;code&gt;--follow&lt;/code&gt; ) solo mostrar&amp;aacute; el historial del archivo hasta el punto donde fue renombrado; no mostrar&amp;aacute; el historial del archivo cuando se conoc&amp;iacute;a como &lt;code&gt;foo&lt;/code&gt; . Usando &lt;code&gt;git log --follow -p bar&lt;/code&gt; mostrar&amp;aacute; el historial completo del archivo, incluidos los cambios en el archivo cuando se conoc&amp;iacute;a como &lt;code&gt;foo&lt;/code&gt; . La opci&amp;oacute;n &lt;code&gt;-p&lt;/code&gt; garantiza que se incluyan diferencias para cada cambio.</target>
        </trans-unit>
        <trans-unit id="10b10cde131cf603e0cd3ee953af7677b22fd4e3" translate="yes" xml:space="preserve">
          <source>In the menu enable to display unchanged files: View / Show unchanged files</source>
          <target state="translated">En el menú habilite la visualización de los archivos no modificados:Ver Mostrar archivos sin modificar</target>
        </trans-unit>
        <trans-unit id="da9d2c806c9ca3a715b990f7377a5ddd66eb4470" translate="yes" xml:space="preserve">
          <source>It has some minor gotchas, like showing &lt;code&gt;fatal: Not a valid object name&lt;/code&gt; in the &lt;code&gt;View&lt;/code&gt; tab when clicking on the deletion revision, but I can live with that. :-)</source>
          <target state="translated">Tiene algunos problemas menores, como mostrar &lt;code&gt;fatal: Not a valid object name&lt;/code&gt; en la pesta&amp;ntilde;a &lt;code&gt;View&lt;/code&gt; al hacer clic en la revisi&amp;oacute;n de eliminaci&amp;oacute;n, pero puedo vivir con eso. :-)</target>
        </trans-unit>
        <trans-unit id="c5170d47368bacc184b557bae26cb55c8b9aaf6d" translate="yes" xml:space="preserve">
          <source>It should be colored on red and green. If it's not, run: &lt;code&gt;git config color.ui auto&lt;/code&gt; first.</source>
          <target state="translated">Debe ser de color rojo y verde. Si no es as&amp;iacute;, ejecute: &lt;code&gt;git config color.ui auto&lt;/code&gt; primero.</target>
        </trans-unit>
        <trans-unit id="4d8f0778b71f832c5b4caceb4c33cd118c8a927a" translate="yes" xml:space="preserve">
          <source>It will show as uncommitted changes on your sourcetree</source>
          <target state="translated">Se mostrará como cambios no comprometidos en tu árbol genealógico</target>
        </trans-unit>
        <trans-unit id="518643293a3b80fb0e4b811c9dc6f767c640621a" translate="yes" xml:space="preserve">
          <source>It would show the history of all the commits.</source>
          <target state="translated">Mostraría la historia de todos los compromisos.</target>
        </trans-unit>
        <trans-unit id="69d4650334ca7af2f36bb97bceb4b7f26a81adb9" translate="yes" xml:space="preserve">
          <source>Lately I discovered &lt;code&gt;tig&lt;/code&gt; and found it very useful. There are some cases I'd wish it does A or B but most of the time it's rather neat.</source>
          <target state="translated">&amp;Uacute;ltimamente descubr&amp;iacute; &lt;code&gt;tig&lt;/code&gt; y lo encontr&amp;eacute; muy &amp;uacute;til. Hay algunos casos en los que desear&amp;iacute;a que hiciera A o B, pero la mayor&amp;iacute;a de las veces es bastante ordenada.</target>
        </trans-unit>
        <trans-unit id="b9fb34274dcd3fad3e617ac883d52d8956970ff0" translate="yes" xml:space="preserve">
          <source>Make a random change in the file</source>
          <target state="translated">Hacer un cambio aleatorio en el archivo</target>
        </trans-unit>
        <trans-unit id="102b33e8b3a60913a071f79bb77f653582ea7716" translate="yes" xml:space="preserve">
          <source>More details at &lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commands&lt;/a&gt;</source>
          <target state="translated">M&amp;aacute;s detalles en &lt;a href=&quot;https://www.techpurohit.com/list-some-useful-git-commands&quot;&gt;https://www.techpurohit.com/list-some-useful-git-commands&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="996718383eca1dcb0cbdc1f04bae53d299cbf7f5" translate="yes" xml:space="preserve">
          <source>Or browse detailed repo history: &lt;code&gt;tig&lt;/code&gt;</source>
          <target state="translated">O explore el historial detallado de repositorios: &lt;code&gt;tig&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="a520a3a3229dd5e59c0c84e59603b886dd90c5d6" translate="yes" xml:space="preserve">
          <source>Quick Install:</source>
          <target state="translated">Instalación rápida:</target>
        </trans-unit>
        <trans-unit id="823f8269a30661e132c61497cbae8ee6ca4e0839" translate="yes" xml:space="preserve">
          <source>Result returned would be the list of commits that modified this particular part. Command :</source>
          <target state="translated">El resultado devuelto sería la lista de compromisos que modificó esta parte en particular.Comando :</target>
        </trans-unit>
        <trans-unit id="53c3f12659701fc4786d5e8c56f7ee9c233c4231" translate="yes" xml:space="preserve">
          <source>Right click on the file and select 'Log Selected'</source>
          <target state="translated">Haga clic con el botón derecho del ratón en el archivo y seleccione 'Log Selected'.</target>
        </trans-unit>
        <trans-unit id="4adc12e1d577535542728194a7eb79dcf9bf7700" translate="yes" xml:space="preserve">
          <source>Right click the file and select 'Log' or press 'Ctrl-L'</source>
          <target state="translated">Haz clic con el botón derecho del ratón en el archivo y selecciona 'Log' o presiona 'Ctrl-L'.</target>
        </trans-unit>
        <trans-unit id="ce3df4d818316dd10c7bca5ae8539c894dc07dbb" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">See</target>
        </trans-unit>
        <trans-unit id="b6419b3b81c52cefae0da0205084adfb75db266a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;gitk&lt;/code&gt; but text based. Supports colors in terminal!</source>
          <target state="translated">Similar a &lt;code&gt;gitk&lt;/code&gt; pero basado en texto. Soporta colores en terminal!</target>
        </trans-unit>
        <trans-unit id="530e3cc53044ad9513bde41a5e2a91317986227a" translate="yes" xml:space="preserve">
          <source>SourceTree users</source>
          <target state="translated">Usuarios de SourceTree</target>
        </trans-unit>
        <trans-unit id="ce66f3def7b28e5504a11663228c58d6f583a79e" translate="yes" xml:space="preserve">
          <source>Summary of other answers after reading through them and playing a bit:</source>
          <target state="translated">Resumen de otras respuestas después de leerlas y jugar un poco:</target>
        </trans-unit>
        <trans-unit id="6724c570133b9688c71101ffaa731c4942695a95" translate="yes" xml:space="preserve">
          <source>The answer I was looking for that wasn't in this thread is to see changes in files that I'd staged for commit. i.e.</source>
          <target state="translated">La respuesta que buscaba que no estaba en este hilo es ver los cambios en los archivos que había preparado para la confirmación,es decir.</target>
        </trans-unit>
        <trans-unit id="9206092056d34d3fb3dbf8041353b11aa145e577" translate="yes" xml:space="preserve">
          <source>The display (below) is much friendlier than gitk and most the other options listed. Unfortunately (at this time) there is no easy way to launch this view from the command line &amp;mdash; SourceTree's CLI currently just opens repos.</source>
          <target state="translated">La pantalla (a continuaci&amp;oacute;n) es mucho m&amp;aacute;s amigable que gitk y la mayor&amp;iacute;a de las otras opciones enumeradas. Desafortunadamente (en este momento) no hay una manera f&amp;aacute;cil de iniciar esta vista desde la l&amp;iacute;nea de comandos: la CLI de SourceTree actualmente solo abre repositorios.</target>
        </trans-unit>
        <trans-unit id="22ddb69223f4f6beef48d67a9d13f1e8c5974586" translate="yes" xml:space="preserve">
          <source>The output will look almost exactly the same as the gitk output. Enjoy.</source>
          <target state="translated">La salida se verá casi exactamente igual a la salida del gitano.Disfrútalo.</target>
        </trans-unit>
        <trans-unit id="0a34a9bc15e2e9cb04b3f64178b220c2e475a375" translate="yes" xml:space="preserve">
          <source>The usual command line command would be</source>
          <target state="translated">El comando usual de la línea de comando sería</target>
        </trans-unit>
        <trans-unit id="6763d6717ddf4e76d6dbc8d3e5dc5d9474e41d6e" translate="yes" xml:space="preserve">
          <source>This approach is probably pretty naive, but looking through a lot of the solutions here and at a related post, many involved installing new tools on a system where I don't have admin access, with interfaces that had their own learning curve.  The above script did what I wanted without dealing with any of that.  I'll look into the many excellent suggestions here when I need something more sophisticated - but I think this is directly responsive to the OP.</source>
          <target state="translated">Este enfoque es probablemente bastante ingenuo,pero mirando a través de muchas de las soluciones aquí y en un post relacionado,muchos involucraron la instalación de nuevas herramientas en un sistema donde no tengo acceso de administrador,con interfaces que tenían su propia curva de aprendizaje.El guión anterior hizo lo que yo quería sin tener que lidiar con nada de eso.Miraré las muchas y excelentes sugerencias aquí cuando necesite algo más sofisticado-pero creo que esto responde directamente a la OP.</target>
        </trans-unit>
        <trans-unit id="01079e380958a3399c1ba2f91f24cc53c68c5a78" translate="yes" xml:space="preserve">
          <source>This has the benefit of both displaying the results in the command line (like &lt;code&gt;git log -p&lt;/code&gt;) while also letting you step through each commit using the arrow keys (like &lt;code&gt;gitk&lt;/code&gt;).</source>
          <target state="translated">Esto tiene la ventaja de que ambos muestran los resultados en la l&amp;iacute;nea de comando (como &lt;code&gt;git log -p&lt;/code&gt; ) y al mismo tiempo le permiten recorrer cada confirmaci&amp;oacute;n utilizando las teclas de flecha (como &lt;code&gt;gitk&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5a27b95bc773b006676e52278be4d3b6e894e450" translate="yes" xml:space="preserve">
          <source>This will show the &lt;strong&gt;entire&lt;/strong&gt; history of the file (including history beyond renames and with diffs for each change).</source>
          <target state="translated">Esto mostrar&amp;aacute; el historial &lt;strong&gt;completo&lt;/strong&gt; del archivo (incluido el historial m&amp;aacute;s all&amp;aacute; de los cambios de nombre y con diferencias para cada cambio).</target>
        </trans-unit>
        <trans-unit id="9f1a203ad6cb0a77f45c9e85899bf32f05d97b2f" translate="yes" xml:space="preserve">
          <source>To show what revision and author last modified each line of a file:</source>
          <target state="translated">Para mostrar qué revisión y autor modificó por última vez cada línea de un archivo:</target>
        </trans-unit>
        <trans-unit id="36f7289d9cfcc16b57ff192e9fd25b53b47150c7" translate="yes" xml:space="preserve">
          <source>Under debian/ubuntu, the install command for these lovely tools is as expected :</source>
          <target state="translated">Bajo debianubuntu,el comando de instalación para estas encantadoras herramientas es como se esperaba:</target>
        </trans-unit>
        <trans-unit id="89d2bcf31e2c0e964fef82ac00f086c2d8d9ea80" translate="yes" xml:space="preserve">
          <source>Use it to view history on a single file: &lt;code&gt;tig [filename]&lt;/code&gt;</source>
          <target state="translated">&amp;Uacute;selo para ver el historial en un solo archivo: &lt;code&gt;tig [filename]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24a6a9a291acf1dfc2d52669c7b93e504ae965b6" translate="yes" xml:space="preserve">
          <source>View the change history of a file using Git versioning</source>
          <target state="translated">Ver el historial de cambios de un archivo usando el versionado de Git</target>
        </trans-unit>
        <trans-unit id="51577d47db12dc36a5c6664eda0a340385a8dfd7" translate="yes" xml:space="preserve">
          <source>With the excellent &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt;, you go to a point in the history where the file still existed (if it have been deleted, otherwise just go to HEAD), switch to the &lt;code&gt;File tree&lt;/code&gt; tab, right-click on the file and choose &lt;code&gt;File history&lt;/code&gt;.</source>
          <target state="translated">Con las excelentes &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;extensiones de Git&lt;/a&gt; , vas a un punto en el historial donde el archivo a&amp;uacute;n exist&amp;iacute;a (si se ha eliminado, de lo contrario solo ve a HEAD), cambia a la pesta&amp;ntilde;a &lt;code&gt;File tree&lt;/code&gt; , haz clic derecho en el archivo y elige &lt;code&gt;File history&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b762b8b254131e07b18d947802908a7039d6f0b8" translate="yes" xml:space="preserve">
          <source>You can also see when a specific line of code inside a file was changed with &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt;&lt;code&gt;git blame filename&lt;/code&gt;&lt;/a&gt;. This will print out a short commit id, the author, timestamp, and complete line of code for every line in the file. 
This is very useful after you've found a bug and you want to know when it was introduced (or who's fault it was).</source>
          <target state="translated">Tambi&amp;eacute;n puede ver cu&amp;aacute;ndo se cambi&amp;oacute; una l&amp;iacute;nea de c&amp;oacute;digo espec&amp;iacute;fica dentro de un archivo con el &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-blame.html&quot;&gt; &lt;code&gt;git blame filename&lt;/code&gt; &lt;/a&gt; . Esto imprimir&amp;aacute; un ID de confirmaci&amp;oacute;n breve, el autor, la marca de tiempo y la l&amp;iacute;nea de c&amp;oacute;digo completa para cada l&amp;iacute;nea del archivo. Esto es muy &amp;uacute;til despu&amp;eacute;s de que hayas encontrado un error y quieras saber cu&amp;aacute;ndo se introdujo (o qui&amp;eacute;n tiene la culpa).</target>
        </trans-unit>
        <trans-unit id="73790fbab56af7e467e6a2f75fdc69bf69e8a385" translate="yes" xml:space="preserve">
          <source>You can also try this which lists the commits that has changed a specific part of a file (Implemented in Git 1.8.4).</source>
          <target state="translated">También puedes probar esto que lista las confirmaciones que ha cambiado una parte específica de un archivo (Implementado en Git 1.8.4).</target>
        </trans-unit>
        <trans-unit id="3c94090f45521fa505560d818d146d87684fe4b4" translate="yes" xml:space="preserve">
          <source>You can use</source>
          <target state="translated">Puedes usar</target>
        </trans-unit>
        <trans-unit id="be4fbe738a4b80d1879805fb57a37167185cf295" translate="yes" xml:space="preserve">
          <source>You can use vscode with &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt;, it's a very powerful tool.
After installed GitLens, go to GitLens tab, select &lt;code&gt;FILE HISTORY&lt;/code&gt; and you can browse it.</source>
          <target state="translated">Puedes usar vscode con &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt; , es una herramienta muy poderosa. Despu&amp;eacute;s de instalar GitLens, vaya a la pesta&amp;ntilde;a GitLens, seleccione &lt;code&gt;FILE HISTORY&lt;/code&gt; y puede explorarlo.</target>
        </trans-unit>
        <trans-unit id="090feec247d24b15eb17b1c7987e52e99bce5410" translate="yes" xml:space="preserve">
          <source>for more options - it can actually do a lot of nice things :) To get just the diff for a specific commit you can</source>
          <target state="translated">para más opciones-puede hacer muchas cosas buenas :)Para obtener sólo el diferencial de un compromiso específico puedes</target>
        </trans-unit>
        <trans-unit id="bf358dc3e2df36683f9a0414a02a430a810a8c1c" translate="yes" xml:space="preserve">
          <source>if you're using &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt;</source>
          <target state="translated">si est&amp;aacute;s usando &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae5b0611bfda360ab13caeb7bf3b2d4cb25cc286" translate="yes" xml:space="preserve">
          <source>or any other revision by identifier. Or use</source>
          <target state="translated">o cualquier otra revisión por identificador.O usar</target>
        </trans-unit>
        <trans-unit id="645102fba40918ec13b5f68f5ebd7bdd995c48bf" translate="yes" xml:space="preserve">
          <source>or if you want to use the powerful blame GUI:</source>
          <target state="translated">o si quieres usar el poderoso GUI de la culpa:</target>
        </trans-unit>
        <trans-unit id="64d660575f741ec638e95accf2522e5b907b8ecb" translate="yes" xml:space="preserve">
          <source>or to follow filename past renames</source>
          <target state="translated">o para seguir los nombres de los archivos más allá de los renombramientos</target>
        </trans-unit>
        <trans-unit id="65bb9667cb1d9319a279d67162176ef74d77d614" translate="yes" xml:space="preserve">
          <source>so that I can just type &lt;code&gt;gdf dir&lt;/code&gt; to get a focussed history of everything in subdirectory &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">para que pueda escribir &lt;code&gt;gdf dir&lt;/code&gt; para obtener un historial enfocado de todo en subdirectorio &lt;code&gt;dir&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9c895492cb34cfa943e9d4767dd902b47e3dcee" translate="yes" xml:space="preserve">
          <source>to browse the changes visually.</source>
          <target state="translated">para examinar los cambios visualmente.</target>
        </trans-unit>
        <trans-unit id="895c043a4b66f33e72db78ff834e2bd936135087" translate="yes" xml:space="preserve">
          <source>to let git generate the patches for each log entry.</source>
          <target state="translated">para dejar que git genere los parches para cada entrada en el registro.</target>
        </trans-unit>
        <trans-unit id="22942d4d728e0aae43d146073f19b0f4eea93f28" translate="yes" xml:space="preserve">
          <source>where upperLimit is the start_line_number and lowerLimit is the ending_line_number of the file.</source>
          <target state="translated">donde upperLimit es el número_de_línea_de_inicio y lowerLimit es el número_de_línea_de_financiación del archivo.</target>
        </trans-unit>
        <trans-unit id="095dbf3d3fb0bc97895fec230d608616398419ec" translate="yes" xml:space="preserve">
          <source>which shows me the commit history of the file, but how do I get at the content of each of the file changes?</source>
          <target state="translated">que me muestra el historial de confirmación del archivo,pero ¿cómo llego al contenido de cada uno de los cambios del archivo?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
