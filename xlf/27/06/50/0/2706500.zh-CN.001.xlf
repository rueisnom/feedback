<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/2706500">
    <body>
      <group id="2706500">
        <trans-unit id="abbfd7d47daef7f82ce3af11fcf364c37711cae6" translate="yes" xml:space="preserve">
          <source>*&amp;ldquo;Random&amp;rdquo; class generates only PSEUDO random number and to generate SECURE random number we need to use &amp;ldquo;RNGCryptoServiceProvider&amp;rdquo; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*&amp;ldquo; Random&amp;rdquo;类仅生成PSEUDO随机数，而要生成SECURE随机数，我们需要使用&amp;ldquo; RNGCryptoServiceProvider&amp;rdquo;类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea162270b297e6ccccf3f1f69a8dabd04b8fb5e5" translate="yes" xml:space="preserve">
          <source>**Note: ** &lt;code&gt;.NET Core 2.0.0+&lt;/code&gt; uses a different seed on the parameterless constructor: instead of CPU clock it uses &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;**注意：** &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.NET Core 2.0.0+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在无参数构造函数上使用了不同的种子：它使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代替CPU时钟&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b04a50a0b5d0291aad88037c97598657c9e5753" translate="yes" xml:space="preserve">
          <source>0 is min and 999 is max. You can change the values to whatever you want.</source>
          <target state="translated">0是最小值,999是最大值。你可以把值改成你想要的任何值。</target>
        </trans-unit>
        <trans-unit id="d80e78c095e57fa4cf82545a7129711a51ed8f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create function:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;创建函数：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="200627b0eb37efd54845f9a6bd7c0133da5e8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2df4f7c53f783bffe74641c08bb66c84262ed5a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;: Seeding isn't necessary if you instantiate the Random class once. So it'd be best to create a static class and call a method off that.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更新&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：如果您一次实例化Random类，则无需播种。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，最好创建一个静态类并从中调用一个方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d864ad92158e75560283cbf8a0ccdc7be229694b" translate="yes" xml:space="preserve">
          <source>Basically, they have changed the default seed from &lt;code&gt;Environment.TickCount&lt;/code&gt; to &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt;, so if you create 2 instances of Random it won't display the same numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本上，他们已将默认种子从&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Environment.TickCount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更改&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，因此，如果您创建2个Random实例，则不会显示相同的数字。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbdc6f9a0e482ca7c8fee312c4ea18cd47525001" translate="yes" xml:space="preserve">
          <source>Beware that &lt;code&gt;new Random()&lt;/code&gt; is seeded on current timestamp.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会在当前时间戳上植入。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="226e9e35bac38a237adfecca37311e06945bd9a7" translate="yes" xml:space="preserve">
          <source>Did Microsoft change Random default seed?</source>
          <target state="translated">微软更改了随机默认种子?</target>
        </trans-unit>
        <trans-unit id="cd643d993ea9cabe4f8ec728e330a9ac662f9dc1" translate="yes" xml:space="preserve">
          <source>Do you think you will get two different IDs? &lt;strong&gt;NOPE&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您认为您会得到两个不同的ID吗？&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="000c3b516fdd5bf46848fb833465e293e581b520" translate="yes" xml:space="preserve">
          <source>Even so, if you still need &lt;em&gt;true&lt;/em&gt; random numbers you will need to use an external source such as devices accounting for radioactive decay as a seed for an random number generator. Since, by definition, any number generated by purely algorithmic means cannot be truly random.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即使这样，如果您仍然需要&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真正的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;随机数，则将需要使用外部源（例如将放射性衰变考虑在内的设备）作为随机数生成器的种子。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为按照定义，通过纯算法手段生成的任何数字都不能真正是随机的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd277b3c60fa260b880a56088e6fd1c0bfe2a889" translate="yes" xml:space="preserve">
          <source>Every time you do new Random() it is initialized . This means that in a tight loop you get the same value lots of times. You should keep a single Random instance and keep using Next on the same instance.</source>
          <target state="translated">每次你做new Random()的时候,它都会被初始化。这意味着在一个紧密的循环中,你会多次得到相同的值。你应该保留一个Random实例,并在同一个实例上继续使用Next。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="a0de464d924bece4cb1d86f19d039604e3e09eb7" translate="yes" xml:space="preserve">
          <source>First thing let us understand the philosophy of RANDOMNESS.  When we tell a person to choose between RED,  GREEN and YELLOW  what happens internally. What makes a person choose RED or YELLOW or GREEN?</source>
          <target state="translated">首先,让我们了解RANDOMNESS的理念。当我们告诉一个人在红色、绿色和黄色之间选择时,内心会发生什么?是什么让一个人选择了红色、黄色或绿色?</target>
        </trans-unit>
        <trans-unit id="91f61718ccf7cffe221915d6c81af59b61d15f2f" translate="yes" xml:space="preserve">
          <source>For example a person chooses is color depending on weather and sound combination then  it would be difficult to guess the initial seed.</source>
          <target state="translated">例如,一个人选择颜色取决于天气和声音的组合,那么就很难猜到最初的种子。</target>
        </trans-unit>
        <trans-unit id="cc2fe695ec11501acd7c971d0040e8e8d078e0ab" translate="yes" xml:space="preserve">
          <source>For more information, look at the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.random.aspx&quot;&gt;Random&lt;/a&gt; class, though please note:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关更多信息，请查看&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.random.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Random&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类，但请注意：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd0651df7b6818b0b7ddeb2abd24eb3dbae37f37" translate="yes" xml:space="preserve">
          <source>For strong random seed I always use CryptoRNG and not Time.</source>
          <target state="translated">对于强随机种子,我总是用CryptoRNG而不是Time。</target>
        </trans-unit>
        <trans-unit id="14a34d527e026f228da7120e6406fda83d2caa4e" translate="yes" xml:space="preserve">
          <source>For that we need to first understand the term RANDOMNESS and the philosophy behind it.</source>
          <target state="translated">为此,我们首先需要了解 &quot;RANDOMNESS &quot;一词及其背后的哲学。</target>
        </trans-unit>
        <trans-unit id="4933758b484e55cbebdbee5ab541bc932719f289" translate="yes" xml:space="preserve">
          <source>Generate&amp;nbsp;a&amp;nbsp;random&amp;nbsp;number&amp;nbsp;between&amp;nbsp;two&amp;nbsp;numbers:</source>
          <target state="translated">Generate&amp;nbsp;a&amp;nbsp;random&amp;nbsp;number&amp;nbsp;between&amp;nbsp;two&amp;nbsp;numbers:</target>
        </trans-unit>
        <trans-unit id="d6808b4dea211debab4db5ddb89aaba3b5b2fb7f" translate="yes" xml:space="preserve">
          <source>How do I generate a random int number</source>
          <target state="translated">如何生成一个随机英特数</target>
        </trans-unit>
        <trans-unit id="b999d0f63cf6350c11407c2d5658af5f46bf2100" translate="yes" xml:space="preserve">
          <source>How do I generate a random integer in C#?</source>
          <target state="translated">如何在C#中生成一个随机整数?</target>
        </trans-unit>
        <trans-unit id="cc8bd160bec1fd804d06b9c479d8235ae42fb8d6" translate="yes" xml:space="preserve">
          <source>However, because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbers</source>
          <target state="translated">然而,由于时钟的分辨率是有限的,因此使用无参数构造函数来创建不同的Random对象,就会产生随机数生成器,产生完全相同的随机数序列</target>
        </trans-unit>
        <trans-unit id="657b84f8217cc34a138ebcc97afd64132cfc85c7" translate="yes" xml:space="preserve">
          <source>I admit I like this approach better.</source>
          <target state="translated">我承认我比较喜欢这种方法。</target>
        </trans-unit>
        <trans-unit id="600aee2b14448ed36408e4f2ad73410a93773a62" translate="yes" xml:space="preserve">
          <source>I create a random integer by parsing out the non-digits from Guid, then I use that to instantiate my Random class.</source>
          <target state="translated">我通过解析出Guid中的非数字来创建一个随机整数,然后用它来实例化我的Random类。</target>
        </trans-unit>
        <trans-unit id="89eb4d4f47b408dfe4e6736867dfa9083eb20970" translate="yes" xml:space="preserve">
          <source>I know that &lt;code&gt;new Random()&lt;/code&gt; uses the current ticks as seed, but seeding with current milliseconds is still good enough as it's good random start</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我知道&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用当前的滴答声作为种子，但是以当前毫秒作为种子仍然足够好，因为它是很好的随机开始&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7c827561f0e6766afe82f8a414c2528b9e3bb46" translate="yes" xml:space="preserve">
          <source>I use below code to have a random number:</source>
          <target state="translated">我用下面的代码,有一个随机数。</target>
        </trans-unit>
        <trans-unit id="9fa4039be56bf3b17e8752de0675e980a2aeaf29" translate="yes" xml:space="preserve">
          <source>I wanted to add a cryptographically secure version:</source>
          <target state="translated">我想增加一个密码安全的版本。</target>
        </trans-unit>
        <trans-unit id="2dfbcfc100c004a16d2c7ec0cdd546dc94364568" translate="yes" xml:space="preserve">
          <source>I wanted to demonstrate what happens when a new random generator is used every time. Suppose you have two methods or two classes each requiring a random number. And naively you code them like:</source>
          <target state="translated">我想演示一下,当每次使用新的随机数生成器会发生什么。假设你有两个方法或两个类,每个类都需要一个随机数。而你天真地把它们编码成这样。</target>
        </trans-unit>
        <trans-unit id="97c8efc53dbac76e7ec6f9f97f14bca1d93a1bd6" translate="yes" xml:space="preserve">
          <source>I will assume that you want a uniformly distributed random number generator like below. Random number in most of programming language including C# and C++ is not properly shuffled before using them. This means that you will get the same number over and over, which isn't really random.  To avoid to draw the same number over and over, you need a seed. Typically, ticks in time is ok for this task. Remember that you will get the same number over and over if you are using the same seed every time. So try to use varying seed always. Time is a good source for seed because they chage always.</source>
          <target state="translated">我会假设你想要一个像下面这样的均匀分布的随机数生成器。大多数编程语言中的随机数,包括C#和C++,在使用它们之前都没有经过适当的洗牌。这意味着你会得到相同的数字,这并不是真正的随机数。为了避免一次又一次地抽到同一个数字,你需要一个种子。通常情况下,在时间上的蜱是可以完成这个任务的。请记住,如果你每次使用相同的种子,你会得到相同的数字。所以,尽量使用不一样的种子,总是使用不一样的种子。时间是一个很好的种子来源,因为它们总是会chage。</target>
        </trans-unit>
        <trans-unit id="24d9f698a5b365733927faa7ad9e7cc8511fe788" translate="yes" xml:space="preserve">
          <source>I would encourage you to watch this video which goes in depth in the philosophy of RANDOMNESS using C# &lt;a href=&quot;https://www.youtube.com/watch?v=tCYxc-2-3fY&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我鼓励您使用C＃&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tCYxc-2-3fY&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.youtube.com/watch?v=&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tCYxc-2-3fY观看有关RANDOMNESS原理的视频。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b7445a166961ee42493efe105e6b0fb2981906a0" translate="yes" xml:space="preserve">
          <source>I've tried all of these solutions excluding the COBOL answer... lol</source>
          <target state="translated">这些方案我都试过了,但不包括COBOL的答案......lol</target>
        </trans-unit>
        <trans-unit id="9a56b42c80f29c6d879da0a45dc78c9632290c41" translate="yes" xml:space="preserve">
          <source>If you are going to create more than one random number, you should keep the &lt;code&gt;Random&lt;/code&gt; instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果要创建多个随机数，则应保留&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例并重用它。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您创建的新实例在时间上过于接近，则它们将产生与从系统时钟中植入随机生成器相同的一系列随机数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c6026511d86ffd79ee1217c6c68facc79aab6a6" translate="yes" xml:space="preserve">
          <source>If you don't have a compatible CPU to execute the code on, just use the RESTful services at rdrand.com. With the RdRandom wrapper library included in your project, you would just need to do this (you get 1000 free calls when you signup):</source>
          <target state="translated">如果你没有兼容的CPU来执行代码,只需使用rdrand.com的RESTful服务即可。如果你的项目中包含了RdRandom封装库,你只需要这样做就可以了(当你注册时,你可以获得1000个免费调用)。</target>
        </trans-unit>
        <trans-unit id="c03a7da2266af160ec11f3c447fec6ea2bd88106" translate="yes" xml:space="preserve">
          <source>If you have access to an Intel Secure Key compatible CPU, you can generate real random numbers and strings using these libraries: &lt;a href=&quot;https://github.com/JebteK/RdRand&quot;&gt;https://github.com/JebteK/RdRand&lt;/a&gt; and &lt;a href=&quot;https://www.rdrand.com/&quot;&gt;https://www.rdrand.com/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您有权访问兼容Intel Secure Key的CPU，则可以使用以下库生成实际的随机数和字符串：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/JebteK/RdRand&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/JebteK/RdRand&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.rdrand.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.rdrand.com/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e5003341a4d26ea1914881df37dd58f221f3a4e" translate="yes" xml:space="preserve">
          <source>If you want a CSRNG to generate random numbers between a min and max, this is for you. It will initialize &lt;code&gt;Random&lt;/code&gt; classes with secure random seeds.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您希望CSRNG生成介于最小值和最大值之间的随机数，那么这是给您的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用安全的随机种子&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初始化&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e58a0557465f3b74d9de4ba47ff127c6244f39e6" translate="yes" xml:space="preserve">
          <source>If you want a genuine random numbers, the randomness comes from atmospheric noise or radioactive decay.</source>
          <target state="translated">如果你想要一个真正的随机数,随机性来自于大气噪声或放射性衰变。</target>
        </trans-unit>
        <trans-unit id="845ebbb5cb755afc4e1d6dd08e1a7b08d49981e2" translate="yes" xml:space="preserve">
          <source>If you want to generate &lt;strong&gt;just one number&lt;/strong&gt; you can use:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果只想生成&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个数字&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则可以使用：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e16b65e5e21816e532ef0fad91c7c97e94524c00" translate="yes" xml:space="preserve">
          <source>If you want true random numbers, the closest we can get is &quot;secure Pseudo Random Generator&quot; which can be generated by using the Cryptographic classes in C# such as &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果您想要真正的随机数，我们可以得到的最接近的是&amp;ldquo;安全伪随机生成器&amp;rdquo;，可以使用C＃中的Cryptographic类（例如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; )&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来生成&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d92622b86c6c8d71a31f26eb389cefb92c49b6e6" translate="yes" xml:space="preserve">
          <source>If you're using .NET Core, multiple Random instances isn't as dangerous as before. I'm aware that this question is from 2010, but since this question is old but has some attraction, I think it's a good thing to document the change.</source>
          <target state="translated">如果你使用的是.NET Core,那么多个Random实例就没有以前那么危险了。我知道这个问题是2010年的,但由于这个问题已经很老了,但还是有一定的吸引力,所以我觉得记录下这个变化是件好事。</target>
        </trans-unit>
        <trans-unit id="9e316631a5dbf34f354466a3b51c349b1acf884d" translate="yes" xml:space="preserve">
          <source>It implements IDisposable.</source>
          <target state="translated">它实现了IDisposable。</target>
        </trans-unit>
        <trans-unit id="4d17f8fae74ca50296de1f5ef053f49b7bcd218d" translate="yes" xml:space="preserve">
          <source>It isn't as safe as RNGCryptoServiceProvider, but at least it won't give you weird results.</source>
          <target state="translated">它没有RNGCryptoServiceProvider那么安全,但至少不会给你带来奇怪的结果。</target>
        </trans-unit>
        <trans-unit id="c16ffd92271699f919d33b9195b6c8b6327e8a3e" translate="yes" xml:space="preserve">
          <source>It's all about the seed.</source>
          <target state="translated">这一切都与种子有关。</target>
        </trans-unit>
        <trans-unit id="6d82ab8d0ed31cfa1bbd270f6a89e3f5a07a0407" translate="yes" xml:space="preserve">
          <source>Just as a note for future reference.</source>
          <target state="translated">只是作为日后的备注,供大家参考。</target>
        </trans-unit>
        <trans-unit id="9d57b4aabeb87d48b2682cc1c170e8693fa14d1b" translate="yes" xml:space="preserve">
          <source>Just download the latest version from &lt;a href=&quot;https://github.com/JebteK/RdRand/tree/master/Versions&quot;&gt;here&lt;/a&gt;, include Jebtek.RdRand and add a using statement for it. Then, all you need to do is this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只需从&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/JebteK/RdRand/tree/master/Versions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此处&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下载最新版本&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，包括Jebtek.RdRand并为其添加using语句即可。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;然后，您需要做的就是：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11f2406ae7e9be7e75d5bbf29b9e80e8f2c3be07" translate="yes" xml:space="preserve">
          <source>Modified answer from &lt;a href=&quot;https://stackoverflow.com/questions/1122483/random-string-generator-returning-same-string/22801467#22801467&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1122483/random-string-generator-returning-same-string/22801467#22801467&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;修改答案&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd8fd26858ebf880483637a8b30da453c296c0a7" translate="yes" xml:space="preserve">
          <source>None of these solutions were good enough. I needed randoms in a fast for int loop and I was getting tons of duplicate values even in very wide ranges. After settling for kind of random results far too long I decided to finally tackle this problem once and for all.</source>
          <target state="translated">这些解决方案都不够好。我需要在一个快速的for int循环中的随机值,即使在很宽的范围内,我也会得到大量的重复值。在满足于随机的结果太久之后,我终于决定一劳永逸地解决这个问题。</target>
        </trans-unit>
        <trans-unit id="adea012617b70cb36e91dcc3a9ab4c6583acd88a" translate="yes" xml:space="preserve">
          <source>Now if a SEED is easy to guess then those kind of random numbers are termed as &lt;strong&gt;PSEUDO&lt;/strong&gt; and when a seed is difficult to guess those random numbers are termed  &lt;strong&gt;SECURED&lt;/strong&gt; random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，如果易于猜测SEED，则将这些随机数称为&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PSEUDO，&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而当难以猜测种子时，将这些随机数称为 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SECURED&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;随机数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f662949cab7c85ae6c402eaa2c08e8a6fe308723" translate="yes" xml:space="preserve">
          <source>Now let me make an important statement:-</source>
          <target state="translated">现在让我做一个重要的发言:</target>
        </trans-unit>
        <trans-unit id="b63ac707583f25e358154ecf161117fb407159b9" translate="yes" xml:space="preserve">
          <source>Numbers calculated by a computer through a deterministic process, cannot, by definition, be random.</source>
          <target state="translated">由计算机通过确定性过程计算出来的数字,根据定义,不可能是随机的。</target>
        </trans-unit>
        <trans-unit id="67885541bf071860413e01f7eec977b0cb1d98f8" translate="yes" xml:space="preserve">
          <source>Put whatever values you want in the second parentheses
make sure you have set a name by writing prop and double tab to generate the code</source>
          <target state="translated">在第二个括号里放上你想要的任何值,确保你已经设置了一个名字,通过写prop和双击选项卡来生成代码。</target>
        </trans-unit>
        <trans-unit id="57e50da763a9ce7c172ccdfa270ca1991015489f" translate="yes" xml:space="preserve">
          <source>Quick and easy for inline,  use bellow code:</source>
          <target state="translated">方便快捷的内联,使用波尔码。</target>
        </trans-unit>
        <trans-unit id="af47ed3c7279d1e329a5ba072f293ed73a110e35" translate="yes" xml:space="preserve">
          <source>RNGCryptoServiceProvider Class (&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx&quot;&gt;MSDN&lt;/a&gt; or &lt;a href=&quot;http://www.dotnetperls.com/rngcryptoserviceprovider&quot;&gt;dotnetperls&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RNGCryptoServiceProvider类（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDN&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.dotnetperls.com/rngcryptoserviceprovider&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dotnetperls&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d6fadd181fdc6dade6e5be3573d65e7fe197aaa" translate="yes" xml:space="preserve">
          <source>Random Gaussian Variables</source>
          <target state="translated">随机高斯变量</target>
        </trans-unit>
        <trans-unit id="e934863708dea8227b8a4d06802b44f45850a9ec" translate="yes" xml:space="preserve">
          <source>Random class takes seed values from your CPU clock which is very much predictable.  So in other words RANDOM class of C# generates pseudo random numbers , below is the code for the same.</source>
          <target state="translated">Random类从CPU时钟中提取种子值,这是很容易预测的。所以换句话说,C#的RANDOM类可以生成伪随机数,下面是同样的代码。</target>
        </trans-unit>
        <trans-unit id="badbd5bc702da6da698381ad8a7daa27b1ba4532" translate="yes" xml:space="preserve">
          <source>So do not use this code to generate a series of random number.</source>
          <target state="translated">所以不要用这个代码来生成一系列的随机数。</target>
        </trans-unit>
        <trans-unit id="f5d65164e2ce6bed3dbd896506d92147f55ff27f" translate="yes" xml:space="preserve">
          <source>So if i want my random number to be between say 5 and 15, I'd just do</source>
          <target state="translated">所以,如果我想让我的随机数在5到15之间,我只需要做一个</target>
        </trans-unit>
        <trans-unit id="1ea2b1ee6be444bf6d62acd4cf8b2204954cdb9d" translate="yes" xml:space="preserve">
          <source>Some initial thought goes into the persons mind which decides his choice, it can be favorite color , lucky color and so on. In other words some initial trigger which we term in RANDOM as SEED.This SEED is the beginning point, the trigger which instigates him to select the RANDOM value.</source>
          <target state="translated">在人的脑海中会有一些最初的想法,决定了他的选择,可以是喜欢的颜色,幸运的颜色等等。换句话说,我们把RANDOM中的一些初始触发器称为SEED.这个SEED就是起始点,是促使他选择RANDOM值的触发器。</target>
        </trans-unit>
        <trans-unit id="c9348fb85574dfcc3419b015a40e3fc581abf85a" translate="yes" xml:space="preserve">
          <source>Sorry, OP indeed requires a random &lt;strong&gt;&lt;code&gt;int&lt;/code&gt;&lt;/strong&gt; value, but for the simple purpose to share knowledge if you want a random &lt;code&gt;BigInteger&lt;/code&gt; value you can use following statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;抱歉，OP确实需要一个随机的&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;int&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值，但是出于共享知识的简单目的，如果您想要一个随机的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值，可以使用以下语句：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cab5112bdd9645675d42bf5bd63a93216d88479" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random&quot;&gt;&lt;code&gt;Random&lt;/code&gt; class&lt;/a&gt; is used to create random numbers. (Pseudo-random that is of course.).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于创建随机数。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（当然是伪随机的。）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6cabb5af38e2ec6490ce9bad1d7be38825dd4b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Next()&lt;/code&gt; method accepts two parameters, min and max.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Next()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法接受两个参数，最小和最大。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dbeec0ee81562b0b9d42d05f4af1fd3df72b27f9" translate="yes" xml:space="preserve">
          <source>The easiest way is probably just &lt;code&gt;Random.range(1, 3)&lt;/code&gt; This would generate a number between 1 and 2.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最简单的方法可能只是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random.range(1, 3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这将生成一个介于1和2之间的数字。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08ed9ebb451c315c636ab7f2c8314eab9b937d9c" translate="yes" xml:space="preserve">
          <source>The following code returns a random number between the min and the max range.</source>
          <target state="translated">下面的代码返回一个介于最小和最大范围之间的随机数。</target>
        </trans-unit>
        <trans-unit id="ee55843082eefd6fde2b0929ab69e940494c85ca" translate="yes" xml:space="preserve">
          <source>The following code returns a random number less than 1000.&amp;nbsp;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下代码返回小于1000的随机数。&amp;nbsp;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3b8a685a187f50815e1e0e93e3c181d090bbcd2" translate="yes" xml:space="preserve">
          <source>The following code returns a random number.&amp;nbsp;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下代码返回一个随机数。&amp;nbsp;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="397254fb1b911cd7c8ad4be30a5aac897bf136a9" translate="yes" xml:space="preserve">
          <source>The last remaining point is that you don't have to initialize &lt;code&gt;new Random()&lt;/code&gt; every time you need a random number, initiate one Random object then use it as many times as you need inside a loop or whatever</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最后剩下的一点是，您不必在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;每次需要一个随机数时&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;都初始化&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可以启动一个Random对象，然后在循环内或其他任意次数中使用它多次&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e341760257d154970a268e8b1c7f6c64c168d6b" translate="yes" xml:space="preserve">
          <source>The numbers generated by the inbuilt &lt;code&gt;Random&lt;/code&gt; class (System.Random) generates pseudo random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内置的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类（System.Random）生成的数字生成伪随机数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="416de5409476abc0bc380a0a56b156bac127131e" translate="yes" xml:space="preserve">
          <source>The question looks very simple but the answer is  bit complicated. If you see almost everyone has suggested to use the Random class and some have suggested to use the RNG crypto class. But then when to choose what.</source>
          <target state="translated">这个问题看起来很简单,但是答案有点复杂。如果你看到几乎所有人都建议使用Random类,也有人建议使用RNG crypto类。但是,那么什么时候选择什么。</target>
        </trans-unit>
        <trans-unit id="ea44102c483cbb9c8ac1fcff0b08b1765650506d" translate="yes" xml:space="preserve">
          <source>The solution is to &lt;em&gt;always&lt;/em&gt; use a single static random generator. Like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决方案是&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;始终&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用单个静态随机生成器。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;像这样：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49d65d6e727bc704368a3e03ebcc9cb4ec054b5d" translate="yes" xml:space="preserve">
          <source>Then you can use the static class like so..</source>
          <target state="translated">那么你可以像这样使用静态类。</target>
        </trans-unit>
        <trans-unit id="c2819086a92482f65d859bf2454b2e5d8390a2e4" translate="yes" xml:space="preserve">
          <source>This article takes a look at why randomness causes so many problems, and how to address them.
&lt;a href=&quot;http://csharpindepth.com/Articles/Chapter12/Random.aspx&quot;&gt;http://csharpindepth.com/Articles/Chapter12/Random.aspx&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;本文探讨了为什么随机性会导致许多问题，以及如何解决这些问题。 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://csharpindepth.com/Articles/Chapter12/Random.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://csharpindepth.com/Articles/Chapter12/Random.aspx&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cb8ec48f3641b82fded0bcb4b8605c9b8b8fb23" translate="yes" xml:space="preserve">
          <source>This is the class I use. Works like &lt;code&gt;RandomNumber.GenerateRandom(1, 666)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是我使用的课程。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类似于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RandomNumber.GenerateRandom(1, 666)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c1b99191f450509971d7f63ef91cd34d791c6d7" translate="yes" xml:space="preserve">
          <source>To understand OS entropy see this video from 14:30 &lt;a href=&quot;https://youtu.be/tCYxc-2-3fY?t=14m31s&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/a&gt; where the logic of OS entropy is explained. So putting in simple words RNG Crypto generates SECURE random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;要了解OS熵，请观看14:30 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://youtu.be/tCYxc-2-3fY?t=14m31s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;视频，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中解释了OS熵的逻辑。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，简单来说，RNG Crypto会生成SECURE随机数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf1b382618e5a297cf248083442d837bc36c17ae" translate="yes" xml:space="preserve">
          <source>Try these simple steps to create random numbers:</source>
          <target state="translated">试试这些简单的步骤来创建随机数字。</target>
        </trans-unit>
        <trans-unit id="4e00736dfa84fe21aee5428e9e7b4473806c7994" translate="yes" xml:space="preserve">
          <source>Use one instance of Random repeatedly</source>
          <target state="translated">重复使用一个Random的实例</target>
        </trans-unit>
        <trans-unit id="ce392fdbf5bb24e36d98f7452cae0678e096b1e8" translate="yes" xml:space="preserve">
          <source>Use the above function in a location where you want to use random numbers. Suppose you want to use it in a text box.</source>
          <target state="translated">在你想使用随机数的位置使用上述函数。假设你想在一个文本框中使用它。</target>
        </trans-unit>
        <trans-unit id="c35334a8ed6b5df94821b6dac1953c6263726d0c" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; class uses OS entropy to generate seeds. OS entropy is a random value which is generated using sound, mouse click, and keyboard timings, thermal temp etc. Below goes the code for the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类使用OS熵来生成种子。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OS熵是一个随机值，它是使用声音，鼠标单击，键盘定时，温度温度等生成的。下面是相同的代码。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27f0ffb3a8fc45ac741347e830f419dc71f5b45c" translate="yes" xml:space="preserve">
          <source>While this is okay:</source>
          <target state="translated">虽然这还可以。</target>
        </trans-unit>
        <trans-unit id="6b7b100c58ff8d646e1c196adcca06650862ca99" translate="yes" xml:space="preserve">
          <source>Why not use &lt;code&gt;int randomNumber = Random.Range(start_range, end_range)&lt;/code&gt; ?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为什么不使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int randomNumber = Random.Range(start_range, end_range)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5d4888f40fd48d603d3340296bf8d14a288bc88" translate="yes" xml:space="preserve">
          <source>You can see the file diffs from .NET Framework/.NET Core (2.0.0+) here: &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&quot;&gt;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以在此处查看来自.NET Framework / .NET Core（2.0.0+）的文件差异：&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eafcea8f499cb8c50e2821247665cab3bf4454fa" translate="yes" xml:space="preserve">
          <source>You can try for example RANDOM.ORG (it reduces performance)</source>
          <target state="translated">你可以尝试例如RANDOM.ORG(它可以降低性能)。</target>
        </trans-unit>
        <trans-unit id="493cea7633f189ea4266cbd2a5fcdbb4322f376a" translate="yes" xml:space="preserve">
          <source>You can try with random seed value using below:</source>
          <target state="translated">你可以使用下面的随机种子值进行尝试。</target>
        </trans-unit>
        <trans-unit id="31a00fb08535456058a3521283a0215f6ef0322b" translate="yes" xml:space="preserve">
          <source>You could use Jon Skeet's &lt;a href=&quot;https://jonskeet.uk/csharp/miscutil/&quot;&gt;StaticRandom&lt;/a&gt; method inside the MiscUtil class library that he built for a pseudo-random number.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在他为伪随机数构建的MiscUtil类库中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用Jon Skeet的&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/csharp/miscutil/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;StaticRandom&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462416f2d6b94075bd6ab7454309200f747e9da0" translate="yes" xml:space="preserve">
          <source>You may refer to this question I made a while back:</source>
          <target state="translated">大家可以参考一下我前段时间提出的这个问题。</target>
        </trans-unit>
        <trans-unit id="3d2b2be4bad21cd04b226e437100364a3af1e446" translate="yes" xml:space="preserve">
          <source>You'd want to control the limit (min and max mumbers) most of the time. So you need to specify where the random number starts and ends.</source>
          <target state="translated">大多数时候,你会想控制限制(最小和最大数字)。所以,你需要指定随机数的开始和结束位置。</target>
        </trans-unit>
        <trans-unit id="4d88f6ddfd27a70e9f5ccae97c14c6c5a5134669" translate="yes" xml:space="preserve">
          <source>if you are looking for random number generator for normal distribution, you might use a Box-Muller transformation. Check the answer by yoyoyoyosef in Random Gaussian Variable Question. Since you want integer, you have to cast double value to integer at the end.</source>
          <target state="translated">如果你在寻找正态分布的随机数生成器,你可以使用Box-Muller变换。由yoyoyoyoyosef在随机高斯变量问题中的回答。因为你要的是整数,所以在最后要把双倍值铸成整数。</target>
        </trans-unit>
        <trans-unit id="eb46f8927c27355615a5cfd60c095088a598bb46" translate="yes" xml:space="preserve">
          <source>it's better to seed the Random object with current milliseconds, to ensure true random number, and you almost won't find duplicates using it many times</source>
          <target state="translated">最好是用当前毫秒数作为Random对象的种子,这样可以保证真正的随机数,而且使用多次几乎不会发现重复的情况。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
