<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2706500">
    <body>
      <group id="2706500">
        <trans-unit id="abbfd7d47daef7f82ce3af11fcf364c37711cae6" translate="yes" xml:space="preserve">
          <source>*&amp;ldquo;Random&amp;rdquo; class generates only PSEUDO random number and to generate SECURE random number we need to use &amp;ldquo;RNGCryptoServiceProvider&amp;rdquo; class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*「ランダム」クラスはPSEUDO乱数のみを生成し、SECURE乱数を生成するには、「RNGCryptoServiceProvider」クラスを使用する必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ea162270b297e6ccccf3f1f69a8dabd04b8fb5e5" translate="yes" xml:space="preserve">
          <source>**Note: ** &lt;code&gt;.NET Core 2.0.0+&lt;/code&gt; uses a different seed on the parameterless constructor: instead of CPU clock it uses &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;**注：** &lt;/font&gt;&lt;/font&gt; &lt;code&gt;.NET Core 2.0.0+&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、パラメーターなしのコンストラクターで別のシードを使用します。CPUクロックの代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b04a50a0b5d0291aad88037c97598657c9e5753" translate="yes" xml:space="preserve">
          <source>0 is min and 999 is max. You can change the values to whatever you want.</source>
          <target state="translated">0が最小値、999が最大値です。値は好きなように変更することができます。</target>
        </trans-unit>
        <trans-unit id="d80e78c095e57fa4cf82545a7129711a51ed8f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create function:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数を作成します。&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="200627b0eb37efd54845f9a6bd7c0133da5e8d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2df4f7c53f783bffe74641c08bb66c84262ed5a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;: Seeding isn't necessary if you instantiate the Random class once. So it'd be best to create a static class and call a method off that.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更新&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：Randomクラスを1回インスタンス化する場合、シードは必要ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、静的クラスを作成し、それからメソッドを呼び出すのが最善です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d864ad92158e75560283cbf8a0ccdc7be229694b" translate="yes" xml:space="preserve">
          <source>Basically, they have changed the default seed from &lt;code&gt;Environment.TickCount&lt;/code&gt; to &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt;, so if you create 2 instances of Random it won't display the same numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基本的に、それらはデフォルトのシードを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Environment.TickCount&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Guid.NewGuid().GetHashCode()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に変更したため、Randomの2つのインスタンスを作成すると、同じ番号が表示されません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cbdc6f9a0e482ca7c8fee312c4ea18cd47525001" translate="yes" xml:space="preserve">
          <source>Beware that &lt;code&gt;new Random()&lt;/code&gt; is seeded on current timestamp.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が現在のタイムスタンプにシードさ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れることに注意してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="226e9e35bac38a237adfecca37311e06945bd9a7" translate="yes" xml:space="preserve">
          <source>Did Microsoft change Random default seed?</source>
          <target state="translated">マイクロソフトはランダムのデフォルトシードを変更したのか?</target>
        </trans-unit>
        <trans-unit id="cd643d993ea9cabe4f8ec728e330a9ac662f9dc1" translate="yes" xml:space="preserve">
          <source>Do you think you will get two different IDs? &lt;strong&gt;NOPE&lt;/strong&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;2つの異なるIDを取得すると思いますか？&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;いいえ&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="000c3b516fdd5bf46848fb833465e293e581b520" translate="yes" xml:space="preserve">
          <source>Even so, if you still need &lt;em&gt;true&lt;/em&gt; random numbers you will need to use an external source such as devices accounting for radioactive decay as a seed for an random number generator. Since, by definition, any number generated by purely algorithmic means cannot be truly random.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それでも、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真の&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;乱数が必要な場合は、乱数発生器のシードとして放射性崩壊を説明するデバイスなどの外部ソースを使用する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定義により、純粋にアルゴリズム的な手段で生成された数値は真にランダムになることはありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd277b3c60fa260b880a56088e6fd1c0bfe2a889" translate="yes" xml:space="preserve">
          <source>Every time you do new Random() it is initialized . This means that in a tight loop you get the same value lots of times. You should keep a single Random instance and keep using Next on the same instance.</source>
          <target state="translated">新しい Random()を実行するたびに初期化されます。これは、タイトなループの中で何度も同じ値を取得することを意味します。Random のインスタンスは 1 つだけにしておき、同じインスタンスで Next を使い続ける必要があります。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="a0de464d924bece4cb1d86f19d039604e3e09eb7" translate="yes" xml:space="preserve">
          <source>First thing let us understand the philosophy of RANDOMNESS.  When we tell a person to choose between RED,  GREEN and YELLOW  what happens internally. What makes a person choose RED or YELLOW or GREEN?</source>
          <target state="translated">まず、RANDOMNESSの哲学を理解しよう。人に「赤」「緑」「緑」「黄色」の3色から選べと言った時、人の内部では何が起こるのか?人は何をもってREDかYELLOWかGREENかを選択するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="91f61718ccf7cffe221915d6c81af59b61d15f2f" translate="yes" xml:space="preserve">
          <source>For example a person chooses is color depending on weather and sound combination then  it would be difficult to guess the initial seed.</source>
          <target state="translated">例えば、天候や音の組み合わせによって人が選ぶ色は、初期の種を推測するのは難しいでしょう。</target>
        </trans-unit>
        <trans-unit id="cc2fe695ec11501acd7c971d0040e8e8d078e0ab" translate="yes" xml:space="preserve">
          <source>For more information, look at the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.random.aspx&quot;&gt;Random&lt;/a&gt; class, though please note:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;詳細については、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.random.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Random&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスを参照してください。ただし、次の点に注意してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cd0651df7b6818b0b7ddeb2abd24eb3dbae37f37" translate="yes" xml:space="preserve">
          <source>For strong random seed I always use CryptoRNG and not Time.</source>
          <target state="translated">強力なランダムシードのために、私はいつもTimeではなくCryptoRNGを使用しています。</target>
        </trans-unit>
        <trans-unit id="14a34d527e026f228da7120e6406fda83d2caa4e" translate="yes" xml:space="preserve">
          <source>For that we need to first understand the term RANDOMNESS and the philosophy behind it.</source>
          <target state="translated">そのためには、まずRANDOMNESSという言葉とその背景にある哲学を理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="4933758b484e55cbebdbee5ab541bc932719f289" translate="yes" xml:space="preserve">
          <source>Generate&amp;nbsp;a&amp;nbsp;random&amp;nbsp;number&amp;nbsp;between&amp;nbsp;two&amp;nbsp;numbers:</source>
          <target state="translated">Generate&amp;nbsp;a&amp;nbsp;random&amp;nbsp;number&amp;nbsp;between&amp;nbsp;two&amp;nbsp;numbers:</target>
        </trans-unit>
        <trans-unit id="d6808b4dea211debab4db5ddb89aaba3b5b2fb7f" translate="yes" xml:space="preserve">
          <source>How do I generate a random int number</source>
          <target state="translated">乱数のint数を生成するには</target>
        </trans-unit>
        <trans-unit id="b999d0f63cf6350c11407c2d5658af5f46bf2100" translate="yes" xml:space="preserve">
          <source>How do I generate a random integer in C#?</source>
          <target state="translated">C#で乱数整数を生成するには?</target>
        </trans-unit>
        <trans-unit id="cc8bd160bec1fd804d06b9c479d8235ae42fb8d6" translate="yes" xml:space="preserve">
          <source>However, because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbers</source>
          <target state="translated">しかし、クロックの分解能は有限であるため、パラメータレスのコンストラクタを使用して異なるランダムオブジェクトを連続して作成すると、同一の乱数シーケンスを生成する乱数ジェネレータが作成されます。</target>
        </trans-unit>
        <trans-unit id="657b84f8217cc34a138ebcc97afd64132cfc85c7" translate="yes" xml:space="preserve">
          <source>I admit I like this approach better.</source>
          <target state="translated">このアプローチの方が好きなのは認める</target>
        </trans-unit>
        <trans-unit id="600aee2b14448ed36408e4f2ad73410a93773a62" translate="yes" xml:space="preserve">
          <source>I create a random integer by parsing out the non-digits from Guid, then I use that to instantiate my Random class.</source>
          <target state="translated">Guid から非桁数を解析して乱数整数を作成し、それを使って Random クラスのインスタンスを作成しています。</target>
        </trans-unit>
        <trans-unit id="89eb4d4f47b408dfe4e6736867dfa9083eb20970" translate="yes" xml:space="preserve">
          <source>I know that &lt;code&gt;new Random()&lt;/code&gt; uses the current ticks as seed, but seeding with current milliseconds is still good enough as it's good random start</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は現在のティックをシードとして使用する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことを知ってい&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますが、現在のミリ秒でシードすることは、ランダムスタートとして優れているため、依然として十分です&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f7c827561f0e6766afe82f8a414c2528b9e3bb46" translate="yes" xml:space="preserve">
          <source>I use below code to have a random number:</source>
          <target state="translated">私は以下のコードを使って、乱数を持っています。</target>
        </trans-unit>
        <trans-unit id="9fa4039be56bf3b17e8752de0675e980a2aeaf29" translate="yes" xml:space="preserve">
          <source>I wanted to add a cryptographically secure version:</source>
          <target state="translated">暗号化して安全なバージョンを追加したかった。</target>
        </trans-unit>
        <trans-unit id="2dfbcfc100c004a16d2c7ec0cdd546dc94364568" translate="yes" xml:space="preserve">
          <source>I wanted to demonstrate what happens when a new random generator is used every time. Suppose you have two methods or two classes each requiring a random number. And naively you code them like:</source>
          <target state="translated">毎回新しい乱数発生器が使われるとどうなるかを実演してみたいと思いました。2つのメソッドや2つのクラスがあり、それぞれが乱数を必要としているとします。そして、素朴な気持ちでそれらをコード化したとします。</target>
        </trans-unit>
        <trans-unit id="97c8efc53dbac76e7ec6f9f97f14bca1d93a1bd6" translate="yes" xml:space="preserve">
          <source>I will assume that you want a uniformly distributed random number generator like below. Random number in most of programming language including C# and C++ is not properly shuffled before using them. This means that you will get the same number over and over, which isn't really random.  To avoid to draw the same number over and over, you need a seed. Typically, ticks in time is ok for this task. Remember that you will get the same number over and over if you are using the same seed every time. So try to use varying seed always. Time is a good source for seed because they chage always.</source>
          <target state="translated">以下のような一様分布の乱数発生器が欲しい場合を想定します。C#やC++を含むほとんどのプログラミング言語の乱数は、それらを使う前に適切にシャッフルされていません。これは、何度も同じ数字が出てくることを意味しており、これは本当にランダムではありません。何度も同じ数字を描画しないようにするには、シードが必要です。一般的に、時間の刻みはこのタスクのためにOKです。毎回同じ種を使っていると、同じ数字が何度も何度も出てくることを覚えておいてください。だから、常に変化するシードを使用するようにしてください。彼らは常にchageするので、時間はシードのための良いソースです。</target>
        </trans-unit>
        <trans-unit id="24d9f698a5b365733927faa7ad9e7cc8511fe788" translate="yes" xml:space="preserve">
          <source>I would encourage you to watch this video which goes in depth in the philosophy of RANDOMNESS using C# &lt;a href=&quot;https://www.youtube.com/watch?v=tCYxc-2-3fY&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃&lt;/font&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tCYxc-2-3fY&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.youtube.com/watch?v=&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tCYxc-2-3fYを使用して、RANDOMNESSの哲学をさらに詳しく説明したこの動画を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ご覧&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;になることをお勧めします&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b7445a166961ee42493efe105e6b0fb2981906a0" translate="yes" xml:space="preserve">
          <source>I've tried all of these solutions excluding the COBOL answer... lol</source>
          <target state="translated">COBOLの答え以外は全部試してみましたが...笑</target>
        </trans-unit>
        <trans-unit id="9a56b42c80f29c6d879da0a45dc78c9632290c41" translate="yes" xml:space="preserve">
          <source>If you are going to create more than one random number, you should keep the &lt;code&gt;Random&lt;/code&gt; instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複数の乱数を作成する場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;インスタンスを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保持して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;再利用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する必要があり&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しいインスタンスを作成するタイミングが近すぎる場合、ランダムジェネレーターがシステムクロックからシードされるのと同じ一連の乱数が生成されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7c6026511d86ffd79ee1217c6c68facc79aab6a6" translate="yes" xml:space="preserve">
          <source>If you don't have a compatible CPU to execute the code on, just use the RESTful services at rdrand.com. With the RdRandom wrapper library included in your project, you would just need to do this (you get 1000 free calls when you signup):</source>
          <target state="translated">互換性のある CPU がない場合は、rdrand.com の RESTful サービスを利用してください。プロジェクトにRdRandomラッパーライブラリが含まれている場合は、これを実行するだけでよいでしょう (サインアップすると1000回の無料コールが得られます)。</target>
        </trans-unit>
        <trans-unit id="c03a7da2266af160ec11f3c447fec6ea2bd88106" translate="yes" xml:space="preserve">
          <source>If you have access to an Intel Secure Key compatible CPU, you can generate real random numbers and strings using these libraries: &lt;a href=&quot;https://github.com/JebteK/RdRand&quot;&gt;https://github.com/JebteK/RdRand&lt;/a&gt; and &lt;a href=&quot;https://www.rdrand.com/&quot;&gt;https://www.rdrand.com/&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Intel Secure Key互換のCPUにアクセスできる場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;a href=&quot;https://www.rdrand.com/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/JebteK/RdRand&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/JebteK/RdRand&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.rdrand.com/の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ライブラリを使用して、実際の乱数と文字列を生成でき&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3e5003341a4d26ea1914881df37dd58f221f3a4e" translate="yes" xml:space="preserve">
          <source>If you want a CSRNG to generate random numbers between a min and max, this is for you. It will initialize &lt;code&gt;Random&lt;/code&gt; classes with secure random seeds.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;CSRNGで最小値と最大値の間の乱数を生成したい場合は、これが最適です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;安全なランダムシードで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;初期化します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e58a0557465f3b74d9de4ba47ff127c6244f39e6" translate="yes" xml:space="preserve">
          <source>If you want a genuine random numbers, the randomness comes from atmospheric noise or radioactive decay.</source>
          <target state="translated">本物の乱数を求めるなら、乱数は大気中のノイズや放射能の減衰から来ています。</target>
        </trans-unit>
        <trans-unit id="845ebbb5cb755afc4e1d6dd08e1a7b08d49981e2" translate="yes" xml:space="preserve">
          <source>If you want to generate &lt;strong&gt;just one number&lt;/strong&gt; you can use:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたが&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;1つだけの数&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を生成したいなら、あなた&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は使うことができます：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e16b65e5e21816e532ef0fad91c7c97e94524c00" translate="yes" xml:space="preserve">
          <source>If you want true random numbers, the closest we can get is &quot;secure Pseudo Random Generator&quot; which can be generated by using the Cryptographic classes in C# such as &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;真の乱数が必要な場合、取得できる最も近いのは「安全な疑似ランダムジェネレーター」で、これは&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのC＃の暗号化クラスを使用して生成できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d92622b86c6c8d71a31f26eb389cefb92c49b6e6" translate="yes" xml:space="preserve">
          <source>If you're using .NET Core, multiple Random instances isn't as dangerous as before. I'm aware that this question is from 2010, but since this question is old but has some attraction, I think it's a good thing to document the change.</source>
          <target state="translated">.NET Coreを使っているのであれば、複数のRandomインスタンスは以前ほど危険ではありません。2010年の質問であることは承知していますが、この質問は古くても魅力があるので、変更点を文書化しておくのは良いことだと思います。</target>
        </trans-unit>
        <trans-unit id="9e316631a5dbf34f354466a3b51c349b1acf884d" translate="yes" xml:space="preserve">
          <source>It implements IDisposable.</source>
          <target state="translated">IDisposableを実装しています。</target>
        </trans-unit>
        <trans-unit id="4d17f8fae74ca50296de1f5ef053f49b7bcd218d" translate="yes" xml:space="preserve">
          <source>It isn't as safe as RNGCryptoServiceProvider, but at least it won't give you weird results.</source>
          <target state="translated">RNGCryptoServiceProviderほど安全ではありませんが、少なくとも変な結果が出ることはありません。</target>
        </trans-unit>
        <trans-unit id="c16ffd92271699f919d33b9195b6c8b6327e8a3e" translate="yes" xml:space="preserve">
          <source>It's all about the seed.</source>
          <target state="translated">全ては種の問題です。</target>
        </trans-unit>
        <trans-unit id="6d82ab8d0ed31cfa1bbd270f6a89e3f5a07a0407" translate="yes" xml:space="preserve">
          <source>Just as a note for future reference.</source>
          <target state="translated">ただ、今後の参考のためのメモとして。</target>
        </trans-unit>
        <trans-unit id="9d57b4aabeb87d48b2682cc1c170e8693fa14d1b" translate="yes" xml:space="preserve">
          <source>Just download the latest version from &lt;a href=&quot;https://github.com/JebteK/RdRand/tree/master/Versions&quot;&gt;here&lt;/a&gt;, include Jebtek.RdRand and add a using statement for it. Then, all you need to do is this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/JebteK/RdRand/tree/master/Versions&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;こちら&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から最新バージョンをダウンロードし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jebtek.RdRandをインクルードして、usingステートメントを追加してください。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次に、あなたがする必要があるのはこれです：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11f2406ae7e9be7e75d5bbf29b9e80e8f2c3be07" translate="yes" xml:space="preserve">
          <source>Modified answer from &lt;a href=&quot;https://stackoverflow.com/questions/1122483/random-string-generator-returning-same-string/22801467#22801467&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1122483/random-string-generator-returning-same-string/22801467#22801467&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここ&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からの修正回答&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dd8fd26858ebf880483637a8b30da453c296c0a7" translate="yes" xml:space="preserve">
          <source>None of these solutions were good enough. I needed randoms in a fast for int loop and I was getting tons of duplicate values even in very wide ranges. After settling for kind of random results far too long I decided to finally tackle this problem once and for all.</source>
          <target state="translated">これらの解決策はどれも十分ではありませんでした。私は高速な int ループのためのランダムな値が必要で、非常に広い範囲でも大量の重複した値を取得していました。あまりにも長い間、ランダムな結果に満足していた私は、最後にこの問題に取り組むことにしました。</target>
        </trans-unit>
        <trans-unit id="adea012617b70cb36e91dcc3a9ab4c6583acd88a" translate="yes" xml:space="preserve">
          <source>Now if a SEED is easy to guess then those kind of random numbers are termed as &lt;strong&gt;PSEUDO&lt;/strong&gt; and when a seed is difficult to guess those random numbers are termed  &lt;strong&gt;SECURED&lt;/strong&gt; random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;今、SEEDは、ランダムな数字のものと種類は次のように呼ばれている推測しやすい場合&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PSEUDO&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;とするとき、シードは、それらの乱数を推測することは困難であると呼ばれている &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;SECURED&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;乱数を。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f662949cab7c85ae6c402eaa2c08e8a6fe308723" translate="yes" xml:space="preserve">
          <source>Now let me make an important statement:-</source>
          <target state="translated">さて、重要な発言をさせてください。</target>
        </trans-unit>
        <trans-unit id="b63ac707583f25e358154ecf161117fb407159b9" translate="yes" xml:space="preserve">
          <source>Numbers calculated by a computer through a deterministic process, cannot, by definition, be random.</source>
          <target state="translated">決定論的なプロセスを介してコンピュータによって計算された数字は、定義によって、ランダムであることはできません。</target>
        </trans-unit>
        <trans-unit id="67885541bf071860413e01f7eec977b0cb1d98f8" translate="yes" xml:space="preserve">
          <source>Put whatever values you want in the second parentheses
make sure you have set a name by writing prop and double tab to generate the code</source>
          <target state="translated">2番目のカッコの中に好きな値を入れて、propを書いて名前を設定していることを確認し、コードを生成するためにダブルタブします。</target>
        </trans-unit>
        <trans-unit id="57e50da763a9ce7c172ccdfa270ca1991015489f" translate="yes" xml:space="preserve">
          <source>Quick and easy for inline,  use bellow code:</source>
          <target state="translated">インラインのための迅速かつ簡単な、ベローコードを使用してください。</target>
        </trans-unit>
        <trans-unit id="af47ed3c7279d1e329a5ba072f293ed73a110e35" translate="yes" xml:space="preserve">
          <source>RNGCryptoServiceProvider Class (&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx&quot;&gt;MSDN&lt;/a&gt; or &lt;a href=&quot;http://www.dotnetperls.com/rngcryptoserviceprovider&quot;&gt;dotnetperls&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;RNGCryptoServiceProviderクラス（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;MSDN&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.dotnetperls.com/rngcryptoserviceprovider&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dotnetperls&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9d6fadd181fdc6dade6e5be3573d65e7fe197aaa" translate="yes" xml:space="preserve">
          <source>Random Gaussian Variables</source>
          <target state="translated">ランダムガウス変数</target>
        </trans-unit>
        <trans-unit id="e934863708dea8227b8a4d06802b44f45850a9ec" translate="yes" xml:space="preserve">
          <source>Random class takes seed values from your CPU clock which is very much predictable.  So in other words RANDOM class of C# generates pseudo random numbers , below is the code for the same.</source>
          <target state="translated">RANDOMクラスは、CPUのクロックからシード値を取得しますが、これは非常に予測可能です。つまり、C#のRANDOMクラスは擬似乱数を生成します。</target>
        </trans-unit>
        <trans-unit id="badbd5bc702da6da698381ad8a7daa27b1ba4532" translate="yes" xml:space="preserve">
          <source>So do not use this code to generate a series of random number.</source>
          <target state="translated">そのため、このコードを使って乱数の系列を生成してはいけません。</target>
        </trans-unit>
        <trans-unit id="f5d65164e2ce6bed3dbd896506d92147f55ff27f" translate="yes" xml:space="preserve">
          <source>So if i want my random number to be between say 5 and 15, I'd just do</source>
          <target state="translated">もし乱数が5から15の間になるようにしたい場合は</target>
        </trans-unit>
        <trans-unit id="1ea2b1ee6be444bf6d62acd4cf8b2204954cdb9d" translate="yes" xml:space="preserve">
          <source>Some initial thought goes into the persons mind which decides his choice, it can be favorite color , lucky color and so on. In other words some initial trigger which we term in RANDOM as SEED.This SEED is the beginning point, the trigger which instigates him to select the RANDOM value.</source>
          <target state="translated">好みの色やラッキーカラーなど、人の心の中に何かしらの初期思考が入ってきて、その選択を決定します。このSEEDは、その人がRANDOMの値を選択するきっかけとなる初期のきっかけとなるものです。</target>
        </trans-unit>
        <trans-unit id="c9348fb85574dfcc3419b015a40e3fc581abf85a" translate="yes" xml:space="preserve">
          <source>Sorry, OP indeed requires a random &lt;strong&gt;&lt;code&gt;int&lt;/code&gt;&lt;/strong&gt; value, but for the simple purpose to share knowledge if you want a random &lt;code&gt;BigInteger&lt;/code&gt; value you can use following statement:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;申し訳ありませんが、OPは確かにランダムな&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;int&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要とし&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ますが、ランダムな&lt;/font&gt;&lt;/font&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値が必要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;な場合に知識を共有するという単純な目的で、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のステートメントを使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cab5112bdd9645675d42bf5bd63a93216d88479" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random&quot;&gt;&lt;code&gt;Random&lt;/code&gt; class&lt;/a&gt; is used to create random numbers. (Pseudo-random that is of course.).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.random&quot;&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスは、&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;乱数を作成するために使用されます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（もちろん、疑似ランダムです。）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b6cabb5af38e2ec6490ce9bad1d7be38825dd4b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Next()&lt;/code&gt; method accepts two parameters, min and max.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt; &lt;code&gt;Next()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドは、2つのパラメータ、minとmaxを受け付けます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="dbeec0ee81562b0b9d42d05f4af1fd3df72b27f9" translate="yes" xml:space="preserve">
          <source>The easiest way is probably just &lt;code&gt;Random.range(1, 3)&lt;/code&gt; This would generate a number between 1 and 2.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最も簡単な方法はおそらく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random.range(1, 3)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;だけ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは1と2の間の数を生成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="08ed9ebb451c315c636ab7f2c8314eab9b937d9c" translate="yes" xml:space="preserve">
          <source>The following code returns a random number between the min and the max range.</source>
          <target state="translated">以下のコードは、最小値と最大値の間の乱数を返します。</target>
        </trans-unit>
        <trans-unit id="ee55843082eefd6fde2b0929ab69e940494c85ca" translate="yes" xml:space="preserve">
          <source>The following code returns a random number less than 1000.&amp;nbsp;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のコードは、1000未満の乱数を返します。&amp;nbsp;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a3b8a685a187f50815e1e0e93e3c181d090bbcd2" translate="yes" xml:space="preserve">
          <source>The following code returns a random number.&amp;nbsp;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のコードは乱数を返します。&amp;nbsp;&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="397254fb1b911cd7c8ad4be30a5aac897bf136a9" translate="yes" xml:space="preserve">
          <source>The last remaining point is that you don't have to initialize &lt;code&gt;new Random()&lt;/code&gt; every time you need a random number, initiate one Random object then use it as many times as you need inside a loop or whatever</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;最後のポイントは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、乱数が必要になるたびに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;new Random()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を初期化する必要がないことです&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。1つのRandomオブジェクトを開始し、ループ内などで必要なだけ何度でも使用できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2e341760257d154970a268e8b1c7f6c64c168d6b" translate="yes" xml:space="preserve">
          <source>The numbers generated by the inbuilt &lt;code&gt;Random&lt;/code&gt; class (System.Random) generates pseudo random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;組み込みの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Random&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラス（System.Random）によって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生成された数値は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;疑似乱数を生成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="416de5409476abc0bc380a0a56b156bac127131e" translate="yes" xml:space="preserve">
          <source>The question looks very simple but the answer is  bit complicated. If you see almost everyone has suggested to use the Random class and some have suggested to use the RNG crypto class. But then when to choose what.</source>
          <target state="translated">質問は非常に単純に見えますが、答えは少し複雑です。ほとんどの人がランダムクラスを使用することを提案しており、いくつかはRNG暗号クラスを使用することを提案しているのを見れば、あなたは、ほとんどの人がランダムクラスを使用することを提案しています。しかし、その後、何を選択するとき。</target>
        </trans-unit>
        <trans-unit id="ea44102c483cbb9c8ac1fcff0b08b1765650506d" translate="yes" xml:space="preserve">
          <source>The solution is to &lt;em&gt;always&lt;/em&gt; use a single static random generator. Like this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解決策は、&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常に&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;単一の静的ランダムジェネレーターを使用することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このような：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="49d65d6e727bc704368a3e03ebcc9cb4ec054b5d" translate="yes" xml:space="preserve">
          <source>Then you can use the static class like so..</source>
          <target state="translated">そうすると、以下のようにスタティッククラスを使うことができます。</target>
        </trans-unit>
        <trans-unit id="c2819086a92482f65d859bf2454b2e5d8390a2e4" translate="yes" xml:space="preserve">
          <source>This article takes a look at why randomness causes so many problems, and how to address them.
&lt;a href=&quot;http://csharpindepth.com/Articles/Chapter12/Random.aspx&quot;&gt;http://csharpindepth.com/Articles/Chapter12/Random.aspx&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この記事では、ランダム性が非常に多くの問題を引き起こす理由と、それらに対処する方法について説明します。 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://csharpindepth.com/Articles/Chapter12/Random.aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://csharpindepth.com/Articles/Chapter12/Random.aspx&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cb8ec48f3641b82fded0bcb4b8605c9b8b8fb23" translate="yes" xml:space="preserve">
          <source>This is the class I use. Works like &lt;code&gt;RandomNumber.GenerateRandom(1, 666)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは私が使用するクラスです。&lt;/font&gt; &lt;code&gt;RandomNumber.GenerateRandom(1, 666)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;機能します&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9c1b99191f450509971d7f63ef91cd34d791c6d7" translate="yes" xml:space="preserve">
          <source>To understand OS entropy see this video from 14:30 &lt;a href=&quot;https://youtu.be/tCYxc-2-3fY?t=14m31s&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/a&gt; where the logic of OS entropy is explained. So putting in simple words RNG Crypto generates SECURE random numbers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OSエントロピーを理解するには、OSエントロピー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のロジックが説明さ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れている14:30 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://youtu.be/tCYxc-2-3fY?t=14m31s&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://www.youtube.com/watch?v=tCYxc-2-3fY&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;からこのビデオを参照してください&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、簡単な言葉でRNG暗号は安全な乱数を生成します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cf1b382618e5a297cf248083442d837bc36c17ae" translate="yes" xml:space="preserve">
          <source>Try these simple steps to create random numbers:</source>
          <target state="translated">乱数を作成するための簡単な手順を試してみてください。</target>
        </trans-unit>
        <trans-unit id="4e00736dfa84fe21aee5428e9e7b4473806c7994" translate="yes" xml:space="preserve">
          <source>Use one instance of Random repeatedly</source>
          <target state="translated">Random のインスタンスを繰り返し使用する</target>
        </trans-unit>
        <trans-unit id="ce392fdbf5bb24e36d98f7452cae0678e096b1e8" translate="yes" xml:space="preserve">
          <source>Use the above function in a location where you want to use random numbers. Suppose you want to use it in a text box.</source>
          <target state="translated">乱数を使いたい場所で上記の関数を使いましょう。テキストボックスの中で使いたいとします。</target>
        </trans-unit>
        <trans-unit id="c35334a8ed6b5df94821b6dac1953c6263726d0c" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; class uses OS entropy to generate seeds. OS entropy is a random value which is generated using sound, mouse click, and keyboard timings, thermal temp etc. Below goes the code for the same.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しばらく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;クラスが種を生成するために、OSのエントロピーを使用しています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;OSエントロピーは、サウンド、マウスクリック、キーボードのタイミング、温度などを使用して生成されるランダムな値です。以下に同じコードを示します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27f0ffb3a8fc45ac741347e830f419dc71f5b45c" translate="yes" xml:space="preserve">
          <source>While this is okay:</source>
          <target state="translated">これでいいんだけど</target>
        </trans-unit>
        <trans-unit id="6b7b100c58ff8d646e1c196adcca06650862ca99" translate="yes" xml:space="preserve">
          <source>Why not use &lt;code&gt;int randomNumber = Random.Range(start_range, end_range)&lt;/code&gt; ?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なぜ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int randomNumber = Random.Range(start_range, end_range)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用しないの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ですか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c5d4888f40fd48d603d3340296bf8d14a288bc88" translate="yes" xml:space="preserve">
          <source>You can see the file diffs from .NET Framework/.NET Core (2.0.0+) here: &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&quot;&gt;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&lt;/a&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.NET Framework / .NET Core（2.0.0+）のファイルの差分は、&lt;/font&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66d&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//github.com/dotnet/coreclr/pull/2192/commits/9f6a0b675e5ac0065a268554de49162c539ff66dで確認できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="eafcea8f499cb8c50e2821247665cab3bf4454fa" translate="yes" xml:space="preserve">
          <source>You can try for example RANDOM.ORG (it reduces performance)</source>
          <target state="translated">例えば RANDOM.ORG を試してみてください(パフォーマンスを低下させます)。</target>
        </trans-unit>
        <trans-unit id="493cea7633f189ea4266cbd2a5fcdbb4322f376a" translate="yes" xml:space="preserve">
          <source>You can try with random seed value using below:</source>
          <target state="translated">以下のように、ランダムなシード値で試すことができます。</target>
        </trans-unit>
        <trans-unit id="31a00fb08535456058a3521283a0215f6ef0322b" translate="yes" xml:space="preserve">
          <source>You could use Jon Skeet's &lt;a href=&quot;https://jonskeet.uk/csharp/miscutil/&quot;&gt;StaticRandom&lt;/a&gt; method inside the MiscUtil class library that he built for a pseudo-random number.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Jon Skeetの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;疑似乱数用に作成したMiscUtilクラスライブラリ内&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://jonskeet.uk/csharp/miscutil/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;StaticRandom&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メソッドを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="462416f2d6b94075bd6ab7454309200f747e9da0" translate="yes" xml:space="preserve">
          <source>You may refer to this question I made a while back:</source>
          <target state="translated">少し前に作ったこの質問を参考にしてみてください。</target>
        </trans-unit>
        <trans-unit id="3d2b2be4bad21cd04b226e437100364a3af1e446" translate="yes" xml:space="preserve">
          <source>You'd want to control the limit (min and max mumbers) most of the time. So you need to specify where the random number starts and ends.</source>
          <target state="translated">ほとんどの場合、制限値(最小値と最大値)を制御したいと思うでしょう。そのため、乱数の始点と終点を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d88f6ddfd27a70e9f5ccae97c14c6c5a5134669" translate="yes" xml:space="preserve">
          <source>if you are looking for random number generator for normal distribution, you might use a Box-Muller transformation. Check the answer by yoyoyoyosef in Random Gaussian Variable Question. Since you want integer, you have to cast double value to integer at the end.</source>
          <target state="translated">正規分布の乱数発生器を探しているのであれば、Box-Muller変換を使うといいかもしれません。ランダムガウス変数の質問でyoyoyosefさんの回答を確認してみてください。整数が欲しいので、最後に倍の値を整数にキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="eb46f8927c27355615a5cfd60c095088a598bb46" translate="yes" xml:space="preserve">
          <source>it's better to seed the Random object with current milliseconds, to ensure true random number, and you almost won't find duplicates using it many times</source>
          <target state="translated">真の乱数を確保するためには、現在のミリ秒でRandomオブジェクトをシードした方が良いでしょうし、何度も使っても重複を見つけることはほとんどありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
