<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/273192">
    <body>
      <group id="273192">
        <trans-unit id="3121ac2ed4bcb912f44c1a708fd4fa005c62df64" translate="yes" xml:space="preserve">
          <source>(For context, I'm tracking my weekly rep with a script. Here's the relevant parts of code from the script that allow me to avoid hitting Stack Overflow more than once a day for the same data.)</source>
          <target state="translated">(コンテキストのために、私はスクリプトを使って週次報告を追跡しています。以下はスクリプトのコードの関連部分で、同じデータのために1日に1回以上Stack Overflowにアクセスしないようにしてくれています)。</target>
        </trans-unit>
        <trans-unit id="3eb796c0d6b99c763af93d3b97f34d9a1877151e" translate="yes" xml:space="preserve">
          <source>(just as &lt;a href=&quot;https://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; got an &lt;code&gt;exist_ok&lt;/code&gt; flag starting from python 3.2 e.g &lt;code&gt;os.makedirs(path, exist_ok=True)&lt;/code&gt;)</source>
          <target state="translated">（ &lt;a href=&quot;https://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt;がpython 3.2から存在する &lt;code&gt;exist_ok&lt;/code&gt; フラグを取得したのと同じように、例： &lt;code&gt;os.makedirs(path, exist_ok=True)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="18a3c7a1b3ef5d5d0b224c6076395a8aa2e4273e" translate="yes" xml:space="preserve">
          <source>... You're going to end up with a directory named &lt;code&gt;filename.etc&lt;/code&gt; when you pass that argument to &lt;code&gt;os.makedirs()&lt;/code&gt; if you test with &lt;code&gt;os.path.exists()&lt;/code&gt;.</source>
          <target state="translated">... &lt;code&gt;os.path.exists()&lt;/code&gt; でテストした場合、その引数を &lt;code&gt;os.makedirs()&lt;/code&gt; に渡すと、 &lt;code&gt;filename.etc&lt;/code&gt; という名前のディレクトリが作成されます 。</target>
        </trans-unit>
        <trans-unit id="12b82177815800e1d2adf2e41a4a0b40631382f5" translate="yes" xml:space="preserve">
          <source>...and by allowing &lt;a href=&quot;https://docs.python.org/3.2/library/os.html#os.makedirs&quot;&gt;a keyword argument to &lt;code&gt;os.makedirs&lt;/code&gt; called &lt;code&gt;exist_ok&lt;/code&gt;&lt;/a&gt; (in 3.2+).</source>
          <target state="translated">...そして、 &lt;a href=&quot;https://docs.python.org/3.2/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;exist_ok&lt;/code&gt; &lt;/a&gt; （3.2以降） と呼ばれるos.makedirsへのキーワード引数を許可する 。</target>
        </trans-unit>
        <trans-unit id="d2cb971d27ac509e9772623d927e6363ff0a92a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt;&lt;code&gt;mkpath&lt;/code&gt;&lt;/a&gt; creates the nested directory, and does nothing if the directory already exists. This works in both Python 2 and 3.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt; &lt;code&gt;mkpath&lt;/code&gt; &lt;/a&gt;はネストされたディレクトリを作成し、ディレクトリがすでに存在する場合は何もしません。 これはPython 2と3の両方で機能します。</target>
        </trans-unit>
        <trans-unit id="0443b8240c037eb60f44be401cd11e8ad86dd87b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; as used above recursively creates the directory and does not raise an exception if the directory already exists. It has the optional &lt;code&gt;exist_ok&lt;/code&gt; argument only if using Python 3.2+, with a default value of &lt;code&gt;False&lt;/code&gt;. This argument does not exist in Python 2.x up to 2.7. As such, there is no need for manual exception handling as with Python 2.7.</source>
          <target state="translated">上記で使用した&lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt;は、ディレクトリを再帰的に作成し、ディレクトリがすでに存在する場合は例外を発生させません。 Python 3.2以降を使用している場合にのみ、オプションの &lt;code&gt;exist_ok&lt;/code&gt; 引数があり、デフォルト値は &lt;code&gt;False&lt;/code&gt; です。 この引数は、2.7までのPython 2.xには存在しません。 そのため、Python 2.7のように手動で例外を処理する必要はありません。</target>
        </trans-unit>
        <trans-unit id="c69cbbeb4b9bb92190a2541fb7a478447ef001ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt; as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the &lt;code&gt;parents&lt;/code&gt; argument.</source>
          <target state="translated">上記で使用した&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; &lt;/a&gt;は、ディレクトリを再帰的に作成し、ディレクトリがすでに存在する場合は例外を発生させません。 親を作成する必要がない、または作成したくない場合は、 &lt;code&gt;parents&lt;/code&gt; 引数をスキップします。</target>
        </trans-unit>
        <trans-unit id="5722f73ffd926bda9aeb0c49ae9810a9cdeffffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Path&lt;/code&gt; objects have to be coerced to &lt;code&gt;str&lt;/code&gt; before other APIs that expect &lt;code&gt;str&lt;/code&gt; paths can use them.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; オブジェクトは、 &lt;code&gt;str&lt;/code&gt; パスを期待する他のAPIがそれらを使用する前に、 &lt;code&gt;str&lt;/code&gt; に強制変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="02fbfa8e9162845467edc255293ffbc665a98adc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Check if a directory exists and create it if necessary?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ディレクトリが存在するかどうかを確認し、必要に応じて作成しますか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e2a9d4549bcebed0d695f93286f43be9880e1ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using &lt;code&gt;os&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;os&lt;/code&gt; の使用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="513f1e61389d5d53dc42b6dd097dcfa305b4e3e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using &lt;code&gt;pathlib&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;pathlib&lt;/code&gt; の使用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90a13575f8e0892507d63b6f2ba2e38915862974" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt; if making the directory is subject to race conditions (i.e. if after checking the path exists, something else may have already made it) do this:</source>
          <target state="translated">&lt;strong&gt;または&lt;/strong&gt; 、ディレクトリの作成が競合状態の影響を受ける場合（つまり、パスが存在することを確認した後、他の何かがすでに作成している可能性がある場合）は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="3b8239e68048624328c3887db9856779071451e0" translate="yes" xml:space="preserve">
          <source>Alternative:</source>
          <target state="translated">Alternative:</target>
        </trans-unit>
        <trans-unit id="a1cf8b16dad890eb5c4e0c9271810e8851b63291" translate="yes" xml:space="preserve">
          <source>Alternatively, there could be a second &lt;code&gt;os.path.exists&lt;/code&gt;, but suppose another created the directory after the first check, then removed it before the second one &amp;ndash; we could still be fooled.</source>
          <target state="translated">あるいは、2番目の &lt;code&gt;os.path.exists&lt;/code&gt; が存在する可能性がありますが、最初のチェックの後に別のディレクトリが作成され、2番目のチェックの前にそれを削除したとします。</target>
        </trans-unit>
        <trans-unit id="5425ec8a183a1bc6b38039d433238fd743244e9d" translate="yes" xml:space="preserve">
          <source>And a foolish user input:</source>
          <target state="translated">そして馬鹿なユーザー入力。</target>
        </trans-unit>
        <trans-unit id="1c86fe1e6829df459e27c81259e6840525f66bc8" translate="yes" xml:space="preserve">
          <source>As noted in comments and elsewhere, there's a race condition &amp;ndash; if the directory is created between the &lt;code&gt;os.path.exists&lt;/code&gt; and the &lt;code&gt;os.makedirs&lt;/code&gt; calls, the &lt;code&gt;os.makedirs&lt;/code&gt; will fail with an &lt;code&gt;OSError&lt;/code&gt;. Unfortunately, blanket-catching &lt;code&gt;OSError&lt;/code&gt; and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</source>
          <target state="translated">コメントや他の場所で述べられているように、競合状態があります &lt;code&gt;os.makedirs&lt;/code&gt; とos.makedirsの呼び出しの間にディレクトリが作成されると、 os.makedirsは &lt;code&gt;os.makedirs&lt;/code&gt; 失敗します。 残念ながら、 &lt;code&gt;OSError&lt;/code&gt; を包括的にキャッチして続行することは、パーミッションの不足やディスクの空き容量など、他の要因によるディレクトリの作成の失敗を無視するため、完全なものではありません。</target>
        </trans-unit>
        <trans-unit id="7ee80f57ba0d6d00c9276e06f774ed3925ebe0d9" translate="yes" xml:space="preserve">
          <source>Assuming opening for reading</source>
          <target state="translated">読書のための開口部を想定して</target>
        </trans-unit>
        <trans-unit id="a732816cb0c9b0cc684d45193ba9368d44c027e2" translate="yes" xml:space="preserve">
          <source>Assuming we're opening for writing</source>
          <target state="translated">書くためにオープンしていると仮定して</target>
        </trans-unit>
        <trans-unit id="8c423e5c0dfe6a62a16b5a6a6f5ed6162e97b8c5" translate="yes" xml:space="preserve">
          <source>But perhaps an even better approach is to sidestep the resource contention issue, by using temporary directories via &lt;a href=&quot;https://docs.python.org/library/tempfile.html#tempfile.mkdtemp&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">しかし、おそらくさらに優れたアプローチは、 &lt;a href=&quot;https://docs.python.org/library/tempfile.html#tempfile.mkdtemp&quot;&gt; &lt;code&gt;tempfile&lt;/code&gt; &lt;/a&gt;を介して一時ディレクトリを使用することにより、リソース競合の問題を回避することです。</target>
        </trans-unit>
        <trans-unit id="4e1673fa7c1d5fc36445668c4adb7c1b8bc89428" translate="yes" xml:space="preserve">
          <source>Call the function &lt;code&gt;create_dir()&lt;/code&gt; at the entry point of your program/project.</source>
          <target state="translated">プログラム/プロジェクトのエントリポイントで関数 &lt;code&gt;create_dir()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="01ca4760ac618ba068fbfb39127ce9adee4f1bac" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt;:  (It makes sure the complete path exists.)</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; を&lt;/a&gt;確認します（完全なパスが存在することを確認します）。</target>
        </trans-unit>
        <trans-unit id="6164c0b5b7d56fc2c96acfc1e85d0aea94d39e63" translate="yes" xml:space="preserve">
          <source>Conclusion: in my opinion, &quot;Method 2&quot; is more robust.</source>
          <target state="translated">結論:私の考えでは、「方法2」の方が堅牢です。</target>
        </trans-unit>
        <trans-unit id="2f45eec4334aa25687d578b05a730ae07f2d8c14" translate="yes" xml:space="preserve">
          <source>Consider this directory structure:</source>
          <target state="translated">このディレクトリ構造を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d2d4fee838a956a0a5155cf4a5747b0668a441c2" translate="yes" xml:space="preserve">
          <source>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</source>
          <target state="translated">アプリケーションによっては、ファイルパーミッションのような他の要因によってもたらされる危険性よりも、同時並行操作の危険性の方が大きいか小さいかもしれません。開発者は、実装を選択する前に、開発されている特定のアプリケーションとその期待される環境について詳しく知っておく必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="deae96764aa4587da73f1ce1ffb9899c015ce4c4" translate="yes" xml:space="preserve">
          <source>Even in that case, this is a bad practice and can lead to long useless debugging. For example, the fact we set the permissions for a directory should not leave us with the impression permissions are set appropriately for our purposes. A parent directory could be mounted with other permissions. In general, a program should always work correctly and the programmer should not expect one specific environment.</source>
          <target state="translated">その場合でも、これは悪い習慣であり、長く無駄なデバッグをすることになりかねません。例えば、ディレクトリのパーミッションを設定したからといって、パーミッションが目的に応じて適切に設定されているかのような印象を残すべきではありません。親ディレクトリは他のパーミッションでマウントされる可能性があります。一般的に、プログラムは常に正しく動作するべきであり、プログラマーはある特定の環境を期待してはいけません。</target>
        </trans-unit>
        <trans-unit id="35c95b4868de9bf6ba8db931f46dd2e29eb6e01c" translate="yes" xml:space="preserve">
          <source>First the relevant imports:</source>
          <target state="translated">まず、関連する輸入品。</target>
        </trans-unit>
        <trans-unit id="f48e8c1c7ccf846218c4fb87f4a1f71363cf5c47" translate="yes" xml:space="preserve">
          <source>For a one-liner solution, you can use &lt;a href=&quot;https://github.com/ipython/ipython/blob/b70b3f21749ca969088fdb54edcc36bb8a2267b9/IPython/utils/path.py#L423-L438&quot;&gt;&lt;code&gt;IPython.utils.path.ensure_dir_exists()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ワンライナーソリューションの場合、 &lt;a href=&quot;https://github.com/ipython/ipython/blob/b70b3f21749ca969088fdb54edcc36bb8a2267b9/IPython/utils/path.py#L423-L438&quot;&gt; &lt;code&gt;IPython.utils.path.ensure_dir_exists()&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="5eb6cd999782910d8577c5e49c2cabbd7c4cfe91" translate="yes" xml:space="preserve">
          <source>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</source>
          <target state="translated">Pythonの古いバージョンでは、質の良い回答が2つ、それぞれに小さな欠陥があるように見えるので、私の受け止め方を紹介します。</target>
        </trans-unit>
        <trans-unit id="ad50b66f54fc8b40a971a312b1e7b1f89975e434" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;https://ipython.org/ipython-doc/3/api/generated/IPython.utils.path.html#IPython.utils.path.ensure_dir_exists&quot;&gt;documentation&lt;/a&gt;: &lt;em&gt;Ensure that a directory exists. If it doesn&amp;rsquo;t exist, try to create it and protect against a race condition if another process is doing the same.&lt;/em&gt;</source>
          <target state="translated">&lt;a href=&quot;https://ipython.org/ipython-doc/3/api/generated/IPython.utils.path.html#IPython.utils.path.ensure_dir_exists&quot;&gt;ドキュメント&lt;/a&gt;から： &lt;em&gt;ディレクトリが存在することを確認します。&lt;/em&gt; &lt;em&gt;存在しない場合は、作成して、別のプロセスが同じことをしている場合は競合状態から保護してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac620040ee41da4ac4af95274cdd1c3f011dd85f" translate="yes" xml:space="preserve">
          <source>Here are my experiments/notes, which clarifies things:</source>
          <target state="translated">ここでは、物事を明確にする私の実験ノートです。</target>
        </trans-unit>
        <trans-unit id="4f35d5503e88dfd831b6147a4612e9bccc4447fc" translate="yes" xml:space="preserve">
          <source>Here's a little more of the script - in my case, I'm not subject to a race condition, I only have one process that expects the directory (or contained files) to be there, and I don't have anything trying to remove the directory.</source>
          <target state="translated">私の場合は、競合状態に陥っておらず、ディレクトリ(または含まれるファイル)が存在することを期待するプロセスが1つあるだけで、ディレクトリを削除しようとするものは何もありません。</target>
        </trans-unit>
        <trans-unit id="a3a28383d88c9f97f89da0f85ed2d6ea047cf57b" translate="yes" xml:space="preserve">
          <source>Here's the essentials from the online doc:</source>
          <target state="translated">オンラインドキュメントから要点をご紹介します。</target>
        </trans-unit>
        <trans-unit id="422c9974b57e23de918cca25a8e4e75144ac9949" translate="yes" xml:space="preserve">
          <source>Here's the relevant part of the &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;ドキュメントの&lt;/a&gt;関連部分は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="abc4d97edcbb87d0e3301e065d3b93e2104ed36d" translate="yes" xml:space="preserve">
          <source>How can I safely create a nested directory</source>
          <target state="translated">ネストされたディレクトリを安全に作成するには</target>
        </trans-unit>
        <trans-unit id="43df623a8684ce2d0992ddf3e318fee0b73a5bca" translate="yes" xml:space="preserve">
          <source>However, say we have several Python processes that attempt to put all their data into the same directory. Then we may have contention over creation of the directory. In that case it's best to wrap the &lt;code&gt;makedirs&lt;/code&gt; call in a try-except block.</source>
          <target state="translated">ただし、すべてのデータを同じディレクトリに配置しようとするいくつかのPythonプロセスがあるとします。 次に、ディレクトリの作成をめぐって競合が発生する可能性があります。 その場合は、 &lt;code&gt;makedirs&lt;/code&gt; 呼び出しをtry-exceptブロックでラップするのが最善です。</target>
        </trans-unit>
        <trans-unit id="01b533ca1cfd4009ed30def6151904b1fbc1ac26" translate="yes" xml:space="preserve">
          <source>I found this Q/A and I was initially puzzled by some of the failures and errors I was getting. I am working in Python 3 (v.3.5 in an Anaconda virtual environment on an Arch Linux x86_64 system).</source>
          <target state="translated">このQAを見つけたのですが、最初はいくつかの失敗やエラーに戸惑っていました。私は Python 3 (Arch Linux x86_64 システム上の Anaconda 仮想環境で v.3.5)で作業しています。</target>
        </trans-unit>
        <trans-unit id="bcf2d027a264623ff0d6f130ef23fd5cf6a23215" translate="yes" xml:space="preserve">
          <source>I have put the following down. It's not totally foolproof though.</source>
          <target state="translated">以下のように書きました。でも、完全に騙されないわけではありません。</target>
        </trans-unit>
        <trans-unit id="9d92b1d4efb363280e561cb068cc7fe185f10913" translate="yes" xml:space="preserve">
          <source>I saw &lt;a href=&quot;https://stackoverflow.com/a/5032238/3051142&quot;&gt;Heikki Toivonen&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/14364249&quot;&gt;A-B-B&lt;/a&gt;'s answers and thought of this variation.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/5032238/3051142&quot;&gt;Heikki Toivonen&lt;/a&gt;と&lt;a href=&quot;https://stackoverflow.com/a/14364249&quot;&gt;ABB&lt;/a&gt;の答えを見て、このバリエーションについて考えました。</target>
        </trans-unit>
        <trans-unit id="44bc7785155af664bc388bf4072f7f57fab5223a" translate="yes" xml:space="preserve">
          <source>I use &lt;code&gt;os.path.exists()&lt;/code&gt;, &lt;a href=&quot;http://pastebin.com/vnVk2rY5&quot;&gt;here&lt;/a&gt; is a Python 3 script that can be used to check if a directory exists, create one if it does not exist, and delete it if it does exist (if desired).</source>
          <target state="translated">私は &lt;code&gt;os.path.exists()&lt;/code&gt; を使用してい&lt;a href=&quot;http://pastebin.com/vnVk2rY5&quot;&gt;ます。これ&lt;/a&gt;は、ディレクトリが存在するかどうかを確認し、存在しない場合は作成し、存在する場合は削除する（必要な場合）ために使用できるPython 3スクリプトです。</target>
        </trans-unit>
        <trans-unit id="dda21083479a5a551734a83ecabb56f6a839f5f8" translate="yes" xml:space="preserve">
          <source>I would personally recommend that you use &lt;code&gt;os.path.isdir()&lt;/code&gt; to test instead of &lt;code&gt;os.path.exists()&lt;/code&gt;.</source>
          <target state="translated">個人的には、 &lt;code&gt;os.path.exists()&lt;/code&gt; の代わりにos.path.isdir（）を使用してテストすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="98719f93c1117e90bd3d2ccd57a9fbbebdadfceb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exist_ok&lt;/code&gt; is true, &lt;code&gt;FileExistsError&lt;/code&gt; exceptions will be ignored (same behavior as the &lt;code&gt;POSIX mkdir -p&lt;/code&gt; command), but only if the last path component is not an existing non-directory file.</source>
          <target state="translated">&lt;code&gt;exist_ok&lt;/code&gt; がtrueの場合、 &lt;code&gt;FileExistsError&lt;/code&gt; 例外は無視されます（ &lt;code&gt;POSIX mkdir -p&lt;/code&gt; コマンドと同じ動作）。ただし、最後のパスコンポーネントが既存の非ディレクトリファイルでない場合のみです。</target>
        </trans-unit>
        <trans-unit id="9c76336e3b2bcc4c3ff147925ca8a2045da088d7" translate="yes" xml:space="preserve">
          <source>If the directory or file isn't there, you'll get an &lt;code&gt;IOError&lt;/code&gt; with an associated error number: &lt;code&gt;errno.ENOENT&lt;/code&gt; will point to the correct error number regardless of your platform. You can catch it if you want, for example:</source>
          <target state="translated">ディレクトリまたはファイルがそこにない場合、関連するエラー番号を持つ &lt;code&gt;IOError&lt;/code&gt; が返されます &lt;code&gt;errno.ENOENT&lt;/code&gt; は、プラットフォームに関係なく正しいエラー番号を指します。 必要に応じて、次のようにキャッチできます。</target>
        </trans-unit>
        <trans-unit id="47f877478b34abfa92dad52ab6be30c3ff05158b" translate="yes" xml:space="preserve">
          <source>If using Python 3.4, even though it comes with &lt;code&gt;pathlib&lt;/code&gt;, it is missing the useful &lt;code&gt;exist_ok&lt;/code&gt; option. The backport is intended to offer a newer and superior implementation of &lt;code&gt;mkdir&lt;/code&gt; which includes this missing option.</source>
          <target state="translated">Python 3.4を使用している場合、 &lt;code&gt;pathlib&lt;/code&gt; が付属していても、便利な &lt;code&gt;exist_ok&lt;/code&gt; オプションがありません 。 バックポートは、この欠落しているオプションを含む &lt;code&gt;mkdir&lt;/code&gt; の新しく優れた実装を提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="f859712e9880cf77f7dea1b20c5921a1728a2543" translate="yes" xml:space="preserve">
          <source>If you can, install the current &lt;code&gt;pathlib&lt;/code&gt; backport named &lt;a href=&quot;https://pypi.python.org/pypi/pathlib2/&quot;&gt;&lt;code&gt;pathlib2&lt;/code&gt;&lt;/a&gt;. Do not install the older unmaintained backport named &lt;a href=&quot;https://pypi.python.org/pypi/pathlib/&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;. Next, refer to the Python 3.5+ section above and use it the same.</source>
          <target state="translated">可能であれば、 &lt;code&gt;pathlib&lt;/code&gt; 2という名前の現在のpathlibバックポートをインストールします。 &lt;a href=&quot;https://pypi.python.org/pypi/pathlib/&quot;&gt; &lt;code&gt;pathlib&lt;/code&gt; &lt;/a&gt;という名前の古いメンテナンスされていないバックポートをインストールしないでください。 次に、上記のPython 3.5以降のセクションを参照して、同じように使用します。</target>
        </trans-unit>
        <trans-unit id="d3f798f5adf38af98cf182c37eab7725c5f2cb46" translate="yes" xml:space="preserve">
          <source>If you consider the following:</source>
          <target state="translated">以下のようなことを考えれば</target>
        </trans-unit>
        <trans-unit id="39889263d487079852bb1c20c0aa134d99325643" translate="yes" xml:space="preserve">
          <source>If you have:</source>
          <target state="translated">あなたが持っているなら</target>
        </trans-unit>
        <trans-unit id="3d535b65e069fedb4050c6a2e3fdb6276eaaa0d0" translate="yes" xml:space="preserve">
          <source>If you need error handling:</source>
          <target state="translated">エラー処理が必要な場合</target>
        </trans-unit>
        <trans-unit id="da4a9ca8792c5dc564c13bc23c48d1785b25767f" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python2&lt;/strong&gt;, &lt;code&gt;os.makedirs&lt;/code&gt; doesn't support setting &lt;code&gt;exist_ok&lt;/code&gt;. You can use the approach in &lt;a href=&quot;https://stackoverflow.com/a/5032238/3109254&quot;&gt;heikki-toivonen's answer&lt;/a&gt;:</source>
          <target state="translated">&lt;strong&gt;Python2&lt;/strong&gt;では、 &lt;code&gt;os.makedirs&lt;/code&gt; は &lt;code&gt;exist_ok&lt;/code&gt; の設定をサポートしていません。 &lt;a href=&quot;https://stackoverflow.com/a/5032238/3109254&quot;&gt;heikki-toivonenの答えで&lt;/a&gt;アプローチを使用できます：</target>
        </trans-unit>
        <trans-unit id="8625861c30a24838ae98628bdb27d023a533c351" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python3&lt;/strong&gt;, &lt;code&gt;os.makedirs&lt;/code&gt; supports setting &lt;code&gt;exist_ok&lt;/code&gt;. The default setting is &lt;code&gt;False&lt;/code&gt;, which means an &lt;code&gt;OSError&lt;/code&gt; will be raised if the target directory already exists. By setting &lt;code&gt;exist_ok&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;OSError&lt;/code&gt; (directory exists) will be ignored and the directory will not be created.</source>
          <target state="translated">&lt;strong&gt;Python3&lt;/strong&gt;では、 &lt;code&gt;os.makedirs&lt;/code&gt; は &lt;code&gt;exist_ok&lt;/code&gt; の設定をサポートしています。 デフォルト設定は &lt;code&gt;False&lt;/code&gt; で、ターゲットディレクトリがすでに存在する場合は &lt;code&gt;OSError&lt;/code&gt; が発生します。 &lt;code&gt;exist_ok&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定すると、 &lt;code&gt;OSError&lt;/code&gt; （ディレクトリは存在します）は無視され、ディレクトリは作成されません。</target>
        </trans-unit>
        <trans-unit id="5bc5e0146edc2ae08e3b66fbc6a7f8915debe013" translate="yes" xml:space="preserve">
          <source>In Python 3.4 you can also use the &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot;&gt;brand new &lt;code&gt;pathlib&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">Python 3.4では、 &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot;&gt;まったく新しい &lt;code&gt;pathlib&lt;/code&gt; モジュールを&lt;/a&gt;使用することもできます 。</target>
        </trans-unit>
        <trans-unit id="3b0312661232fca3e0cc2f2d4f7b9512298dd650" translate="yes" xml:space="preserve">
          <source>In other words, we try to create the directories, but if they already exist we ignore the error. On the other hand, any other error gets reported. For example, if you create dir 'a' beforehand and remove all permissions from it, you will get an &lt;code&gt;OSError&lt;/code&gt; raised with &lt;code&gt;errno.EACCES&lt;/code&gt; (Permission denied, error 13).</source>
          <target state="translated">つまり、ディレクトリを作成しようとしますが、すでに存在する場合はエラーを無視します。 一方、その他のエラーは報告されます。 たとえば、dir 'a'を事前に作成し、そこからすべての権限を削除すると、 &lt;code&gt;errno.EACCES&lt;/code&gt; （権限が拒否されました、エラー13）でOSErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="bc2cb7f7490dce0c4ecef3917af3d76415cc76ab" translate="yes" xml:space="preserve">
          <source>In situations where portability doesn't matter (ex, using docker) the solution is a clean 2 lines. You also don't have to add logic to check if directories exist or not. Finally, it is safe to re-run without any side effects</source>
          <target state="translated">移植性が問題ではない場合(例:dockerを使用している場合)には、2行ですっきりと解決します。また、ディレクトリが存在するかどうかをチェックするロジックを追加する必要もありません。最後に、副作用なしで再実行しても安全です。</target>
        </trans-unit>
        <trans-unit id="f57111a438a1422cc4a9a213182fba093c5300a3" translate="yes" xml:space="preserve">
          <source>In this case, we probably aren't facing any race conditions. So just do as you were, but note that for writing, you need to open with the &lt;code&gt;w&lt;/code&gt; mode (or &lt;code&gt;a&lt;/code&gt; to append). It's also a Python best practice to use the context manager for opening files.</source>
          <target state="translated">この場合、おそらく競合状態に直面していません。 だから、あなたがそうであるようにしてください、しかし、書くために、あなたは &lt;code&gt;w&lt;/code&gt; モード（または追加 &lt;code&gt;a&lt;/code&gt; ためにa ）で開く必要があることに注意してください。 また、ファイルを開くためにコンテキストマネージャーを使用することも、Pythonのベストプラクティスです。</target>
        </trans-unit>
        <trans-unit id="7bac4e71dafd67ff58d4f3cd38dc5a8e3db6a7a5" translate="yes" xml:space="preserve">
          <source>Insights on the specifics of this situation</source>
          <target state="translated">この状況の具体的な洞察</target>
        </trans-unit>
        <trans-unit id="94a86bef186f48282460ed5f521d706d87bb14f7" translate="yes" xml:space="preserve">
          <source>Is there a flag for &quot;open&quot;, that makes this happen automatically?</source>
          <target state="translated">開く」のフラグはありますか?</target>
        </trans-unit>
        <trans-unit id="53a6078a60c2df8b65bf5650f02981b382340f9c" translate="yes" xml:space="preserve">
          <source>It prompts users for input of the directory and can be easily modified.</source>
          <target state="translated">ユーザーにディレクトリの入力を促し、簡単に変更することができます。</target>
        </trans-unit>
        <trans-unit id="2c98cd5e104877c93e7679c628c3a41a50e08e7f" translate="yes" xml:space="preserve">
          <source>It works for Python 2 and 3.</source>
          <target state="translated">Python 2と3で動作します。</target>
        </trans-unit>
        <trans-unit id="7da5e505d3b9d04e82715fd31962bc7254adf01d" translate="yes" xml:space="preserve">
          <source>Just attempt to open the file.</source>
          <target state="translated">ファイルを開こうとするだけです。</target>
        </trans-unit>
        <trans-unit id="ffb042fc6fd8ec1e8c1ccfc1c371d7c8a49dd347" translate="yes" xml:space="preserve">
          <source>Modern versions of Python improve this code quite a bit, both by exposing &lt;a href=&quot;https://docs.python.org/3.3/library/exceptions.html?#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; (in 3.3+)...</source>
          <target state="translated">最新バージョンのPythonでは、 &lt;a href=&quot;https://docs.python.org/3.3/library/exceptions.html?#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt; （3.3以降）を公開することにより、このコードをかなり改善しています...</target>
        </trans-unit>
        <trans-unit id="55638ec05de3f80638e1e9ba3970e3a5f900619e" translate="yes" xml:space="preserve">
          <source>New in Python 3.5: &lt;code&gt;pathlib.Path&lt;/code&gt; with &lt;code&gt;exist_ok&lt;/code&gt;</source>
          <target state="translated">Python 3.5の新機能： &lt;code&gt;pathlib.Path&lt;/code&gt; with &lt;code&gt;exist_ok&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9a44c5e1ab9cdaaa3baa8a75f9dca9b73072610" translate="yes" xml:space="preserve">
          <source>Note that capturing the exception and using &lt;code&gt;errno&lt;/code&gt; is of limited usefulness because &lt;code&gt;OSError: [Errno 17] File exists&lt;/code&gt;, i.e. &lt;code&gt;errno.EEXIST&lt;/code&gt;, is raised for both files and directories. It is more reliable simply to check if the directory exists.</source>
          <target state="translated">&lt;code&gt;OSError: [Errno 17] File exists&lt;/code&gt; 、つまり &lt;code&gt;errno.EEXIST&lt;/code&gt; がファイルとディレクトリの両方で発生するため、例外をキャプチャして &lt;code&gt;errno&lt;/code&gt; を使用することの有用性は限られていることに注意してください。 ディレクトリが存在するかどうかを確認するだけの方が信頼性が高くなります。</target>
        </trans-unit>
        <trans-unit id="7a148cef5cbd02be1bd31d991f8041fdbd60ae6b" translate="yes" xml:space="preserve">
          <source>Note that it will create the ancestor directories as well.</source>
          <target state="translated">祖先のディレクトリも作成されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="82ccbd2ecaf0605297a7236e42508b9b3d15fdd4" translate="yes" xml:space="preserve">
          <source>Now as I say, this is not really foolproof, because we have the possiblity of failing to create the directory, and another process creating it during that period.</source>
          <target state="translated">なぜなら、ディレクトリの作成に失敗して、その間に別のプロセスがディレクトリを作成してしまう可能性があるからです。</target>
        </trans-unit>
        <trans-unit id="3e1d25d6194016ea62683fc16ffea1c40c3692d1" translate="yes" xml:space="preserve">
          <source>On Python &amp;ge; 3.5, use &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; &lt;/a&gt;では、 pathlib.Path.mkdirを使用します 。</target>
        </trans-unit>
        <trans-unit id="e2ca98d5312a1b512bc5c2fe3a1c52f2cf022ea3" translate="yes" xml:space="preserve">
          <source>One option would be to trap the &lt;code&gt;OSError&lt;/code&gt; and examine the embedded error code (see &lt;a href=&quot;https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror&quot;&gt;Is there a cross-platform way of getting information from Python&amp;rsquo;s OSError&lt;/a&gt;):</source>
          <target state="translated">1つのオプションは、 &lt;code&gt;OSError&lt;/code&gt; をトラップし、埋め込まれたエラーコードを調べることです（「 &lt;a href=&quot;https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror&quot;&gt;PythonのOSErrorから情報を取得するクロスプラットフォームの方法はあり&lt;/a&gt;ますか？ 」を参照）。</target>
        </trans-unit>
        <trans-unit id="5c5f8f0eeaea28800db9b820b5fbb8284e30bc53" translate="yes" xml:space="preserve">
          <source>Per &lt;a href=&quot;http://bugs.python.org/issue10948&quot;&gt;Bug 10948&lt;/a&gt;, a severe limitation of this alternative is that it works only once per python process for a given path. In other words, if you use it to create a directory, then delete the directory from inside or outside Python, then use &lt;code&gt;mkpath&lt;/code&gt; again to recreate the same directory, &lt;code&gt;mkpath&lt;/code&gt; will simply silently use its invalid cached info of having previously created the directory, and will not actually make the directory again. In contrast, &lt;code&gt;os.makedirs&lt;/code&gt; doesn't rely on any such cache. This limitation may be okay for some applications.</source>
          <target state="translated">&lt;a href=&quot;http://bugs.python.org/issue10948&quot;&gt;バグ10948による&lt;/a&gt;と、この代替案の重大な制限は、指定されたパスのpythonプロセスごとに1回しか機能しないことです。 つまり、ディレクトリの作成に使用し、Pythonの内部または外部からディレクトリを削除してから、もう一度 &lt;code&gt;mkpath&lt;/code&gt; を使用して同じディレクトリを再作成すると、 &lt;code&gt;mkpath&lt;/code&gt; は、以前にディレクトリを作成したことのある無効なキャッシュ情報を静かに使用します。実際には再びディレクトリを作成しません。 対照的に、 &lt;code&gt;os.makedirs&lt;/code&gt; はそのようなキャッシュに依存しません。 この制限は、一部のアプリケーションでは問題ない場合があります。</target>
        </trans-unit>
        <trans-unit id="b714db9ab64cbcc0558c99fdae141bb4bffeba79" translate="yes" xml:space="preserve">
          <source>Perhaps Pandas should be updated to accept instances of the abstract base class, &lt;code&gt;os.PathLike&lt;/code&gt;.</source>
          <target state="translated">おそらく、パンダは、抽象基本クラス &lt;code&gt;os.PathLike&lt;/code&gt; のインスタンスを受け入れるように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8b6b264b5910f832bc73c8e3c67b2e6cac151a2" translate="yes" xml:space="preserve">
          <source>Python 2.7+:</source>
          <target state="translated">Python 2.7+。</target>
        </trans-unit>
        <trans-unit id="9dc5b6e19a47dc56fe4767ef1ee75046725962d3" translate="yes" xml:space="preserve">
          <source>Python 3.2+:</source>
          <target state="translated">Python 3.2+です。</target>
        </trans-unit>
        <trans-unit id="b6c7cbad30d0e4fcc82218434d4da66a329f0f4c" translate="yes" xml:space="preserve">
          <source>Python 3.5+:</source>
          <target state="translated">Python 3.5+。</target>
        </trans-unit>
        <trans-unit id="99ea9cce0004a02a19d071bb0d88263b0cdffab9" translate="yes" xml:space="preserve">
          <source>Should do the trick on most systems.</source>
          <target state="translated">ほとんどのシステムでトリックを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="2528b184172d909d0a003be1f5b82244c09b314c" translate="yes" xml:space="preserve">
          <source>Somehow, I missed &lt;code&gt;os.path.exists&lt;/code&gt; (thanks kanja, Blair, and Douglas). This is what I have now:</source>
          <target state="translated">どういうわけか、 &lt;code&gt;os.path.exists&lt;/code&gt; を逃しました（kanja、Blair、およびDouglasに感謝）。 これは私が今持っているものです：</target>
        </trans-unit>
        <trans-unit id="741c763ee51bfb7f42f00814eb975dcae82f7c3a" translate="yes" xml:space="preserve">
          <source>Starting from Python 3.5, &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt; has an &lt;code&gt;exist_ok&lt;/code&gt; flag:</source>
          <target state="translated">Python 3.5 &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;exist_ok&lt;/code&gt; フラグがあります。</target>
        </trans-unit>
        <trans-unit id="f5b3a30e36f4f71f626659831f64892222b27ac9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;relevant Python documentation&lt;/a&gt; suggests the use of the &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;EAFP coding style (Easier to Ask for Forgiveness than Permission)&lt;/a&gt;. This means that the code</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;関連するPythonドキュメント&lt;/a&gt;では、 &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;EAFPコーディングスタイル（許可よりも許しを求めるのが簡単）&lt;/a&gt;の使用が推奨されています。 つまり、コード</target>
        </trans-unit>
        <trans-unit id="4f2cb7d89de589f8b7b4be46373643c7fc94a4a6" translate="yes" xml:space="preserve">
          <source>The direct answer to this is, assuming a simple situation where you don't expect other users or processes to be messing with your directory:</source>
          <target state="translated">これに対する直接的な答えは、他のユーザーやプロセスがディレクトリをいじっていることを想定していないという単純な状況を想定しています。</target>
        </trans-unit>
        <trans-unit id="4710e08c1ac50234e9a8f275e35d17b272a4422c" translate="yes" xml:space="preserve">
          <source>The documentation suggests this exactly because of the race condition discussed in this question. In addition, as others mention here, there is a performance advantage in querying once instead of twice the OS. Finally, the argument placed forward, potentially, in favour of the second code in some cases --when the developer knows the environment the application is running-- can only be advocated in the special case that the program has set up a private environment for itself (and other instances of the same program).</source>
          <target state="translated">ドキュメントでは、この質問で議論されている競合状態のために、正確にこれを示唆しています。さらに、他の人がここで言及しているように、2回のOSの代わりに1回の問い合わせをすることにはパフォーマンス上の利点があります。最後に、開発者がアプリケーションが実行されている環境を知っている場合に、いくつかのケースでは2回目のコードを支持する可能性があるという議論は、プログラムが自分自身(および同じプログラムの他のインスタンス)のためにプライベートな環境を設定しているという特殊なケースでのみ主張することができます。</target>
        </trans-unit>
        <trans-unit id="e70e2a42fc247116f91a4df146bd9f5fac1c216a" translate="yes" xml:space="preserve">
          <source>Then I idempotently ensure the directory exists - the &lt;code&gt;exist_ok&lt;/code&gt; argument shows up in Python 3.5:</source>
          <target state="translated">次に、 &lt;code&gt;exist_ok&lt;/code&gt; 等にディレクトリが存在することを確認します。exist_ok引数はPython 3.5で表示されます。</target>
        </trans-unit>
        <trans-unit id="33ca90387ef8d91e4035a5b4710c91811fb051a1" translate="yes" xml:space="preserve">
          <source>There's a new &lt;code&gt;Path&lt;/code&gt; object (as of 3.4) with lots of methods one would want to use with paths - one of which is &lt;code&gt;mkdir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 使用したい多くのメソッドを備えた新しいPathオブジェクト（3.4以降）があり、そのうちの1つは &lt;code&gt;mkdir&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="657d6466f2c29036b521dba710de96bf6626c3f1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;probably&lt;/em&gt; what you're wanting.</source>
          <target state="translated">これは&lt;em&gt;おそらく&lt;/em&gt;あなたが望んでいることです。</target>
        </trans-unit>
        <trans-unit id="a27e3016628be07b12b5296742271d571bf02444" translate="yes" xml:space="preserve">
          <source>This recursively creates the directory and does not raise an exception if the directory already exists.</source>
          <target state="translated">これは再帰的にディレクトリを作成し、ディレクトリが既に存在する場合は例外を発生させません。</target>
        </trans-unit>
        <trans-unit id="57735e971e5d9abfe4e85a53e5b3fbec952b4ecf" translate="yes" xml:space="preserve">
          <source>This will check if the file is there if it is not then it will create it.</source>
          <target state="translated">これはファイルがあるかどうかをチェックし、ない場合はファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="aa2b9eba9ec58ac7050dd1d51ea5c53f1d30b5db" translate="yes" xml:space="preserve">
          <source>This works for me and hopefully, it will works for you as well</source>
          <target state="translated">これは私のために動作し、うまくいけば、それはあなたのためにも動作します。</target>
        </trans-unit>
        <trans-unit id="7c2148bdc16b268a891d8a64e49184d47d3abb20" translate="yes" xml:space="preserve">
          <source>To handle the fact the directory might exist, catch &lt;code&gt;OSError&lt;/code&gt;.
(If &lt;code&gt;exist_ok&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (the default), an &lt;code&gt;OSError&lt;/code&gt; is raised if the target directory already exists.)</source>
          <target state="translated">ディレクトリが存在する可能性があるという事実を処理するには、 &lt;code&gt;OSError&lt;/code&gt; をキャッチします 。 （ &lt;code&gt;exist_ok&lt;/code&gt; が &lt;code&gt;False&lt;/code&gt; （デフォルト）の場合、ターゲットディレクトリがすでに存在すると &lt;code&gt;OSError&lt;/code&gt; が送出されます。）</target>
        </trans-unit>
        <trans-unit id="413520a3e50df142a8c05148995fafc683b360a4" translate="yes" xml:space="preserve">
          <source>Try &lt;a href=&quot;https://docs.python.org/library/os.path.html#os.path.exists&quot;&gt;&lt;code&gt;os.path.exists&lt;/code&gt;&lt;/a&gt;, and consider &lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; for the creation.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/os.path.html#os.path.exists&quot;&gt; &lt;code&gt;os.path.exists&lt;/code&gt; を&lt;/a&gt;試して、 &lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt;を作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="d3a86694ded81c408581f5b397aed6145c4f9368" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.exists&quot;&gt;&lt;code&gt;os.path.exists&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.exists&quot;&gt; &lt;code&gt;os.path.exists&lt;/code&gt; &lt;/a&gt;関数を試す</target>
        </trans-unit>
        <trans-unit id="d93092b9342d22e87a8ef4100a56936800ce7a2c" translate="yes" xml:space="preserve">
          <source>Use this command check and create dir</source>
          <target state="translated">このコマンドを使用してdirをチェックして作成します。</target>
        </trans-unit>
        <trans-unit id="525d8f8ad87a61e4610250dc956442abe1b9c698" translate="yes" xml:space="preserve">
          <source>Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:</source>
          <target state="translated">try except と errno モジュールからの正しいエラーコードを使用することで、競合状態を解消し、クロスプラットフォームに対応しています。</target>
        </trans-unit>
        <trans-unit id="917f074e5df4ab35c7e80d23c79df3c2ec82b36f" translate="yes" xml:space="preserve">
          <source>We don't have to deal with &lt;code&gt;os.path.join&lt;/code&gt; now - just join path parts with a &lt;code&gt;/&lt;/code&gt;:</source>
          <target state="translated">ここで &lt;code&gt;os.path.join&lt;/code&gt; を処理する必要はありません。パスの部分を &lt;code&gt;/&lt;/code&gt; で結合するだけです。</target>
        </trans-unit>
        <trans-unit id="99ce28997107d476e9fc3a63d0852739434e0296" translate="yes" xml:space="preserve">
          <source>We want to avoid overwriting the builtin function, &lt;code&gt;dir&lt;/code&gt;. Also, &lt;code&gt;filepath&lt;/code&gt; or perhaps &lt;code&gt;fullfilepath&lt;/code&gt; is probably a better semantic name than &lt;code&gt;filename&lt;/code&gt; so this would be better written:</source>
          <target state="translated">組み込み関数 &lt;code&gt;dir&lt;/code&gt; の上書きを避けたいです。 また、 &lt;code&gt;filepath&lt;/code&gt; またはおそらく &lt;code&gt;fullfilepath&lt;/code&gt; ファイルパスは 、おそらく &lt;code&gt;filename&lt;/code&gt; 名よりも意味論的な名前であるため、これはより適切に記述されます。</target>
        </trans-unit>
        <trans-unit id="a1a9dedb1be746f42e86f1ff0f02a289d4ab1d3a" translate="yes" xml:space="preserve">
          <source>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</source>
          <target state="translated">ファイルを書き込もうとしているディレクトリが存在するかどうかを確認し、存在しない場合はPythonを使ってディレクトリを作成する最もエレガントな方法は何でしょうか?私が試したのは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d28058b7ba10d7c6fe4a05256f5ed97045c03268" translate="yes" xml:space="preserve">
          <source>Where your code here is use the (touch) command</source>
          <target state="translated">あなたのコードがここにある場合は、(タッチ)コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f2e23ce686569ad8350733206c7706eea07f3673" translate="yes" xml:space="preserve">
          <source>While a naive solution may first use &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.isdir&quot;&gt;&lt;code&gt;os.path.isdir&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt;, the solution above reverses the order of the two operations. In doing so, it prevents a common race condition having to do with a duplicated attempt at creating the directory, and also disambiguates files from directories.</source>
          <target state="translated">単純なソリューションでは最初に&lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.isdir&quot;&gt; &lt;code&gt;os.path.isdir&lt;/code&gt; を&lt;/a&gt;使用し、その後に&lt;a href=&quot;https://docs.python.org/2/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; を&lt;/a&gt;使用する場合がありますが、上記のソリューションでは2つの操作の順序が逆になります。 そうすることで、ディレクトリを作成する際の重複した試行に関連する一般的な競合状態を防ぎ、ファイルをディレクトリから明確にします。</target>
        </trans-unit>
        <trans-unit id="ac34cea4b6ca681e86fcb74a12d4d027962a4177" translate="yes" xml:space="preserve">
          <source>Why not use subprocess module if running on a machine that supports command 
&lt;code&gt;mkdir&lt;/code&gt; with &lt;code&gt;-p&lt;/code&gt; option ? 
Works on python 2.7 and python 3.6</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; オプションを &lt;code&gt;mkdir&lt;/code&gt; したコマンドmkdirをサポートするマシンで実行している場合、サブプロセスモジュールを使用しないのはなぜですか？ Python 2.7およびPython 3.6で動作します</target>
        </trans-unit>
        <trans-unit id="e4777a61e82b0ede8c278f3167a642217b27846d" translate="yes" xml:space="preserve">
          <source>Why would you make a directory for a file that you expect to be there and be able to read?</source>
          <target state="translated">そこにあるはずのファイルが読めるようになっているのに、なぜディレクトリを作るのか?</target>
        </trans-unit>
        <trans-unit id="614d7fe50ef625fdc00076885ef6a0958e2074f3" translate="yes" xml:space="preserve">
          <source>With regard to the directory's &lt;em&gt;mode&lt;/em&gt;, please refer to the documentation if you care about it.</source>
          <target state="translated">ディレクトリの&lt;em&gt;モード&lt;/em&gt;については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2733f4de239159b7954ae10717a9de4a0d8f2130" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://docs.python.org/2/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt;&lt;code&gt;mkpath&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt; &lt;code&gt;mkpath&lt;/code&gt; &lt;/a&gt;を使用できます</target>
        </trans-unit>
        <trans-unit id="06628bc05e1d54f41341f98d20675258e87615f8" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;os.listdir&lt;/code&gt; for this:</source>
          <target state="translated">これには &lt;code&gt;os.listdir&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="7cf103c255fa677ea9f423097c9a44c5cfe7a020" translate="yes" xml:space="preserve">
          <source>You give a particular file at a certain path and you pull the directory from the file path. Then after making sure you have the directory, you attempt to open a file for reading. To comment on this code:</source>
          <target state="translated">特定のパスに特定のファイルを与え、そのファイルパスからディレクトリを引き出します。そして、そのディレクトリがあることを確認した後、ファイルを開いて読もうとします。このコードにコメントするには</target>
        </trans-unit>
        <trans-unit id="6052af5853fd347b0aeab05bc6bcc4f07874858c" translate="yes" xml:space="preserve">
          <source>You have to set the full path before creating the directory:</source>
          <target state="translated">ディレクトリを作成する前にフルパスを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="56d28d9565a39da08aca1caa9e22049b44a768f3" translate="yes" xml:space="preserve">
          <source>Your end goal is to open this file, you initially state, for writing, but you're essentially approaching this goal (based on your code) like this, which opens the file for &lt;strong&gt;reading&lt;/strong&gt;:</source>
          <target state="translated">あなたの最終的な目標は、このファイルを開くことです。最初は書き込みのために述べますが、基本的にはこのように（コードに基づいて）この目標に近づいています。</target>
        </trans-unit>
        <trans-unit id="0c7364050c5331f5b0b43cbfbb9de956a1867c02" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist&quot;&gt;How can I create a directory if it does not exist?&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist&quot;&gt;ディレクトリが存在しない場合、どうすれば作成できますか？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="549fd39871f5892c4092cced01f37a74c23c77cc" translate="yes" xml:space="preserve">
          <source>[2] &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;https://docs.python.org/3/library/os.html#os.makedirs&lt;/a&gt;</source>
          <target state="translated">[2] &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;https://docs.python.org/3/library/os.html#os.makedirs&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ac45d7f4ee3550c6ad3415c9a62ec084feb6538" translate="yes" xml:space="preserve">
          <source>is better than the alternative</source>
          <target state="translated">は代替品よりも優れている</target>
        </trans-unit>
        <trans-unit id="32133da69c38d6a432b2087ec0dfe35d3e89bf02" translate="yes" xml:space="preserve">
          <source>means a directory (path) exists AND is a directory. So for me this way does what I need. So I can make sure it is folder (not a file) and exists.</source>
          <target state="translated">は、ディレクトリ(パス)が存在し、かつディレクトリであることを意味します。だから私にとってはこの方法は私が必要としていることを行います。だから、私はそれがフォルダ(ファイルではなく)であり、存在することを確認することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
