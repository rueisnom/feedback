<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/273192">
    <body>
      <group id="273192">
        <trans-unit id="3121ac2ed4bcb912f44c1a708fd4fa005c62df64" translate="yes" xml:space="preserve">
          <source>(For context, I'm tracking my weekly rep with a script. Here's the relevant parts of code from the script that allow me to avoid hitting Stack Overflow more than once a day for the same data.)</source>
          <target state="translated">(Для контекста,я отслеживаю свой еженедельный репертуар со сценарием.Вот соответствующие части кода из скрипта,которые позволяют мне избежать попадания Stack Overflow более одного раза в день для тех же данных).</target>
        </trans-unit>
        <trans-unit id="3eb796c0d6b99c763af93d3b97f34d9a1877151e" translate="yes" xml:space="preserve">
          <source>(just as &lt;a href=&quot;https://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; got an &lt;code&gt;exist_ok&lt;/code&gt; flag starting from python 3.2 e.g &lt;code&gt;os.makedirs(path, exist_ok=True)&lt;/code&gt;)</source>
          <target state="translated">(так же, как &lt;a href=&quot;https://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt; получил флаг &lt;code&gt;exist_ok&lt;/code&gt; начиная с python 3.2, например, &lt;code&gt;os.makedirs(path, exist_ok=True)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="18a3c7a1b3ef5d5d0b224c6076395a8aa2e4273e" translate="yes" xml:space="preserve">
          <source>... You're going to end up with a directory named &lt;code&gt;filename.etc&lt;/code&gt; when you pass that argument to &lt;code&gt;os.makedirs()&lt;/code&gt; if you test with &lt;code&gt;os.path.exists()&lt;/code&gt;.</source>
          <target state="translated">... Когда вы передадите этот аргумент в &lt;code&gt;os.makedirs()&lt;/code&gt; , вы &lt;code&gt;os.path.exists()&lt;/code&gt; каталог с именем &lt;code&gt;filename.etc&lt;/code&gt; , если вы протестируете с os.path.exists () .</target>
        </trans-unit>
        <trans-unit id="12b82177815800e1d2adf2e41a4a0b40631382f5" translate="yes" xml:space="preserve">
          <source>...and by allowing &lt;a href=&quot;https://docs.python.org/3.2/library/os.html#os.makedirs&quot;&gt;a keyword argument to &lt;code&gt;os.makedirs&lt;/code&gt; called &lt;code&gt;exist_ok&lt;/code&gt;&lt;/a&gt; (in 3.2+).</source>
          <target state="translated">... и позволяя &lt;a href=&quot;https://docs.python.org/3.2/library/os.html#os.makedirs&quot;&gt;аргументу с ключевым словом для &lt;code&gt;os.makedirs&lt;/code&gt; под названием &lt;code&gt;exist_ok&lt;/code&gt; &lt;/a&gt; (в 3.2+).</target>
        </trans-unit>
        <trans-unit id="d2cb971d27ac509e9772623d927e6363ff0a92a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt;&lt;code&gt;mkpath&lt;/code&gt;&lt;/a&gt; creates the nested directory, and does nothing if the directory already exists. This works in both Python 2 and 3.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt; &lt;code&gt;mkpath&lt;/code&gt; &lt;/a&gt; создает вложенный каталог и ничего не делает, если каталог уже существует. Это работает как в Python 2, так и в 3.</target>
        </trans-unit>
        <trans-unit id="0443b8240c037eb60f44be401cd11e8ad86dd87b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; as used above recursively creates the directory and does not raise an exception if the directory already exists. It has the optional &lt;code&gt;exist_ok&lt;/code&gt; argument only if using Python 3.2+, with a default value of &lt;code&gt;False&lt;/code&gt;. This argument does not exist in Python 2.x up to 2.7. As such, there is no need for manual exception handling as with Python 2.7.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; ,&lt;/a&gt; как использовано выше, рекурсивно создает каталог и не вызывает исключение, если каталог уже существует. Он имеет необязательный аргумент &lt;code&gt;exist_ok&lt;/code&gt; , только если используется Python 3.2+ со значением по умолчанию &lt;code&gt;False&lt;/code&gt; . Этот аргумент не существует в Python 2.x до 2.7. Таким образом, нет необходимости в ручной обработке исключений, как в Python 2.7.</target>
        </trans-unit>
        <trans-unit id="c69cbbeb4b9bb92190a2541fb7a478447ef001ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt; as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the &lt;code&gt;parents&lt;/code&gt; argument.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; ,&lt;/a&gt; как использовано выше, рекурсивно создает каталог и не вызывает исключение, если каталог уже существует. Если вам не нужно или вы хотите, чтобы родители были созданы, пропустите аргумент &lt;code&gt;parents&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5722f73ffd926bda9aeb0c49ae9810a9cdeffffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Path&lt;/code&gt; objects have to be coerced to &lt;code&gt;str&lt;/code&gt; before other APIs that expect &lt;code&gt;str&lt;/code&gt; paths can use them.</source>
          <target state="translated">Объекты &lt;code&gt;Path&lt;/code&gt; должны быть приведены к &lt;code&gt;str&lt;/code&gt; , прежде чем другие API, ожидающие пути &lt;code&gt;str&lt;/code&gt; , смогут их использовать.</target>
        </trans-unit>
        <trans-unit id="02fbfa8e9162845467edc255293ffbc665a98adc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Check if a directory exists and create it if necessary?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Проверить, существует ли каталог, и создать его при необходимости?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e2a9d4549bcebed0d695f93286f43be9880e1ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using &lt;code&gt;os&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Используя &lt;code&gt;os&lt;/code&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="513f1e61389d5d53dc42b6dd097dcfa305b4e3e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using &lt;code&gt;pathlib&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Использование &lt;code&gt;pathlib&lt;/code&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90a13575f8e0892507d63b6f2ba2e38915862974" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;or&lt;/strong&gt; if making the directory is subject to race conditions (i.e. if after checking the path exists, something else may have already made it) do this:</source>
          <target state="translated">&lt;strong&gt;или&lt;/strong&gt; если создание каталога зависит от условий гонки (т. е. если после проверки пути существует, что-то еще, возможно, уже сделало это), сделайте это:</target>
        </trans-unit>
        <trans-unit id="3b8239e68048624328c3887db9856779071451e0" translate="yes" xml:space="preserve">
          <source>Alternative:</source>
          <target state="translated">Alternative:</target>
        </trans-unit>
        <trans-unit id="a1cf8b16dad890eb5c4e0c9271810e8851b63291" translate="yes" xml:space="preserve">
          <source>Alternatively, there could be a second &lt;code&gt;os.path.exists&lt;/code&gt;, but suppose another created the directory after the first check, then removed it before the second one &amp;ndash; we could still be fooled.</source>
          <target state="translated">В качестве альтернативы может существовать второй &lt;code&gt;os.path.exists&lt;/code&gt; , но предположим, что другой создал каталог после первой проверки, а затем удалил его до второй проверки - нас все еще можно обмануть.</target>
        </trans-unit>
        <trans-unit id="5425ec8a183a1bc6b38039d433238fd743244e9d" translate="yes" xml:space="preserve">
          <source>And a foolish user input:</source>
          <target state="translated">И глупый пользовательский ввод:</target>
        </trans-unit>
        <trans-unit id="1c86fe1e6829df459e27c81259e6840525f66bc8" translate="yes" xml:space="preserve">
          <source>As noted in comments and elsewhere, there's a race condition &amp;ndash; if the directory is created between the &lt;code&gt;os.path.exists&lt;/code&gt; and the &lt;code&gt;os.makedirs&lt;/code&gt; calls, the &lt;code&gt;os.makedirs&lt;/code&gt; will fail with an &lt;code&gt;OSError&lt;/code&gt;. Unfortunately, blanket-catching &lt;code&gt;OSError&lt;/code&gt; and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</source>
          <target state="translated">Как отмечено в комментариях и в других местах, существует условие &lt;code&gt;os.path.exists&lt;/code&gt; - если каталог создается между вызовами os.path.exists и &lt;code&gt;os.makedirs&lt;/code&gt; , то &lt;code&gt;os.makedirs&lt;/code&gt; завершится с ошибкой &lt;code&gt;OSError&lt;/code&gt; . К сожалению, &lt;code&gt;OSError&lt;/code&gt; и продолжение не являются надежными, поскольку он будет игнорировать сбой при создании каталога из-за других факторов, таких как недостаточные разрешения, полный диск и т. Д.</target>
        </trans-unit>
        <trans-unit id="7ee80f57ba0d6d00c9276e06f774ed3925ebe0d9" translate="yes" xml:space="preserve">
          <source>Assuming opening for reading</source>
          <target state="translated">Предполагая открытие для чтения</target>
        </trans-unit>
        <trans-unit id="a732816cb0c9b0cc684d45193ba9368d44c027e2" translate="yes" xml:space="preserve">
          <source>Assuming we're opening for writing</source>
          <target state="translated">Если предположить,что мы открываемся для написания</target>
        </trans-unit>
        <trans-unit id="8c423e5c0dfe6a62a16b5a6a6f5ed6162e97b8c5" translate="yes" xml:space="preserve">
          <source>But perhaps an even better approach is to sidestep the resource contention issue, by using temporary directories via &lt;a href=&quot;https://docs.python.org/library/tempfile.html#tempfile.mkdtemp&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Но, возможно, еще лучший подход - обойти проблему конфликта ресурсов, используя временные каталоги через временный &lt;a href=&quot;https://docs.python.org/library/tempfile.html#tempfile.mkdtemp&quot;&gt; &lt;code&gt;tempfile&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="4e1673fa7c1d5fc36445668c4adb7c1b8bc89428" translate="yes" xml:space="preserve">
          <source>Call the function &lt;code&gt;create_dir()&lt;/code&gt; at the entry point of your program/project.</source>
          <target state="translated">Вызовите функцию &lt;code&gt;create_dir()&lt;/code&gt; в точке входа вашей программы / проекта.</target>
        </trans-unit>
        <trans-unit id="01ca4760ac618ba068fbfb39127ce9adee4f1bac" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt;:  (It makes sure the complete path exists.)</source>
          <target state="translated">Проверьте &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt; : (Это гарантирует, что полный путь существует.)</target>
        </trans-unit>
        <trans-unit id="6164c0b5b7d56fc2c96acfc1e85d0aea94d39e63" translate="yes" xml:space="preserve">
          <source>Conclusion: in my opinion, &quot;Method 2&quot; is more robust.</source>
          <target state="translated">Вывод:на мой взгляд,&quot;Метод 2&quot; является более надежным.</target>
        </trans-unit>
        <trans-unit id="2f45eec4334aa25687d578b05a730ae07f2d8c14" translate="yes" xml:space="preserve">
          <source>Consider this directory structure:</source>
          <target state="translated">Рассмотрим эту структуру каталога:</target>
        </trans-unit>
        <trans-unit id="d2d4fee838a956a0a5155cf4a5747b0668a441c2" translate="yes" xml:space="preserve">
          <source>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</source>
          <target state="translated">В зависимости от применения,опасность одновременных операций может быть больше или меньше,чем опасность,создаваемая другими факторами,например,разрешениями на работу с файлами.Разработчик должен знать больше о конкретном разрабатываемом приложении и его предполагаемой среде,прежде чем выбирать реализацию.</target>
        </trans-unit>
        <trans-unit id="deae96764aa4587da73f1ce1ffb9899c015ce4c4" translate="yes" xml:space="preserve">
          <source>Even in that case, this is a bad practice and can lead to long useless debugging. For example, the fact we set the permissions for a directory should not leave us with the impression permissions are set appropriately for our purposes. A parent directory could be mounted with other permissions. In general, a program should always work correctly and the programmer should not expect one specific environment.</source>
          <target state="translated">Даже в этом случае это плохая практика и может привести к длительной бесполезной отладке.Например,тот факт,что мы устанавливаем права доступа к каталогу,не должен создавать у нас впечатление,что права доступа установлены в соответствии с нашими целями.Родительский каталог может быть смонтирован с другими правами.В общем,программа всегда должна работать корректно и программист не должен ожидать одного конкретного окружения.</target>
        </trans-unit>
        <trans-unit id="35c95b4868de9bf6ba8db931f46dd2e29eb6e01c" translate="yes" xml:space="preserve">
          <source>First the relevant imports:</source>
          <target state="translated">Сначала соответствующий импорт:</target>
        </trans-unit>
        <trans-unit id="f48e8c1c7ccf846218c4fb87f4a1f71363cf5c47" translate="yes" xml:space="preserve">
          <source>For a one-liner solution, you can use &lt;a href=&quot;https://github.com/ipython/ipython/blob/b70b3f21749ca969088fdb54edcc36bb8a2267b9/IPython/utils/path.py#L423-L438&quot;&gt;&lt;code&gt;IPython.utils.path.ensure_dir_exists()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Для однострочного решения вы можете использовать &lt;a href=&quot;https://github.com/ipython/ipython/blob/b70b3f21749ca969088fdb54edcc36bb8a2267b9/IPython/utils/path.py#L423-L438&quot;&gt; &lt;code&gt;IPython.utils.path.ensure_dir_exists()&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="5eb6cd999782910d8577c5e49c2cabbd7c4cfe91" translate="yes" xml:space="preserve">
          <source>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</source>
          <target state="translated">Для старых версий Python я вижу два ответа с хорошими качествами,каждый с небольшим недостатком,так что я дам свой ответ:</target>
        </trans-unit>
        <trans-unit id="ad50b66f54fc8b40a971a312b1e7b1f89975e434" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;https://ipython.org/ipython-doc/3/api/generated/IPython.utils.path.html#IPython.utils.path.ensure_dir_exists&quot;&gt;documentation&lt;/a&gt;: &lt;em&gt;Ensure that a directory exists. If it doesn&amp;rsquo;t exist, try to create it and protect against a race condition if another process is doing the same.&lt;/em&gt;</source>
          <target state="translated">Из &lt;a href=&quot;https://ipython.org/ipython-doc/3/api/generated/IPython.utils.path.html#IPython.utils.path.ensure_dir_exists&quot;&gt;документации&lt;/a&gt; : &lt;em&gt;убедитесь, что каталог существует.&lt;/em&gt; &lt;em&gt;Если он не существует, попытайтесь создать его и защитить от состояния гонки, если другой процесс делает то же самое.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac620040ee41da4ac4af95274cdd1c3f011dd85f" translate="yes" xml:space="preserve">
          <source>Here are my experiments/notes, which clarifies things:</source>
          <target state="translated">Вот мои комментарии к экспериментам,которые все проясняют:</target>
        </trans-unit>
        <trans-unit id="4f35d5503e88dfd831b6147a4612e9bccc4447fc" translate="yes" xml:space="preserve">
          <source>Here's a little more of the script - in my case, I'm not subject to a race condition, I only have one process that expects the directory (or contained files) to be there, and I don't have anything trying to remove the directory.</source>
          <target state="translated">Вот еще немного скрипта-в моем случае,я не подвержен состоянию гонки,у меня есть только один процесс,который ожидает,что каталог (или содержащиеся в нем файлы)будет там,и у меня нет ничего,что пыталось бы удалить каталог.</target>
        </trans-unit>
        <trans-unit id="a3a28383d88c9f97f89da0f85ed2d6ea047cf57b" translate="yes" xml:space="preserve">
          <source>Here's the essentials from the online doc:</source>
          <target state="translated">Вот основы из онлайн-дока:</target>
        </trans-unit>
        <trans-unit id="422c9974b57e23de918cca25a8e4e75144ac9949" translate="yes" xml:space="preserve">
          <source>Here's the relevant part of the &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;documentation&lt;/a&gt;:</source>
          <target state="translated">Вот соответствующая часть &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;документации&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="abc4d97edcbb87d0e3301e065d3b93e2104ed36d" translate="yes" xml:space="preserve">
          <source>How can I safely create a nested directory</source>
          <target state="translated">Как безопасно создать вложенный каталог</target>
        </trans-unit>
        <trans-unit id="43df623a8684ce2d0992ddf3e318fee0b73a5bca" translate="yes" xml:space="preserve">
          <source>However, say we have several Python processes that attempt to put all their data into the same directory. Then we may have contention over creation of the directory. In that case it's best to wrap the &lt;code&gt;makedirs&lt;/code&gt; call in a try-except block.</source>
          <target state="translated">Однако, скажем, у нас есть несколько процессов Python, которые пытаются поместить все свои данные в один и тот же каталог. Тогда мы можем иметь разногласия по поводу создания каталога. В этом случае лучше всего обернуть вызов &lt;code&gt;makedirs&lt;/code&gt; в блок try-Кроме.</target>
        </trans-unit>
        <trans-unit id="01b533ca1cfd4009ed30def6151904b1fbc1ac26" translate="yes" xml:space="preserve">
          <source>I found this Q/A and I was initially puzzled by some of the failures and errors I was getting. I am working in Python 3 (v.3.5 in an Anaconda virtual environment on an Arch Linux x86_64 system).</source>
          <target state="translated">Я нашел этот QA и изначально был озадачен некоторыми неудачами и ошибками,которые я получал.Я работаю на Python 3 (v.3.5 в виртуальной среде Anaconda на Arch Linux x86_64 системе).</target>
        </trans-unit>
        <trans-unit id="bcf2d027a264623ff0d6f130ef23fd5cf6a23215" translate="yes" xml:space="preserve">
          <source>I have put the following down. It's not totally foolproof though.</source>
          <target state="translated">Я положил следующее.Хотя это не совсем безукоризненно.</target>
        </trans-unit>
        <trans-unit id="9d92b1d4efb363280e561cb068cc7fe185f10913" translate="yes" xml:space="preserve">
          <source>I saw &lt;a href=&quot;https://stackoverflow.com/a/5032238/3051142&quot;&gt;Heikki Toivonen&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/14364249&quot;&gt;A-B-B&lt;/a&gt;'s answers and thought of this variation.</source>
          <target state="translated">Я видел ответы &lt;a href=&quot;https://stackoverflow.com/a/5032238/3051142&quot;&gt;Хейкки Тойвонена&lt;/a&gt; и &lt;a href=&quot;https://stackoverflow.com/a/14364249&quot;&gt;АББ&lt;/a&gt; и думал об этом варианте.</target>
        </trans-unit>
        <trans-unit id="44bc7785155af664bc388bf4072f7f57fab5223a" translate="yes" xml:space="preserve">
          <source>I use &lt;code&gt;os.path.exists()&lt;/code&gt;, &lt;a href=&quot;http://pastebin.com/vnVk2rY5&quot;&gt;here&lt;/a&gt; is a Python 3 script that can be used to check if a directory exists, create one if it does not exist, and delete it if it does exist (if desired).</source>
          <target state="translated">Я использую &lt;code&gt;os.path.exists()&lt;/code&gt; , &lt;a href=&quot;http://pastebin.com/vnVk2rY5&quot;&gt;вот&lt;/a&gt; скрипт Python 3, который можно использовать для проверки, существует ли каталог, создать его, если он не существует, и удалить его, если он существует (при желании).</target>
        </trans-unit>
        <trans-unit id="dda21083479a5a551734a83ecabb56f6a839f5f8" translate="yes" xml:space="preserve">
          <source>I would personally recommend that you use &lt;code&gt;os.path.isdir()&lt;/code&gt; to test instead of &lt;code&gt;os.path.exists()&lt;/code&gt;.</source>
          <target state="translated">Я бы лично порекомендовал вам использовать &lt;code&gt;os.path.isdir()&lt;/code&gt; для тестирования вместо &lt;code&gt;os.path.exists()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98719f93c1117e90bd3d2ccd57a9fbbebdadfceb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exist_ok&lt;/code&gt; is true, &lt;code&gt;FileExistsError&lt;/code&gt; exceptions will be ignored (same behavior as the &lt;code&gt;POSIX mkdir -p&lt;/code&gt; command), but only if the last path component is not an existing non-directory file.</source>
          <target state="translated">Если значение &lt;code&gt;exist_ok&lt;/code&gt; равно true, исключения &lt;code&gt;FileExistsError&lt;/code&gt; будут игнорироваться (то же поведение, что и команда &lt;code&gt;POSIX mkdir -p&lt;/code&gt; ), но только в том случае, если последний компонент пути не является существующим файлом, не являющимся каталогом.</target>
        </trans-unit>
        <trans-unit id="9c76336e3b2bcc4c3ff147925ca8a2045da088d7" translate="yes" xml:space="preserve">
          <source>If the directory or file isn't there, you'll get an &lt;code&gt;IOError&lt;/code&gt; with an associated error number: &lt;code&gt;errno.ENOENT&lt;/code&gt; will point to the correct error number regardless of your platform. You can catch it if you want, for example:</source>
          <target state="translated">Если каталог или файл не существует, вы получите &lt;code&gt;IOError&lt;/code&gt; с соответствующим номером ошибки: &lt;code&gt;errno.ENOENT&lt;/code&gt; будет указывать на правильный номер ошибки независимо от вашей платформы. Вы можете поймать его, если хотите, например:</target>
        </trans-unit>
        <trans-unit id="47f877478b34abfa92dad52ab6be30c3ff05158b" translate="yes" xml:space="preserve">
          <source>If using Python 3.4, even though it comes with &lt;code&gt;pathlib&lt;/code&gt;, it is missing the useful &lt;code&gt;exist_ok&lt;/code&gt; option. The backport is intended to offer a newer and superior implementation of &lt;code&gt;mkdir&lt;/code&gt; which includes this missing option.</source>
          <target state="translated">При использовании Python 3.4, даже если он поставляется с &lt;code&gt;pathlib&lt;/code&gt; , в нем отсутствует полезная опция &lt;code&gt;exist_ok&lt;/code&gt; . Бэкпорт призван предложить более новую и улучшенную реализацию &lt;code&gt;mkdir&lt;/code&gt; , которая включает в себя этот отсутствующий параметр.</target>
        </trans-unit>
        <trans-unit id="f859712e9880cf77f7dea1b20c5921a1728a2543" translate="yes" xml:space="preserve">
          <source>If you can, install the current &lt;code&gt;pathlib&lt;/code&gt; backport named &lt;a href=&quot;https://pypi.python.org/pypi/pathlib2/&quot;&gt;&lt;code&gt;pathlib2&lt;/code&gt;&lt;/a&gt;. Do not install the older unmaintained backport named &lt;a href=&quot;https://pypi.python.org/pypi/pathlib/&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;. Next, refer to the Python 3.5+ section above and use it the same.</source>
          <target state="translated">Если вы можете, установите текущий &lt;code&gt;pathlib&lt;/code&gt; именем &lt;a href=&quot;https://pypi.python.org/pypi/pathlib2/&quot;&gt; &lt;code&gt;pathlib2&lt;/code&gt; &lt;/a&gt; . Не устанавливайте старый незарегистрированный бэкпорт с именем &lt;a href=&quot;https://pypi.python.org/pypi/pathlib/&quot;&gt; &lt;code&gt;pathlib&lt;/code&gt; &lt;/a&gt; . Далее, обратитесь к разделу Python 3.5+ выше и используйте его так же.</target>
        </trans-unit>
        <trans-unit id="d3f798f5adf38af98cf182c37eab7725c5f2cb46" translate="yes" xml:space="preserve">
          <source>If you consider the following:</source>
          <target state="translated">Если учесть следующее:</target>
        </trans-unit>
        <trans-unit id="39889263d487079852bb1c20c0aa134d99325643" translate="yes" xml:space="preserve">
          <source>If you have:</source>
          <target state="translated">Если так:</target>
        </trans-unit>
        <trans-unit id="3d535b65e069fedb4050c6a2e3fdb6276eaaa0d0" translate="yes" xml:space="preserve">
          <source>If you need error handling:</source>
          <target state="translated">Если вам нужна обработка ошибок:</target>
        </trans-unit>
        <trans-unit id="da4a9ca8792c5dc564c13bc23c48d1785b25767f" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python2&lt;/strong&gt;, &lt;code&gt;os.makedirs&lt;/code&gt; doesn't support setting &lt;code&gt;exist_ok&lt;/code&gt;. You can use the approach in &lt;a href=&quot;https://stackoverflow.com/a/5032238/3109254&quot;&gt;heikki-toivonen's answer&lt;/a&gt;:</source>
          <target state="translated">В &lt;strong&gt;Python2&lt;/strong&gt; &lt;code&gt;os.makedirs&lt;/code&gt; не поддерживает настройку &lt;code&gt;exist_ok&lt;/code&gt; . Вы можете использовать подход в &lt;a href=&quot;https://stackoverflow.com/a/5032238/3109254&quot;&gt;ответе Хейкки-Тойвонена&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="8625861c30a24838ae98628bdb27d023a533c351" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python3&lt;/strong&gt;, &lt;code&gt;os.makedirs&lt;/code&gt; supports setting &lt;code&gt;exist_ok&lt;/code&gt;. The default setting is &lt;code&gt;False&lt;/code&gt;, which means an &lt;code&gt;OSError&lt;/code&gt; will be raised if the target directory already exists. By setting &lt;code&gt;exist_ok&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;OSError&lt;/code&gt; (directory exists) will be ignored and the directory will not be created.</source>
          <target state="translated">В &lt;strong&gt;Python3&lt;/strong&gt; &lt;code&gt;os.makedirs&lt;/code&gt; поддерживает настройку &lt;code&gt;exist_ok&lt;/code&gt; . Значением по умолчанию является &lt;code&gt;False&lt;/code&gt; , что означает, что &lt;code&gt;OSError&lt;/code&gt; будет вызываться, если целевой каталог уже существует. При &lt;code&gt;exist_ok&lt;/code&gt; &lt;code&gt;True&lt;/code&gt; для параметра origin_ok &lt;code&gt;OSError&lt;/code&gt; (каталог существует) будет игнорироваться, и каталог не будет создан.</target>
        </trans-unit>
        <trans-unit id="5bc5e0146edc2ae08e3b66fbc6a7f8915debe013" translate="yes" xml:space="preserve">
          <source>In Python 3.4 you can also use the &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot;&gt;brand new &lt;code&gt;pathlib&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">В Python 3.4 вы также можете использовать &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot;&gt;новый модуль &lt;code&gt;pathlib&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3b0312661232fca3e0cc2f2d4f7b9512298dd650" translate="yes" xml:space="preserve">
          <source>In other words, we try to create the directories, but if they already exist we ignore the error. On the other hand, any other error gets reported. For example, if you create dir 'a' beforehand and remove all permissions from it, you will get an &lt;code&gt;OSError&lt;/code&gt; raised with &lt;code&gt;errno.EACCES&lt;/code&gt; (Permission denied, error 13).</source>
          <target state="translated">Другими словами, мы пытаемся создать каталоги, но если они уже существуют, мы игнорируем ошибку. С другой стороны, сообщается о любой другой ошибке. Например, если вы предварительно создаете dir 'a' и удаляете из него все разрешения, вы получите &lt;code&gt;OSError&lt;/code&gt; с &lt;code&gt;errno.EACCES&lt;/code&gt; (Permission denied, error 13).</target>
        </trans-unit>
        <trans-unit id="bc2cb7f7490dce0c4ecef3917af3d76415cc76ab" translate="yes" xml:space="preserve">
          <source>In situations where portability doesn't matter (ex, using docker) the solution is a clean 2 lines. You also don't have to add logic to check if directories exist or not. Finally, it is safe to re-run without any side effects</source>
          <target state="translated">В ситуациях,когда переносимость не имеет значения (например,при использовании докера)решением является чистая 2 строки.Вам также не нужно добавлять логику,чтобы проверить,существуют ли каталоги или нет.Наконец,повторный запуск без побочных эффектов безопасен.</target>
        </trans-unit>
        <trans-unit id="f57111a438a1422cc4a9a213182fba093c5300a3" translate="yes" xml:space="preserve">
          <source>In this case, we probably aren't facing any race conditions. So just do as you were, but note that for writing, you need to open with the &lt;code&gt;w&lt;/code&gt; mode (or &lt;code&gt;a&lt;/code&gt; to append). It's also a Python best practice to use the context manager for opening files.</source>
          <target state="translated">В этом случае мы, вероятно, не сталкиваемся ни с какими условиями гонки. Так что просто делайте, как вы, но учтите, что для записи вам нужно открыть с помощью режима &lt;code&gt;w&lt;/code&gt; (или &lt;code&gt;a&lt;/code&gt; для добавления). На Python также рекомендуется использовать контекстный менеджер для открытия файлов.</target>
        </trans-unit>
        <trans-unit id="7bac4e71dafd67ff58d4f3cd38dc5a8e3db6a7a5" translate="yes" xml:space="preserve">
          <source>Insights on the specifics of this situation</source>
          <target state="translated">Взгляды на специфику этой ситуации</target>
        </trans-unit>
        <trans-unit id="94a86bef186f48282460ed5f521d706d87bb14f7" translate="yes" xml:space="preserve">
          <source>Is there a flag for &quot;open&quot;, that makes this happen automatically?</source>
          <target state="translated">Есть ли флаг &quot;открыто&quot;,который делает это автоматически?</target>
        </trans-unit>
        <trans-unit id="53a6078a60c2df8b65bf5650f02981b382340f9c" translate="yes" xml:space="preserve">
          <source>It prompts users for input of the directory and can be easily modified.</source>
          <target state="translated">Он подсказывает пользователям вводить каталог и может быть легко изменен.</target>
        </trans-unit>
        <trans-unit id="2c98cd5e104877c93e7679c628c3a41a50e08e7f" translate="yes" xml:space="preserve">
          <source>It works for Python 2 and 3.</source>
          <target state="translated">Он работает на Питоне 2 и 3.</target>
        </trans-unit>
        <trans-unit id="7da5e505d3b9d04e82715fd31962bc7254adf01d" translate="yes" xml:space="preserve">
          <source>Just attempt to open the file.</source>
          <target state="translated">Просто попробуй открыть файл.</target>
        </trans-unit>
        <trans-unit id="ffb042fc6fd8ec1e8c1ccfc1c371d7c8a49dd347" translate="yes" xml:space="preserve">
          <source>Modern versions of Python improve this code quite a bit, both by exposing &lt;a href=&quot;https://docs.python.org/3.3/library/exceptions.html?#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; (in 3.3+)...</source>
          <target state="translated">Современные версии Python немного улучшают этот код, предоставляя &lt;a href=&quot;https://docs.python.org/3.3/library/exceptions.html?#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt; (в версии 3.3+ ) ...</target>
        </trans-unit>
        <trans-unit id="55638ec05de3f80638e1e9ba3970e3a5f900619e" translate="yes" xml:space="preserve">
          <source>New in Python 3.5: &lt;code&gt;pathlib.Path&lt;/code&gt; with &lt;code&gt;exist_ok&lt;/code&gt;</source>
          <target state="translated">Новое в Python 3.5: &lt;code&gt;pathlib.Path&lt;/code&gt; с &lt;code&gt;exist_ok&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9a44c5e1ab9cdaaa3baa8a75f9dca9b73072610" translate="yes" xml:space="preserve">
          <source>Note that capturing the exception and using &lt;code&gt;errno&lt;/code&gt; is of limited usefulness because &lt;code&gt;OSError: [Errno 17] File exists&lt;/code&gt;, i.e. &lt;code&gt;errno.EEXIST&lt;/code&gt;, is raised for both files and directories. It is more reliable simply to check if the directory exists.</source>
          <target state="translated">Обратите внимание, что захват исключения и использование &lt;code&gt;errno&lt;/code&gt; имеет ограниченную полезность, поскольку &lt;code&gt;OSError: [Errno 17] File exists&lt;/code&gt; , т.е. &lt;code&gt;errno.EEXIST&lt;/code&gt; , вызывается как для файлов, так и для каталогов. Надежнее просто проверить, существует ли каталог.</target>
        </trans-unit>
        <trans-unit id="7a148cef5cbd02be1bd31d991f8041fdbd60ae6b" translate="yes" xml:space="preserve">
          <source>Note that it will create the ancestor directories as well.</source>
          <target state="translated">Обратите внимание,что он также создаст каталоги предков.</target>
        </trans-unit>
        <trans-unit id="82ccbd2ecaf0605297a7236e42508b9b3d15fdd4" translate="yes" xml:space="preserve">
          <source>Now as I say, this is not really foolproof, because we have the possiblity of failing to create the directory, and another process creating it during that period.</source>
          <target state="translated">Теперь,как я уже сказал,это не совсем надежно,потому что у нас есть вероятность того,что мы не сможем создать каталог,и другой процесс,создающий его в этот период.</target>
        </trans-unit>
        <trans-unit id="3e1d25d6194016ea62683fc16ffea1c40c3692d1" translate="yes" xml:space="preserve">
          <source>On Python &amp;ge; 3.5, use &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">На Python &amp;ge; 3.5 используйте &lt;a href=&quot;https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e2ca98d5312a1b512bc5c2fe3a1c52f2cf022ea3" translate="yes" xml:space="preserve">
          <source>One option would be to trap the &lt;code&gt;OSError&lt;/code&gt; and examine the embedded error code (see &lt;a href=&quot;https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror&quot;&gt;Is there a cross-platform way of getting information from Python&amp;rsquo;s OSError&lt;/a&gt;):</source>
          <target state="translated">Один из вариантов - перехватить &lt;code&gt;OSError&lt;/code&gt; и изучить встроенный код ошибки (см. &lt;a href=&quot;https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror&quot;&gt;Есть ли кроссплатформенный способ получения информации из OSError в Python&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="5c5f8f0eeaea28800db9b820b5fbb8284e30bc53" translate="yes" xml:space="preserve">
          <source>Per &lt;a href=&quot;http://bugs.python.org/issue10948&quot;&gt;Bug 10948&lt;/a&gt;, a severe limitation of this alternative is that it works only once per python process for a given path. In other words, if you use it to create a directory, then delete the directory from inside or outside Python, then use &lt;code&gt;mkpath&lt;/code&gt; again to recreate the same directory, &lt;code&gt;mkpath&lt;/code&gt; will simply silently use its invalid cached info of having previously created the directory, and will not actually make the directory again. In contrast, &lt;code&gt;os.makedirs&lt;/code&gt; doesn't rely on any such cache. This limitation may be okay for some applications.</source>
          <target state="translated">В соответствии с &lt;a href=&quot;http://bugs.python.org/issue10948&quot;&gt;ошибкой 10948&lt;/a&gt; , серьезным ограничением этой альтернативы является то, что она работает только один раз на процесс python для данного пути. Другими словами, если вы используете его для создания каталога, затем удаляете каталог изнутри или снаружи Python, а затем снова используете &lt;code&gt;mkpath&lt;/code&gt; для воссоздания того же каталога, &lt;code&gt;mkpath&lt;/code&gt; просто тихо использует свою неверную кэшированную информацию о том, что ранее создал каталог, и на самом деле не будет делать каталог снова. В отличие от этого, &lt;code&gt;os.makedirs&lt;/code&gt; не полагается на такой кеш. Это ограничение может быть в порядке для некоторых приложений.</target>
        </trans-unit>
        <trans-unit id="b714db9ab64cbcc0558c99fdae141bb4bffeba79" translate="yes" xml:space="preserve">
          <source>Perhaps Pandas should be updated to accept instances of the abstract base class, &lt;code&gt;os.PathLike&lt;/code&gt;.</source>
          <target state="translated">Возможно, Pandas следует обновить, чтобы он принимал экземпляры абстрактного базового класса &lt;code&gt;os.PathLike&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8b6b264b5910f832bc73c8e3c67b2e6cac151a2" translate="yes" xml:space="preserve">
          <source>Python 2.7+:</source>
          <target state="translated">Питон 2.7+:</target>
        </trans-unit>
        <trans-unit id="9dc5b6e19a47dc56fe4767ef1ee75046725962d3" translate="yes" xml:space="preserve">
          <source>Python 3.2+:</source>
          <target state="translated">Питон 3.2+:</target>
        </trans-unit>
        <trans-unit id="b6c7cbad30d0e4fcc82218434d4da66a329f0f4c" translate="yes" xml:space="preserve">
          <source>Python 3.5+:</source>
          <target state="translated">Питон 3.5+:</target>
        </trans-unit>
        <trans-unit id="99ea9cce0004a02a19d071bb0d88263b0cdffab9" translate="yes" xml:space="preserve">
          <source>Should do the trick on most systems.</source>
          <target state="translated">Должны сделать трюк на большинстве систем.</target>
        </trans-unit>
        <trans-unit id="2528b184172d909d0a003be1f5b82244c09b314c" translate="yes" xml:space="preserve">
          <source>Somehow, I missed &lt;code&gt;os.path.exists&lt;/code&gt; (thanks kanja, Blair, and Douglas). This is what I have now:</source>
          <target state="translated">Почему-то я пропустил &lt;code&gt;os.path.exists&lt;/code&gt; (спасибо, Канджа, Блэр и Дуглас). Вот что у меня сейчас:</target>
        </trans-unit>
        <trans-unit id="741c763ee51bfb7f42f00814eb975dcae82f7c3a" translate="yes" xml:space="preserve">
          <source>Starting from Python 3.5, &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt;&lt;code&gt;pathlib.Path.mkdir&lt;/code&gt;&lt;/a&gt; has an &lt;code&gt;exist_ok&lt;/code&gt; flag:</source>
          <target state="translated">Начиная с Python 3.5, &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir&quot;&gt; &lt;code&gt;pathlib.Path.mkdir&lt;/code&gt; &lt;/a&gt; имеет флаг &lt;code&gt;exist_ok&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f5b3a30e36f4f71f626659831f64892222b27ac9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;relevant Python documentation&lt;/a&gt; suggests the use of the &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;EAFP coding style (Easier to Ask for Forgiveness than Permission)&lt;/a&gt;. This means that the code</source>
          <target state="translated">В &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;соответствующей документации по Python&lt;/a&gt; предлагается использовать &lt;a href=&quot;https://docs.python.org/2/library/os.html#files-and-directories&quot;&gt;стиль кодирования EAFP (проще просить прощения, чем разрешения)&lt;/a&gt; . Это означает, что код</target>
        </trans-unit>
        <trans-unit id="4f2cb7d89de589f8b7b4be46373643c7fc94a4a6" translate="yes" xml:space="preserve">
          <source>The direct answer to this is, assuming a simple situation where you don't expect other users or processes to be messing with your directory:</source>
          <target state="translated">Прямым ответом на это является,предполагая простую ситуацию,когда вы не ожидаете,что другие пользователи или процессы будут вмешиваться в вашу директорию:</target>
        </trans-unit>
        <trans-unit id="4710e08c1ac50234e9a8f275e35d17b272a4422c" translate="yes" xml:space="preserve">
          <source>The documentation suggests this exactly because of the race condition discussed in this question. In addition, as others mention here, there is a performance advantage in querying once instead of twice the OS. Finally, the argument placed forward, potentially, in favour of the second code in some cases --when the developer knows the environment the application is running-- can only be advocated in the special case that the program has set up a private environment for itself (and other instances of the same program).</source>
          <target state="translated">Документация предполагает это именно из-за состояния гонки,обсуждаемого в этом вопросе.Кроме того,как упоминают здесь другие,есть преимущество в производительности при запросе один раз,а не два раза по сравнению с операционной системой.Наконец,аргумент,выдвинутый потенциально в пользу второго кода в некоторых случаях-когда разработчик знает окружение,в котором выполняется приложение,-можно отстаивать только в том особом случае,если программа установила для себя (и других экземпляров той же самой программы)частное окружение.</target>
        </trans-unit>
        <trans-unit id="e70e2a42fc247116f91a4df146bd9f5fac1c216a" translate="yes" xml:space="preserve">
          <source>Then I idempotently ensure the directory exists - the &lt;code&gt;exist_ok&lt;/code&gt; argument shows up in Python 3.5:</source>
          <target state="translated">Затем я идемпотентно &lt;code&gt;exist_ok&lt;/code&gt; что каталог существует - аргумент exist_ok появляется в Python 3.5:</target>
        </trans-unit>
        <trans-unit id="33ca90387ef8d91e4035a5b4710c91811fb051a1" translate="yes" xml:space="preserve">
          <source>There's a new &lt;code&gt;Path&lt;/code&gt; object (as of 3.4) with lots of methods one would want to use with paths - one of which is &lt;code&gt;mkdir&lt;/code&gt;.</source>
          <target state="translated">Появился новый объект &lt;code&gt;Path&lt;/code&gt; (начиная с 3.4) с множеством методов, которые можно использовать с путями, одним из которых является &lt;code&gt;mkdir&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="657d6466f2c29036b521dba710de96bf6626c3f1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;probably&lt;/em&gt; what you're wanting.</source>
          <target state="translated">Это, &lt;em&gt;вероятно,&lt;/em&gt; то, что вы хотите.</target>
        </trans-unit>
        <trans-unit id="a27e3016628be07b12b5296742271d571bf02444" translate="yes" xml:space="preserve">
          <source>This recursively creates the directory and does not raise an exception if the directory already exists.</source>
          <target state="translated">Это рекурсивно создает каталог и не вызывает исключения,если каталог уже существует.</target>
        </trans-unit>
        <trans-unit id="57735e971e5d9abfe4e85a53e5b3fbec952b4ecf" translate="yes" xml:space="preserve">
          <source>This will check if the file is there if it is not then it will create it.</source>
          <target state="translated">При этом проверяется,есть ли файл,если его нет,то он создается.</target>
        </trans-unit>
        <trans-unit id="aa2b9eba9ec58ac7050dd1d51ea5c53f1d30b5db" translate="yes" xml:space="preserve">
          <source>This works for me and hopefully, it will works for you as well</source>
          <target state="translated">Это сработает для меня и,надеюсь,сработает и для тебя.</target>
        </trans-unit>
        <trans-unit id="7c2148bdc16b268a891d8a64e49184d47d3abb20" translate="yes" xml:space="preserve">
          <source>To handle the fact the directory might exist, catch &lt;code&gt;OSError&lt;/code&gt;.
(If &lt;code&gt;exist_ok&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (the default), an &lt;code&gt;OSError&lt;/code&gt; is raised if the target directory already exists.)</source>
          <target state="translated">Чтобы обработать тот факт, что каталог может существовать, перехватите &lt;code&gt;OSError&lt;/code&gt; . (Если &lt;code&gt;exist_ok&lt;/code&gt; имеет значение &lt;code&gt;False&lt;/code&gt; (по умолчанию), &lt;code&gt;OSError&lt;/code&gt; вызывается, если целевой каталог уже существует.)</target>
        </trans-unit>
        <trans-unit id="413520a3e50df142a8c05148995fafc683b360a4" translate="yes" xml:space="preserve">
          <source>Try &lt;a href=&quot;https://docs.python.org/library/os.path.html#os.path.exists&quot;&gt;&lt;code&gt;os.path.exists&lt;/code&gt;&lt;/a&gt;, and consider &lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt; for the creation.</source>
          <target state="translated">Попробуйте &lt;a href=&quot;https://docs.python.org/library/os.path.html#os.path.exists&quot;&gt; &lt;code&gt;os.path.exists&lt;/code&gt; &lt;/a&gt; и рассмотрите &lt;a href=&quot;https://docs.python.org/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt; для создания.</target>
        </trans-unit>
        <trans-unit id="d3a86694ded81c408581f5b397aed6145c4f9368" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.exists&quot;&gt;&lt;code&gt;os.path.exists&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">Попробуйте функцию &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.exists&quot;&gt; &lt;code&gt;os.path.exists&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d93092b9342d22e87a8ef4100a56936800ce7a2c" translate="yes" xml:space="preserve">
          <source>Use this command check and create dir</source>
          <target state="translated">Используйте эту проверку команды и создайте dir</target>
        </trans-unit>
        <trans-unit id="525d8f8ad87a61e4610250dc956442abe1b9c698" translate="yes" xml:space="preserve">
          <source>Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:</source>
          <target state="translated">Используя попытку за исключением и правильный код ошибки от модуля errno избавляется от состояния гонки и является кроссплатформенным:</target>
        </trans-unit>
        <trans-unit id="917f074e5df4ab35c7e80d23c79df3c2ec82b36f" translate="yes" xml:space="preserve">
          <source>We don't have to deal with &lt;code&gt;os.path.join&lt;/code&gt; now - just join path parts with a &lt;code&gt;/&lt;/code&gt;:</source>
          <target state="translated">Теперь нам не нужно иметь дело с &lt;code&gt;os.path.join&lt;/code&gt; - просто соедините части пути с помощью &lt;code&gt;/&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="99ce28997107d476e9fc3a63d0852739434e0296" translate="yes" xml:space="preserve">
          <source>We want to avoid overwriting the builtin function, &lt;code&gt;dir&lt;/code&gt;. Also, &lt;code&gt;filepath&lt;/code&gt; or perhaps &lt;code&gt;fullfilepath&lt;/code&gt; is probably a better semantic name than &lt;code&gt;filename&lt;/code&gt; so this would be better written:</source>
          <target state="translated">Мы хотим избежать перезаписи встроенной функции, &lt;code&gt;dir&lt;/code&gt; . Кроме того, &lt;code&gt;filepath&lt;/code&gt; или, возможно, &lt;code&gt;fullfilepath&lt;/code&gt; , вероятно, лучше семантическое имя, чем &lt;code&gt;filename&lt;/code&gt; так что это было бы лучше написать:</target>
        </trans-unit>
        <trans-unit id="a1a9dedb1be746f42e86f1ff0f02a289d4ab1d3a" translate="yes" xml:space="preserve">
          <source>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</source>
          <target state="translated">Какой самый элегантный способ проверить,существует ли каталог,в который будет записываться файл,и если нет,то создать его с помощью Python? Вот что я попробовал:</target>
        </trans-unit>
        <trans-unit id="d28058b7ba10d7c6fe4a05256f5ed97045c03268" translate="yes" xml:space="preserve">
          <source>Where your code here is use the (touch) command</source>
          <target state="translated">Где ваш код здесь,используйте (сенсорную)команду</target>
        </trans-unit>
        <trans-unit id="f2e23ce686569ad8350733206c7706eea07f3673" translate="yes" xml:space="preserve">
          <source>While a naive solution may first use &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.isdir&quot;&gt;&lt;code&gt;os.path.isdir&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.makedirs&quot;&gt;&lt;code&gt;os.makedirs&lt;/code&gt;&lt;/a&gt;, the solution above reverses the order of the two operations. In doing so, it prevents a common race condition having to do with a duplicated attempt at creating the directory, and also disambiguates files from directories.</source>
          <target state="translated">Хотя наивное решение может сначала использовать &lt;a href=&quot;https://docs.python.org/2/library/os.path.html#os.path.isdir&quot;&gt; &lt;code&gt;os.path.isdir&lt;/code&gt; ,&lt;/a&gt; а затем &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.makedirs&quot;&gt; &lt;code&gt;os.makedirs&lt;/code&gt; &lt;/a&gt; , решение, приведенное выше, меняет порядок двух операций. При этом он предотвращает общее состояние гонки, связанное с дублирующейся попыткой создания каталога, а также устраняет неоднозначность файлов из каталогов.</target>
        </trans-unit>
        <trans-unit id="ac34cea4b6ca681e86fcb74a12d4d027962a4177" translate="yes" xml:space="preserve">
          <source>Why not use subprocess module if running on a machine that supports command 
&lt;code&gt;mkdir&lt;/code&gt; with &lt;code&gt;-p&lt;/code&gt; option ? 
Works on python 2.7 and python 3.6</source>
          <target state="translated">Почему бы не использовать модуль подпроцесса, если он работает на компьютере, который поддерживает команду &lt;code&gt;mkdir&lt;/code&gt; с параметром &lt;code&gt;-p&lt;/code&gt; ? Работает на Python 2.7 и Python 3.6</target>
        </trans-unit>
        <trans-unit id="e4777a61e82b0ede8c278f3167a642217b27846d" translate="yes" xml:space="preserve">
          <source>Why would you make a directory for a file that you expect to be there and be able to read?</source>
          <target state="translated">Зачем создавать директорию для файла,который,как вы ожидаете,будет там и сможет читать?</target>
        </trans-unit>
        <trans-unit id="614d7fe50ef625fdc00076885ef6a0958e2074f3" translate="yes" xml:space="preserve">
          <source>With regard to the directory's &lt;em&gt;mode&lt;/em&gt;, please refer to the documentation if you care about it.</source>
          <target state="translated">Что касается &lt;em&gt;режима&lt;/em&gt; каталога, пожалуйста, обратитесь к документации, если вы заботитесь о нем.</target>
        </trans-unit>
        <trans-unit id="2733f4de239159b7954ae10717a9de4a0d8f2130" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://docs.python.org/2/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt;&lt;code&gt;mkpath&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Вы можете использовать &lt;a href=&quot;https://docs.python.org/2/distutils/apiref.html#distutils.dir_util.mkpath&quot;&gt; &lt;code&gt;mkpath&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06628bc05e1d54f41341f98d20675258e87615f8" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;os.listdir&lt;/code&gt; for this:</source>
          <target state="translated">Вы можете использовать &lt;code&gt;os.listdir&lt;/code&gt; для этого:</target>
        </trans-unit>
        <trans-unit id="7cf103c255fa677ea9f423097c9a44c5cfe7a020" translate="yes" xml:space="preserve">
          <source>You give a particular file at a certain path and you pull the directory from the file path. Then after making sure you have the directory, you attempt to open a file for reading. To comment on this code:</source>
          <target state="translated">Вы даете определенный файл по определенному пути и вытаскиваете каталог из этого пути.Затем,убедившись,что каталог у вас есть,вы пытаетесь открыть файл для чтения.Чтобы прокомментировать этот код:</target>
        </trans-unit>
        <trans-unit id="6052af5853fd347b0aeab05bc6bcc4f07874858c" translate="yes" xml:space="preserve">
          <source>You have to set the full path before creating the directory:</source>
          <target state="translated">Перед созданием каталога необходимо установить полный путь:</target>
        </trans-unit>
        <trans-unit id="56d28d9565a39da08aca1caa9e22049b44a768f3" translate="yes" xml:space="preserve">
          <source>Your end goal is to open this file, you initially state, for writing, but you're essentially approaching this goal (based on your code) like this, which opens the file for &lt;strong&gt;reading&lt;/strong&gt;:</source>
          <target state="translated">Ваша конечная цель состоит в том, чтобы открыть этот файл, который вы изначально заявляете, для записи, но вы, по сути, приближаетесь к этой цели (основываясь на вашем коде) следующим образом, открывая файл для &lt;strong&gt;чтения&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="0c7364050c5331f5b0b43cbfbb9de956a1867c02" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist&quot;&gt;How can I create a directory if it does not exist?&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;https://stackoverflow.com/questions/273192/how-can-i-create-a-directory-if-it-does-not-exist&quot;&gt;Как я могу создать каталог, если он не существует?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="549fd39871f5892c4092cced01f37a74c23c77cc" translate="yes" xml:space="preserve">
          <source>[2] &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;https://docs.python.org/3/library/os.html#os.makedirs&lt;/a&gt;</source>
          <target state="translated">[2] &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.makedirs&quot;&gt;https://docs.python.org/3/library/os.html#os.makedirs&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ac45d7f4ee3550c6ad3415c9a62ec084feb6538" translate="yes" xml:space="preserve">
          <source>is better than the alternative</source>
          <target state="translated">лучше,чем альтернатива</target>
        </trans-unit>
        <trans-unit id="32133da69c38d6a432b2087ec0dfe35d3e89bf02" translate="yes" xml:space="preserve">
          <source>means a directory (path) exists AND is a directory. So for me this way does what I need. So I can make sure it is folder (not a file) and exists.</source>
          <target state="translated">означает,что каталог (путь)существует И является каталогом.Так что для меня этот способ делает то,что мне нужно.Так что я могу убедиться,что это папка (не файл)и она существует.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
