<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2793150">
    <body>
      <group id="2793150">
        <trans-unit id="975c1dfa1964f198cdee5775a3accdabd95ad8d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP response status&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;HTTP応答ステータス&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="959c0ca7759c5ec5d27677c7dbbad91620989326" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;HTTP response headers&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;HTTP応答ヘッダー&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="06dde70bca8bad98c265c14d5bacb670007f5faf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17&quot;&gt;HTTP response encoding&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17&quot;&gt;HTTP応答エンコーディング&lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="a29f7d70acf2aff207d98c832c7e24f5bd6314f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://code.google.com/p/google-http-java-client/&quot;&gt;google-http-java-client&lt;/a&gt; is also a great open source resource.</source>
          <target state="translated">&lt;a href=&quot;https://code.google.com/p/google-http-java-client/&quot;&gt;google-http-java-client&lt;/a&gt;も優れたオープンソースリソースです。</target>
        </trans-unit>
        <trans-unit id="7bb771a0dc53b60f6a7a3d5cb4200691846761a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As per the Google blog&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;グーグルブログによると&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="c6f2fb508e9c9d2d8f115549e1079b067a899050" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;em&gt;First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial &lt;code&gt;IOException&lt;/code&gt;s and &lt;code&gt;RuntimeException&lt;/code&gt;s like &lt;code&gt;NullPointerException&lt;/code&gt;, &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; and consorts yourself.&lt;/em&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;em&gt;まず事前に免責事項：投稿されたコードスニペットはすべて基本的な例です。&lt;/em&gt;&lt;/sup&gt; &lt;sup&gt;&lt;em&gt; &lt;code&gt;NullPointerException&lt;/code&gt; 、 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; のような自明な &lt;code&gt;IOException&lt;/code&gt; と &lt;code&gt;RuntimeException&lt;/code&gt; を処理し、自分でコンソートする必要があります。&lt;/em&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="faffc204004d62a95b1145d79275407e1dd03943" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;The &lt;code&gt;String#format()&lt;/code&gt; is just for convenience. I prefer it when I would need the String concatenation operator &lt;code&gt;+&lt;/code&gt; more than twice.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;String#format()&lt;/code&gt; は便宜上のものです。&lt;/sup&gt; &lt;sup&gt;文字列連結演算子 &lt;code&gt;+&lt;/code&gt; が2回以上必要な場合は、この方法を使用します。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c6c5f21dfb9615bd2d9db1787c5053c94dfb1a75" translate="yes" xml:space="preserve">
          <source>Actually firing the HTTP request</source>
          <target state="translated">実際にHTTPリクエストを発行する</target>
        </trans-unit>
        <trans-unit id="41dfc929801cb239a0af069a424529289d11735a" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;http://www.rapidvaluesolutions.com/tech_blog/introduction-to-httpurlconnection-http-client-for-performing-efficient-network-operations/&quot;&gt;this article&lt;/a&gt; and some other stack over flow questions, I am convinced that &lt;code&gt;HttpURLConnection&lt;/code&gt; is going to stay for longer durations.</source>
          <target state="translated">&lt;a href=&quot;http://www.rapidvaluesolutions.com/tech_blog/introduction-to-httpurlconnection-http-client-for-performing-efficient-network-operations/&quot;&gt;この記事&lt;/a&gt;とフローの質問に関するいくつかの他のスタックを読んだ後、 &lt;code&gt;HttpURLConnection&lt;/code&gt; がより長い時間留まると確信しています。</target>
        </trans-unit>
        <trans-unit id="0093a63fbf369054a6f6c2506127fe2e1957efcc" translate="yes" xml:space="preserve">
          <source>Any query string should be concatenated to the URL using &lt;code&gt;?&lt;/code&gt;. The &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2&quot;&gt;&lt;code&gt;Accept-Charset&lt;/code&gt;&lt;/a&gt; header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the &lt;code&gt;Accept-Charset&lt;/code&gt; header away. If you don't need to set any headers, then you can even use the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29&quot;&gt;&lt;code&gt;URL#openStream()&lt;/code&gt;&lt;/a&gt; shortcut method.</source>
          <target state="translated">クエリ文字列は、 &lt;code&gt;?&lt;/code&gt; を使用してURLに連結する必要があります。 。 &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2&quot;&gt; &lt;code&gt;Accept-Charset&lt;/code&gt; &lt;/a&gt;ヘッダーは、パラメーターのエンコーディングをサーバーに示唆する場合があります。クエリ文字列を送信しない場合は、 &lt;code&gt;Accept-Charset&lt;/code&gt; ヘッダーを残しておくことができます。 ヘッダーを設定する必要がない場合は、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29&quot;&gt; &lt;code&gt;URL#openStream()&lt;/code&gt; &lt;/a&gt;ショートカットメソッドを使用することもできます 。</target>
        </trans-unit>
        <trans-unit id="f1679d0c9ec10f0a2d281e386cdc692a5ffa7ff1" translate="yes" xml:space="preserve">
          <source>Apache HTTP client has fewer bugs on Eclair and Froyo. It is the best choice for these releases. For Gingerbread , HttpURLConnection is the best choice. Its simple API and small size makes it great fit for Android.</source>
          <target state="translated">Apache HTTPクライアントはEclairとFroyoではバグが少ないです。これらのリリースには最適な選択です。Gingerbreadでは、HttpURLConnectionが最良の選択です。そのシンプルなAPIと小さなサイズは、それがAndroidのための偉大なフィットになります。</target>
        </trans-unit>
        <trans-unit id="d7ae51538bcb0af982c502657eba788ab086b6e5" translate="yes" xml:space="preserve">
          <source>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29&quot;&gt;&lt;code&gt;HttpURLConnection#setChunkedStreamingMode()&lt;/code&gt;&lt;/a&gt; accordingly. This will set the HTTP &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41&quot;&gt;&lt;code&gt;Transfer-Encoding&lt;/code&gt;&lt;/a&gt; header to &lt;code&gt;chunked&lt;/code&gt; which will force the request body being sent in chunks. The below example will send the body in chunks of 1KB.</source>
          <target state="translated">ただし、コンテンツの長さが本当に事前にわからない場合は、それに応じて&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29&quot;&gt; &lt;code&gt;HttpURLConnection#setChunkedStreamingMode()&lt;/code&gt; を&lt;/a&gt;設定することにより、チャンクストリーミングモードを利用できます。 これにより、HTTP &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41&quot;&gt; &lt;code&gt;Transfer-Encoding&lt;/code&gt; &lt;/a&gt;ヘッダーが &lt;code&gt;chunked&lt;/code&gt; 設定され、リクエストボディがチャンクで送信されます。 以下の例では、1KBのチャンクで本文を送信します。</target>
        </trans-unit>
        <trans-unit id="6d2ad0b37ab28029e1684aee7e0a37c7de6e1d24" translate="yes" xml:space="preserve">
          <source>Check this blog post for more info: &lt;a href=&quot;http://www.yegor256.com/2014/04/11/jcabi-http-intro.html&quot;&gt;http://www.yegor256.com/2014/04/11/jcabi-http-intro.html&lt;/a&gt;</source>
          <target state="translated">詳細については、このブログ投稿を確認してください： &lt;a href=&quot;http://www.yegor256.com/2014/04/11/jcabi-http-intro.html&quot;&gt;http&lt;/a&gt; : //www.yegor256.com/2014/04/11/jcabi-http-intro.html</target>
        </trans-unit>
        <trans-unit id="715a583ba8ed9a9e699e1daadc2485524b355cd6" translate="yes" xml:space="preserve">
          <source>Connection pooling reduces request latency (if HTTP/2 isn&amp;rsquo;t    available).</source>
          <target state="translated">接続プールにより、要求の待ち時間が短縮されます（HTTP / 2が使用できない場合）。</target>
        </trans-unit>
        <trans-unit id="0f2ec558caf71c2d6e4843f5910a60f78cfc0b6a" translate="yes" xml:space="preserve">
          <source>Dealing with untrusted or misconfigured HTTPS sites</source>
          <target state="translated">信頼されていない HTTPS サイトや設定ミスのある HTTPS サイトへの対応</target>
        </trans-unit>
        <trans-unit id="d1d5bba5a50e2d6832ea3ffb015d9131ad4b1ac0" translate="yes" xml:space="preserve">
          <source>Either way, if the other side is a &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt;&lt;code&gt;HttpServlet&lt;/code&gt;&lt;/a&gt;, then its &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doGet()&lt;/code&gt;&lt;/a&gt; method will be called and the parameters will be available by &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29&quot;&gt;&lt;code&gt;HttpServletRequest#getParameter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">どちらの方法でも、反対側が&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt; &lt;code&gt;HttpServlet&lt;/code&gt; の&lt;/a&gt;場合、その&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doGet()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出され、パラメーターは&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29&quot;&gt; &lt;code&gt;HttpServletRequest#getParameter()&lt;/code&gt; &lt;/a&gt;によって使用可能になります。</target>
        </trans-unit>
        <trans-unit id="d82acf48a8ee26a9e13af783f08df134fca96580" translate="yes" xml:space="preserve">
          <source>Either way, if the other side is a &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt;&lt;code&gt;HttpServlet&lt;/code&gt;&lt;/a&gt;, then its &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method will be called and the parameters will be available by &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29&quot;&gt;&lt;code&gt;HttpServletRequest#getParameter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">どちらの方法でも、反対側が&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt; &lt;code&gt;HttpServlet&lt;/code&gt; &lt;/a&gt;である場合、その&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出され、パラメーターは&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29&quot;&gt; &lt;code&gt;HttpServletRequest#getParameter()&lt;/code&gt; &lt;/a&gt;によって使用可能になります。</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="d4f73c040c596ee2ef346c2feda2867845e5ddb5" translate="yes" xml:space="preserve">
          <source>Example: Make a &lt;code&gt;GET&lt;/code&gt; request with content type &lt;code&gt;application/json&lt;/code&gt; and some query parameters:</source>
          <target state="translated">例：コンテンツタイプ &lt;code&gt;application/json&lt;/code&gt; といくつかのクエリパラメーターを使用して &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="20c2a03c5ac435a4a11dac2d31ca5882fb7ce15b" translate="yes" xml:space="preserve">
          <source>Firing a &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3&quot;&gt;HTTP GET&lt;/a&gt; request with (optionally) query parameters</source>
          <target state="translated">（オプションで）クエリパラメータを使用した&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3&quot;&gt;HTTP GET&lt;/a&gt;リクエストの実行</target>
        </trans-unit>
        <trans-unit id="c66097016b3656bf9d5b2e58a50bfe9eb70e6bbf" translate="yes" xml:space="preserve">
          <source>Firing a &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5&quot;&gt;HTTP POST&lt;/a&gt; request with query parameters</source>
          <target state="translated">クエリパラメータを使用した&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5&quot;&gt;HTTP POST&lt;/a&gt;リクエストの実行</target>
        </trans-unit>
        <trans-unit id="5e8743edda175aa9df642433b4adaf41b0f867c8" translate="yes" xml:space="preserve">
          <source>First create an instance of &lt;code&gt;OkHttpClient&lt;/code&gt;:</source>
          <target state="translated">最初に &lt;code&gt;OkHttpClient&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="484908c53bf9b31b41b975d800ab29e3e8b07c1e" translate="yes" xml:space="preserve">
          <source>For more details, you can consult the &lt;a href=&quot;https://github.com/square/okhttp/wiki&quot;&gt;OkHttp's documentation&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://github.com/square/okhttp/wiki&quot;&gt;OkHttpのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="95aa55aa128a538aef0e3d44f2fde5d92c35cb54" translate="yes" xml:space="preserve">
          <source>For testing purposes, you can print the response body to stdout as below:</source>
          <target state="translated">テストのために、以下のようにレスポンスボディを標準出力に出力することができます。</target>
        </trans-unit>
        <trans-unit id="bca46205e8825792a4703acde2ede24c2ebbb9b0" translate="yes" xml:space="preserve">
          <source>GET Request :-</source>
          <target state="translated">GETリクエスト</target>
        </trans-unit>
        <trans-unit id="d3da28340f4864ceb4e03ee9789afb84d3657963" translate="yes" xml:space="preserve">
          <source>Gathering HTTP response information</source>
          <target state="translated">HTTPレスポンス情報の収集</target>
        </trans-unit>
        <trans-unit id="1a6ef5a231303e8d156a517755985d8b184b5ca1" translate="yes" xml:space="preserve">
          <source>HTTP/2 support allows all requests to the same host to share a    socket.</source>
          <target state="translated">HTTP2 のサポートにより、同じホストへのすべてのリクエストがソケットを共有できるようになります。</target>
        </trans-unit>
        <trans-unit id="26dc21c71d74cc902d915f5bf05dc5f4003564f9" translate="yes" xml:space="preserve">
          <source>Here are the tests:</source>
          <target state="translated">ここにテストがあります。</target>
        </trans-unit>
        <trans-unit id="16d08d753650b0ae59643aeff835de3ea4f983ff" translate="yes" xml:space="preserve">
          <source>How to scan and extract a webpage in Java</source>
          <target state="translated">Javaでウェブページをスキャンして抽出する方法</target>
        </trans-unit>
        <trans-unit id="0bd47d93542a429e2f48a4fd94cfd7a8d5760d49" translate="yes" xml:space="preserve">
          <source>How to use java.net.URLConnection to fire and handle HTTP requests</source>
          <target state="translated">java.net.URLConnectionを使用してHTTPリクエストを実行して処理する方法</target>
        </trans-unit>
        <trans-unit id="f33c6f8de770923d4335c65fe486deab78578a7f" translate="yes" xml:space="preserve">
          <source>HttpClient Examples</source>
          <target state="translated">Httpクライアントの例</target>
        </trans-unit>
        <trans-unit id="5568e7a06f498b248b080a22d596f54278634830" translate="yes" xml:space="preserve">
          <source>HttpClient Tutorial</source>
          <target state="translated">HttpClient チュートリアル</target>
        </trans-unit>
        <trans-unit id="f5d64373417aceeb3c2bf0b468050984a0519159" translate="yes" xml:space="preserve">
          <source>HttpPost works in Java project, not in Android</source>
          <target state="translated">HttpPostはJavaプロジェクトで動作し、Androidでは動作しません。</target>
        </trans-unit>
        <trans-unit id="3acccf44ba8aabdc4320ed9260e592d634a56e6c" translate="yes" xml:space="preserve">
          <source>I am often on projects where I need to do some HTTP, and I may not want to bring in a lot of 3rd party dependencies (which bring in others and so on and so on, etc.)</source>
          <target state="translated">私はしばしばHTTPを行う必要があるプロジェクトにいて、サードパーティの依存関係をたくさん持ち込みたくないかもしれません(他のものやその他のものを持ち込みます)。</target>
        </trans-unit>
        <trans-unit id="bb118c28cf4b6dc08ee3b8f7b926076c1c7c84bd" translate="yes" xml:space="preserve">
          <source>I started to write my own utilities based on some of this conversation (not any where done):</source>
          <target state="translated">この会話の一部を参考にして、自分でユーティリティを書き始めました(どこにも書いていません)。</target>
        </trans-unit>
        <trans-unit id="06b28cd77c5289f84671a130b69c53019f3c3f73" translate="yes" xml:space="preserve">
          <source>I suggest you take a look at the code on &lt;a href=&quot;https://github.com/kevinsawicki/http-request&quot;&gt;kevinsawicki/http-request&lt;/a&gt;, its basically a wrapper on top of &lt;code&gt;HttpUrlConnection&lt;/code&gt; it provides a much simpler API in case you just want to make the requests right now or you can take a look at the sources (it's not too big) to take a look at how connections are handled.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kevinsawicki/http-request&quot;&gt;kevinsawicki / http-requestの&lt;/a&gt;コードを確認することをお勧めします。基本的には、 &lt;code&gt;HttpUrlConnection&lt;/code&gt; のラッパーであり、リクエストを今すぐ作成したい場合や、ソースを確認する場合に備えて、はるかに単純なAPIを提供します。 （大きすぎない）接続がどのように処理されるかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="4411a3292bd52134010ba46240027edc99d4f15e" translate="yes" xml:space="preserve">
          <source>I was also very inspired by this response.</source>
          <target state="translated">私もこの対応にはとても刺激を受けました。</target>
        </trans-unit>
        <trans-unit id="4ced244470b722113d64de223a0c1d89d2604c74" translate="yes" xml:space="preserve">
          <source>If all you want is parsing and extracting data from HTML, then better use a HTML parser like &lt;a href=&quot;http://jsoup.org&quot;&gt;Jsoup&lt;/a&gt;</source>
          <target state="translated">HTMLからデータを解析して抽出するだけの場合は、 &lt;a href=&quot;http://jsoup.org&quot;&gt;Jsoup&lt;/a&gt;などのHTMLパーサーを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5b9d8807c291a3e658b46eccadc3cb3a6935f830" translate="yes" xml:space="preserve">
          <source>If the HTTP response code is -1, then something went wrong with connection and response handling. The &lt;code&gt;HttpURLConnection&lt;/code&gt; implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the &lt;code&gt;http.keepAlive&lt;/code&gt; system property to &lt;code&gt;false&lt;/code&gt;. You can do this programmatically in the beginning of your application by:</source>
          <target state="translated">HTTP応答コードが-1の場合、接続と応答の処理で問題が発生しています。 &lt;code&gt;HttpURLConnection&lt;/code&gt; の実装は、古いJREにあり、接続を維持するために多少バグがあります。 &lt;code&gt;http.keepAlive&lt;/code&gt; システムプロパティを &lt;code&gt;false&lt;/code&gt; に設定して、これをオフにすることができます 。 これは、アプリケーションの最初の部分で次のようにプログラムで行うことができます。</target>
        </trans-unit>
        <trans-unit id="2f56e1911235fc91247cb91409f358c21c58abb8" translate="yes" xml:space="preserve">
          <source>If the HTTP response code is &lt;code&gt;4nn&lt;/code&gt; (Client Error) or &lt;code&gt;5nn&lt;/code&gt; (Server Error), then you may want to read the &lt;code&gt;HttpURLConnection#getErrorStream()&lt;/code&gt; to see if the server has sent any useful error information.</source>
          <target state="translated">HTTP応答コードが &lt;code&gt;4nn&lt;/code&gt; （クライアントエラー）または5nn （サーバーエラー）の場​​合は、 &lt;code&gt;HttpURLConnection#getErrorStream()&lt;/code&gt; を読み取って、サーバーが有用なエラー情報を送信したかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="d6bceabcdbfaeb1f57777f519294641221be252e" translate="yes" xml:space="preserve">
          <source>If the other side is a &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt;&lt;code&gt;HttpServlet&lt;/code&gt;&lt;/a&gt;, then its &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt;&lt;code&gt;doPost()&lt;/code&gt;&lt;/a&gt; method will be called and the parts will be available by &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29&quot;&gt;&lt;code&gt;HttpServletRequest#getPart()&lt;/code&gt;&lt;/a&gt; (note, thus &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;getParameter()&lt;/code&gt; and so on!). The &lt;code&gt;getPart()&lt;/code&gt; method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc). Prior to Servlet 3.0, your best choice is using &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt; to parse a &lt;code&gt;multipart/form-data&lt;/code&gt; request. Also see &lt;a href=&quot;https://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824&quot;&gt;this answer&lt;/a&gt; for examples of both the FileUpload and the Servelt 3.0 approaches.</source>
          <target state="translated">反対側が&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&quot;&gt; &lt;code&gt;HttpServlet&lt;/code&gt; の&lt;/a&gt;場合、その&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29&quot;&gt; &lt;code&gt;doPost()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出され、パーツは&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29&quot;&gt; &lt;code&gt;HttpServletRequest#getPart()&lt;/code&gt; &lt;/a&gt;によって使用可能になり &lt;code&gt;getParameter()&lt;/code&gt; したがって&lt;strong&gt;、&lt;/strong&gt; getParameter（）などではあり&lt;strong&gt;ません&lt;/strong&gt; ！）。 ただし、 &lt;code&gt;getPart()&lt;/code&gt; メソッドは比較的新しく、サーブレット3.0（Glassfish 3、Tomcat 7など）で導入されました。 サーブレット3.0より前は、 &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt;を使用して &lt;code&gt;multipart/form-data&lt;/code&gt; リクエストを解析するのが最適です。 FileUploadとServelt 3.0の両方のアプローチの例については、 &lt;a href=&quot;https://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824&quot;&gt;この回答&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fc63ce8074cd9ee38db3a4c5da77e39f7315bbd1" translate="yes" xml:space="preserve">
          <source>In Java 9, you can send a &lt;code&gt;GET&lt;/code&gt; request like:</source>
          <target state="translated">Java 9では、次のような &lt;code&gt;GET&lt;/code&gt; リクエストを送信できます。</target>
        </trans-unit>
        <trans-unit id="6b9f56c595438dc01a98819e4a2259644c6fb8d8" translate="yes" xml:space="preserve">
          <source>Initially I was misled by this &lt;a href=&quot;http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html&quot;&gt;article&lt;/a&gt; which favours &lt;code&gt;HttpClient&lt;/code&gt;.</source>
          <target state="translated">最初、私は &lt;code&gt;HttpClient&lt;/code&gt; を支持するこの&lt;a href=&quot;http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html&quot;&gt;記事&lt;/a&gt;に惑わされました。</target>
        </trans-unit>
        <trans-unit id="0d0bdb74262e8fbdaeeee9a5beab20dd176f26f9" translate="yes" xml:space="preserve">
          <source>Inspired by this and other questions on SO, I've created a minimal open source &lt;a href=&quot;http://code.google.com/p/basic-http-client/&quot;&gt;basic-http-client&lt;/a&gt; that embodies most of the techniques found here.</source>
          <target state="translated">SOに関するこの質問や他の質問に触発されて、私はここにあるテクニックのほとんどを具現化する最小限のオープンソースの&lt;a href=&quot;http://code.google.com/p/basic-http-client/&quot;&gt;basic-http-client&lt;/a&gt;を作成しました。</target>
        </trans-unit>
        <trans-unit id="63348a7dd0403434e8796bd29c3bb292d8dca732" translate="yes" xml:space="preserve">
          <source>It also provides useful HTTP constants so you can do:</source>
          <target state="translated">また、便利なHTTP定数を提供するので、あなたが行うことができます。</target>
        </trans-unit>
        <trans-unit id="68567e9ae72ba700b72a34d34be82619ceee811b" translate="yes" xml:space="preserve">
          <source>It can happen that &lt;a href=&quot;https://stackoverflow.com/questions/13670692/403-forbidden-with-java-but-not-web-browser&quot;&gt;a request returns an unexpected response, while it works fine with a real web browser&lt;/a&gt;. The server side is probably blocking requests based on the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43&quot;&gt;&lt;code&gt;User-Agent&lt;/code&gt;&lt;/a&gt; request header. The &lt;code&gt;URLConnection&lt;/code&gt; will by default set it to &lt;code&gt;Java/1.6.0_19&lt;/code&gt; where the last part is obviously the JRE version. You can override this as follows:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/13670692/403-forbidden-with-java-but-not-web-browser&quot;&gt;実際のウェブブラウザでは正常に機能する一方で、リクエストが予期しない応答を返す場合があります&lt;/a&gt; 。 サーバー側は、おそらく&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43&quot;&gt; &lt;code&gt;User-Agent&lt;/code&gt; &lt;/a&gt;リクエストヘッダーに基づいてリクエストをブロックしています。 &lt;code&gt;URLConnection&lt;/code&gt; はデフォルトで &lt;code&gt;Java/1.6.0_19&lt;/code&gt; に設定します。最後の部分は明らかにJREバージョンです。 これは次のようにオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="7422dbecf8099581403ca09f764e54cea391a0df" translate="yes" xml:space="preserve">
          <source>It's a trivial task. It's the default request method.</source>
          <target state="translated">些細なことですが デフォルトのリクエスト方法です</target>
        </trans-unit>
        <trans-unit id="aa27b9815cfca97bc09894174bbc5029fa7ea762" translate="yes" xml:space="preserve">
          <source>Last words</source>
          <target state="translated">最後の言葉</target>
        </trans-unit>
        <trans-unit id="9482fa56963f83fb2550b37ce827755da42ac272" translate="yes" xml:space="preserve">
          <source>Later I have been realized that &lt;code&gt;HttpURLConnection&lt;/code&gt; is going to stay from this &lt;a href=&quot;https://github.com/loopj/android-async-http/issues/75&quot;&gt;article&lt;/a&gt;</source>
          <target state="translated">後で &lt;code&gt;HttpURLConnection&lt;/code&gt; がこの&lt;a href=&quot;https://github.com/loopj/android-async-http/issues/75&quot;&gt;記事&lt;/a&gt;に留まることに気づきました</target>
        </trans-unit>
        <trans-unit id="bb8a41bac9558e1f20f19026a44cc55f106eb134" translate="yes" xml:space="preserve">
          <source>Maintaining the session</source>
          <target state="translated">セッションの維持</target>
        </trans-unit>
        <trans-unit id="da8e68f12e7b5f0bfa225bc13ad362cf6b07b353" translate="yes" xml:space="preserve">
          <source>My goal is to provide the common things one would want to do in a bit more easier way then....</source>
          <target state="translated">私の目標は、人がやりたいと思うような一般的なことを、もう少し簡単な方法で提供することです。</target>
        </trans-unit>
        <trans-unit id="1538eec6fdcc6ff63b8022296437fb4d2d4985cf" translate="yes" xml:space="preserve">
          <source>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all &lt;code&gt;Set-Cookie&lt;/code&gt; headers from the response of the login or the first &lt;code&gt;GET&lt;/code&gt; request and then pass this through the subsequent requests.</source>
          <target state="translated">これは、常にすべての状況で適切に機能するとは限らないことに注意してください。 失敗した場合は、Cookieヘッダーを手動で収集して設定することをお勧めします。 基本的には、ログインの応答または最初の &lt;code&gt;GET&lt;/code&gt; 要求からすべての &lt;code&gt;Set-Cookie&lt;/code&gt; ヘッダーを取得し、これを後続の要求に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="7dd9e192a0a1aa8909d21dd69949fca0329a96f3" translate="yes" xml:space="preserve">
          <source>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the &lt;code&gt;name=value&lt;/code&gt; pairs of any &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; elements into the query string and of course also the &lt;code&gt;name=value&lt;/code&gt; pair of the &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; element which you'd like to &quot;press&quot; programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</source>
          <target state="translated">注：プログラムでHTMLフォームを送信する場合は、必ず &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;name=value&lt;/code&gt; ペアをクエリ文字列に含めてください。もちろん、 name = valueペアもプログラムで「押し」たい &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; 要素（通常、ボタンが押されたかどうか、また押された場合はどれかを区別するためにサーバー側で使用されるため）。</target>
        </trans-unit>
        <trans-unit id="33e9c50f69645e2cb6800b408f672ab0e3ee8286" translate="yes" xml:space="preserve">
          <source>On Android, make a POST request with URL Encoded Form data without using UrlEncodedFormEntity</source>
          <target state="translated">Androidでは、UrlEncodedFormEntityを使わずにURL EncodedFormデータでPOSTリクエストを行う。</target>
        </trans-unit>
        <trans-unit id="66ea277c2e0f622ddc5e7f9be44916709f6947f9" translate="yes" xml:space="preserve">
          <source>POST request :-</source>
          <target state="translated">POST リクエスト :-。</target>
        </trans-unit>
        <trans-unit id="3a64b90400294ec18f7feb8be0ec91aa41fba703" translate="yes" xml:space="preserve">
          <source>Parsing and extracting HTML</source>
          <target state="translated">HTMLのパースと抽出</target>
        </trans-unit>
        <trans-unit id="96a9b7cdbe400c8b44756e76d158b85eb3370995" translate="yes" xml:space="preserve">
          <source>Preparing</source>
          <target state="translated">Preparing</target>
        </trans-unit>
        <trans-unit id="d9c61ae1dac7b9b68033b21358596746a90f4da4" translate="yes" xml:space="preserve">
          <source>Response caching avoids the network completely for repeat requests.</source>
          <target state="translated">レスポンスキャッシングは、繰り返しのリクエストに対してネットワークを完全に回避します。</target>
        </trans-unit>
        <trans-unit id="8d4714f0c2528ca573fdfe05836a0ec828331d9b" translate="yes" xml:space="preserve">
          <source>Setting the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29&quot;&gt;&lt;code&gt;URLConnection#setDoOutput()&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt; implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; wherein the query string is written to the request body.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29&quot;&gt; &lt;code&gt;URLConnection#setDoOutput()&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;true&lt;/code&gt; に設定すると、リクエストメソッドが暗黙的にPOSTに設定されます 。 Webフォームと同様に、標準のHTTP POSTは &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; タイプであり、クエリ文字列はリクエストの本文に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2626c2503b3d15b582a07bc74c5825b420a8e0ef" translate="yes" xml:space="preserve">
          <source>Since this new HTTP Client is in &lt;del&gt;&lt;code&gt;java.httpclient&lt;/code&gt;&lt;/del&gt;&lt;code&gt;jdk.incubator.httpclient&lt;/code&gt; module, you should declare this dependency in your &lt;code&gt;module-info.java&lt;/code&gt; file:</source>
          <target state="translated">この新しいHTTPクライアントは &lt;del&gt; &lt;code&gt;java.httpclient&lt;/code&gt; &lt;/del&gt; &lt;code&gt;jdk.incubator.httpclient&lt;/code&gt; モジュール。この依存関係を &lt;code&gt;module-info.java&lt;/code&gt; ファイルで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="eac37fdc85282efe9d742d0cf3fe2a9370431885" translate="yes" xml:space="preserve">
          <source>So, how can I use &lt;code&gt;java.net.URLConnection&lt;/code&gt; to fire and handle &quot;advanced&quot; HTTP requests?</source>
          <target state="translated">では、 &lt;code&gt;java.net.URLConnection&lt;/code&gt; を使用して「高度な」HTTPリクエストを起動して処理するにはどうすればよいでしょうか。</target>
        </trans-unit>
        <trans-unit id="9c2307597199d20f80fc7127a5f756094a1b21e0" translate="yes" xml:space="preserve">
          <source>Some of the SE questions favouring &lt;code&gt;HttpURLConnections&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;HttpURLConnections&lt;/code&gt; を支持するSEの質問の一部：</target>
        </trans-unit>
        <trans-unit id="74aa71cdefcf3d3944750fb2d4856be051288828" translate="yes" xml:space="preserve">
          <source>Sometimes you need to connect a HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a &lt;code&gt;javax.net.ssl.SSLException: Not trusted server certificate&lt;/code&gt; on some HTTPS sites who doesn't keep their SSL certificates up to date, or a &lt;code&gt;java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found&lt;/code&gt; or &lt;code&gt;javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name&lt;/code&gt; on some misconfigured HTTPS sites.</source>
          <target state="translated">Webスクレイパーを作成しているために、HTTPS URLに接続する必要がある場合があります。 その場合、おそらく &lt;code&gt;javax.net.ssl.SSLException: Not trusted server certificate&lt;/code&gt; SSL証明書を最新にしていない一部のHTTPSサイトで信頼されていないサーバー証明書 、または &lt;code&gt;java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found&lt;/code&gt; または &lt;code&gt;javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name&lt;/code&gt; 一部の誤って設定されたHTTPSサイトでunrecognized_nameです。</target>
        </trans-unit>
        <trans-unit id="b27bcabf080f8ed6fa7ee8f52c2c82970d5340a0" translate="yes" xml:space="preserve">
          <source>Streaming mode</source>
          <target state="translated">ストリーミングモード</target>
        </trans-unit>
        <trans-unit id="8247866800def1dff68716c91b51f90e9ed20fca" translate="yes" xml:space="preserve">
          <source>That tutorial basically only shows how to fire a GET request and read the response. It doesn't explain anywhere how to use it to among others perform a POST request, set request headers, read response headers, deal with cookies, submit a HTML form, upload a file, etc.</source>
          <target state="translated">このチュートリアルでは、基本的にGETリクエストを実行してレスポンスを読む方法を示しているだけです。POSTリクエストの実行、リクエストヘッダの設定、レスポンスヘッダの読み込み、クッキーの扱い、HTMLフォームの送信、ファイルのアップロードなどの使い方はどこにも書いていません。</target>
        </trans-unit>
        <trans-unit id="cefd11bcfad9b171d1b4e11e71e101f163a41e7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt;&lt;/a&gt; will by default buffer the &lt;em&gt;entire&lt;/em&gt; request body before actually sending it, regardless of whether you've set a fixed content length yourself using &lt;code&gt;connection.setRequestProperty(&quot;Content-Length&quot;, contentLength);&lt;/code&gt;. This may cause &lt;code&gt;OutOfMemoryException&lt;/code&gt;s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29&quot;&gt;&lt;code&gt;HttpURLConnection#setFixedLengthStreamingMode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt; &lt;code&gt;HttpURLConnection&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;connection.setRequestProperty(&quot;Content-Length&quot;, contentLength);&lt;/code&gt; を使用して固定コンテンツ長を自分で設定したかどうかに関係なく、デフォルトでリクエスト本文&lt;em&gt;全体を&lt;/em&gt;実際に送信する前にバッファリングします。 。 これにより、大きなPOSTリクエスト（ファイルのアップロードなど）を同時に送信するたびに &lt;code&gt;OutOfMemoryException&lt;/code&gt; が発生する可能性があります。 これを回避するには、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29&quot;&gt; &lt;code&gt;HttpURLConnection#setFixedLengthStreamingMode()&lt;/code&gt; &lt;/a&gt;を設定します。</target>
        </trans-unit>
        <trans-unit id="7e29caf68eea1b63be43dd13fa30735f76e01d2f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-ga/&quot;&gt;Apache HttpComponents HttpClient&lt;/a&gt; is &lt;em&gt;much&lt;/em&gt; more convenient in this all :)</source>
          <target state="translated">&lt;a href=&quot;http://hc.apache.org/httpcomponents-client-ga/&quot;&gt;Apache HttpComponents HttpClient&lt;/a&gt;は、このすべてにおいて&lt;em&gt;はるか&lt;/em&gt;に便利です:)</target>
        </trans-unit>
        <trans-unit id="b773487ec94a1a49efe84dbbc95359e07580fd5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split(&quot;;&quot;, 2)[0]&lt;/code&gt; is there to get rid of cookie attributes which are irrelevant for the server side like &lt;code&gt;expires&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, etc. Alternatively, you could also use &lt;code&gt;cookie.substring(0, cookie.indexOf(';'))&lt;/code&gt; instead of &lt;code&gt;split()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;split(&quot;;&quot;, 2)[0]&lt;/code&gt; は &lt;code&gt;cookie.substring(0, cookie.indexOf(';'))&lt;/code&gt; 、 &lt;code&gt;path&lt;/code&gt; などのサーバー側に関係のないcookie属性を取り除くためにあります。あるいは、 cookie.substring（0、cookie.indexOf（ ';'））の代わりに &lt;code&gt;split()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53c03c0af7e46068b3bed62c81234c6aa842ef87" translate="yes" xml:space="preserve">
          <source>The following one-time-run &lt;code&gt;static&lt;/code&gt; initializer in your web scraper class should make &lt;code&gt;HttpsURLConnection&lt;/code&gt; more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</source>
          <target state="translated">Webスクレイパークラスの次の1回だけ実行される &lt;code&gt;static&lt;/code&gt; 初期化子により、 &lt;code&gt;HttpsURLConnection&lt;/code&gt; がHTTPSサイトに関してより寛大になり、これらの例外がスローされなくなります。</target>
        </trans-unit>
        <trans-unit id="a8580cefe60c53a1639b9d7b31e8136d8b2c52da" translate="yes" xml:space="preserve">
          <source>The new HTTP Client shipped with Java 9 but as part of an
  Incubator module named &lt;code&gt;jdk.incubator.httpclient&lt;/code&gt;. Incubator modules are
  a means of putting non-final APIs in the hands of developers while the
  APIs progress towards either finalization or removal in a future
  release.</source>
          <target state="translated">新しいHTTPクライアントはJava 9に同梱されていますが、 &lt;code&gt;jdk.incubator.httpclient&lt;/code&gt; という名前のIncubatorモジュールの一部として含まれています。 インキュベーターモジュールは、APIが最終リリースまたは将来のリリースでの削除に向けて進行する間、開発者の手に最終版以外のAPIを提供する手段です。</target>
        </trans-unit>
        <trans-unit id="0e41c56b017b73a4ec6d6bff1ce7acb78f13661d" translate="yes" xml:space="preserve">
          <source>The query parameters must be in &lt;code&gt;name=value&lt;/code&gt; format and be concatenated by &lt;code&gt;&amp;amp;&lt;/code&gt;. You would normally also &lt;a href=&quot;http://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URL-encode&lt;/a&gt; the query parameters with the specified charset using &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html#encode-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;URLEncoder#encode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クエリパラメータは &lt;code&gt;name=value&lt;/code&gt; の形式で、 &lt;code&gt;&amp;amp;&lt;/code&gt; で連結されている必要があります。 通常は、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html#encode-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;URLEncoder#encode()&lt;/code&gt; &lt;/a&gt;を使用して、指定された文字セットでクエリパラメータを&lt;a href=&quot;http://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;URLエンコード&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="8593666940bc826ea99d8e0623a03e349931ad4d" translate="yes" xml:space="preserve">
          <source>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html&quot;&gt;&lt;code&gt;CookieHandler&lt;/code&gt;&lt;/a&gt; API to maintain cookies. You need to prepare a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html&quot;&gt;&lt;code&gt;CookieManager&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; of &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL&quot;&gt;&lt;code&gt;ACCEPT_ALL&lt;/code&gt;&lt;/a&gt; before sending all HTTP requests.</source>
          <target state="translated">サーバー側のセッションは通常、Cookieによってサポートされます。 一部のWebフォームでは、ログインしているか、セッションによって追跡されている必要があります。 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html&quot;&gt; &lt;code&gt;CookieHandler&lt;/code&gt; &lt;/a&gt; APIを使用してCookieを維持できます。 すべてのHTTPリクエストを送信する前に、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL&quot;&gt; &lt;code&gt;ACCEPT_ALL&lt;/code&gt; &lt;/a&gt; &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html&quot;&gt; &lt;code&gt;CookieManager&lt;/code&gt; &lt;/a&gt;してCookieManagerを準備する必要があります。</target>
        </trans-unit>
        <trans-unit id="8d2645fc13885a4bae4ff65a48aa42f4cff6871a" translate="yes" xml:space="preserve">
          <source>Then post...</source>
          <target state="translated">じゃあ投稿して...</target>
        </trans-unit>
        <trans-unit id="63dea9f748778fbab277521acf4d87c44eca39e6" translate="yes" xml:space="preserve">
          <source>Then there are just a bunch or static methods.</source>
          <target state="translated">そうすると、ただの束や静的なメソッドがあるだけになります。</target>
        </trans-unit>
        <trans-unit id="9b27e91226948151af4e8360e03ba1054d95d256" translate="yes" xml:space="preserve">
          <source>Then you can examine the returned &lt;code&gt;HttpResponse&lt;/code&gt;:</source>
          <target state="translated">次に、返された &lt;code&gt;HttpResponse&lt;/code&gt; を調べることができます。</target>
        </trans-unit>
        <trans-unit id="4f22159db8ad1aa13539ff3f81b9231b779218bc" translate="yes" xml:space="preserve">
          <source>Then you can instead of relying on &lt;code&gt;URLConnection#setDoOutput(true)&lt;/code&gt; to implicitly set the request method to &lt;em&gt;POST&lt;/em&gt; instead do &lt;code&gt;httpURLConnection.setRequestMethod(&quot;POST&quot;)&lt;/code&gt; which some might find more natural (and which also allows you to specify other request methods such as &lt;em&gt;PUT&lt;/em&gt;, &lt;em&gt;DELETE&lt;/em&gt;, ...).</source>
          <target state="translated">次に、 &lt;code&gt;URLConnection#setDoOutput(true)&lt;/code&gt; に依存する代わりに、リクエストメソッドを&lt;em&gt;POST&lt;/em&gt;に暗黙的に設定する代わりに、 &lt;code&gt;httpURLConnection.setRequestMethod(&quot;POST&quot;)&lt;/code&gt; を実行します。これにより、より自然に見える場合があり、次のような他のリクエストメソッドを指定することもできます。 &lt;em&gt;PUT&lt;/em&gt; 、 &lt;em&gt;DELETE&lt;/em&gt; 、...）。</target>
        </trans-unit>
        <trans-unit id="0f6b1584a9e926b76a69d10eeae1623dbc4482f0" translate="yes" xml:space="preserve">
          <source>Then, prepare your &lt;code&gt;GET&lt;/code&gt; request:</source>
          <target state="translated">次に、 &lt;code&gt;GET&lt;/code&gt; リクエストを準備します。</target>
        </trans-unit>
        <trans-unit id="0f902535bc39ac35baa3a76eb773caadf38f9288" translate="yes" xml:space="preserve">
          <source>There are 2 options you can go with HTTP URL Hits : GET / POST</source>
          <target state="translated">あなたは、HTTP URLのヒットで行くことができる2つのオプションがあります.GET POST</target>
        </trans-unit>
        <trans-unit id="56fcef5e679e890c8323d7ba434fd4457461f29c" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://square.github.io/okhttp/&quot;&gt;OkHttp&lt;/a&gt;, which is an HTTP client that&amp;rsquo;s efficient by default:</source>
          <target state="translated">デフォルトで効率的なHTTPクライアントである&lt;a href=&quot;http://square.github.io/okhttp/&quot;&gt;OkHttp&lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="bdfb0a871a5b9a4e4a8fcc092d99369cc3d0df29" translate="yes" xml:space="preserve">
          <source>Transparent GZIP shrinks download sizes.</source>
          <target state="translated">透明なGZIPはダウンロードサイズを縮小します。</target>
        </trans-unit>
        <trans-unit id="a3843c0524e442447db8305e40492b673db4858a" translate="yes" xml:space="preserve">
          <source>Transparent compression and response caching reduce network use, improve speed and save battery. New applications should use HttpURLConnection; it is where we will be spending our energy going forward.</source>
          <target state="translated">透過的な圧縮と応答キャッシングは、ネットワークの使用量を減らし、速度を向上させ、バッテリーを節約します。新しいアプリケーションは HttpURLConnection を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fb91e24fa52d8d2b32937bf04d843f730319a902" translate="yes" xml:space="preserve">
          <source>Update</source>
          <target state="translated">Update</target>
        </trans-unit>
        <trans-unit id="6536791df9cf8c9d858bd6467f1fcf7d5547da62" translate="yes" xml:space="preserve">
          <source>Uploading files</source>
          <target state="translated">ファイルのアップロード</target>
        </trans-unit>
        <trans-unit id="cdf6e7e61a57a9c074c85eaacbf8d20c84021b29" translate="yes" xml:space="preserve">
          <source>Use of &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html&quot;&gt;&lt;code&gt;java.net.URLConnection&lt;/code&gt;&lt;/a&gt; is asked about pretty often here, and the &lt;a href=&quot;http://download.oracle.com/javase/tutorial/networking/urls/connecting.html&quot;&gt;Oracle tutorial&lt;/a&gt; is &lt;em&gt;too&lt;/em&gt; concise about it.</source>
          <target state="translated">ここでは&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html&quot;&gt; &lt;code&gt;java.net.URLConnection&lt;/code&gt; の&lt;/a&gt;使用についてよく尋ねられ&lt;a href=&quot;http://download.oracle.com/javase/tutorial/networking/urls/connecting.html&quot;&gt;ます&lt;/a&gt;が、 Oracleチュートリアルでは簡潔&lt;em&gt;すぎ&lt;/em&gt; ます 。</target>
        </trans-unit>
        <trans-unit id="3010c0f47d84431f832b9cc942462e9fd7a7078a" translate="yes" xml:space="preserve">
          <source>Use the User-Agent string from a &lt;a href=&quot;http://www.useragentstring.com/pages/useragentstring.php&quot;&gt;recent browser&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.useragentstring.com/pages/useragentstring.php&quot;&gt;最近のブラウザ&lt;/a&gt;のUser-Agent文字列を使用します。</target>
        </trans-unit>
        <trans-unit id="170c6d2e56e8b4e9ec094b58afe212ec6e8296a6" translate="yes" xml:space="preserve">
          <source>User-Agent</source>
          <target state="translated">User-Agent</target>
        </trans-unit>
        <trans-unit id="a0bdac354463f4aa7a8344f606dcc8b40025b55c" translate="yes" xml:space="preserve">
          <source>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</source>
          <target state="translated">まず、少なくともURLと文字コードを知る必要があります。パラメータはオプションで、機能要件に依存します。</target>
        </trans-unit>
        <trans-unit id="f92416704f8a8d4f42a9c8dc6b1968bbafc1d8f3" translate="yes" xml:space="preserve">
          <source>Well you get the idea....</source>
          <target state="translated">まあ..............................................................................................................................................................................................................................................</target>
        </trans-unit>
        <trans-unit id="dc62eedf98791b8b1b66fa9567a6225b1fb76507" translate="yes" xml:space="preserve">
          <source>What are the pros/cons of leading HTML parsers in Java</source>
          <target state="translated">Java の主要な HTML パーサーのプロコンは何ですか?</target>
        </trans-unit>
        <trans-unit id="a55575f702c1b342ddb362f25dba86b36f010efc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Content-Type&lt;/code&gt; contains a &lt;code&gt;charset&lt;/code&gt; parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</source>
          <target state="translated">&lt;code&gt;Content-Type&lt;/code&gt; に &lt;code&gt;charset&lt;/code&gt; パラメータが含まれている場合、応答の本文はテキストベースである可能性が高く、サーバー側で指定された文字エンコードを使用して応答の本文を処理します。</target>
        </trans-unit>
        <trans-unit id="d526efc0111fd1b42edf0c0dbeddae0446cb0ad4" translate="yes" xml:space="preserve">
          <source>When working with HTTP it's almost always more useful to refer to &lt;code&gt;HttpURLConnection&lt;/code&gt; rather than the base class &lt;code&gt;URLConnection&lt;/code&gt; (since &lt;code&gt;URLConnection&lt;/code&gt; is an abstract class when you ask for &lt;code&gt;URLConnection.openConnection()&lt;/code&gt; on a HTTP URL that's what you'll get back anyway).</source>
          <target state="translated">HTTPを使用する場合、基本クラスの &lt;code&gt;URLConnection&lt;/code&gt; ではなく &lt;code&gt;HttpURLConnection&lt;/code&gt; を参照する方がほとんどの場合便利です（ &lt;code&gt;URLConnection&lt;/code&gt; はHTTP URLで &lt;code&gt;URLConnection.openConnection()&lt;/code&gt; を要求すると抽象クラスになるため、とにかく返されます）。</target>
        </trans-unit>
        <trans-unit id="ee13445be42661752d9f20714ba4931ba4496547" translate="yes" xml:space="preserve">
          <source>You can also cast the obtained &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html&quot;&gt;&lt;code&gt;URLConnection&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt;&lt;/a&gt; and use its &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29&quot;&gt;&lt;code&gt;HttpURLConnection#setRequestMethod()&lt;/code&gt;&lt;/a&gt; instead. But if you're trying to use the connection for output you still need to set &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29&quot;&gt;&lt;code&gt;URLConnection#setDoOutput()&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">取得した&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html&quot;&gt; &lt;code&gt;URLConnection&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt; &lt;code&gt;HttpURLConnection&lt;/code&gt; に&lt;/a&gt;キャストして、代わりにその&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29&quot;&gt; &lt;code&gt;HttpURLConnection#setRequestMethod()&lt;/code&gt; &lt;/a&gt;を使用することもできます 。 ただし、出力に接続を使用する場合は、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29&quot;&gt; &lt;code&gt;URLConnection#setDoOutput()&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;true&lt;/code&gt; に設定する必要があります 。</target>
        </trans-unit>
        <trans-unit id="245cdfa40863d8ce96448736e427726db5478e49" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://http.jcabi.com/apidocs-1.0/com/jcabi/http/request/JdkRequest.html&quot;&gt;&lt;code&gt;JdkRequest&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;http://http.jcabi.com&quot;&gt;jcabi-http&lt;/a&gt; (I'm a developer), which does all this work for you, decorating HttpURLConnection, firing HTTP requests and parsing responses, for example:</source>
          <target state="translated">&lt;a href=&quot;http://http.jcabi.com&quot;&gt;jcabi-http&lt;/a&gt; （私は開発者です）からJdkRequestを使用することもできます。これにより、HttpURLConnectionを装飾し、HTTPリクエストを発行し、応答を解析します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="6853cfae7e1be45777c7d0ee19f2361f883d28a6" translate="yes" xml:space="preserve">
          <source>You can find the rest here:</source>
          <target state="translated">残りはこちらにあります。</target>
        </trans-unit>
        <trans-unit id="a516ee6d5449cdc1e530b5ac409bc8ab1d4224cf" translate="yes" xml:space="preserve">
          <source>You can fire the HTTP request explicitly with &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29&quot;&gt;&lt;code&gt;URLConnection#connect()&lt;/code&gt;&lt;/a&gt;, but the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29&quot;&gt;&lt;code&gt;URLConnection#getInputStream()&lt;/code&gt;&lt;/a&gt; and so on. The above examples does exactly that, so the &lt;code&gt;connect()&lt;/code&gt; call is in fact superfluous.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29&quot;&gt; &lt;code&gt;URLConnection#connect()&lt;/code&gt; を使用&lt;/a&gt;してHTTP要求を明示的に起動できますが、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29&quot;&gt; &lt;code&gt;URLConnection#getInputStream()&lt;/code&gt; &lt;/a&gt;を使用した応答本文など、HTTP応答に関する情報を取得したい場合、要求はオンデマンドで自動的に起動されます。 上記の例はまさにそれを行うので、 &lt;code&gt;connect()&lt;/code&gt; 呼び出しは実際には不必要です。</target>
        </trans-unit>
        <trans-unit id="f11c5a14fc40b0f6eb020811787b2383a59638f9" translate="yes" xml:space="preserve">
          <source>You need a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt;&lt;/a&gt; here. Cast it first if necessary.</source>
          <target state="translated">ここには&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html&quot;&gt; &lt;code&gt;HttpURLConnection&lt;/code&gt; &lt;/a&gt;が必要です。 必要に応じて最初にキャストします。</target>
        </trans-unit>
        <trans-unit id="6e25f84dc6b1a2dd1fd66611ebea30b7a882ab8e" translate="yes" xml:space="preserve">
          <source>You'd normally use &lt;a href=&quot;http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2&quot;&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/a&gt; encoding for mixed POST content (binary and character data). The encoding is in more detail described in &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;RFC2388&lt;/a&gt;.</source>
          <target state="translated">通常、混合POSTコンテンツ（バイナリデータと文字データ）には&lt;a href=&quot;http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2&quot;&gt; &lt;code&gt;multipart/form-data&lt;/code&gt; &lt;/a&gt;エンコーディングを使用します。 エンコーディングの詳細は&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;RFC2388に&lt;/a&gt;記載されています 。</target>
        </trans-unit>
        <trans-unit id="b8539a50b1ce172ac90829eab9332f574cb4eb60" translate="yes" xml:space="preserve">
          <source>finally, use &lt;code&gt;OkHttpClient&lt;/code&gt; to send prepared &lt;code&gt;Request&lt;/code&gt;:</source>
          <target state="translated">最後に、 &lt;code&gt;OkHttpClient&lt;/code&gt; を使用して、準備された &lt;code&gt;Request&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="f070fe9a4e78b4a3f9ca1c6524388de4eda2dc4a" translate="yes" xml:space="preserve">
          <source>if you are using http get please remove this line</source>
          <target state="translated">http get を使用している場合は、この行を削除してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
