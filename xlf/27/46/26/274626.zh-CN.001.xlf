<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/274626">
    <body>
      <group id="274626">
        <trans-unit id="96f7b3f0b27529cd69b835183a3b452d7422b38f" translate="yes" xml:space="preserve">
          <source>&quot;Slicing&quot; is where you assign an object of a derived class to an instance of a base class, thereby losing part of the information - some of it is &quot;sliced&quot; away.</source>
          <target state="translated">&quot;切片 &quot;是指你将派生类的对象分配给基类的一个实例,从而失去了一部分信息--其中的一部分信息被 &quot;切片 &quot;掉了。</target>
        </trans-unit>
        <trans-unit id="ee068c25670c4260986c5bab8691b86a82b69cd0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EXAMPLE&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;EXAMPLE&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ef5d3a89514f059cc62b4e047d5d2ce433c1ac44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. THE DEFINITION OF SLICING PROBLEM&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1.切片问题的定义&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ffd540cc6bd87896a53692fe449010e960a05fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. HOW TO FIX THE SLICING PROBLEM&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2.如何解决切片问题&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c07c3b4c60b8ba66c8f4595e6416f9a07a097cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt;
Consider the following class declaration:</source>
          <target state="translated">&lt;strong&gt;说明：&lt;/strong&gt;考虑以下类声明：</target>
        </trans-unit>
        <trans-unit id="c2866978e9f8a2f17b06bdc707c7050d6a196064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is an Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;这是一个例子：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="442e03b7709e1e9794eaab012b8f14bc626c5003" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It will generate:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;它将产生：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89b8bfb208bba534eb5ce49bf615a8936ec87816" translate="yes" xml:space="preserve">
          <source>A solution</source>
          <target state="translated">解决办法</target>
        </trans-unit>
        <trans-unit id="84c46ee208f7ba0372b29ac5df262f9846bee999" translate="yes" xml:space="preserve">
          <source>Also thought someone should also mention what you should do to avoid slicing...
Get a copy of C++ Coding Standards, 101 rules guidlines, and best practices.  Dealing with slicing is #54.</source>
          <target state="translated">还以为有人应该也会提到应该怎么做才能避免切片.....拿到一本C++编码标准,101条规则指南和最佳实践。处理分片是#54。</target>
        </trans-unit>
        <trans-unit id="7d4895f678a2681f309c8b96b11e3b7adee9a087" translate="yes" xml:space="preserve">
          <source>Although the above assignment is allowed, the value that is assigned to the variable pet loses its breed field. This is called the &lt;strong&gt;slicing problem&lt;/strong&gt;.</source>
          <target state="translated">尽管上面的分配是允许的，但是分配给变量pet的值会丢失其品种字段。 这称为&lt;strong&gt;切片问题&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="4790faee95ffb6e6b57d91d1825335fa81937c0f" translate="yes" xml:space="preserve">
          <source>As baseclass copy functions don't know anything about the derived only the base part of the derived is copied. This is commonly referred to as slicing.</source>
          <target state="translated">由于基类复制函数不知道派生的任何东西,所以只复制派生的基类部分。这通常被称为切片。</target>
        </trans-unit>
        <trans-unit id="232ea33869a0451a48895451cf591143de4b287f" translate="yes" xml:space="preserve">
          <source>As you &lt;em&gt;might&lt;/em&gt; have guessed: the object has been sliced.</source>
          <target state="translated">正如您&lt;em&gt;可能&lt;/em&gt;已经猜到的：对象已被切片。</target>
        </trans-unit>
        <trans-unit id="3377a71b1c4aaabe0ec4693f3e6795aab5fde707" translate="yes" xml:space="preserve">
          <source>Assigning only to parts of an object usually makes little sense, yet C++, unfortunately, provides no built-in way to forbid this. You can, however, roll your own. The first step is making the assignment operator &lt;em&gt;virtual&lt;/em&gt;. This will guarantee that it's always the &lt;strong&gt;actual&lt;/strong&gt; type's assignment operator which is called, not the &lt;strong&gt;declared&lt;/strong&gt; type's. The second step is to use &lt;code&gt;dynamic_cast&lt;/code&gt; to verify that the assigned object has a compatible type. The third step is to do the actual assignment in a (protected!) member &lt;code&gt;assign()&lt;/code&gt;, since &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;assign()&lt;/code&gt; will probably want to use &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;assign()&lt;/code&gt; to copy &lt;code&gt;A&lt;/code&gt;'s, members.</source>
          <target state="translated">仅分配给对象的一部分通常没有什么意义，但是不幸的是，C ++没有提供内置的方法来禁止这种情况。 但是，您可以自己滚动。 第一步是使赋值运算符为&lt;em&gt;virtual&lt;/em&gt; 。 这样可以确保始终调用的是&lt;strong&gt;实际&lt;/strong&gt;类型的赋值运算符，而不是&lt;strong&gt;声明的&lt;/strong&gt;类型。 第二步是使用 &lt;code&gt;dynamic_cast&lt;/code&gt; 验证分配的对象是否具有兼容类型。 第三步是在（受保护的！）成员 &lt;code&gt;assign()&lt;/code&gt; 中进行实际分配，因为 &lt;code&gt;B&lt;/code&gt; 的 &lt;code&gt;assign()&lt;/code&gt; 可能要使用 &lt;code&gt;A&lt;/code&gt; 的 &lt;code&gt;assign()&lt;/code&gt; 复制 &lt;code&gt;A&lt;/code&gt; 的成员。</target>
        </trans-unit>
        <trans-unit id="b1ada17148e1e233404b966a641e77c2376bd0b2" translate="yes" xml:space="preserve">
          <source>Class provides (accidentally, possibly compiler-generated) assignment on a polymorphic base class.</source>
          <target state="translated">类在多态基类上提供(意外地,可能是编译器生成的)赋值。</target>
        </trans-unit>
        <trans-unit id="83dc4ee1104f8d5e9f703018d2d2b6b502938300" translate="yes" xml:space="preserve">
          <source>Client calls a virtual member function that accesses the sliced-off state.</source>
          <target state="translated">客户端调用一个虚拟成员函数来访问被切开的状态。</target>
        </trans-unit>
        <trans-unit id="974a91f56d4cd2aed2a1105b95619948eb415e28" translate="yes" xml:space="preserve">
          <source>Client copies and slices an instance of a derived class.</source>
          <target state="translated">客户端复制并切片一个派生类的实例。</target>
        </trans-unit>
        <trans-unit id="2d038661c48cc8fa189c28d51e0abc29577d5660" translate="yes" xml:space="preserve">
          <source>Consider class A, and class B derived from A. Memory corruption can happen if the A part has a pointer p, and a B instance that points p to B's additional data. Then, when the additional data gets sliced off, p is pointing to garbage.</source>
          <target state="translated">考虑类A,以及由A派生的类B,如果A的部分有一个指针p,而B的实例指向B的附加数据,那么内存损坏就会发生。然后,当附加数据被切掉时,p指向垃圾。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="46053037889f11e4ba1e79417655c2250a17ba1e" translate="yes" xml:space="preserve">
          <source>He passes an instance of his home-brewed class to the &lt;code&gt;push_back&lt;/code&gt; but then the program goes haywire.</source>
          <target state="translated">他将自己酿制的类的一个实例传递给 &lt;code&gt;push_back&lt;/code&gt; ,但随后程序陷入了麻烦。</target>
        </trans-unit>
        <trans-unit id="fb9d634e48590cd163aafc973458162dac92008c" translate="yes" xml:space="preserve">
          <source>I hope this example brings light about for those people who can't really imagine things when talking about &lt;code&gt;A&lt;/code&gt;s and &lt;code&gt;B&lt;/code&gt;s being derived in some manner.</source>
          <target state="translated">我希望这个例子能为那些在谈论 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 以某种方式派生时无法真正想象事物的人们带来启发。</target>
        </trans-unit>
        <trans-unit id="85e83faab852b9a32b586876a340271f1e596eb5" translate="yes" xml:space="preserve">
          <source>I just ran across the slicing problem and promptly landed here. So let me add my two cents to this.</source>
          <target state="translated">我只是碰到了切片的问题,很快就降落到了这里。所以,让我在此补充一下我的两分钱。</target>
        </trans-unit>
        <trans-unit id="93013b7742a645ec3d25d9b48cfb99929695ef8b" translate="yes" xml:space="preserve">
          <source>If D is a derived class of the base class B, then you can assign an object of type Derived to a variable (or parameter) of type Base.</source>
          <target state="translated">如果D是基类B的派生类,那么可以将Derived类型的对象分配给Base类型的变量(或参数)。</target>
        </trans-unit>
        <trans-unit id="f195d53fd3def730550d718c6c9f9658e3676862" translate="yes" xml:space="preserve">
          <source>If I pass a subclass object in as a parameter to a method, which takes a parameter of type superclass, I should certainly be aware of that and know the internally, the called method will be working with the superclass (aka baseclass) object only.</source>
          <target state="translated">如果我把一个子类对象作为参数传递给一个方法,而这个方法需要一个类型为superclass的参数,我当然要注意到这一点,并知道在内部,被调用的方法将只与superclass(又名baseclass)对象一起工作。</target>
        </trans-unit>
        <trans-unit id="fb22970eec781b22051dd8ff19d02ffefae76c1a" translate="yes" xml:space="preserve">
          <source>If You have a base class &lt;code&gt;A&lt;/code&gt; and a derived class &lt;code&gt;B&lt;/code&gt;, then You can do the following.</source>
          <target state="translated">如果您具有基类 &lt;code&gt;A&lt;/code&gt; 和派生类 &lt;code&gt;B&lt;/code&gt; ，则可以执行以下操作。</target>
        </trans-unit>
        <trans-unit id="689f952136930a7ed064aafe697ec6ce9fce025d" translate="yes" xml:space="preserve">
          <source>If those links don't give enough info for a &quot;good answer&quot; please edit your question to let us know what more you're looking for.</source>
          <target state="translated">如果这些链接不能提供足够的信息,请编辑您的问题,让我们知道您还需要什么。</target>
        </trans-unit>
        <trans-unit id="c20839b8bed4fbc54e56454bc66175198301dfcf" translate="yes" xml:space="preserve">
          <source>In C++, a derived class object can be assigned to a base class object, but the other way is not possible.</source>
          <target state="translated">在C++中,派生类对象可以被分配给基类对象,但另一种方式是不可能的。</target>
        </trans-unit>
        <trans-unit id="c38ead1b6706d1b10a8421bddcacf5eaf4bd90bc" translate="yes" xml:space="preserve">
          <source>In this case, none of the data members or member functions of the dynamic variable
being pointed to by ptrD (descendant class object) will be lost. In addition,  if you need to use functions, the function must be a virtual function.</source>
          <target state="translated">在这种情况下,被ptrD(降级类对象)指向的动态变量的数据成员或成员函数都不会丢失。此外,如果需要使用函数,函数必须是一个虚函数。</target>
        </trans-unit>
        <trans-unit id="fc0b49a0164b222cecf4c176a63574ecd921aa98" translate="yes" xml:space="preserve">
          <source>In this situation, C++ lets you pass an instance of &lt;code&gt;B&lt;/code&gt; to  &lt;code&gt;A&lt;/code&gt;'s assignment operator (and also to the copy constructor). This works because an instance of &lt;code&gt;B&lt;/code&gt; can be converted to a &lt;code&gt;const A&amp;amp;&lt;/code&gt;, which is what assignment operators and copy-constructors expect their arguments to be.</source>
          <target state="translated">在这种情况下，C ++允许您将 &lt;code&gt;B&lt;/code&gt; 的实例传递给 &lt;code&gt;A&lt;/code&gt; 的赋值运算符（也传递给副本构造函数）。 之所以可行，是因为 &lt;code&gt;B&lt;/code&gt; 的实例可以转换为 &lt;code&gt;const A&amp;amp;&lt;/code&gt; ，这是赋值运算符和复制构造函数所期望的参数。</target>
        </trans-unit>
        <trans-unit id="ae67144a22cc1e129cb43bcf76007148f1821dbe" translate="yes" xml:space="preserve">
          <source>It seems to me only the unreasonable expectation that providing a subclass where a baseclass is requested, would somehow result in subclass specific results, would cause slicing to be a problem.  Its either poor design in the use of the method or a poor subclass implementation.  I'm guessing its usually the result of sacrificing good OOP design in favor of expediency or performance gains.</source>
          <target state="translated">在我看来,只有不合理的期望,即提供一个子类,在请求基类的地方提供一个子类,会以某种方式导致子类的特定结果,才会导致分片问题。这不是方法的使用设计不好,就是子类实现不好。我想这通常是牺牲了良好的OOP设计,而为了权宜之计或性能的提高而导致的结果。</target>
        </trans-unit>
        <trans-unit id="4ea02cdc39f10956300111973911bc6cdd6b9ea7" translate="yes" xml:space="preserve">
          <source>It seems to me, that slicing isn't so much a problem other than when your own classes and program are poorly architected/designed.</source>
          <target state="translated">在我看来,除了你自己的类和程序设计得不好的时候,分片并不是什么大问题。</target>
        </trans-unit>
        <trans-unit id="a3b13fdda77749958ecc4ce3613a917ec161dafd" translate="yes" xml:space="preserve">
          <source>It suggests a somewhat sophisticated pattern to fully deal with the issue:  have a protected copy constructor, a protected pure virtual DoClone, and a public Clone with an assert which will tell you if a (further) derived class failed to implement DoClone correctly.  (The Clone method makes a proper deep copy of the polymorphic object.)</source>
          <target state="translated">它提出了一个有点复杂的模式来完全处理这个问题:有一个受保护的复制构造函数,一个受保护的纯虚拟DoClone,和一个带有断言的公共Clone,这个断言会告诉你一个(进一步的)派生类是否正确地实现了DoClone。(Clone方法会对多态对象进行适当的深度复制)。</target>
        </trans-unit>
        <trans-unit id="08009f0d2f588ed82d0e84e8667066234ba6ee27" translate="yes" xml:space="preserve">
          <source>Let's have an example from &quot;production code&quot; (or something that comes kind of close):</source>
          <target state="translated">让我们从 &quot;生产代码&quot;(或类似的东西)来举个例子。</target>
        </trans-unit>
        <trans-unit id="236527dc0874d02dd5d7ceecb15eceaaa482557c" translate="yes" xml:space="preserve">
          <source>Let's say we have something that dispatches actions. A control center UI for example.</source>
          <target state="translated">比方说我们有一个可以调度动作的东西。比如说控制中心的UI。</target>
        </trans-unit>
        <trans-unit id="e13f0710c1e483d21ae7cbd772cc5dece2fd8f55" translate="yes" xml:space="preserve">
          <source>Most answers here fail to explain what the actual problem with slicing is. They only explain the benign cases of slicing, not the treacherous ones. Assume, like the other answers, that you're dealing with two classes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; derives (publicly) from &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">这里的大多数答案都无法解释切片的实际问题是什么。 他们只说明切片的良性案例，而不说明危险的切片。 像其他答案一样，假设您正在处理两个类 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，其中 &lt;code&gt;B&lt;/code&gt; （公开地）从 &lt;code&gt;A&lt;/code&gt; 派生。</target>
        </trans-unit>
        <trans-unit id="719db0c99ee0441d6b479abf270a523016554d7c" translate="yes" xml:space="preserve">
          <source>Note that, for pure convenience, &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;operator=&lt;/code&gt; covariantly overrides the return type, since it &lt;strong&gt;knows&lt;/strong&gt; that it's returning an instance of &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">请注意，为纯粹方便起见， &lt;code&gt;B&lt;/code&gt; 的 &lt;code&gt;operator=&lt;/code&gt; 协变量会覆盖返回类型，因为它&lt;strong&gt;知道&lt;/strong&gt;它正在返回 &lt;code&gt;B&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="732d97c69c5f70f887b60e1c0384ce3d5087b2cc" translate="yes" xml:space="preserve">
          <source>Nothing bad happens there - you asked for an instance of &lt;code&gt;A&lt;/code&gt; which is a copy of &lt;code&gt;B&lt;/code&gt;, and that's exactly what you get. Sure, &lt;code&gt;a&lt;/code&gt; won't contain some of &lt;code&gt;b&lt;/code&gt;'s members, but how should it? It's an &lt;code&gt;A&lt;/code&gt;, after all, not a &lt;code&gt;B&lt;/code&gt;, so it hasn't even &lt;em&gt;heard&lt;/em&gt; about these members, let alone would be able to store them.</source>
          <target state="translated">那里什么都没发生-您要求 &lt;code&gt;A&lt;/code&gt; 的实例，它是 &lt;code&gt;B&lt;/code&gt; 的副本，而这正是您所得到的。 当然， &lt;code&gt;a&lt;/code&gt; 不会包含 &lt;code&gt;b&lt;/code&gt; 的某些成员，但是应该如何？ 毕竟是 &lt;code&gt;A&lt;/code&gt; ，而不是 &lt;code&gt;B&lt;/code&gt; ，所以它甚至都没有&lt;em&gt;听说&lt;/em&gt;过这些成员，更不用说能够存储它们了。</target>
        </trans-unit>
        <trans-unit id="5e46f87edfe58bab858453c3d93fc576b5f4b914" translate="yes" xml:space="preserve">
          <source>Now the method &lt;code&gt;wantAnA&lt;/code&gt; needs a copy of &lt;code&gt;derived&lt;/code&gt;. However, the object &lt;code&gt;derived&lt;/code&gt; cannot be copied completely, as the class &lt;code&gt;B&lt;/code&gt; could invent additional member variables which are not in its base class &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">现在，方法 &lt;code&gt;wantAnA&lt;/code&gt; 需要 &lt;code&gt;derived&lt;/code&gt; 的副本。 但是， &lt;code&gt;derived&lt;/code&gt; 的对象无法完全复制，因为类 &lt;code&gt;B&lt;/code&gt; 可以发明不在其基类 &lt;code&gt;A&lt;/code&gt; 中的其他成员变量。</target>
        </trans-unit>
        <trans-unit id="caae1329d8af58dcad82134397a8943be46a5f69" translate="yes" xml:space="preserve">
          <source>Now we have established how it looks from the UI's perspective. No problem so far. But some other guy who works on this project suddenly decides that there are specialized actions that need more information in the &lt;code&gt;Action&lt;/code&gt; object. For what reason ever. That could also be solved with lambda captures.  This example is not taken 1-1 from the code.</source>
          <target state="translated">现在，我们已经从UI的角度建立了外观。 到目前为止没有问题。 但是从事此项目工作的其他一些人突然决定，在 &lt;code&gt;Action&lt;/code&gt; 对象中存在需要更多信息的特殊操作。 出于什么原因。 这也可以通过lambda捕获来解决。 此示例不从代码中获取1-1。</target>
        </trans-unit>
        <trans-unit id="e0e71bd05c604f9e5482ba1b4784d0451a14dca4" translate="yes" xml:space="preserve">
          <source>OK, I'll give it a try after reading many posts explaining object slicing but not how it becomes problematic.</source>
          <target state="translated">好吧,看了很多解释物体切片的帖子,但不知道怎么就成了问题,我就试一试。</target>
        </trans-unit>
        <trans-unit id="9002eb67a255da386f8896a6d49539ddfeed3eca" translate="yes" xml:space="preserve">
          <source>Object slicing happens when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off to form the base class object.</source>
          <target state="translated">当派生类对象被分配到基类对象时,派生类对象的附加属性被切掉,形成基类对象。</target>
        </trans-unit>
        <trans-unit id="50898f71166704d72332d693caefb3d03a0dfabd" translate="yes" xml:space="preserve">
          <source>Slicing means that the data added by a subclass are discarded when an object of the subclass is passed or returned by value or from a function expecting a base class object.</source>
          <target state="translated">分片是指当子类的对象被传递或通过值或从期望基类对象的函数返回时,子类添加的数据被丢弃。</target>
        </trans-unit>
        <trans-unit id="1ffaa953719f39c660e8b91f324eefc0cb44027a" translate="yes" xml:space="preserve">
          <source>So ... Why is losing the derived information bad? ... because the author of the derived class may have changed the representation such that slicing off the extra information changes the value being represented by the object.  This can happen if the derived class if used to cache a representation that is more efficient for certain operations, but expensive to transform back to the base representation.</source>
          <target state="translated">所以......为什么失去派生信息是坏事? ....因为派生类的作者可能已经改变了表示方式,这样一来,切掉多余的信息就会改变对象所表示的值。如果派生类被用来缓存一个对某些操作更有效的表示方式,但要转换回基本表示方式却很昂贵,那么这种情况就会发生。</target>
        </trans-unit>
        <trans-unit id="67da6e9fc08116b45e5de7c309437931d5054895" translate="yes" xml:space="preserve">
          <source>So an object of type &lt;code&gt;B&lt;/code&gt; has two data members, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="translated">因此，类型 &lt;code&gt;B&lt;/code&gt; 的对象具有两个数据成员 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;bar&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5576c771bb07143c60f3e0e3aa22ee9a4d4a3fd1" translate="yes" xml:space="preserve">
          <source>So it's when you assign an object of a subclass to the super class. The superclass knows nothing of the additional information in the subclass, and hasn't got room to store it, so the additional information gets &quot;sliced off&quot;.</source>
          <target state="translated">所以当你把一个子类的对象分配给超类的时候。超类对子类中的附加信息一无所知,也没有空间存储,所以附加信息被 &quot;切片 &quot;了。</target>
        </trans-unit>
        <trans-unit id="53f4d7a32d19a1c0fe9135470dc1d40d622b6f39" translate="yes" xml:space="preserve">
          <source>So the UI gets a &lt;code&gt;std::vector&amp;lt;Action&amp;gt;&lt;/code&gt; supplied. Imagine some functions like:</source>
          <target state="translated">因此，UI获得了提供的 &lt;code&gt;std::vector&amp;lt;Action&amp;gt;&lt;/code&gt; 。 想象一些函数，例如：</target>
        </trans-unit>
        <trans-unit id="e4a930b6204d89a4fe5c0162bdb1611385af40d3" translate="yes" xml:space="preserve">
          <source>So the guy derives from &lt;code&gt;Action&lt;/code&gt; to add his own flavour.</source>
          <target state="translated">因此，该人从 &lt;code&gt;Action&lt;/code&gt; 派生来添加自己的风味。</target>
        </trans-unit>
        <trans-unit id="312069c9e501c1ac64e803e6fdab5307267739fa" translate="yes" xml:space="preserve">
          <source>So what happened?</source>
          <target state="translated">那么,发生了什么事?</target>
        </trans-unit>
        <trans-unit id="94801b98814e71ff839015a3a53197592219b407" translate="yes" xml:space="preserve">
          <source>Someone mentioned it in the IRC as the slicing problem.</source>
          <target state="translated">有人在IRC中提到了这个问题的切片问题。</target>
        </trans-unit>
        <trans-unit id="baeeb7a29450d80f0ad8595dd8d3e4bcc16943b9" translate="yes" xml:space="preserve">
          <source>The benign case</source>
          <target state="translated">良性病例</target>
        </trans-unit>
        <trans-unit id="63684884292dbed35dceaf9970d215608feaa7df" translate="yes" xml:space="preserve">
          <source>The extra information from the instance has been lost, and &lt;code&gt;f&lt;/code&gt; is now prone to undefined behaviour.</source>
          <target state="translated">实例中的额外信息已丢失，并且 &lt;code&gt;f&lt;/code&gt; 现在倾向于不确定的行为。</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">输出是:</target>
        </trans-unit>
        <trans-unit id="f9b829cde2335dc12ea816064752c0be0bbc8cbc" translate="yes" xml:space="preserve">
          <source>The short answers is that you slice the object by assigning a derived object to a base object &lt;em&gt;by value&lt;/em&gt;, i.e. the remaining object is only a part of the derived object. In order to preserve value semantics, slicing is a reasonable behavior and has its relatively rare uses, which doesn't exist in most other languages. Some people consider it a feature of C++, while many considered it one of the quirks/misfeatures of C++.</source>
          <target state="translated">简短的答案是&lt;em&gt;通过按值&lt;/em&gt;将派生的对象分配给基础对象&lt;em&gt;来&lt;/em&gt;对对象进行切片，即剩余的对象只是派生对象的一部分。 为了保留值的语义，切片是一种合理的行为，并且具有相对较少的用途，这在大多数其他语言中都不存在。 有些人认为它是C ++的功能，而许多人则认为它是C ++的怪癖/错误特征之一。</target>
        </trans-unit>
        <trans-unit id="dd82002ff948b24d6107ece53db19ed50003be81" translate="yes" xml:space="preserve">
          <source>The slicing problem in C++ arises from the value semantics of its objects, which remained mostly due to compatibility with C structs. You need to use explicit reference or pointer syntax to achieve &quot;normal&quot; object behavior found in most other languages that do objects, i.e., objects are always passed around by reference.</source>
          <target state="translated">C++中的分片问题来自于它的对象的值语义,这主要是由于与C结构的兼容性而保留下来的。你需要使用显式引用或指针语法来实现大多数其他语言中做对象的 &quot;正常 &quot;对象行为,也就是说,对象总是通过引用来传递。</target>
        </trans-unit>
        <trans-unit id="43ba9549013d5f73b5a2c8783b4aea4338a8a2f8" translate="yes" xml:space="preserve">
          <source>The slicing problem is serious because it can result in memory corruption, and it is very difficult to guarantee a program does not suffer from it. To design it out of the language, classes that support inheritance should be accessible by reference only (not by value). The D programming language has this property.</source>
          <target state="translated">分片问题很严重,因为它可能导致内存损坏,很难保证一个程序不受此影响。为了把它设计出来,在语言中,支持继承的类应该只通过引用(而不是通过值)访问。D程序设计语言就有这个属性。</target>
        </trans-unit>
        <trans-unit id="50db936e092a460d4926d6fbfb2ff0e11f3315fa" translate="yes" xml:space="preserve">
          <source>The treacherous case</source>
          <target state="translated">险恶的案件</target>
        </trans-unit>
        <trans-unit id="d9370a40dcdd656762e9b518e64889d3090a3d67" translate="yes" xml:space="preserve">
          <source>The vicious scenario that can result in memory corruption is the following:</source>
          <target state="translated">可能导致内存损坏的恶性情况如下。</target>
        </trans-unit>
        <trans-unit id="b54458e98c708f4219d77f2af0aca693f0d1862d" translate="yes" xml:space="preserve">
          <source>Then if you were to write this:</source>
          <target state="translated">那么,如果你要写这个,</target>
        </trans-unit>
        <trans-unit id="8aae35e2eebae7ab19a6cb8b47f5df262f52f622" translate="yes" xml:space="preserve">
          <source>Then the information in &lt;code&gt;b&lt;/code&gt; about member &lt;code&gt;bar&lt;/code&gt; is lost in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">然后， &lt;code&gt;b&lt;/code&gt; 中有关成员 &lt;code&gt;bar&lt;/code&gt; 的信息丢失在 &lt;code&gt;a&lt;/code&gt; 中 。</target>
        </trans-unit>
        <trans-unit id="331a1e0260486237ecd3902be6663d06751c6d80" translate="yes" xml:space="preserve">
          <source>Therefore, to call &lt;code&gt;wantAnA&lt;/code&gt;, the compiler will &quot;slice off&quot; all additional members of the derived class. The result might be an object you did not want to create, because</source>
          <target state="translated">因此，要调用 &lt;code&gt;wantAnA&lt;/code&gt; ，编译器将&amp;ldquo;分片&amp;rdquo;派生类的所有其他成员。 结果可能是您不想创建的对象，因为</target>
        </trans-unit>
        <trans-unit id="83a3562f52501c4eb5425a01f442e1c15fd73132" translate="yes" xml:space="preserve">
          <source>These are all good answers. I would just like to add an execution example when passing objects by value vs by reference:</source>
          <target state="translated">这些都是不错的答案。我只想补充一个按值传递对象与按引用传递对象时的执行例子。</target>
        </trans-unit>
        <trans-unit id="0e951a20d40826080d18427519cb8a5edd5c4e41" translate="yes" xml:space="preserve">
          <source>Third match in google for &quot;C++ slicing&quot; gives me this Wikipedia article &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_slicing&quot;&gt;http://en.wikipedia.org/wiki/Object_slicing&lt;/a&gt; and this (heated, but the first few posts define the problem) : &lt;a href=&quot;http://bytes.com/forum/thread163565.html&quot;&gt;http://bytes.com/forum/thread163565.html&lt;/a&gt;</source>
          <target state="translated">谷歌中针对&amp;ldquo; C ++切片&amp;rdquo;的第三次匹配使我在Wikipedia上看到了这篇文章， &lt;a href=&quot;http://bytes.com/forum/thread163565.html&quot;&gt;网址为&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_slicing&quot;&gt;http://en.wikipedia.org/wiki/Object_slicing，&lt;/a&gt;并且这篇文章很热 （但前几篇文章定义了问题）： http : //bytes.com/ Forum / thread163565.html</target>
        </trans-unit>
        <trans-unit id="b3490f2ce357da06fe3a4eb047d61de5e156e219" translate="yes" xml:space="preserve">
          <source>This UI needs to get a list of things that are currently able to be dispatched. So we define a class that contains the dispatch-information. Let's call it &lt;code&gt;Action&lt;/code&gt;. So an &lt;code&gt;Action&lt;/code&gt; has some member variables. For simplicity we just have 2, being a &lt;code&gt;std::string name&lt;/code&gt; and a &lt;code&gt;std::function&amp;lt;void()&amp;gt; f&lt;/code&gt;. Then it has an &lt;code&gt;void activate()&lt;/code&gt; which just executes the &lt;code&gt;f&lt;/code&gt; member.</source>
          <target state="translated">此UI需要获取当前可以调度的事物的列表。 因此，我们定义了一个包含调度信息的类。 我们称之为 &lt;code&gt;Action&lt;/code&gt; 。 因此， &lt;code&gt;Action&lt;/code&gt; 具有一些成员变量。 为简单起见，我们只有2个，分别是 &lt;code&gt;std::string name&lt;/code&gt; 和 &lt;code&gt;std::function&amp;lt;void()&amp;gt; f&lt;/code&gt; 。 然后，它具有一个 &lt;code&gt;void activate()&lt;/code&gt; ，它仅执行 &lt;code&gt;f&lt;/code&gt; 成员。</target>
        </trans-unit>
        <trans-unit id="cdf5b524fd6d02ab284fc74f757fadd7c2a81b09" translate="yes" xml:space="preserve">
          <source>To defeat the problem, we use pointers to dynamic variables.</source>
          <target state="translated">为了战胜这个问题,我们使用指向动态变量的指针。</target>
        </trans-unit>
        <trans-unit id="f0f39a47361de0eb57b43d1232d22d288fb9b176" translate="yes" xml:space="preserve">
          <source>What happened? Well, C++ by default doesn't treat assignment operators as &lt;code&gt;virtual&lt;/code&gt;. Thus, the line &lt;code&gt;a_ref = b1&lt;/code&gt; will call the assignment operator of &lt;code&gt;A&lt;/code&gt;, not that of &lt;code&gt;B&lt;/code&gt;. This is because, for non-virtual functions, the &lt;strong&gt;declared&lt;/strong&gt; (formally: &lt;em&gt;static&lt;/em&gt;) type (which is &lt;code&gt;A&amp;amp;&lt;/code&gt;) determines which function is called, as opposed to the &lt;strong&gt;actual&lt;/strong&gt; (formally: &lt;em&gt;dynamic&lt;/em&gt;) type (which would be &lt;code&gt;B&lt;/code&gt;, since &lt;code&gt;a_ref&lt;/code&gt; references an instance of &lt;code&gt;B&lt;/code&gt;). Now, &lt;code&gt;A&lt;/code&gt;'s assignment operator obviously knows only about the members declared in &lt;code&gt;A&lt;/code&gt;, so it will copy only those, leaving the members added in &lt;code&gt;B&lt;/code&gt; unchanged.</source>
          <target state="translated">发生了什么？ 好吧，C ++默认情况下不会将赋值运算符视为 &lt;code&gt;virtual&lt;/code&gt; 。 因此，行 &lt;code&gt;a_ref = b1&lt;/code&gt; 将调用 &lt;code&gt;A&lt;/code&gt; 的赋值运算符，而不是 &lt;code&gt;B&lt;/code&gt; 的赋值运算符。 这是因为，对于非虚函数， &lt;strong&gt;声明的&lt;/strong&gt; （正式： &lt;em&gt;静态&lt;/em&gt; ）类型（即 &lt;code&gt;A&amp;amp;&lt;/code&gt; ）确定要调用哪个函数，而不是&lt;strong&gt;实际&lt;/strong&gt; （正式： &lt;em&gt;动态&lt;/em&gt; ）类型（即 &lt;code&gt;B&lt;/code&gt; ，因为 &lt;code&gt;a_ref&lt;/code&gt; 引用了a &lt;code&gt;B&lt;/code&gt; 的实例）。 现在， &lt;code&gt;A&lt;/code&gt; 的赋值运算符显然只知道 &lt;code&gt;A&lt;/code&gt; 中声明的成员，因此它将仅复制那些成员，而保持 &lt;code&gt;B&lt;/code&gt; 中添加的成员不变。</target>
        </trans-unit>
        <trans-unit id="4dd739c564654f16bef20fea762e39dd16ff22ed" translate="yes" xml:space="preserve">
          <source>What is object slicing</source>
          <target state="translated">什么是物体切片</target>
        </trans-unit>
        <trans-unit id="5f307ba956aa9318084c729d9e0b4ed1c890ae99" translate="yes" xml:space="preserve">
          <source>When a Derived class Object is assigned to Base class Object, all the members of derived class object is copied to base class object except the members which are not present in the base class. These members are Sliced away by the compiler.
This is called Object Slicing.</source>
          <target state="translated">当派生类对象被分配到基类对象时,除了基类中不存在的成员外,派生类对象的所有成员都被复制到基类对象中。这些成员会被编译器切掉。这就是所谓的对象切片。</target>
        </trans-unit>
        <trans-unit id="d72ede022bbe7ab8af001c0bdbe63a215020ce04" translate="yes" xml:space="preserve">
          <source>You can also mark the copy constructor on the base explicit which allows for explicit slicing if it is desired.</source>
          <target state="translated">你也可以在基础上标记出copy构造函数,如果需要的话,可以进行显式分片。</target>
        </trans-unit>
        <trans-unit id="67dd54dbbbe60a55354560fe6b83d81e0acab546" translate="yes" xml:space="preserve">
          <source>You might think that &lt;code&gt;b2&lt;/code&gt; will be a copy of &lt;code&gt;b1&lt;/code&gt; afterward. But, alas, it's &lt;strong&gt;not&lt;/strong&gt;! If you inspect it, you'll discover that &lt;code&gt;b2&lt;/code&gt; is a Frankensteinian creature, made from some chunks of &lt;code&gt;b1&lt;/code&gt; (the chunks that &lt;code&gt;B&lt;/code&gt; inherits from &lt;code&gt;A&lt;/code&gt;), and some chunks of &lt;code&gt;b2&lt;/code&gt; (the chunks that only &lt;code&gt;B&lt;/code&gt; contains). Ouch!</source>
          <target state="translated">您可能会认为 &lt;code&gt;b2&lt;/code&gt; 之后将是 &lt;code&gt;b1&lt;/code&gt; 的副本。 但是，a， &lt;strong&gt;不是&lt;/strong&gt; ！ 如果进行检查，您会发现 &lt;code&gt;b2&lt;/code&gt; 是弗兰肯斯坦主义的生物，它由 &lt;code&gt;b1&lt;/code&gt; 的一些块（ &lt;code&gt;B&lt;/code&gt; 从 &lt;code&gt;A&lt;/code&gt; 继承的块）和 &lt;code&gt;b2&lt;/code&gt; 的一些块（仅 &lt;code&gt;B&lt;/code&gt; 包含的块）组成。 哎哟!</target>
        </trans-unit>
        <trans-unit id="caa7ab5b89b1d461f77ff932bb8c215a2ad0c121" translate="yes" xml:space="preserve">
          <source>it behaves like an &lt;code&gt;A&lt;/code&gt;-object (all special behaviour of the class &lt;code&gt;B&lt;/code&gt; is lost).</source>
          <target state="translated">它的行为就像一个 &lt;code&gt;A&lt;/code&gt; 对象 （类 &lt;code&gt;B&lt;/code&gt; 的所有特殊行为都丢失了）。</target>
        </trans-unit>
        <trans-unit id="0e4b5f39331f766abe0b42f591f9a7990190d1e7" translate="yes" xml:space="preserve">
          <source>it may be incomplete,</source>
          <target state="translated">它可能是不完整的。</target>
        </trans-unit>
        <trans-unit id="3f62ee0ef207332e73fb923b4003d3d9e9e87c14" translate="yes" xml:space="preserve">
          <source>when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off (discard)  form the base class object.</source>
          <target state="translated">当派生类对象被分配到基类对象时,派生类对象的附加属性被切掉(丢弃),形成基类对象。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
