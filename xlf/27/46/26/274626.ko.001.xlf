<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/274626">
    <body>
      <group id="274626">
        <trans-unit id="96f7b3f0b27529cd69b835183a3b452d7422b38f" translate="yes" xml:space="preserve">
          <source>&quot;Slicing&quot; is where you assign an object of a derived class to an instance of a base class, thereby losing part of the information - some of it is &quot;sliced&quot; away.</source>
          <target state="translated">&quot;슬라이스&quot;는 파생 클래스의 객체를 기본 클래스의 인스턴스에 할당하여 정보의 일부를 잃어 버리는 곳입니다. 일부는 &quot;슬라이스&quot;됩니다.</target>
        </trans-unit>
        <trans-unit id="ee068c25670c4260986c5bab8691b86a82b69cd0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;EXAMPLE&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;EXAMPLE&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ef5d3a89514f059cc62b4e047d5d2ce433c1ac44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1. THE DEFINITION OF SLICING PROBLEM&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;1. 슬라이싱 문제의 정의&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ffd540cc6bd87896a53692fe449010e960a05fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2. HOW TO FIX THE SLICING PROBLEM&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2. 슬라이싱 문제를 해결하는 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c07c3b4c60b8ba66c8f4595e6416f9a07a097cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explanation:&lt;/strong&gt;
Consider the following class declaration:</source>
          <target state="translated">&lt;strong&gt;설명 :&lt;/strong&gt; 다음 클래스 선언을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="c2866978e9f8a2f17b06bdc707c7050d6a196064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Here is an Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;다음은 예입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="442e03b7709e1e9794eaab012b8f14bc626c5003" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It will generate:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;다음을 생성합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89b8bfb208bba534eb5ce49bf615a8936ec87816" translate="yes" xml:space="preserve">
          <source>A solution</source>
          <target state="translated">해결책</target>
        </trans-unit>
        <trans-unit id="84c46ee208f7ba0372b29ac5df262f9846bee999" translate="yes" xml:space="preserve">
          <source>Also thought someone should also mention what you should do to avoid slicing...
Get a copy of C++ Coding Standards, 101 rules guidlines, and best practices.  Dealing with slicing is #54.</source>
          <target state="translated">또한 누군가가 슬라이싱을 피하기 위해해야 ​​할 일을 언급해야한다고 생각했습니다. C ++ 코딩 표준, 101 가지 규칙 지침 및 모범 사례를 받으십시오. 슬라이싱 처리는 # 54입니다.</target>
        </trans-unit>
        <trans-unit id="7d4895f678a2681f309c8b96b11e3b7adee9a087" translate="yes" xml:space="preserve">
          <source>Although the above assignment is allowed, the value that is assigned to the variable pet loses its breed field. This is called the &lt;strong&gt;slicing problem&lt;/strong&gt;.</source>
          <target state="translated">위의 할당이 허용되지만 변수 pet에 할당 된 값은 해당 유형 필드를 잃습니다. 이것을 &lt;strong&gt;슬라이싱 문제&lt;/strong&gt; 라고합니다.</target>
        </trans-unit>
        <trans-unit id="4790faee95ffb6e6b57d91d1825335fa81937c0f" translate="yes" xml:space="preserve">
          <source>As baseclass copy functions don't know anything about the derived only the base part of the derived is copied. This is commonly referred to as slicing.</source>
          <target state="translated">기본 클래스 복사 함수는 파생에 대한 정보를 알지 못하므로 파생의 기본 부분 만 복사됩니다. 이것을 일반적으로 슬라이싱이라고합니다.</target>
        </trans-unit>
        <trans-unit id="232ea33869a0451a48895451cf591143de4b287f" translate="yes" xml:space="preserve">
          <source>As you &lt;em&gt;might&lt;/em&gt; have guessed: the object has been sliced.</source>
          <target state="translated">당신이 짐작할 &lt;em&gt;수&lt;/em&gt; 있듯이 : 객체가 슬라이스되었습니다.</target>
        </trans-unit>
        <trans-unit id="3377a71b1c4aaabe0ec4693f3e6795aab5fde707" translate="yes" xml:space="preserve">
          <source>Assigning only to parts of an object usually makes little sense, yet C++, unfortunately, provides no built-in way to forbid this. You can, however, roll your own. The first step is making the assignment operator &lt;em&gt;virtual&lt;/em&gt;. This will guarantee that it's always the &lt;strong&gt;actual&lt;/strong&gt; type's assignment operator which is called, not the &lt;strong&gt;declared&lt;/strong&gt; type's. The second step is to use &lt;code&gt;dynamic_cast&lt;/code&gt; to verify that the assigned object has a compatible type. The third step is to do the actual assignment in a (protected!) member &lt;code&gt;assign()&lt;/code&gt;, since &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;assign()&lt;/code&gt; will probably want to use &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;assign()&lt;/code&gt; to copy &lt;code&gt;A&lt;/code&gt;'s, members.</source>
          <target state="translated">일반적으로 객체의 일부에만 할당하는 것은 의미가 없지만 불행히도 C ++은이를 금지하는 기본 제공 방법을 제공하지 않습니다. 그러나 자신의 롤을 할 수 있습니다. 첫 번째 단계는 할당 연산자를 &lt;em&gt;가상으로&lt;/em&gt; 만드는 것입니다. 이렇게하면 &lt;strong&gt;선언 된&lt;/strong&gt; 유형이 아니라 호출되는 &lt;strong&gt;실제&lt;/strong&gt; 유형의 할당 연산자가 항상 보장됩니다. 두 번째 단계는 &lt;code&gt;dynamic_cast&lt;/code&gt; 를 사용하여 할당 된 객체의 유형이 호환되는지 확인하는 것입니다. 세 번째 단계는 (protected!) 멤버 &lt;code&gt;assign()&lt;/code&gt; 에서 실제 할당을 수행하는 것입니다. &lt;code&gt;B&lt;/code&gt; 의 &lt;code&gt;assign()&lt;/code&gt; 은 &lt;code&gt;A&lt;/code&gt; 의 &lt;code&gt;assign()&lt;/code&gt; 을 사용하여 A 의 멤버를 복사하려고 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="b1ada17148e1e233404b966a641e77c2376bd0b2" translate="yes" xml:space="preserve">
          <source>Class provides (accidentally, possibly compiler-generated) assignment on a polymorphic base class.</source>
          <target state="translated">클래스는 다형성 기본 클래스에 실수로 컴파일러에서 생성 한 할당을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="83dc4ee1104f8d5e9f703018d2d2b6b502938300" translate="yes" xml:space="preserve">
          <source>Client calls a virtual member function that accesses the sliced-off state.</source>
          <target state="translated">클라이언트는 분리 된 상태에 액세스하는 가상 멤버 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="974a91f56d4cd2aed2a1105b95619948eb415e28" translate="yes" xml:space="preserve">
          <source>Client copies and slices an instance of a derived class.</source>
          <target state="translated">클라이언트는 파생 클래스의 인스턴스를 복사하고 슬라이스합니다.</target>
        </trans-unit>
        <trans-unit id="2d038661c48cc8fa189c28d51e0abc29577d5660" translate="yes" xml:space="preserve">
          <source>Consider class A, and class B derived from A. Memory corruption can happen if the A part has a pointer p, and a B instance that points p to B's additional data. Then, when the additional data gets sliced off, p is pointing to garbage.</source>
          <target state="translated">클래스 A와 A에서 파생 된 클래스 B를 고려하십시오. A 파트에 포인터 p가 있고 p가 B의 추가 데이터를 가리키는 B 인스턴스가 있으면 메모리 손상이 발생할 수 있습니다. 그런 다음 추가 데이터가 분리되면 p는 가비지를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="46053037889f11e4ba1e79417655c2250a17ba1e" translate="yes" xml:space="preserve">
          <source>He passes an instance of his home-brewed class to the &lt;code&gt;push_back&lt;/code&gt; but then the program goes haywire.</source>
          <target state="translated">집에서 만든 클래스의 인스턴스를 &lt;code&gt;push_back&lt;/code&gt; 으로 전달 하지만 프로그램은 haywire로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="fb9d634e48590cd163aafc973458162dac92008c" translate="yes" xml:space="preserve">
          <source>I hope this example brings light about for those people who can't really imagine things when talking about &lt;code&gt;A&lt;/code&gt;s and &lt;code&gt;B&lt;/code&gt;s being derived in some manner.</source>
          <target state="translated">나는이 예가 어떤 방식으로 파생 된 &lt;code&gt;A&lt;/code&gt; 와 &lt;code&gt;B&lt;/code&gt; 에 대해 이야기 할 때 실제로 상상할 수없는 사람들을 위해 조명을 제공하기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="85e83faab852b9a32b586876a340271f1e596eb5" translate="yes" xml:space="preserve">
          <source>I just ran across the slicing problem and promptly landed here. So let me add my two cents to this.</source>
          <target state="translated">나는 방금 슬라이싱 문제를 겪고 즉시 여기에 도착했습니다. 여기에 2 센트를 추가하겠습니다.</target>
        </trans-unit>
        <trans-unit id="93013b7742a645ec3d25d9b48cfb99929695ef8b" translate="yes" xml:space="preserve">
          <source>If D is a derived class of the base class B, then you can assign an object of type Derived to a variable (or parameter) of type Base.</source>
          <target state="translated">D가 기본 클래스 B의 파생 클래스 인 경우 파생 유형의 오브젝트를 Base 유형의 변수 (또는 매개 변수)에 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f195d53fd3def730550d718c6c9f9658e3676862" translate="yes" xml:space="preserve">
          <source>If I pass a subclass object in as a parameter to a method, which takes a parameter of type superclass, I should certainly be aware of that and know the internally, the called method will be working with the superclass (aka baseclass) object only.</source>
          <target state="translated">수퍼 클래스 유형의 매개 변수를 사용하는 메소드에 서브 클래스 오브젝트를 매개 변수로 전달하는 경우 확실히 알고 있어야하며 내부적으로 알아야합니다. 호출 된 메소드는 수퍼 클래스 (일명베이스 클래스) 오브젝트에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="fb22970eec781b22051dd8ff19d02ffefae76c1a" translate="yes" xml:space="preserve">
          <source>If You have a base class &lt;code&gt;A&lt;/code&gt; and a derived class &lt;code&gt;B&lt;/code&gt;, then You can do the following.</source>
          <target state="translated">기본 클래스 &lt;code&gt;A&lt;/code&gt; 와 파생 클래스 &lt;code&gt;B&lt;/code&gt; 가있는 경우 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="689f952136930a7ed064aafe697ec6ce9fce025d" translate="yes" xml:space="preserve">
          <source>If those links don't give enough info for a &quot;good answer&quot; please edit your question to let us know what more you're looking for.</source>
          <target state="translated">해당 링크가 &quot;좋은 답변&quot;에 대한 충분한 정보를 제공하지 않으면 질문을 편집하여 더 많은 정보를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="c20839b8bed4fbc54e56454bc66175198301dfcf" translate="yes" xml:space="preserve">
          <source>In C++, a derived class object can be assigned to a base class object, but the other way is not possible.</source>
          <target state="translated">C ++에서는 파생 클래스 개체를 기본 클래스 개체에 할당 할 수 있지만 다른 방법으로는 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="c38ead1b6706d1b10a8421bddcacf5eaf4bd90bc" translate="yes" xml:space="preserve">
          <source>In this case, none of the data members or member functions of the dynamic variable
being pointed to by ptrD (descendant class object) will be lost. In addition,  if you need to use functions, the function must be a virtual function.</source>
          <target state="translated">이 경우 ptrD (하위 클래스 객체)가 가리키는 동적 변수의 데이터 멤버 또는 멤버 함수는 손실되지 않습니다. 또한 함수를 사용해야하는 경우 함수는 가상 함수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="fc0b49a0164b222cecf4c176a63574ecd921aa98" translate="yes" xml:space="preserve">
          <source>In this situation, C++ lets you pass an instance of &lt;code&gt;B&lt;/code&gt; to  &lt;code&gt;A&lt;/code&gt;'s assignment operator (and also to the copy constructor). This works because an instance of &lt;code&gt;B&lt;/code&gt; can be converted to a &lt;code&gt;const A&amp;amp;&lt;/code&gt;, which is what assignment operators and copy-constructors expect their arguments to be.</source>
          <target state="translated">이 상황에서 C ++을 사용하면 &lt;code&gt;B&lt;/code&gt; 의 인스턴스를 &lt;code&gt;A&lt;/code&gt; 의 할당 연산자 (및 복사 생성자)로 전달할 수 있습니다. &lt;code&gt;B&lt;/code&gt; 의 인스턴스를 &lt;code&gt;const A&amp;amp;&lt;/code&gt; 로 변환 할 수 있기 때문에 할당 연산자와 복사 생성자가 인수를 기대합니다.</target>
        </trans-unit>
        <trans-unit id="ae67144a22cc1e129cb43bcf76007148f1821dbe" translate="yes" xml:space="preserve">
          <source>It seems to me only the unreasonable expectation that providing a subclass where a baseclass is requested, would somehow result in subclass specific results, would cause slicing to be a problem.  Its either poor design in the use of the method or a poor subclass implementation.  I'm guessing its usually the result of sacrificing good OOP design in favor of expediency or performance gains.</source>
          <target state="translated">베이스 클래스가 요청되는 서브 클래스를 제공하면 어떻게 든 서브 클래스 특정 결과가 발생하고 슬라이싱이 문제가 될 것이라는 부당한 기대 만 보입니다. 메서드를 사용하는 디자인이 좋지 않거나 하위 클래스 구현이 좋지 않습니다. 나는 일반적으로 편의성 또는 성능 향상을 위해 좋은 OOP 디자인을 희생 한 결과를 추측합니다.</target>
        </trans-unit>
        <trans-unit id="4ea02cdc39f10956300111973911bc6cdd6b9ea7" translate="yes" xml:space="preserve">
          <source>It seems to me, that slicing isn't so much a problem other than when your own classes and program are poorly architected/designed.</source>
          <target state="translated">나 자신의 수업과 프로그램이 제대로 설계 / 설계되지 않은 경우를 제외하고는 슬라이싱은 큰 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a3b13fdda77749958ecc4ce3613a917ec161dafd" translate="yes" xml:space="preserve">
          <source>It suggests a somewhat sophisticated pattern to fully deal with the issue:  have a protected copy constructor, a protected pure virtual DoClone, and a public Clone with an assert which will tell you if a (further) derived class failed to implement DoClone correctly.  (The Clone method makes a proper deep copy of the polymorphic object.)</source>
          <target state="translated">문제를 완전히 처리하기 위해 다소 복잡한 패턴을 제안합니다. 보호 된 복사 생성자, 보호 된 순수 가상 DoClone 및 퍼스트 파생 클래스가 DoClone을 올바르게 구현하지 못한 경우 알려주는 어설 션이있는 퍼블릭 클론이 있습니다. (복제 방법은 다형성 객체의 적절한 딥 카피를 만듭니다.)</target>
        </trans-unit>
        <trans-unit id="08009f0d2f588ed82d0e84e8667066234ba6ee27" translate="yes" xml:space="preserve">
          <source>Let's have an example from &quot;production code&quot; (or something that comes kind of close):</source>
          <target state="translated">&quot;프로덕션 코드&quot;(또는 비슷한 것)의 예를 보자.</target>
        </trans-unit>
        <trans-unit id="236527dc0874d02dd5d7ceecb15eceaaa482557c" translate="yes" xml:space="preserve">
          <source>Let's say we have something that dispatches actions. A control center UI for example.</source>
          <target state="translated">액션을 전달하는 무언가가 있다고 가정 해 봅시다. 예를 들어 제어 센터 UI.</target>
        </trans-unit>
        <trans-unit id="e13f0710c1e483d21ae7cbd772cc5dece2fd8f55" translate="yes" xml:space="preserve">
          <source>Most answers here fail to explain what the actual problem with slicing is. They only explain the benign cases of slicing, not the treacherous ones. Assume, like the other answers, that you're dealing with two classes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; derives (publicly) from &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">여기의 대부분의 답변은 슬라이싱의 실제 문제가 무엇인지 설명하지 못합니다. 그들은 위험한 조각이 아닌 양성의 경우에 대해서만 설명합니다. 다른 답변과 마찬가지로 &lt;code&gt;B&lt;/code&gt; 가 &lt;code&gt;B&lt;/code&gt; 에서 (공용 적으로) 파생되는 두 개의 클래스 &lt;code&gt;A&lt;/code&gt; 와 B를 처리한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="719db0c99ee0441d6b479abf270a523016554d7c" translate="yes" xml:space="preserve">
          <source>Note that, for pure convenience, &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;operator=&lt;/code&gt; covariantly overrides the return type, since it &lt;strong&gt;knows&lt;/strong&gt; that it's returning an instance of &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">순전히 편의를 위해 &lt;code&gt;B&lt;/code&gt; 의 &lt;code&gt;operator=&lt;/code&gt; 는 &lt;code&gt;B&lt;/code&gt; 의 인스턴스를 반환한다는 것을 &lt;strong&gt;알고&lt;/strong&gt; 있기 때문에 반환 유형을 공변 적으로 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="732d97c69c5f70f887b60e1c0384ce3d5087b2cc" translate="yes" xml:space="preserve">
          <source>Nothing bad happens there - you asked for an instance of &lt;code&gt;A&lt;/code&gt; which is a copy of &lt;code&gt;B&lt;/code&gt;, and that's exactly what you get. Sure, &lt;code&gt;a&lt;/code&gt; won't contain some of &lt;code&gt;b&lt;/code&gt;'s members, but how should it? It's an &lt;code&gt;A&lt;/code&gt;, after all, not a &lt;code&gt;B&lt;/code&gt;, so it hasn't even &lt;em&gt;heard&lt;/em&gt; about these members, let alone would be able to store them.</source>
          <target state="translated">아무런 문제가 발생하지 않습니다. &lt;code&gt;B&lt;/code&gt; 의 사본 인 &lt;code&gt;A&lt;/code&gt; 의 인스턴스를 요청하면 정확히 얻을 수 있습니다. 물론 &lt;code&gt;a&lt;/code&gt; 는 &lt;code&gt;b&lt;/code&gt; 의 일부를 포함하지 않지만 어떻게해야합니까? 결국 &lt;code&gt;A&lt;/code&gt; 가 아니고 &lt;code&gt;B&lt;/code&gt; 가 아니므로 이러한 멤버에 대해 &lt;em&gt;들어 본 적이&lt;/em&gt; 없으며 저장할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="5e46f87edfe58bab858453c3d93fc576b5f4b914" translate="yes" xml:space="preserve">
          <source>Now the method &lt;code&gt;wantAnA&lt;/code&gt; needs a copy of &lt;code&gt;derived&lt;/code&gt;. However, the object &lt;code&gt;derived&lt;/code&gt; cannot be copied completely, as the class &lt;code&gt;B&lt;/code&gt; could invent additional member variables which are not in its base class &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">이제 &lt;code&gt;wantAnA&lt;/code&gt; 메소드는 &lt;code&gt;derived&lt;/code&gt; 사본이 필요합니다. 그러나 클래스 &lt;code&gt;B&lt;/code&gt; 가 기본 클래스 &lt;code&gt;A&lt;/code&gt; 에 없는 추가 멤버 변수를 발명 할 수 있으므로 &lt;code&gt;derived&lt;/code&gt; 오브젝트를 완전히 복사 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="caae1329d8af58dcad82134397a8943be46a5f69" translate="yes" xml:space="preserve">
          <source>Now we have established how it looks from the UI's perspective. No problem so far. But some other guy who works on this project suddenly decides that there are specialized actions that need more information in the &lt;code&gt;Action&lt;/code&gt; object. For what reason ever. That could also be solved with lambda captures.  This example is not taken 1-1 from the code.</source>
          <target state="translated">이제 UI의 관점에서 어떻게 보이는지 설정했습니다. 지금까지 아무런 문제가 없습니다. 그러나이 프로젝트에서 일하는 다른 사람은 &lt;code&gt;Action&lt;/code&gt; 객체에 더 많은 정보가 필요한 특수한 액션이 있다고 갑자기 결정합니다. 어떤 이유로. 람다 캡처로 해결할 수도 있습니다. 이 예제는 코드에서 1-1이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e0e71bd05c604f9e5482ba1b4784d0451a14dca4" translate="yes" xml:space="preserve">
          <source>OK, I'll give it a try after reading many posts explaining object slicing but not how it becomes problematic.</source>
          <target state="translated">좋아, 객체 슬라이싱을 설명하는 많은 게시물을 읽은 후에 시도해 보지만 문제가되는 방법은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="9002eb67a255da386f8896a6d49539ddfeed3eca" translate="yes" xml:space="preserve">
          <source>Object slicing happens when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off to form the base class object.</source>
          <target state="translated">파생 된 클래스 개체가 기본 클래스 개체에 할당되면 파생 클래스 개체의 추가 특성이 분리되어 기본 클래스 개체를 형성 할 때 개체 슬라이싱이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="50898f71166704d72332d693caefb3d03a0dfabd" translate="yes" xml:space="preserve">
          <source>Slicing means that the data added by a subclass are discarded when an object of the subclass is passed or returned by value or from a function expecting a base class object.</source>
          <target state="translated">슬라이스는 서브 클래스의 오브젝트가 값에 의해 또는 기본 클래스 오브젝트를 예상하는 함수에서 전달되거나 리턴 될 때 서브 클래스에 의해 추가 된 데이터가 삭제됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="1ffaa953719f39c660e8b91f324eefc0cb44027a" translate="yes" xml:space="preserve">
          <source>So ... Why is losing the derived information bad? ... because the author of the derived class may have changed the representation such that slicing off the extra information changes the value being represented by the object.  This can happen if the derived class if used to cache a representation that is more efficient for certain operations, but expensive to transform back to the base representation.</source>
          <target state="translated">그렇다면 ... 파생 정보를 잃어버린 이유는 무엇입니까? ... 파생 클래스의 작성자가 추가 정보를 자르면 객체가 나타내는 값이 변경되도록 표현을 변경했을 수 있습니다. 파생 클래스가 특정 작업에 더 효율적이지만 기본 표현으로 다시 변환하는 데 비용이 많이 드는 표현을 캐시하는 데 사용되는 경우 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67da6e9fc08116b45e5de7c309437931d5054895" translate="yes" xml:space="preserve">
          <source>So an object of type &lt;code&gt;B&lt;/code&gt; has two data members, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="translated">따라서 &lt;code&gt;B&lt;/code&gt; 유형의 객체에는 &lt;code&gt;foo&lt;/code&gt; 및 &lt;code&gt;bar&lt;/code&gt; 의 두 데이터 멤버가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5576c771bb07143c60f3e0e3aa22ee9a4d4a3fd1" translate="yes" xml:space="preserve">
          <source>So it's when you assign an object of a subclass to the super class. The superclass knows nothing of the additional information in the subclass, and hasn't got room to store it, so the additional information gets &quot;sliced off&quot;.</source>
          <target state="translated">하위 클래스의 객체를 수퍼 클래스에 할당 할 때입니다. 수퍼 클래스는 서브 클래스에있는 추가 정보를 전혀 모르고이를 저장할 공간이 없으므로 추가 정보가 &quot;슬라이스 오프&quot;됩니다.</target>
        </trans-unit>
        <trans-unit id="53f4d7a32d19a1c0fe9135470dc1d40d622b6f39" translate="yes" xml:space="preserve">
          <source>So the UI gets a &lt;code&gt;std::vector&amp;lt;Action&amp;gt;&lt;/code&gt; supplied. Imagine some functions like:</source>
          <target state="translated">따라서 UI에는 &lt;code&gt;std::vector&amp;lt;Action&amp;gt;&lt;/code&gt; 제공됩니다. 다음과 같은 기능을 상상해보십시오.</target>
        </trans-unit>
        <trans-unit id="e4a930b6204d89a4fe5c0162bdb1611385af40d3" translate="yes" xml:space="preserve">
          <source>So the guy derives from &lt;code&gt;Action&lt;/code&gt; to add his own flavour.</source>
          <target state="translated">그래서 그 사람은 자신의 맛을 더하기 위해 &lt;code&gt;Action&lt;/code&gt; 에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="312069c9e501c1ac64e803e6fdab5307267739fa" translate="yes" xml:space="preserve">
          <source>So what happened?</source>
          <target state="translated">무슨 일이야?</target>
        </trans-unit>
        <trans-unit id="94801b98814e71ff839015a3a53197592219b407" translate="yes" xml:space="preserve">
          <source>Someone mentioned it in the IRC as the slicing problem.</source>
          <target state="translated">누군가가 IRC에서 슬라이싱 문제로 언급했습니다.</target>
        </trans-unit>
        <trans-unit id="baeeb7a29450d80f0ad8595dd8d3e4bcc16943b9" translate="yes" xml:space="preserve">
          <source>The benign case</source>
          <target state="translated">양성 사건</target>
        </trans-unit>
        <trans-unit id="63684884292dbed35dceaf9970d215608feaa7df" translate="yes" xml:space="preserve">
          <source>The extra information from the instance has been lost, and &lt;code&gt;f&lt;/code&gt; is now prone to undefined behaviour.</source>
          <target state="translated">인스턴스의 추가 정보가 손실되었으므로 &lt;code&gt;f&lt;/code&gt; 는 정의되지 않은 동작이 발생하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="b74ff8ee45b0b8f3cea227a5cb8b0ca2512e0fa1" translate="yes" xml:space="preserve">
          <source>The output is:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f9b829cde2335dc12ea816064752c0be0bbc8cbc" translate="yes" xml:space="preserve">
          <source>The short answers is that you slice the object by assigning a derived object to a base object &lt;em&gt;by value&lt;/em&gt;, i.e. the remaining object is only a part of the derived object. In order to preserve value semantics, slicing is a reasonable behavior and has its relatively rare uses, which doesn't exist in most other languages. Some people consider it a feature of C++, while many considered it one of the quirks/misfeatures of C++.</source>
          <target state="translated">짧은 대답은 파생 객체를 기본 객체 &lt;em&gt;에 value&lt;/em&gt; 로 할당하여 객체를 슬라이스한다는 것입니다. 즉, 나머지 객체는 파생 객체의 일부일뿐입니다. 가치 의미론을 유지하기 위해 슬라이싱은 합리적인 동작이며 상대적으로 드물게 사용되며 대부분의 다른 언어에는 존재하지 않습니다. 어떤 사람들은이 기능을 C ++의 기능이라고 생각하지만, 많은 사람들은이를 C ++의 단점 중 하나라고 생각했습니다.</target>
        </trans-unit>
        <trans-unit id="dd82002ff948b24d6107ece53db19ed50003be81" translate="yes" xml:space="preserve">
          <source>The slicing problem in C++ arises from the value semantics of its objects, which remained mostly due to compatibility with C structs. You need to use explicit reference or pointer syntax to achieve &quot;normal&quot; object behavior found in most other languages that do objects, i.e., objects are always passed around by reference.</source>
          <target state="translated">C ++의 슬라이싱 문제는 객체의 값 의미론에서 발생하며 주로 C 구조체와의 호환성으로 인해 유지됩니다. 객체를 수행하는 대부분의 다른 언어에서 발견되는 &quot;정상적인&quot;객체 동작을 달성하려면 명시 적 참조 또는 포인터 구문을 사용해야합니다. 즉, 객체는 항상 참조로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="43ba9549013d5f73b5a2c8783b4aea4338a8a2f8" translate="yes" xml:space="preserve">
          <source>The slicing problem is serious because it can result in memory corruption, and it is very difficult to guarantee a program does not suffer from it. To design it out of the language, classes that support inheritance should be accessible by reference only (not by value). The D programming language has this property.</source>
          <target state="translated">슬라이싱 문제는 메모리 손상을 초래할 수 있기 때문에 심각하며 프로그램으로 인해 문제가 발생하지 않도록 보장하기가 매우 어렵습니다. 언어를 사용하여 디자인하려면 상속을 지원하는 클래스는 참조가 아닌 값으로 액세스 할 수 있어야합니다. D 프로그래밍 언어에는이 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="50db936e092a460d4926d6fbfb2ff0e11f3315fa" translate="yes" xml:space="preserve">
          <source>The treacherous case</source>
          <target state="translated">위험한 사건</target>
        </trans-unit>
        <trans-unit id="d9370a40dcdd656762e9b518e64889d3090a3d67" translate="yes" xml:space="preserve">
          <source>The vicious scenario that can result in memory corruption is the following:</source>
          <target state="translated">메모리 손상을 초래할 수있는 악의적 인 시나리오는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b54458e98c708f4219d77f2af0aca693f0d1862d" translate="yes" xml:space="preserve">
          <source>Then if you were to write this:</source>
          <target state="translated">그런 다음 이것을 작성한다면 :</target>
        </trans-unit>
        <trans-unit id="8aae35e2eebae7ab19a6cb8b47f5df262f52f622" translate="yes" xml:space="preserve">
          <source>Then the information in &lt;code&gt;b&lt;/code&gt; about member &lt;code&gt;bar&lt;/code&gt; is lost in &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">그러면 &lt;code&gt;b&lt;/code&gt; 의 멤버 &lt;code&gt;bar&lt;/code&gt; 에 대한 정보가 a 에서 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="331a1e0260486237ecd3902be6663d06751c6d80" translate="yes" xml:space="preserve">
          <source>Therefore, to call &lt;code&gt;wantAnA&lt;/code&gt;, the compiler will &quot;slice off&quot; all additional members of the derived class. The result might be an object you did not want to create, because</source>
          <target state="translated">따라서 &lt;code&gt;wantAnA&lt;/code&gt; 를 호출 하기 위해 컴파일러는 파생 클래스의 모든 추가 멤버를 &quot;분할&quot;합니다. 결과는 생성하지 않으려는 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83a3562f52501c4eb5425a01f442e1c15fd73132" translate="yes" xml:space="preserve">
          <source>These are all good answers. I would just like to add an execution example when passing objects by value vs by reference:</source>
          <target state="translated">이것들은 모두 좋은 대답입니다. 값 대 참조로 객체를 전달할 때 실행 예제를 추가하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="0e951a20d40826080d18427519cb8a5edd5c4e41" translate="yes" xml:space="preserve">
          <source>Third match in google for &quot;C++ slicing&quot; gives me this Wikipedia article &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_slicing&quot;&gt;http://en.wikipedia.org/wiki/Object_slicing&lt;/a&gt; and this (heated, but the first few posts define the problem) : &lt;a href=&quot;http://bytes.com/forum/thread163565.html&quot;&gt;http://bytes.com/forum/thread163565.html&lt;/a&gt;</source>
          <target state="translated">&quot;C ++ 슬라이싱&quot;에 대한 Google의 세 번째 일치는이 Wikipedia 기사 &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_slicing&quot;&gt;http://en.wikipedia.org/wiki/Object_slicing을&lt;/a&gt; 제공합니다. &lt;a href=&quot;http://bytes.com/forum/thread163565.html&quot;&gt;forum / thread163565.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b3490f2ce357da06fe3a4eb047d61de5e156e219" translate="yes" xml:space="preserve">
          <source>This UI needs to get a list of things that are currently able to be dispatched. So we define a class that contains the dispatch-information. Let's call it &lt;code&gt;Action&lt;/code&gt;. So an &lt;code&gt;Action&lt;/code&gt; has some member variables. For simplicity we just have 2, being a &lt;code&gt;std::string name&lt;/code&gt; and a &lt;code&gt;std::function&amp;lt;void()&amp;gt; f&lt;/code&gt;. Then it has an &lt;code&gt;void activate()&lt;/code&gt; which just executes the &lt;code&gt;f&lt;/code&gt; member.</source>
          <target state="translated">이 UI에는 현재 발송할 수있는 항목의 목록이 필요합니다. 따라서 디스패치 정보가 포함 된 클래스를 정의합니다. 그것을 &lt;code&gt;Action&lt;/code&gt; 이라고 부릅 시다 . 따라서 &lt;code&gt;Action&lt;/code&gt; 에는 몇 가지 멤버 변수가 있습니다. 간단히하기 위해 &lt;code&gt;std::string name&lt;/code&gt; 과 &lt;code&gt;std::function&amp;lt;void()&amp;gt; f&lt;/code&gt; 있습니다. 그런 다음 &lt;code&gt;f&lt;/code&gt; 멤버를 실행하는 &lt;code&gt;void activate()&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdf5b524fd6d02ab284fc74f757fadd7c2a81b09" translate="yes" xml:space="preserve">
          <source>To defeat the problem, we use pointers to dynamic variables.</source>
          <target state="translated">문제를 해결하기 위해 동적 변수에 대한 포인터를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f0f39a47361de0eb57b43d1232d22d288fb9b176" translate="yes" xml:space="preserve">
          <source>What happened? Well, C++ by default doesn't treat assignment operators as &lt;code&gt;virtual&lt;/code&gt;. Thus, the line &lt;code&gt;a_ref = b1&lt;/code&gt; will call the assignment operator of &lt;code&gt;A&lt;/code&gt;, not that of &lt;code&gt;B&lt;/code&gt;. This is because, for non-virtual functions, the &lt;strong&gt;declared&lt;/strong&gt; (formally: &lt;em&gt;static&lt;/em&gt;) type (which is &lt;code&gt;A&amp;amp;&lt;/code&gt;) determines which function is called, as opposed to the &lt;strong&gt;actual&lt;/strong&gt; (formally: &lt;em&gt;dynamic&lt;/em&gt;) type (which would be &lt;code&gt;B&lt;/code&gt;, since &lt;code&gt;a_ref&lt;/code&gt; references an instance of &lt;code&gt;B&lt;/code&gt;). Now, &lt;code&gt;A&lt;/code&gt;'s assignment operator obviously knows only about the members declared in &lt;code&gt;A&lt;/code&gt;, so it will copy only those, leaving the members added in &lt;code&gt;B&lt;/code&gt; unchanged.</source>
          <target state="translated">어떻게 된 거예요? 기본적으로 C ++은 할당 연산자를 &lt;code&gt;virtual&lt;/code&gt; 로 취급하지 않습니다. 따라서 &lt;code&gt;a_ref = b1&lt;/code&gt; 줄은 &lt;code&gt;B&lt;/code&gt; 의 할당 연산자가 아닌 &lt;code&gt;A&lt;/code&gt; 의 할당 연산자를 호출합니다. 이는 비가 상 함수의 경우 &lt;strong&gt;선언 된&lt;/strong&gt; (공식적으로 &lt;em&gt;static&lt;/em&gt; ) 유형 ( &lt;code&gt;A&amp;amp;&lt;/code&gt; ) 유형이 &lt;strong&gt;실제&lt;/strong&gt; (공식적으로 : &lt;em&gt;dynamic&lt;/em&gt; ) 유형 ( &lt;code&gt;a_ref&lt;/code&gt; 가 &lt;code&gt;B&lt;/code&gt; 의 인스턴스). 이제 &lt;code&gt;A&lt;/code&gt; 의 할당 연산자는 &lt;code&gt;A&lt;/code&gt; 에서 선언 된 멤버에 대해서만 알고 있으므로 &lt;code&gt;B&lt;/code&gt; 에 추가 된 멤버는 변경하지 않은 채로 멤버 만 복사합니다.</target>
        </trans-unit>
        <trans-unit id="4dd739c564654f16bef20fea762e39dd16ff22ed" translate="yes" xml:space="preserve">
          <source>What is object slicing</source>
          <target state="translated">객체 슬라이싱이란?</target>
        </trans-unit>
        <trans-unit id="5f307ba956aa9318084c729d9e0b4ed1c890ae99" translate="yes" xml:space="preserve">
          <source>When a Derived class Object is assigned to Base class Object, all the members of derived class object is copied to base class object except the members which are not present in the base class. These members are Sliced away by the compiler.
This is called Object Slicing.</source>
          <target state="translated">파생 클래스 개체가 기본 클래스 개체에 할당되면 파생 클래스 개체의 모든 멤버가 기본 클래스에없는 멤버를 제외한 기본 클래스 개체에 복사됩니다. 이 멤버들은 컴파일러에 의해 분리됩니다. 이것을 개체 슬라이싱이라고합니다.</target>
        </trans-unit>
        <trans-unit id="d72ede022bbe7ab8af001c0bdbe63a215020ce04" translate="yes" xml:space="preserve">
          <source>You can also mark the copy constructor on the base explicit which allows for explicit slicing if it is desired.</source>
          <target state="translated">원하는 경우 명시 적 슬라이싱을 허용하는 기본 명시 적에 복사 생성자를 표시 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="67dd54dbbbe60a55354560fe6b83d81e0acab546" translate="yes" xml:space="preserve">
          <source>You might think that &lt;code&gt;b2&lt;/code&gt; will be a copy of &lt;code&gt;b1&lt;/code&gt; afterward. But, alas, it's &lt;strong&gt;not&lt;/strong&gt;! If you inspect it, you'll discover that &lt;code&gt;b2&lt;/code&gt; is a Frankensteinian creature, made from some chunks of &lt;code&gt;b1&lt;/code&gt; (the chunks that &lt;code&gt;B&lt;/code&gt; inherits from &lt;code&gt;A&lt;/code&gt;), and some chunks of &lt;code&gt;b2&lt;/code&gt; (the chunks that only &lt;code&gt;B&lt;/code&gt; contains). Ouch!</source>
          <target state="translated">나중에 &lt;code&gt;b2&lt;/code&gt; 가 &lt;code&gt;b1&lt;/code&gt; 의 사본이라고 생각할 수도 있습니다. 그러나 아아, &lt;strong&gt;그렇지 않습니다&lt;/strong&gt; ! 그것을 조사하면, &lt;code&gt;b2&lt;/code&gt; 는 일부 &lt;code&gt;b1&lt;/code&gt; 덩어리 ( &lt;code&gt;B&lt;/code&gt; 가 &lt;code&gt;A&lt;/code&gt; 에서 상속 한 덩어리)와 &lt;code&gt;b2&lt;/code&gt; 덩어리 ( &lt;code&gt;B&lt;/code&gt; 만 포함하는 덩어리)로 만들어진 프랑켄슈타인 생물임을 알 수 있습니다. 아야!</target>
        </trans-unit>
        <trans-unit id="caa7ab5b89b1d461f77ff932bb8c215a2ad0c121" translate="yes" xml:space="preserve">
          <source>it behaves like an &lt;code&gt;A&lt;/code&gt;-object (all special behaviour of the class &lt;code&gt;B&lt;/code&gt; is lost).</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; 객체처럼 동작합니다 (클래스 &lt;code&gt;B&lt;/code&gt; 의 모든 특수 동작이 손실 됨).</target>
        </trans-unit>
        <trans-unit id="0e4b5f39331f766abe0b42f591f9a7990190d1e7" translate="yes" xml:space="preserve">
          <source>it may be incomplete,</source>
          <target state="translated">불완전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f62ee0ef207332e73fb923b4003d3d9e9e87c14" translate="yes" xml:space="preserve">
          <source>when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off (discard)  form the base class object.</source>
          <target state="translated">파생 클래스 개체가 기본 클래스 개체에 할당되면 파생 클래스 개체의 추가 특성이 기본 클래스 개체에서 분리 (삭제)됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
