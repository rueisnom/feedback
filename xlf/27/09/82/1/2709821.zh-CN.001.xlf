<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/2709821">
    <body>
      <group id="2709821">
        <trans-unit id="50e85d29c47a1d85bd7c5be469ba8466758d942e" translate="yes" xml:space="preserve">
          <source>1: Use of self explained</source>
          <target state="translated">1:自我解释的使用</target>
        </trans-unit>
        <trans-unit id="1537a8e68e069434e270cc3838444c83d94e5cc8" translate="yes" xml:space="preserve">
          <source>2: Why do we have it this way and why can we not eliminate it as an argument, like Java, and have a keyword instead</source>
          <target state="translated">2:我们为什么要这样,为什么不能像Java那样,把它作为参数取消,而用一个关键字代替</target>
        </trans-unit>
        <trans-unit id="5eb8f3b2312bc947db52c8a97e61506d1aedafe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; is an object reference to the object itself, therefore, they are same.
Python methods are not called in the context of the object itself.
&lt;code&gt;self&lt;/code&gt; in Python may be used to deal with custom object models or something.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是对对象本身的对象引用，因此它们是相同的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在对象本身的上下文中不调用Python方法。 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python中的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以用于处理自定义对象模型或其他东西。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8a874337841087eb6d4e3fd02ebeff09e3f41e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt; is used/needed to distinguish between instances.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; / &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;self&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来区分实例。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7bbbee55cb7764d08e89b619ce2618705e50c5e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;self&lt;/code&gt; is inevitable.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是不可避免的。&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="000ff359a4612c3cd78461682bd92e1a6e08cc41" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;So where the &lt;code&gt;self&lt;/code&gt; live?&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那么&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生活&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在哪里&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5876d210d7b4d75c13a6ac1e49433fa1a45a8975" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PS&lt;/strong&gt;:This works only in Python 3.x.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;PS&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：这仅在Python 3.x中有效。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9670bbb1d8cee5fcdc65d7155e230400409ebb4a" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;Note there are three different types of class methods: &lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请注意，有三种不同类型的类方法： &lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="63fc6fb7eeb47a2032fb704c9b812e661ad6c8da" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;class methods, &lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类方法 &lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="5984bb71b436be400f88353cdf605e197b5f9688" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;instance methods (mentioned).&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例方法（提到）。&lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="32c3319fe4e24251db9e0824df8d8a9e43367f69" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;static methods (read: functions), &lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;静态方法（阅读：函数）， &lt;/font&gt;&lt;/font&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="c34a16b60167fe7774a9bd522b90a56ffc18afb0" translate="yes" xml:space="preserve">
          <source>Although this may not be wholly accurate, think of the process of instantiating an object like this: When an object is made it uses the class as a template for its own data and methods. Without passing it's own name into the self parameter, the attributes and methods in the class would remain as a general template and would not be referenced to (belong to) the object. So by passing the object's name into the self parameter it means that if 100 objects are instantiated from the one class, they can all keep track of their own data and methods.</source>
          <target state="translated">虽然这可能并不完全准确,但想想看,实例化一个对象的过程是这样的。当一个对象被创建时,它将类作为自己的数据和方法的模板。如果不把自己的名字传递到self参数中,类中的属性和方法就只能作为一般的模板,不会被引用(属于)对象。因此,通过将对象的名称传递到self参数中,意味着如果100个对象从一个类中实例化,那么它们都可以跟踪自己的数据和方法。</target>
        </trans-unit>
        <trans-unit id="d191bd2f194e5d4b89d87364b155e100ffda17d8" translate="yes" xml:space="preserve">
          <source>An example of where it&amp;rsquo;s useful:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个有用的例子：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fd718882d8614d635c144a6cb59b0ee9a633fd83" translate="yes" xml:space="preserve">
          <source>Another thing I would like to add is, an optional &lt;code&gt;self&lt;/code&gt; argument allows me to declare static methods inside a class, by not writing &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想补充的另一件事是，可选的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数允许我通过不编写&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来在类内声明静态方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e7fda3041282a75d7a819bf9be5dbebcf81e8c5b" translate="yes" xml:space="preserve">
          <source>Another way of understanding the need for the explicit &lt;code&gt;self&lt;/code&gt; is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;了解显式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需求的另一种方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是查看Python在何处添加了一些语法糖。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您牢记时，基本上，&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6d51ef4a664f88c7337f20cd95fa343ccee08592" translate="yes" xml:space="preserve">
          <source>As in Modula-3, there are no shorthands [in Python] for referencing the object&amp;rsquo;s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与Modula-3中一样，[Python中]没有从其方法引用该对象的成员的捷径：方法函数以表示该对象的显式第一个参数声明，该参数由调用隐式提供。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6965d4a50fc0bb5303c1ad50710d902fffd1a3fd" translate="yes" xml:space="preserve">
          <source>As well as all the other reasons already stated, it allows for easier access to overridden methods; you can call &lt;code&gt;Class.some_method(inst)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除已说明的所有其他原因外，它还允许更轻松地访问重写的方法；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Class.some_method(inst)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="47825e120c811078fab3444ae5cfd581d14f7642" translate="yes" xml:space="preserve">
          <source>Because of this, the object&amp;rsquo;s data is bound to the object. Below is an example of how you might like to visualize what each object&amp;rsquo;s data might look. Notice how &amp;lsquo;self&amp;rsquo; is replaced with the objects name. I'm not saying this example diagram below is wholly accurate but it hopefully with serve a purpose in visualizing the use of self.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，对象的数据绑定到该对象。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下面是一个示例，您可以如何可视化每个对象的数据外观。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注意如何用对象名称替换&amp;ldquo;自我&amp;rdquo;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我并不是说下面的示例图是完全准确的，但希望它可以用于可视化自我的使用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f75756ae2686b3787b103a87d2e562911fda7698" translate="yes" xml:space="preserve">
          <source>Can anyone talk me through this? It is not something I've come across in my (admittedly limited) experience.</source>
          <target state="translated">有人能告诉我这个问题吗?这不是我在我的经验中遇到过的事情(公认的是有限的)。</target>
        </trans-unit>
        <trans-unit id="2a0a65b981f3e6edeea679d1cb736a592c98898e" translate="yes" xml:space="preserve">
          <source>Classes are just a way to avoid passing in this &quot;state&quot; thing all the time (and other nice things like initializing, class composition, the rarely-needed metaclasses, and supporting custom methods to override operators).</source>
          <target state="translated">类只是避免一直传入这种 &quot;状态 &quot;的东西(还有其他的好东西,比如初始化、类组成、很少用到的元类,以及支持自定义方法覆盖操作符等)。</target>
        </trans-unit>
        <trans-unit id="f6149f799d8c444725006c9698a101c422ecde86" translate="yes" xml:space="preserve">
          <source>Code examples:</source>
          <target state="translated">代码示例。</target>
        </trans-unit>
        <trans-unit id="3d397aef3c49cb0016377f1a744764bdb0ac8452" translate="yes" xml:space="preserve">
          <source>Code is here</source>
          <target state="translated">代码在这里</target>
        </trans-unit>
        <trans-unit id="2850358a794f53a868ef5cde0f2e09281010eb73" translate="yes" xml:space="preserve">
          <source>First of all, self is a conventional name, you could put anything else (being coherent) in its stead.</source>
          <target state="translated">首先,自我是一个常规的名字,你可以把其他的东西(被连贯性)放在它的位置上。</target>
        </trans-unit>
        <trans-unit id="d1091bb5dc4fffffabec8d605e2909ed5e5beae7" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot;&gt;Python documentation tutorial on classes&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有关更多信息，请参见&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关于类&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python文档教程&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2ebb6ada30b264c4be67d7f9f6f903e92d521dbe" translate="yes" xml:space="preserve">
          <source>Here is the typical use case &lt;code&gt;class C&lt;/code&gt; with the method &lt;code&gt;m1&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt; &lt;code&gt;m1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的典型用例&lt;/font&gt;&lt;/font&gt; &lt;code&gt;class C&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="86dbec6b29f290589f8c98a049e22d2aa0593076" translate="yes" xml:space="preserve">
          <source>However the current situation works out well:</source>
          <target state="translated">然而目前的情况却很好地解决了。</target>
        </trans-unit>
        <trans-unit id="679cfe9a74012f5e9ad53e01c20c9cb0c6bd960c" translate="yes" xml:space="preserve">
          <source>However, an object method, which requires you to make a variable, which is an Animal, in this case, needs the self argument</source>
          <target state="translated">然而,一个对象方法,需要你做一个变量,也就是Animal,在本例中,需要自参数</target>
        </trans-unit>
        <trans-unit id="78a980d3d9db85fa50ef635a3331990e04311c7b" translate="yes" xml:space="preserve">
          <source>I like this example:</source>
          <target state="translated">我喜欢这个例子。</target>
        </trans-unit>
        <trans-unit id="8e492903d2e5ae5c26b7a8e28f06043f9f5a5b80" translate="yes" xml:space="preserve">
          <source>I will demonstrate with code that &lt;strong&gt;does not use classes&lt;/strong&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我将用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不使用类的&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;代码进行演示&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c19c4bc24da7e68f7630b6e13941c1405ee9f20d" translate="yes" xml:space="preserve">
          <source>I'm surprised nobody has brought up Lua. Lua also uses the 'self' variable however it can be omitted but still used. C++ does the same with 'this'. I don't see any reason to have to declare 'self' in each function but you should still be able to use it just like you can with lua and C++. For a language that prides itself on being brief it's odd that it requires you to declare the self variable.</source>
          <target state="translated">我很惊讶没有人提出Lua。Lua也使用了'self'变量,但是它可以省略,但仍然可以使用。C++对'this'也是这样做的。我不认为有什么理由必须在每个函数中声明'self',但你应该仍然可以使用它,就像Lua和C++一样。对于一个以简短为荣的语言来说,它要求你声明self变量是很奇怪的。</target>
        </trans-unit>
        <trans-unit id="cf2a59502df9000886690e5c93aa08fae3dbb2f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;user_type_name&lt;/code&gt; is a field on your model you access it by &lt;code&gt;self.user_type_name&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;user_type_name&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是模型上的字段，则可以通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.user_type_name&lt;/code&gt; 进行&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;访问&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3cd8541d9818861c74e04f0ea1206bb8511dbd2b" translate="yes" xml:space="preserve">
          <source>If we would just stick to functional programming we would not need &lt;code&gt;self&lt;/code&gt;.
Once we enter the &lt;em&gt;Python OOP&lt;/em&gt; we find &lt;code&gt;self&lt;/code&gt; there.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果我们只坚持函数式编程，就不需要&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; 了&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一旦我们进入&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python OOP，&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们就会在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那里&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f3a3b993145f45c688b6cfd5b2591df95605e36f" translate="yes" xml:space="preserve">
          <source>If you don't understand a single word of what I am saying, then Google &quot;Object Oriented Programming.&quot; Once you understand this, you won't even need to ask that question :).</source>
          <target state="translated">如果你不明白我说的任何一个字,那就去Google &quot;面向对象编程 &quot;吧。一旦你明白了这一点,你甚至不需要问这个问题:)。</target>
        </trans-unit>
        <trans-unit id="b25b45089714fe4d147920ae1c6a7e704509ca1a" translate="yes" xml:space="preserve">
          <source>In previous versions, you have to explicitly add &lt;code&gt;@staticmethod&lt;/code&gt; decorator, otherwise &lt;code&gt;self&lt;/code&gt; argument is obligatory.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在以前的版本中，必须显式添加&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@staticmethod&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;装饰器，否则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1be71fcef2d5e1bb4f22ae67b000649511c0af59" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;__init__&lt;/code&gt; method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法中，self指的是新创建的对象；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在其他类方法中，它引用其方法被调用的实例。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="452b0a268b84f2447c95120175df2b3e61456dd3" translate="yes" xml:space="preserve">
          <source>In this case, self is referring to the animalName variable of the entire class. REMEMBER: If you have a variable within a method, self will not work. That variable is simply existent only while that method is running. For defining fields (the variables of the entire class), you have to define them OUTSIDE the class methods.</source>
          <target state="translated">在这种情况下,self是指的是整个类中的 animalName 变量。记住:如果你在一个方法内有一个变量,self将不起作用。这个变量只是在该方法运行时才会存在。对于定义字段(整个类的变量),你必须在类的方法之外定义它们。</target>
        </trans-unit>
        <trans-unit id="bad7092bf970259d27d6ca40103b481dc18aeada" translate="yes" xml:space="preserve">
          <source>Is because by the way python is designed the alternatives would hardly work. Python is designed to allow methods or functions to be defined in a context where both implicit &lt;code&gt;this&lt;/code&gt; (a-la Java/C++) or explicit &lt;code&gt;@&lt;/code&gt; (a-la ruby) wouldn't work. Let's have an example with the explicit approach with python conventions:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是因为按照python的设计方式，替代方法几乎行不通。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python旨在允许在无法使用隐式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（a-la Java / C ++）或显式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（a-la ruby​​）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的上下文中定义方法或函数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们来看一个使用python约定的显式方法的示例：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4ed620c87c639fb9b0860ceeda85570cbe8b9b3e" translate="yes" xml:space="preserve">
          <source>It refers to the object itself, so when you are using it, you are declaring that .name and .age are properties of the Student objects (note, not of the Student class) you are going to create.</source>
          <target state="translated">它指的是对象本身,所以当你使用它时,你声明.name和.age是你要创建的学生对象(注意,不是学生类)的属性。</target>
        </trans-unit>
        <trans-unit id="21bf8feaa6c0a2f61c70a863156d23df7a935d91" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s there to follow the Python zen &amp;ldquo;explicit is better than implicit&amp;rdquo;. It&amp;rsquo;s indeed a reference to your class object. In Java and PHP, for example, it's called &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以遵循Python禅宗的&amp;ldquo;显式优于隐式&amp;rdquo;的说法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它确实是对您的类对象的引用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，在Java和PHP中，它称为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b2c9c4c77d4adbd01f1435185efa5957ed6778e9" translate="yes" xml:space="preserve">
          <source>Its use is similar to the use of &lt;code&gt;this&lt;/code&gt; keyword in Java, i.e. to give a reference to the current object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它的用法类似于&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Java &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;this&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键字&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的用法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，即提供对当前对象的引用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a620020f809368b31aaece363f3a58b2d40f3ba" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a simple vector class:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;让我们看一个简单的向量类：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20fb24e3a04118e838e61d25d5d3d3b68eab42e7" translate="yes" xml:space="preserve">
          <source>Let's say you have a class &lt;code&gt;ClassA&lt;/code&gt; which contains a method &lt;code&gt;methodA&lt;/code&gt; defined as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;比方说，你有一个类&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ClassA&lt;/code&gt; 的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中包含一个方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;methodA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;定义为：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="42b61ca4b9c209d049a6afa504e32bd2ac5178b9" translate="yes" xml:space="preserve">
          <source>Note that it is not a keyword.</source>
          <target state="translated">注意,这并不是一个关键词。</target>
        </trans-unit>
        <trans-unit id="d0f0ab3b327e5b3e363a25cd02fd12261e55f5a3" translate="yes" xml:space="preserve">
          <source>Now let's demonstrate the above code using the built-in python class machinery, to show how it's basically the same thing.</source>
          <target state="translated">现在让我们用内置的python类机械来演示一下上面的代码,来展示一下基本上是怎么一回事。</target>
        </trans-unit>
        <trans-unit id="63c6bd152a96e31a755ef297e6442c2fb1689438" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;fubar&lt;/code&gt; function wouldn't work since it would assume that &lt;code&gt;self&lt;/code&gt; is a global variable (and in &lt;code&gt;frob&lt;/code&gt; as well). The alternative would be to execute method's with a replaced global scope (where &lt;code&gt;self&lt;/code&gt; is the object).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fubar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数将无法工作，因为它将假定&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是全局变量（以及&lt;/font&gt;&lt;/font&gt; &lt;code&gt;frob&lt;/code&gt; 中的&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;替代方法是使用替换的全局范围（其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是对象）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;执行方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="15df964e763425375e70415f5ca93a9ba7753977" translate="yes" xml:space="preserve">
          <source>Now when &lt;code&gt;ObjectA.methodA(arg1, arg2)&lt;/code&gt; is called, python internally converts it for you as:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，当&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ObjectA.methodA(arg1, arg2)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，python在内部将其转换为：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1c4f1512422cda9536646701fa09bf1ff9841053" translate="yes" xml:space="preserve">
          <source>Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.</source>
          <target state="translated">通常情况下,方法的第一个参数被称为 self。这只是一个惯例:self这个名字对Python来说绝对没有什么特殊的意义。但是,请注意,如果不遵循这个约定,你的代码可能对其他 Python 程序员来说就不那么容易读懂,而且也可以想象,一个类浏览器程序可能会被写成依赖这样的约定。</target>
        </trans-unit>
        <trans-unit id="258a1ed20442bd3f7ba346c3f9794ef4a31bfa8e" translate="yes" xml:space="preserve">
          <source>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs &lt;code&gt;self.&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python可以做一些其他事情来区分普通名称和属性-像Ruby这样的特殊语法，或者像C ++和Java这样的声明都需要，或者也许还有其他不同-但事实并非如此。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python的全部目的是使事情变得明确，使事情变得显而易见，尽管它并非在所有地方都做到这一点，但它确实为实例属性做到了。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这就是为什么分配给实例属性需要知道要分配给哪个实例的原因，这就是为什么它需要&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原因&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4683d3f409566286d2017192d77dcb16ba4f059d" translate="yes" xml:space="preserve">
          <source>Python is not a language built for Object Oriented Programming unlike Java or C++.</source>
          <target state="translated">Python不像Java或C++那样是为面向对象编程而构建的语言。</target>
        </trans-unit>
        <trans-unit id="e9f759641972f26a0f6ec82d58012e08599b7ace" translate="yes" xml:space="preserve">
          <source>See the illustration below:</source>
          <target state="translated">请看下面的插图。</target>
        </trans-unit>
        <trans-unit id="3c5d6c52a96c36ca40fc11c0b386b2571f9c617c" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;self&lt;/code&gt; holds the memory address of the class instance.
&lt;em&gt;The purpose&lt;/em&gt; of &lt;code&gt;self&lt;/code&gt; would be to hold the reference for &lt;em&gt;instance methods&lt;/em&gt; and for us to have &lt;strong&gt;explicit&lt;/strong&gt; access to that reference.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;拥有类实例的内存地址。 &lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的目的&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实例方法&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;保留引用，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并让我们可以&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;显式&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;访问该引用。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8033fe43cda2814a433763ba5aed294a107a16ff" translate="yes" xml:space="preserve">
          <source>So the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadn&amp;rsquo;t written a &lt;code&gt;length&lt;/code&gt; method for our &lt;code&gt;Vector&lt;/code&gt; class, we could do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，整个结构保持不变。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我该如何利用呢？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果暂时假设我们没有&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt; &lt;code&gt;Vector&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;类&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;编写&lt;/font&gt;&lt;/font&gt; &lt;code&gt;length&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则可以这样做：&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8eb070aa7c635eb9bd885287b9adbf5e28e64710" translate="yes" xml:space="preserve">
          <source>Take a look at the following example, which clearly explains the purpose of &lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;看下面的例子，它清楚地说明了&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;的目的&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="34b1e6c79b713cc0f1cb08dee730316708c202e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;self&lt;/code&gt; variable refers to the object itself.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;变量是指对象本身。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33ab0fa14d5634f4ae1f8ce119fc35712999037e" translate="yes" xml:space="preserve">
          <source>The Object is passed into the self parameter so that the object can keep hold of its own data.</source>
          <target state="translated">对象被传递到自参数中,这样对象就可以保留自己的数据。</target>
        </trans-unit>
        <trans-unit id="4b52872a14b15cd870db6e292baff0770de114fd" translate="yes" xml:space="preserve">
          <source>The first argument of every class method, including init, is always a reference to the current instance of the class. By convention, this argument is always named self. In the init method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called. For example the below code is the same as the above code.</source>
          <target state="translated">每个类方法的第一个参数,包括init,总是指向类的当前实例的引用。按照惯例,这个参数总是被命名为self。在init方法中,self指的是新创建的对象;在其他类方法中,它指的是方法被调用的实例。例如下面的代码与上面的代码相同。</target>
        </trans-unit>
        <trans-unit id="a5debc952d5b06e246420009c31e64d9cf5ef808" translate="yes" xml:space="preserve">
          <source>The following excerpts are from the &lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot;&gt;Python documentation about self&lt;/a&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下摘录来自&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python文档中关于self的内容&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71f9277b0ee801046ce1b5d5d98d2fbb263d87c6" translate="yes" xml:space="preserve">
          <source>The implicit approach would be</source>
          <target state="translated">隐含的方法是</target>
        </trans-unit>
        <trans-unit id="ddfded39a7b36e02781c387a61e0e0bb144cd52e" translate="yes" xml:space="preserve">
          <source>The reason you need to use &lt;code&gt;self.&lt;/code&gt; is because Python does not use the &lt;code&gt;@&lt;/code&gt; syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be &lt;em&gt;passed&lt;/em&gt; automatically, but not &lt;em&gt;received&lt;/em&gt; automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although &lt;code&gt;self&lt;/code&gt; is the convention, and people will generally frown at you when you use something else.) &lt;code&gt;self&lt;/code&gt; is not special to the code, it's just another object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您需要使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self.&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的原因&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是因为Python不使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;@&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语法来引用实例属性。 Python决定以一种使该方法所属的实例&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自动&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传递&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但不会&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自动&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;接收&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的方式进行方法：方法的第一个参数是调用该方法的实例。这使得方法与函数完全相同，并保留实际名称供您使用（尽管&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是惯例，当您使用其他东西时，人们通常会对您皱眉。）&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不是代码专用的，只是另一个对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="236e866fde0d76ee2f000c8552125a8a8ff7ae46" translate="yes" xml:space="preserve">
          <source>The self method is also used to refer to a variable field within the class.</source>
          <target state="translated">self方法也被用来指代类内的变量字段。</target>
        </trans-unit>
        <trans-unit id="357314b070890139eadce8c33ddb4a9f5b685e85" translate="yes" xml:space="preserve">
          <source>The use of the argument, conventionally called &lt;code&gt;self&lt;/code&gt; isn't as hard to understand, as is why is it necessary? Or as to why explicitly mention it? That, I suppose, is a bigger question for most users who look up this question, or if it is not, they will certainly have the same question as they move forward learning python. I recommend them to read these couple of blogs:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用通常称为&amp;ldquo; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &amp;rdquo;的参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并不难理解，为什么这是必要的呢？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;还是关于为什么要明确提及？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我想，对于大多数查询此问题的用户来说，这是一个更大的问题，或者如果不是，则在继续学习python时，他们肯定会有相同的问题。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我建议他们阅读以下两个博客：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="aad90dfdf56f4dead42a985825163ec490775638" translate="yes" xml:space="preserve">
          <source>There was just a &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=239003&quot;&gt;question&lt;/a&gt; should &lt;code&gt;self&lt;/code&gt; be implicit or explicit.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt;&lt;code&gt;Guido van Rossum&lt;/code&gt;&lt;/a&gt; resolved this question saying &lt;a href=&quot;https://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html&quot;&gt;&lt;code&gt;self&lt;/code&gt; has to stay&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只是一个&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=239003&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;问题&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;应该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是隐性的还是显性的。 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt; &lt;code&gt;Guido van Rossum&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解决了这个问题，说&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html&quot;&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须留下&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="593c5330f958a39918abf861eca976eee15dc227" translate="yes" xml:space="preserve">
          <source>This program will output:</source>
          <target state="translated">这个程序将输出。</target>
        </trans-unit>
        <trans-unit id="eef4955b5010ecd4fd99113e1edfc155496ebf10" translate="yes" xml:space="preserve">
          <source>This works because the first parameter of &lt;code&gt;length_global&lt;/code&gt;, can be re-used as the &lt;code&gt;self&lt;/code&gt; parameter in &lt;code&gt;length_new&lt;/code&gt;. This would not be possible without an explicit &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;之所以&lt;/font&gt;&lt;/font&gt; &lt;code&gt;length_global&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;length_global&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的第一个参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt; &lt;code&gt;length_new&lt;/code&gt; 中&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用作&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有明确的&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是不可能的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2596a67954f16752ece427c512b8db673c0d7cf7" translate="yes" xml:space="preserve">
          <source>This would mean that &lt;code&gt;myX&lt;/code&gt; would be interpreted as a local variable in &lt;code&gt;fubar&lt;/code&gt; (and in &lt;code&gt;frob&lt;/code&gt; as well). The alternative here would be to execute methods with a replaced local scope which is retained between calls, but that would remove the posibility of method local variables.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这意味着&lt;/font&gt;&lt;/font&gt; &lt;code&gt;myX&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fubar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（以及&lt;/font&gt;&lt;/font&gt; &lt;code&gt;frob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;解释为局部变量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里的替代方法是执行具有替换的局部范围的方法，该方法在调用之间保留，但是这将消除方法局部变量的可能性。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed2cbf212c8ade235fd86f44cae03dacd4093358" translate="yes" xml:space="preserve">
          <source>We want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?</source>
          <target state="translated">我们希望有一个计算长度的方法。如果我们想在类中定义它,会是什么样子呢?</target>
        </trans-unit>
        <trans-unit id="51c707af171267923b8f12ea5d5f5baf6defa4a4" translate="yes" xml:space="preserve">
          <source>What is the purpose of the &lt;code&gt;self&lt;/code&gt; word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a parameter. To illustrate, in Ruby I can do this:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Python中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;词&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的目的是什么&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;？&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我知道它是指从该类创建的特定对象，但是我看不到为什么需要将它作为参数显式添加到每个函数中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了说明这一点，在Ruby中，我可以这样做：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20f72ac8403123e86e8f003d52ec694b7faef133" translate="yes" xml:space="preserve">
          <source>What is the purpose of the word 'self'</source>
          <target state="translated">'自 &quot;字的目的是什么?</target>
        </trans-unit>
        <trans-unit id="f4d688a1bfa95956a5de1b7469fb1318897cb850" translate="yes" xml:space="preserve">
          <source>What should it look like when we were to define it as a global method/function?</source>
          <target state="translated">当我们将其定义为全局方法函数时,它应该是什么样子?</target>
        </trans-unit>
        <trans-unit id="e01e46f09d9e7888039e78471558742a261a5a69" translate="yes" xml:space="preserve">
          <source>When calling a static method in Python, one simply writes a method with regular arguments inside it.</source>
          <target state="translated">在Python中调用一个静态方法时,只需在里面写一个带正则参数的方法。</target>
        </trans-unit>
        <trans-unit id="7184698ade8e0047ba5ca2450108ac89df6c1957" translate="yes" xml:space="preserve">
          <source>When objects are instantiated, the object itself is passed into the self parameter.</source>
          <target state="translated">当对象被实例化时,对象本身被传入自参数。</target>
        </trans-unit>
        <trans-unit id="8de116e44bafb791e48be7570d1a71f076e1700d" translate="yes" xml:space="preserve">
          <source>Which I understand, quite easily. However in Python I need to include &lt;code&gt;self&lt;/code&gt;:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我很容易理解。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是在Python中，我需要包含&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="62a45f03a7cb6b87698f82532e1d2c3771f05107" translate="yes" xml:space="preserve">
          <source>You should take a look at &lt;code&gt;cls&lt;/code&gt; too, to have &lt;strong&gt;&lt;em&gt;the bigger picture&lt;/em&gt;&lt;/strong&gt;. This &lt;a href=&quot;https://stackoverflow.com/questions/7554738/python-self-no-self-and-cls&quot;&gt;&lt;strong&gt;post&lt;/strong&gt;&lt;/a&gt; could be helpful.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您也应该看看&lt;/font&gt;&lt;/font&gt; &lt;code&gt;cls&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，以便有&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;更大的了解&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这篇&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7554738/python-self-no-self-and-cls&quot;&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文章&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能会有所帮助。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cda8d6f8522fc89e6f8523ec1bd67f9f85b7a529" translate="yes" xml:space="preserve">
          <source>[migrated my answer from duplicate closed question]</source>
          <target state="translated">[将我的回答从重复的封闭式问题中移出]</target>
        </trans-unit>
        <trans-unit id="121ffea1a0e29f88cc77aa8380ef0cbc7ebc882f" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;ObjectA&lt;/code&gt; is an instance of this class.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;ObjectA&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是这个类的一个实例。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36566f0d5cd3b605a76017fb817f21e2ece7b8c5" translate="yes" xml:space="preserve">
          <source>from the &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#method-objects&quot;&gt;docs&lt;/a&gt;,</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#method-objects&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;文档&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5298c83d605c12f453bc762c3d960a8cb581ef99" translate="yes" xml:space="preserve">
          <source>here when called as a method &lt;code&gt;frob&lt;/code&gt; will receive the object on which it's called via the &lt;code&gt;self&lt;/code&gt; parameter, and &lt;code&gt;fubar&lt;/code&gt; can still be called with an object as parameter and work the same (it &lt;em&gt;is&lt;/em&gt; the same as &lt;code&gt;C.frob&lt;/code&gt; I think).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这里的时候，被称为一个方法&lt;/font&gt;&lt;/font&gt; &lt;code&gt;frob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将接收上它通过调用的对象&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参数，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;fubar&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仍然可以用一个对象作为参数调用和工作一样（这&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一样的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;C.frob&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我认为）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="743291c3850784c84035f299485b24abf93248d8" translate="yes" xml:space="preserve">
          <source>is internally transformed to</source>
          <target state="translated">内部转化为</target>
        </trans-unit>
        <trans-unit id="ff4cfbf9b524daaa207c90c3ff07eeccb917e997" translate="yes" xml:space="preserve">
          <source>it is easy to see where the &lt;code&gt;self&lt;/code&gt; fits in. You don't actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, you&amp;rsquo;ll have to place the instance parameter somewhere explicitly.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;很容易看到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;self&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;适合的位置。您实际上并没有用Python编写实例方法；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您编写的是必须将实例作为第一个参数的类方法。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，您必须将实例参数显式放置在某处。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="602a92975ef013086ca7aaa6bf413c282246b22d" translate="yes" xml:space="preserve">
          <source>it's an explicit reference to the class instance object.</source>
          <target state="translated">它是对类实例对象的显式引用。</target>
        </trans-unit>
        <trans-unit id="4a914850299ac09863ca47de283030472b1323a8" translate="yes" xml:space="preserve">
          <source>preceding this the related snippet,</source>
          <target state="translated">在这之前的相关片段。</target>
        </trans-unit>
        <trans-unit id="662e7a4e1ccf087f0bd4e57b2d8916d49da4bba7" translate="yes" xml:space="preserve">
          <source>self is acting as like current object name or instance of class .</source>
          <target state="translated">self就像当前的对象名或类的实例一样。</target>
        </trans-unit>
        <trans-unit id="2299eef37790f4ca4597855716d34cdfde332c03" translate="yes" xml:space="preserve">
          <source>self, as a name, is &lt;strong&gt;&lt;em&gt;just a convention&lt;/em&gt;&lt;/strong&gt;, call it as you want ! but when using it, for example to delete the object, you have to use the same name: &lt;code&gt;__del__(var)&lt;/code&gt;, where &lt;code&gt;var&lt;/code&gt; was used in the &lt;code&gt;__init__(var,[...])&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;自我，正如名字一样，&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只是一个约定&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，可以随意称呼它！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但使用时，例如要删除的对象，你必须使用同一个名字：&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__del__(var)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__init__(var,[...])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f65e60d4715eb9fb11f7c4dc1fe62b7ab19827e" translate="yes" xml:space="preserve">
          <source>the special thing about methods is that the instance object is passed as the first argument of the function. In our example, the call &lt;code&gt;x.f()&lt;/code&gt; is exactly equivalent to &lt;code&gt;MyClass.f(x)&lt;/code&gt;. In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method&amp;rsquo;s instance object before the first argument.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;方法的特殊之处在于，实例对象作为函数的第一个参数传递。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在我们的示例中，调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;x.f()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全等同于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;MyClass.f(x)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常，调用具有n个参数列表的方法等同于调用带有参数列表的函数，该参数列表是通过在第一个参数之前插入方法的实例对象而创建的。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
