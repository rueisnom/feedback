<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/279170">
    <body>
      <group id="279170">
        <trans-unit id="06af4577aef7c6aa04de62a9e9affe6b5e40b70b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For HTML before HTML5 only&lt;/em&gt;: note that the W3C HTML spec says that clients &quot;should&quot; default to sending forms back to the server in whatever charset the server served, but this is apparently only a recommendation, hence the need for being explicit on every single &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;em&gt;HTML5より前のHTMLの場合のみ&lt;/em&gt; ：W3C HTML仕様では、クライアントはデフォルトで、サーバーが提供する任意の文字セットでサーバーにフォームを送信する必要があると述べていますが、これは明らかに推奨事項にすぎないため、すべての場合に明示する必要があります &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグ。</target>
        </trans-unit>
        <trans-unit id="63a5e5ecb09bd491d8a8810b798d6527433245c9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For HTML before HTML5 only&lt;/em&gt;: you want all data sent to you by browsers to be in UTF-8.  Unfortunately, if you go by the the only way to reliably do this is add the &lt;code&gt;accept-charset&lt;/code&gt; attribute to all your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags: &lt;code&gt;&amp;lt;form ... accept-charset=&quot;UTF-8&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;HTML5より前のHTMLの&lt;/em&gt;場合&lt;em&gt;のみ&lt;/em&gt; ：ブラウザーから送信されるすべてのデータをUTF-8にする必要があります。 残念ながら、確実にこれを行う唯一の方法を使用する場合、これはすべての &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグに &lt;code&gt;&amp;lt;form ... accept-charset=&quot;UTF-8&quot;&amp;gt;&lt;/code&gt; &lt;code&gt;accept-charset&lt;/code&gt; 属性を追加することです。</target>
        </trans-unit>
        <trans-unit id="a8c51bc805d030d10018e00d31e67169a5f6f3c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DATABASES&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DATABASES&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b578f9568f5e971f11c2590a5e8ca72330cedc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Access&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;データアクセス&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="6eaab0ed7f59813378f7ec1bba3510d7ed00e863" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Storage&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;データストレージ&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0104b54fcea146c5135352deefd00773ae9075b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ICONV&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ICONV&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9faff448a1c9eb4a9b5e4cce892878666473b55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;INTL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1673cd90fc65534f0976e8f49b4fcd67b98478cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Input&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="fbe923d3cfa7af2e6086dda3a5d6845ee1e97481" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Other Code Considerations&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;その他のコードに関する考慮事項&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="226c6d195092d25e48f4779200988ceb25b71b01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Output&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="d10301de7a9ca554fa4dac27ebbda55facc94927" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP's built-in string operations are &lt;em&gt;not&lt;/em&gt; by default UTF-8 safe.&lt;/strong&gt;  There are some things you can safely do with normal PHP string operations (like concatenation), but for most things you should use the equivalent &lt;code&gt;mbstring&lt;/code&gt; function.</source>
          <target state="translated">&lt;strong&gt;PHPの組み込み文字列操作は、デフォルトではUTF-8セーフではあり&lt;em&gt;ません&lt;/em&gt; 。&lt;/strong&gt; 通常のPHP文字列操作（連結など）で安全に行えることはいくつかありますが、ほとんどの場合、同等の &lt;code&gt;mbstring&lt;/code&gt; 関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2bf5005644d67207d699204077f6491c88ae0c49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Some other Gotchas&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;他のいくつかの問題&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="743f380d56d8b8ea4558c5433cb1e69cdffd790c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_string&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mb_string&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e6ba71b4dfcb183a9c30569388266d19535ac62" translate="yes" xml:space="preserve">
          <source>A good library to check into is &lt;a href=&quot;http://phputf8.sourceforge.net/&quot;&gt;phputf8&lt;/a&gt;. This rewrites all of the &quot;bad&quot; functions so you can safely work on UTF8 strings. There are extensions like the mbstring extension that try to do this for you, too, but I prefer using the library because it's more portable (but I write mass-market products, so that's important for me). But phputf8 can use mbstring behind the scenes, anyway, to increase performance.</source>
          <target state="translated">チェックインするのに適したライブラリは&lt;a href=&quot;http://phputf8.sourceforge.net/&quot;&gt;phputf8&lt;/a&gt;です。 これにより、すべての「不良」関数が書き換えられるため、UTF8文字列を安全に処理できます。 mbstring拡張機能のような拡張機能もありますが、移植性が高いためライブラリを使用することをお勧めします（ただし、私は大衆市場向けの製品を作成しているので、それが重要です）。 しかし、phputf8はパフォーマンスを向上させるために、舞台裏でmbstringを使用できます。</target>
        </trans-unit>
        <trans-unit id="66be105f647b3b6d7fea9e91efdb0af8b57b0a5e" translate="yes" xml:space="preserve">
          <source>After adding  this line to my config file everything works fine!</source>
          <target state="translated">この行を設定ファイルに追加した後、すべてが正常に動作します。</target>
        </trans-unit>
        <trans-unit id="ad2335ab936d79f64b8be9cdb644fc54d355f7e9" translate="yes" xml:space="preserve">
          <source>As a side note, I also discovered by running &lt;code&gt;mb_internal_encoding()&lt;/code&gt; that the internal encoding wasn't utf-8, and I changed that by running &lt;code&gt;mb_internal_encoding(&quot;UTF-8&quot;);&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mb_internal_encoding()&lt;/code&gt; を実行して内部エンコーディングがutf-8ではないことも発見し、 &lt;code&gt;mb_internal_encoding(&quot;UTF-8&quot;);&lt;/code&gt; を実行して変更しました。 。</target>
        </trans-unit>
        <trans-unit id="b1ff57d696aa3ec09bd76c88944e1a7097ee37a3" translate="yes" xml:space="preserve">
          <source>Bad:</source>
          <target state="translated">Bad:</target>
        </trans-unit>
        <trans-unit id="50d0051ba372bbd20fb081fe3197142413d36a87" translate="yes" xml:space="preserve">
          <source>Calendars, dates, timezone and time</source>
          <target state="translated">カレンダー、日付、タイムゾーン、時間</target>
        </trans-unit>
        <trans-unit id="71fdd7641faff64b3e623e8dd14f6178bec7555d" translate="yes" xml:space="preserve">
          <source>Collation</source>
          <target state="translated">Collation</target>
        </trans-unit>
        <trans-unit id="d042e4b29618ce17f584c5ea070221c0f7d91503" translate="yes" xml:space="preserve">
          <source>Convertors</source>
          <target state="translated">Convertors</target>
        </trans-unit>
        <trans-unit id="3efa3f00ec81206e84b7d8365bbb3c2536320aa7" translate="yes" xml:space="preserve">
          <source>Currency formatting</source>
          <target state="translated">通貨フォーマット</target>
        </trans-unit>
        <trans-unit id="d5bb76d4f2af1da73cdec9cd996d21666b8aaa4b" translate="yes" xml:space="preserve">
          <source>Declaring character encodings in HTML</source>
          <target state="translated">HTML での文字エンコーディングの宣言</target>
        </trans-unit>
        <trans-unit id="bb3692b8edda6477fc06e9567b300b75a2bba9f9" translate="yes" xml:space="preserve">
          <source>Does not support HTTP input output conversion</source>
          <target state="translated">HTTP入力出力変換をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="794ecab07a1cf25661dcd00aef43b87b9493cf8b" translate="yes" xml:space="preserve">
          <source>Does not support function overloading</source>
          <target state="translated">関数のオーバーロードをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="7d6c707795a253449aa3897eabc13c82bba0f06d" translate="yes" xml:space="preserve">
          <source>Does not support zend_multibite</source>
          <target state="translated">zend_multibite をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ac7607d30da804d7490261abc5759d7c4b829406" translate="yes" xml:space="preserve">
          <source>Don't forget the META tag either (like this, or &lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup&quot;&gt;the HTML4 or XHTML version of it&lt;/a&gt;):</source>
          <target state="translated">METAタグも忘れないでください（このようにするか&lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup&quot;&gt;、HTML4またはXHTMLバージョンを使用します&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4f7b323d49c49bf74f1433d88c9d3b49aa763eb8" translate="yes" xml:space="preserve">
          <source>Enables zend_multibyte support</source>
          <target state="translated">zend_multibyte サポートを有効にします。</target>
        </trans-unit>
        <trans-unit id="06c4ea17f2f205a02094fcf1a8c86a4cab0b049c" translate="yes" xml:space="preserve">
          <source>FAQ: Changing (X)HTML page encoding to UTF-8</source>
          <target state="translated">よくある質問 (X)HTMLページのエンコーディングをUTF-8に変更する</target>
        </trans-unit>
        <trans-unit id="a6697dfee4d67a3e60a8f6e5b3ab085570c9806b" translate="yes" xml:space="preserve">
          <source>First of all if you are in &amp;lt; 5.3PHP then no. You've got a ton of problems to tackle.</source>
          <target state="translated">まず、5.3PHP未満の場合は、いいえ。 取り組むべき問題が山ほどあります。</target>
        </trans-unit>
        <trans-unit id="8948689b97542f60657f89c506bc510f2f9aa1ba" translate="yes" xml:space="preserve">
          <source>From my reading of the current &lt;a href=&quot;http://whatwg.org/html&quot;&gt;HTML spec&lt;/a&gt;, the following sub-bullets are not necessary or even valid anymore for modern HTML.  My understanding is that browsers will work with and submit data in the character set specified for the document.  However, if you're targeting older versions of HTML (XHTML, HTML4, etc.), these points may still be useful:</source>
          <target state="translated">現在の&lt;a href=&quot;http://whatwg.org/html&quot;&gt;HTML仕様を&lt;/a&gt;読んだところ、次のサブ箇条書きは、現代のHTMLには不要であり、有効ではなくなっています。 私の理解では、ブラウザはドキュメントで指定された文字セットで動作し、データを送信します。 ただし、HTMLの古いバージョン（XHTML、HTML4など）をターゲットにしている場合は、次の点が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="f179b6f36465b5aac2f67605586252775def9c70" translate="yes" xml:space="preserve">
          <source>Good:</source>
          <target state="translated">Good:</target>
        </trans-unit>
        <trans-unit id="b79d7de20905687ddf09552514a209f7642eb172" translate="yes" xml:space="preserve">
          <source>Graphemes</source>
          <target state="translated">Graphemes</target>
        </trans-unit>
        <trans-unit id="a47ced5ebf103e6f29aef86c197000fed6c93968" translate="yes" xml:space="preserve">
          <source>I am surprised that none has mentioned the &lt;a href=&quot;http://php.net/intl&quot;&gt;&lt;strong&gt;intl&lt;/strong&gt;&lt;/a&gt; library, the one that has good support for &lt;strong&gt;unicode&lt;/strong&gt;, &lt;strong&gt;graphemes&lt;/strong&gt;, &lt;strong&gt;string operations&lt;/strong&gt; , &lt;strong&gt;localisation&lt;/strong&gt; and many more, see below.</source>
          <target state="translated">誰も&lt;a href=&quot;http://php.net/intl&quot;&gt;&lt;strong&gt;intl&lt;/strong&gt;&lt;/a&gt;ライブラリーについて言及していないことに驚いています。これは、 &lt;strong&gt;Unicode&lt;/strong&gt; 、 &lt;strong&gt;書記素&lt;/strong&gt; 、 &lt;strong&gt;文字列操作&lt;/strong&gt; 、 &lt;strong&gt;ローカリゼーション&lt;/strong&gt;などの多くをサポートしているライブラリです。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="63a7aca8ab1413b2b54336381660a056df51aae1" translate="yes" xml:space="preserve">
          <source>I changed all my file encoding to UTF8 then the default encoding on my connection. This solved all the problems.</source>
          <target state="translated">私はすべてのファイルのエンコーディングをUTF8に変更してから、私の接続のデフォルトのエンコーディングに変更しました。これですべての問題が解決しました。</target>
        </trans-unit>
        <trans-unit id="7d04fad80998f11575c6ef10a584a7f72a849404" translate="yes" xml:space="preserve">
          <source>I found an issue with someone using PDO and the answer was to use this for the PDO connection string:</source>
          <target state="translated">PDOを使っている人の問題点を見つけたのですが、答えはPDOの接続文字列にこれを使うというものでした。</target>
        </trans-unit>
        <trans-unit id="adf8e4bcbc3f4fb1f02131328680ee49d7ad4623" translate="yes" xml:space="preserve">
          <source>I found this solution &lt;a href=&quot;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&quot;&gt;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&lt;/a&gt; when i was looking to solve a insert from html query</source>
          <target state="translated">HTMLクエリからの挿入を解決しようとしていたときに、このソリューション&lt;a href=&quot;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&quot;&gt;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&lt;/a&gt;を見つけました</target>
        </trans-unit>
        <trans-unit id="3712718493dedcde16dfe00371c49ad1e75c3d08" translate="yes" xml:space="preserve">
          <source>I have just went through the same issue and found a good solution at PHP manuals.</source>
          <target state="translated">私はちょうど同じ問題を通過して、PHPのマニュアルで良い解決策を見つけました。</target>
        </trans-unit>
        <trans-unit id="cbe87772a90cce5e56d7f7bcd63502aa95584759" translate="yes" xml:space="preserve">
          <source>I ll update this answer in case things change features added and so on.</source>
          <target state="translated">機能追加などの変更があった場合は、この回答を更新していきます。</target>
        </trans-unit>
        <trans-unit id="03011cd320b77197c5142401ea09ade77de5ac83" translate="yes" xml:space="preserve">
          <source>I recently discovered that using &lt;code&gt;strtolower()&lt;/code&gt; can cause issues where the data is truncated after a special character.</source>
          <target state="translated">最近、 &lt;code&gt;strtolower()&lt;/code&gt; を使用すると、特殊文字の後にデータが切り捨てられる問題が発生する可能性があることを発見しました。</target>
        </trans-unit>
        <trans-unit id="21120a9ba534d136733cce10663a538aca732686" translate="yes" xml:space="preserve">
          <source>I was doing everything right; the database, database connection and Content-Type HTTP header were all set to UTF-8, and it worked fine in all other browsers, but Internet Explorer still insisted on using the &quot;Western European&quot; encoding.</source>
          <target state="translated">データベース、データベース接続、Content-Type HTTPヘッダはすべてUTF-8に設定されており、他のすべてのブラウザでは問題なく動作していましたが、Internet Explorerは依然として「西ヨーロッパ」エンコーディングを使用することを主張していました。</target>
        </trans-unit>
        <trans-unit id="f3f6cf01462325f4e47dbce87e5164dfc905c429" translate="yes" xml:space="preserve">
          <source>I will quote some information about unicode support in PHP by &lt;strong&gt;Elizabeth Smith's&lt;/strong&gt;&lt;a href=&quot;http://www.slideshare.net/auroraeosrose/using-unicode-with-php&quot;&gt;slides&lt;/a&gt; at &lt;strong&gt;PHPBenelux'14&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHPBenelux'14で&lt;/strong&gt; &lt;strong&gt;のElizabeth Smithの&lt;/strong&gt; &lt;a href=&quot;http://www.slideshare.net/auroraeosrose/using-unicode-with-php&quot;&gt;スライド&lt;/a&gt;によるPHPでのUnicodeサポートに関する情報を引用し&lt;strong&gt;ます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="770525ab9fd169302211602b74e1ddefc1417f52" translate="yes" xml:space="preserve">
          <source>I'd like to add one thing to &lt;a href=&quot;https://stackoverflow.com/questions/279170/utf-8-all-the-way-through#279279&quot;&gt;chazomaticus' excellent answer&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/279170/utf-8-all-the-way-through#279279&quot;&gt;chazomaticusの優れた答えに&lt;/a&gt; 1つ追加したいと思います 。</target>
        </trans-unit>
        <trans-unit id="c0a702df3182396e3f9bc9b7512198794c576da5" translate="yes" xml:space="preserve">
          <source>I'm setting up a new server and want to support UTF-8 fully in my web application. I have tried this in the past on existing servers and always seem to end up having to fall back to ISO-8859-1.</source>
          <target state="translated">新しいサーバを設定していますが、WebアプリケーションでUTF-8を完全にサポートしたいと思っています。既存のサーバで過去にこれを試したことがありますが、いつもISO-8859-1にフォールバックしなければならないようです。</target>
        </trans-unit>
        <trans-unit id="35d3d2d3404abeb8346dba6488194ef8d13aafd7" translate="yes" xml:space="preserve">
          <source>IDN support</source>
          <target state="translated">アイディーエヌサポート</target>
        </trans-unit>
        <trans-unit id="682b756eeb7b8de097992166c3aca915f1ccf3b0" translate="yes" xml:space="preserve">
          <source>If the driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-connection.html&quot;&gt;&lt;code&gt;SET NAMES 'utf8mb4'&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ドライバーが接続文字セットを設定するための独自のメカニズムを提供しない場合は、アプリケーションが接続のデータをどのようにエンコードするかをMySQLに通知するクエリを発行する必要がある場合があります： &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-connection.html&quot;&gt; &lt;code&gt;SET NAMES 'utf8mb4'&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfe4b018ffc2451f02a8054a2d60f5a06e25c89b" translate="yes" xml:space="preserve">
          <source>If you want MySQL server to decide character set, and not PHP as a client (old behaviour; preferred, in my opinion), try adding &lt;code&gt;skip-character-set-client-handshake&lt;/code&gt; to your &lt;code&gt;my.cnf&lt;/code&gt;, under &lt;code&gt;[mysqld]&lt;/code&gt;, and restart &lt;code&gt;mysql&lt;/code&gt;.</source>
          <target state="translated">MySQLサーバーにクライアントとしてのPHPではなく文字セットを決定させたい場合（古い動作、私の意見では優先）、 &lt;code&gt;[mysqld]&lt;/code&gt; の下の &lt;code&gt;my.cnf&lt;/code&gt; に &lt;code&gt;skip-character-set-client-handshake&lt;/code&gt; を追加してみてください。 &lt;code&gt;mysql&lt;/code&gt; を再起動します。</target>
        </trans-unit>
        <trans-unit id="b48374e9bd1777c30f301bbd9674e2da8787a738" translate="yes" xml:space="preserve">
          <source>If you're stuck with plain &lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot;&gt;mysql&lt;/a&gt; but happen to be running PHP &amp;ge; 5.2.3, you can call &lt;a href=&quot;http://php.net/manual/en/function.mysql-set-charset.php&quot;&gt;&lt;code&gt;mysql_set_charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単純な&lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot;&gt;mysqlで&lt;/a&gt;立ち往生しているが、 &lt;a href=&quot;http://php.net/manual/en/function.mysql-set-charset.php&quot;&gt; &lt;code&gt;mysql_set_charset&lt;/code&gt; &lt;/a&gt;実行している場合は、 mysql_set_charsetを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9335d436ae15d41a84ad0b6a7a0f197c72f6f00b" translate="yes" xml:space="preserve">
          <source>If you're using &lt;a href=&quot;http://www.php.net/manual/en/book.mysqli.php&quot;&gt;mysqli&lt;/a&gt;, you can call &lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot;&gt;&lt;code&gt;set_charset()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.php.net/manual/en/book.mysqli.php&quot;&gt;mysqli&lt;/a&gt;を使用している場合は、 &lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot;&gt; &lt;code&gt;set_charset()&lt;/code&gt; を&lt;/a&gt;呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fefe169ac2e400b0fc6ab51769c9866a48bc28e9" translate="yes" xml:space="preserve">
          <source>If you're using the &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; abstraction layer with PHP &amp;ge; 5.3.6, you can specify &lt;code&gt;charset&lt;/code&gt; in the &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;DSN&lt;/a&gt;:</source>
          <target state="translated">PHP&amp;ge;5.3.6で&lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;抽象化レイヤーを使用している場合、 &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;DSNで&lt;/a&gt; &lt;code&gt;charset&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="1898bc147327787e953f78d4016b5c48e60e87ad" translate="yes" xml:space="preserve">
          <source>If your application transmits text to other systems, they will also need to be informed of the character encoding.  With web applications, the browser must be informed of the encoding in which data is sent (through HTTP response headers or &lt;a href=&quot;https://stackoverflow.com/q/4696499&quot;&gt;HTML metadata&lt;/a&gt;).</source>
          <target state="translated">アプリケーションが他のシステムにテキストを送信する場合は、文字エンコーディングも通知する必要があります。 Webアプリケーションでは、データが送信されるエンコーディングを（HTTP応答ヘッダーまたは&lt;a href=&quot;https://stackoverflow.com/q/4696499&quot;&gt;HTMLメタデータを&lt;/a&gt;介して）ブラウザーに通知する必要があります。</target>
        </trans-unit>
        <trans-unit id="a129ed10d5f803fb83e471303457dc258c00ea47" translate="yes" xml:space="preserve">
          <source>In PHP, you can use the &lt;a href=&quot;http://www.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt;&lt;code&gt;default_charset&lt;/code&gt;&lt;/a&gt; php.ini option, or manually issue the &lt;code&gt;Content-Type&lt;/code&gt; MIME header yourself, which is just more work but has the same effect.</source>
          <target state="translated">PHPでは、 &lt;a href=&quot;http://www.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt; &lt;code&gt;default_charset&lt;/code&gt; &lt;/a&gt; php.iniオプションを使用するか、手動で &lt;code&gt;Content-Type&lt;/code&gt; MIMEヘッダーを手動で発行できます。これは、作業量は増えますが、効果は同じです。</target>
        </trans-unit>
        <trans-unit id="f8b2b69a6838665fed13eb36c4fcec2f4b757c01" translate="yes" xml:space="preserve">
          <source>In PHP, you'll need to either use the &lt;a href=&quot;http://us2.php.net/manual/en/ref.mbstring.php&quot;&gt;multibyte functions&lt;/a&gt;, or turn on &lt;a href=&quot;http://us2.php.net/manual/en/mbstring.configuration.php&quot;&gt;mbstring.func_overload&lt;/a&gt;. That way things like strlen will work if you have characters that take more than one byte.</source>
          <target state="translated">PHPでは、 &lt;a href=&quot;http://us2.php.net/manual/en/ref.mbstring.php&quot;&gt;マルチバイト関数を&lt;/a&gt;使用するか、 &lt;a href=&quot;http://us2.php.net/manual/en/mbstring.configuration.php&quot;&gt;mbstring.func_overloadを&lt;/a&gt;オンにする必要があります。 これにより、1バイトを超える文字がある場合にstrlenのようなことが機能します。</target>
        </trans-unit>
        <trans-unit id="fd2b6ceb2f874d60fca2e4bd22ed6eeb8d7bd6c0" translate="yes" xml:space="preserve">
          <source>In addition to setting &lt;code&gt;default_charset&lt;/code&gt; in php.ini, you can send the correct charset using &lt;code&gt;header()&lt;/code&gt; from within your code, before any output:</source>
          <target state="translated">php.iniで &lt;code&gt;default_charset&lt;/code&gt; を設定することに加えて、出力の前に、コード内から &lt;code&gt;header()&lt;/code&gt; を使用して正しい文字セットを送信できます。</target>
        </trans-unit>
        <trans-unit id="fe91ce9865b5ecd79f40561addba9ba37c3cced6" translate="yes" xml:space="preserve">
          <source>In my case, I was using &lt;code&gt;mb_split&lt;/code&gt;, which uses regex.  Therefore I also had to manually make sure the regex encoding was utf-8 by doing &lt;code&gt;mb_regex_encoding('UTF-8');&lt;/code&gt;</source>
          <target state="translated">私の場合、正規表現を使用する &lt;code&gt;mb_split&lt;/code&gt; を使用していました。 したがって、 &lt;code&gt;mb_regex_encoding('UTF-8');&lt;/code&gt; を実行して、正規表現エンコーディングがutf-8であることを手動で確認する必要もありました。</target>
        </trans-unit>
        <trans-unit id="632241254f08ee5d73bd409b1d0c460dc9788224" translate="yes" xml:space="preserve">
          <source>In older versions of MySQL (&amp;lt; 5.5.3), you'll unfortunately be forced to use simply &lt;code&gt;utf8&lt;/code&gt;, which only supports a subset of Unicode characters.  I wish I were kidding.</source>
          <target state="translated">古いバージョンのMySQL（&amp;lt;5.5.3）では、残念ながら、単にUnicode文字のサブセットのみをサポートする &lt;code&gt;utf8&lt;/code&gt; を使用せざるを得ません。 冗談でしょ。</target>
        </trans-unit>
        <trans-unit id="912a06bcfd3e9f52c102e2c87f7a921de2afc61b" translate="yes" xml:space="preserve">
          <source>In your application code (e.g. PHP), in whatever DB access method you use, you'll need to set the connection charset to &lt;code&gt;utf8mb4&lt;/code&gt;.  This way, MySQL does no conversion from its native UTF-8 when it hands data off to your application and vice versa.</source>
          <target state="translated">アプリケーションコード（PHPなど）では、使用するDBアクセス方法では、接続文字セットを &lt;code&gt;utf8mb4&lt;/code&gt; に設定する必要があります。 このように、MySQLは、アプリケーションにデータを渡したり、その逆を行ったりするときに、ネイティブUTF-8からの変換を行いません。</target>
        </trans-unit>
        <trans-unit id="0172cb92edbbc5688d0590b316c09f7a6bbc4e25" translate="yes" xml:space="preserve">
          <source>It turned out the page was missing the META tag. Adding that solved the problem.</source>
          <target state="translated">ページにmetaタグがないことが判明しました。それを追加することで問題は解決しました。</target>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="85cccc55a91ff650683ca4dcbe18b519c3e551fa" translate="yes" xml:space="preserve">
          <source>Just a note:</source>
          <target state="translated">ちょっとしたメモです。</target>
        </trans-unit>
        <trans-unit id="cb62b45096d74bf04e878b551336ed27b3e70bfb" translate="yes" xml:space="preserve">
          <source>Message formatting (replaces gettext)</source>
          <target state="translated">メッセージの書式設定 (gettext を置き換える)</target>
        </trans-unit>
        <trans-unit id="2918c4d5af1ec648f31fc83cb72666722f8d463c" translate="yes" xml:space="preserve">
          <source>Number formatting</source>
          <target state="translated">数字の書式設定</target>
        </trans-unit>
        <trans-unit id="c2e15a99804f3111c87710df5b8bbc36c1b58676" translate="yes" xml:space="preserve">
          <source>Obviously enough, all files you'll be serving (PHP, HTML, JavaScript, etc.) should be encoded in valid UTF-8.</source>
          <target state="translated">明らかに十分ですが、提供するすべてのファイル(PHP、HTML、JavaScriptなど)は、有効なUTF-8でエンコードされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="7a5f4b2172d0ba6cdfc6374714fe97f6276fa2ba" translate="yes" xml:space="preserve">
          <source>Output buffer handler</source>
          <target state="translated">出力バッファハンドラ</target>
        </trans-unit>
        <trans-unit id="26f5d9263b944f4ffea960d76ef426383723d981" translate="yes" xml:space="preserve">
          <source>Plain text is not plain text, files have encodings</source>
          <target state="translated">プレーンテキストはプレーンテキストではなく、ファイルにはエンコーディングがあります。</target>
        </trans-unit>
        <trans-unit id="224f0139fffbe62aa800883b0c73169a34b8189f" translate="yes" xml:space="preserve">
          <source>Primary for charset conversion</source>
          <target state="translated">文字コード変換のためのプライマリ</target>
        </trans-unit>
        <trans-unit id="3c79dbd6ac5538d78945198363b90c930673b12a" translate="yes" xml:space="preserve">
          <source>Provides some wrappers for funtionallity such as strtoupper</source>
          <target state="translated">strtoupper のような関数のラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="02be837b723fb590d4a8ea4f2058a4f78cd91434" translate="yes" xml:space="preserve">
          <source>Resource bundles</source>
          <target state="translated">リソースバンドル</target>
        </trans-unit>
        <trans-unit id="a37fde2217f946af090ae60ac59301f33e9bece6" translate="yes" xml:space="preserve">
          <source>Send everything in ASCII if you are using exec, proc_open and other command line calls</source>
          <target state="translated">exec、proc_open、その他のコマンドラインコールを使用している場合は、すべてをASCIIで送信します。</target>
        </trans-unit>
        <trans-unit id="65ad3613d563f20af3dd93010f55f976016b3a60" translate="yes" xml:space="preserve">
          <source>Setting the HTTP charset parameter</source>
          <target state="translated">HTTP charset パラメータの設定</target>
        </trans-unit>
        <trans-unit id="637e537c6a0662f94014b3a6e3ff7ff53ba32088" translate="yes" xml:space="preserve">
          <source>Some drivers provide their own mechanism for configuring the connection character set, which both updates its own internal state and informs MySQL of the encoding to be used on the connection&amp;mdash;this is usually the preferred approach.   In PHP:</source>
          <target state="translated">一部のドライバーは、接続文字セットを構成するための独自のメカニズムを提供します。これは、独自の内部状態を更新し、接続で使用されるエンコードをMySQLに通知します。これは通常、推奨されるアプローチです。 PHPの場合：</target>
        </trans-unit>
        <trans-unit id="207a48134f0b853aa739eb8c5d3372fb7a7e2ef7" translate="yes" xml:space="preserve">
          <source>Sometime ago i had someone ask me to add utf8 support for a php/mysql application designed by someone else, i noticed that all files were encoded in ANSI, so I had to use ICONV to convert all files, change the database tables to use the utf8 charset and utf8_general_ci collate, add 'SET NAMES utf8' to the database abstraction layer after the connection (if using 5.3.6 or earlier otherwise you have to use charset=utf8 in the connection string) and change string functions to use the php multibyte string functions equivalent.</source>
          <target state="translated">私はすべてのファイルがANSIでエンコードされていることに気づいたので、ICONVを使ってすべてのファイルを変換し、データベーステーブルを変更してutf8 charsetとutf8_general_ciの照合を使用するように変更し、接続後のデータベース抽象化レイヤーに'SET NAMES utf8'を追加しました(5.3.6以前を使用している場合は接続文字列でcharset=utf8を使用しなければなりません)。 3.6以前を使用している場合は、接続文字列にcharset=utf8を使用しなければなりません)、文字列関数をphpのマルチバイト文字列関数と同等のものを使用するように変更します。</target>
        </trans-unit>
        <trans-unit id="b7ca532411e2a0f37bc7c62898bcacc6895fc8b7" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;utf8mb4&lt;/code&gt; character set on all tables and text columns in your database.  This makes MySQL physically store and retrieve values encoded natively in UTF-8.  Note that MySQL will implicitly use &lt;code&gt;utf8mb4&lt;/code&gt; encoding if a &lt;code&gt;utf8mb4_*&lt;/code&gt; collation is specified (without any explicit character set).</source>
          <target state="translated">データベースのすべてのテーブルとテキスト列に &lt;code&gt;utf8mb4&lt;/code&gt; 文字セットを指定します。 これにより、MySQLはUTF-8でネイティブにエンコードされた値を物理的に保存および取得します。 &lt;code&gt;utf8mb4_*&lt;/code&gt; 照合が指定されている場合（明示的な文字セットなしで）、MySQLは暗黙的に &lt;code&gt;utf8mb4&lt;/code&gt; エンコーディングを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="01ef8e43542fd0225f4be2d16d90a14a1985274c" translate="yes" xml:space="preserve">
          <source>Spoofchecker</source>
          <target state="translated">Spoofchecker</target>
        </trans-unit>
        <trans-unit id="b7adc98398543c6ac7fdfa87ff652b753458844a" translate="yes" xml:space="preserve">
          <source>Standardised locales, set locale per script</source>
          <target state="translated">標準化されたロケール、スクリプトごとにロケールを設定</target>
        </trans-unit>
        <trans-unit id="9cef3ed7b1d2767b1b75b7e0cfa79ac5b57098ba" translate="yes" xml:space="preserve">
          <source>Stream Filter &lt;code&gt;stream_filter_append($fp, 'convert.iconv.ISO-2022-JP/EUC-JP')&lt;/code&gt;</source>
          <target state="translated">ストリームフィルター &lt;code&gt;stream_filter_append($fp, 'convert.iconv.ISO-2022-JP/EUC-JP')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f5b5d04b61b87167f4ce215be3349bb000ca275" translate="yes" xml:space="preserve">
          <source>Supports transparent HTTP in/out encoding</source>
          <target state="translated">透過的な HTTP inout エンコーディングをサポートします。</target>
        </trans-unit>
        <trans-unit id="582d3a55d7d8925dbd67239e75e1aca1a73af2a6" translate="yes" xml:space="preserve">
          <source>That is mostly because you are testing on &lt;strong&gt;your old data&lt;/strong&gt; which has been inserted to the database using the wrong charset and got converted and stored to actually the question mark characters &lt;code&gt;?&lt;/code&gt;. Which means you lost your original text forever and no matter what you try you will get &lt;code&gt;???????&lt;/code&gt;.</source>
          <target state="translated">それは主に、間違った文字セットを使用してデータベースに挿入され、変換されて実際に疑問符文字に保存された&lt;strong&gt;古いデータ&lt;/strong&gt;をテストし&lt;strong&gt;て&lt;/strong&gt;いるためです &lt;code&gt;?&lt;/code&gt; 。 これは、元のテキストが永久に失われたことを意味し、何を試しても取得できます &lt;code&gt;???????&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f9a141ac6949a7ea66b109b173df0117edc8e5e" translate="yes" xml:space="preserve">
          <source>That seems trivial, but IE7 has given me problems with that before.</source>
          <target state="translated">それは些細なことのようですが、以前IE7で問題が発生したことがあります。</target>
        </trans-unit>
        <trans-unit id="10b31519efe292a65c45c4715e1cf4bb614c331d" translate="yes" xml:space="preserve">
          <source>The W3C actually has a rather large &lt;a href=&quot;http://www.w3.org/International/&quot;&gt;section dedicated to I18N&lt;/a&gt;. They have a number of articles related to this issue &amp;ndash; describing the HTTP, (X)HTML and CSS side of things:</source>
          <target state="translated">W3Cには、実際には&lt;a href=&quot;http://www.w3.org/International/&quot;&gt;I18N専用の&lt;/a&gt;かなり大きなセクションがあります。 彼らはこの問題に関連する記事をいくつか持っています&amp;ndash;物事のHTTP、（X）HTML、CSS側を説明します：</target>
        </trans-unit>
        <trans-unit id="4f49ce6fbca1578d556973165019742531ed7c7a" translate="yes" xml:space="preserve">
          <source>The easy part is just specifying the charset in HTTP headers and in the database and such, but none of that matters if your PHP code doesn't output valid UTF8. That's the hard part, and PHP gives you virtually no help there. (I think PHP6 is supposed to fix the worst of this, but that's still a while away)</source>
          <target state="translated">簡単なのは、HTTPヘッダやデータベースなどで文字セットを指定することですが、PHPのコードが有効なUTF8を出力しない場合は何も問題になりません。これが難しいところで、PHP は事実上何の助けにもなりません。(PHP6ではこの最悪の問題が解決されると思いますが、それはまだしばらく先のことです)</target>
        </trans-unit>
        <trans-unit id="2eca6cfca3016461d976cf886468837372d8ba57" translate="yes" xml:space="preserve">
          <source>The only thing I would add to these amazing answers is to emphasize on saving your files in utf8 encoding, i have noticed that browsers accept this property over setting utf8 as your code encoding. Any decent text editor will show you this, for example Notepad++ has a menu option for file enconding, it shows you the current encoding and enables you to change it. For all my php files I use utf8 without BOM.</source>
          <target state="translated">これらの素晴らしい回答に付け加えたい唯一のことは、ファイルを utf8 エンコーディングで保存することを強調することです。どんなまともなテキストエディタでもこのプロパティを表示してくれます。例えば、Notepad++にはファイルエンコーディングのメニューオプションがあり、現在のエンコーディングを表示して変更することができます。私はすべての php ファイルに BOM なしで utf8 を使用しています。</target>
        </trans-unit>
        <trans-unit id="aabb4fa7740be048d6bc94be8a99701c67c6887f" translate="yes" xml:space="preserve">
          <source>The same consideration regarding &lt;code&gt;utf8mb4&lt;/code&gt;/&lt;code&gt;utf8&lt;/code&gt; applies as above.</source>
          <target state="translated">&lt;code&gt;utf8mb4&lt;/code&gt; / &lt;code&gt;utf8&lt;/code&gt; に関する上記と同じ考慮事項が適用されます。</target>
        </trans-unit>
        <trans-unit id="d3149418384152b6a8646b1e2c84fb2829d07735" translate="yes" xml:space="preserve">
          <source>The site I took this from is down, but I was able to get it using the Google cache, luckily.</source>
          <target state="translated">これを取ったサイトはダウンしていますが、幸いGoogleキャッシュを使って取得することができました。</target>
        </trans-unit>
        <trans-unit id="de921e19c600d4a63955aee66d84ee2993f8c2d6" translate="yes" xml:space="preserve">
          <source>The solution was to use</source>
          <target state="translated">という解決策がありました。</target>
        </trans-unit>
        <trans-unit id="8d7f8223526b4dbca13f549494d81749c27ce04c" translate="yes" xml:space="preserve">
          <source>The top answer is excellent. Here is what I had to on a regular debian/php/mysql setup:</source>
          <target state="translated">一番上の回答は素晴らしいです。通常の debianphpmysql のセットアップで私がしなければならなかったことは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2fcce31f6cb0431af1d8ba6779198785476b7250" translate="yes" xml:space="preserve">
          <source>They recommend using both the HTTP header and HTML meta tag (or XML declaration in case of XHTML served as XML).</source>
          <target state="translated">彼らは、HTTPヘッダとHTMLメタタグ(XMLとして提供されるXHTMLの場合はXML宣言)の両方を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="e4ad4bf1f1a927d88ec22e472c9e6b3808e51204" translate="yes" xml:space="preserve">
          <source>This is for a new Linux server, running MySQL 5, PHP, 5 and Apache 2.</source>
          <target state="translated">これは、MySQL 5、PHP、5、Apache 2を実行している新しいLinuxサーバのためのものです。</target>
        </trans-unit>
        <trans-unit id="8fa896fbfc35af84e91997a19fde7a200f6410dd" translate="yes" xml:space="preserve">
          <source>This may cause troubles in case you're using anything other than UTF8.</source>
          <target state="translated">UTF8以外のものを使用している場合、トラブルの原因になることがあります。</target>
        </trans-unit>
        <trans-unit id="5a622fad92083ea56438e393bc329df640736daa" translate="yes" xml:space="preserve">
          <source>To know what you're doing (read: not mess it up), you really need to know UTF-8 and how it works on the lowest possible level.  Check out any of the links from &lt;a href=&quot;http://www.utf8.com/&quot;&gt;utf8.com&lt;/a&gt; for some good resources to learn everything you need to know.</source>
          <target state="translated">あなたが何をしているのかを理解するには（読んでください：それを台無しにしないでください）、UTF-8とそれが最低限のレベルでどのように機能するかを知る必要があります。 &lt;a href=&quot;http://www.utf8.com/&quot;&gt;utf8.com&lt;/a&gt;からのリンクをチェックして、知っておくべきすべてのことを学ぶための優れたリソースを探してください。</target>
        </trans-unit>
        <trans-unit id="ba455ba021d7ce65308fca89d0584483a47a8d4e" translate="yes" xml:space="preserve">
          <source>Transliterator</source>
          <target state="translated">Transliterator</target>
        </trans-unit>
        <trans-unit id="efa99878bac8950b369b416ed67b7da66d18ad86" translate="yes" xml:space="preserve">
          <source>Tutorial: Character sets &amp;amp; encodings in XHTML, HTML and CSS</source>
          <target state="translated">チュートリアル：XHTML、HTML、CSSの文字セットとエンコーディング</target>
        </trans-unit>
        <trans-unit id="1a737ada225b54daf9665a302016b367189c3214" translate="yes" xml:space="preserve">
          <source>UTF-8 all the way through</source>
          <target state="translated">UTF-8 を通して</target>
        </trans-unit>
        <trans-unit id="4f626a9b47979a2a7f85ee3a003879389665a7e2" translate="yes" xml:space="preserve">
          <source>Unfortunately, you should verify every received string as being valid UTF-8 before you try to store it or use it anywhere.  PHP's &lt;a href=&quot;http://php.net/manual/en/function.mb-check-encoding.php&quot;&gt;&lt;code&gt;mb_check_encoding()&lt;/code&gt;&lt;/a&gt; does the trick, but you have to use it religiously.  There's really no way around this, as malicious clients can submit data in whatever encoding they want, and I haven't found a trick to get PHP to do this for you reliably.</source>
          <target state="translated">残念ながら、受け取ったすべての文字列は、保存したり、どこかで使用したりする前に、有効なUTF-8であることを確認する必要があります。 PHPの&lt;a href=&quot;http://php.net/manual/en/function.mb-check-encoding.php&quot;&gt; &lt;code&gt;mb_check_encoding()&lt;/code&gt; &lt;/a&gt;がそのトリックを実行しますが、それを忠実に使用する必要があります。 悪意のあるクライアントが好きなエンコーディングでデータを送信できるため、これを回避する方法はありません。また、PHPが確実にこれを実行できるようにするトリックは見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="bbbae2a97b532d10d05a657f576cdb6b71bc1b68" translate="yes" xml:space="preserve">
          <source>Unicode support in PHP is still a huge mess. While it's capable of converting an ISO8859 string (which it uses internally) to utf8, it lacks the capability to work with unicode strings natively, which means all the string processing functions will mangle and corrupt your strings. So you have to either use a separate library for proper utf8 support, or rewrite all the string handling functions yourself.</source>
          <target state="translated">PHPにおけるUnicodeサポートは、いまだに大混乱しています。PHP は ISO8859 文字列 (内部で使用している)を utf8 に変換する機能を持っていますが、 Unicode 文字列をネイティブに扱う機能を持っていません。そのため、適切な utf8 サポートのために別のライブラリを使用するか、すべての文字列処理関数を自分で書き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="accd4b912118c7e4a7de25740b3e4c5a2c86712e" translate="yes" xml:space="preserve">
          <source>View Source</source>
          <target state="translated">ソースを見る</target>
        </trans-unit>
        <trans-unit id="48675f90267ddcde6fd852648cbdedc142bb7d96" translate="yes" xml:space="preserve">
          <source>When encoding the output using &lt;code&gt;json_encode()&lt;/code&gt;, add &lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt; as a second parameter.</source>
          <target state="translated">&lt;code&gt;json_encode()&lt;/code&gt; を使用して出力をエンコードする場合、2番目のパラメーターとして &lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="15727aa8a979f4b718bd9a96ec3508ca46061cc8" translate="yes" xml:space="preserve">
          <source>Where exactly do I need to set the encoding/charsets? I'm aware that I need to configure Apache, MySQL, and PHP to do this &amp;mdash; is there some standard checklist I can follow, or perhaps troubleshoot where the mismatches occur?</source>
          <target state="translated">正確にどこにエンコーディング/文字セットを設定する必要がありますか？ これを行うには、Apache、MySQL、およびPHPを構成する必要があることは承知しています。追跡できる標準チェックリストはありますか、または不一致が発生した場所をトラブルシューティングしますか？</target>
        </trans-unit>
        <trans-unit id="cbbf06985cb0082a248a4aaa3458b7838a14f917" translate="yes" xml:space="preserve">
          <source>Working with Unicode in PHP is easy as long as you realize that most of the &lt;strong&gt;string functions don't work with Unicode, and some might mangle strings completely&lt;/strong&gt;. PHP considers &quot;characters&quot; to be 1 byte long. Sometimes this is okay (for example, &lt;code&gt;explode()&lt;/code&gt; only looks for a byte sequence and uses it as a separator -- so it doesn't matter what actual characters you look for). But other times, when the function is actually designed to work on &lt;em&gt;characters&lt;/em&gt;, PHP has no idea that your text has multi-byte characters that are found with Unicode.</source>
          <target state="translated">ほとんどの&lt;strong&gt;文字列関数がUnicodeで機能せず、一部の文字列が完全に文字列を壊す可能性がある&lt;/strong&gt;ことを理解している限り、PHPでのUnicodeの操作は簡単です。 PHPは「文字」を1バイトの長さと見なします。 これは大丈夫な場合があります（たとえば、 &lt;code&gt;explode()&lt;/code&gt; はバイトシーケンスを検索し、それをセパレーターとして使用するだけなので、実際に検索する文字は関係ありません）。 しかし、関数が実際に&lt;em&gt;文字&lt;/em&gt;で動作するように設計されている場合、PHPは、テキストにUnicodeで検出されるマルチバイト文字があることを認識しません。</target>
        </trans-unit>
        <trans-unit id="6655db021e6fed68cec4c59ba76e1b3c487b6f57" translate="yes" xml:space="preserve">
          <source>Wrapper around ICU library</source>
          <target state="translated">ICUライブラリのラッパー</target>
        </trans-unit>
        <trans-unit id="2ae0ed48e37f2e02e46f33b03b7510c47ed8cefa" translate="yes" xml:space="preserve">
          <source>You are facing the problem of your non-latin characters is showing as &lt;code&gt;?????????&lt;/code&gt; , you asked a question, and it got closed with a reference to this canonical question, you tried everything and no matter what you do you still get &lt;code&gt;??????????&lt;/code&gt; from &lt;code&gt;MySQL&lt;/code&gt;.</source>
          <target state="translated">非ラテン文字が &lt;code&gt;?????????&lt;/code&gt; と表示されるという問題に直面しています。 、あなたは質問をし、それはこの標準的な質問への参照で閉じられました、あなたはすべてを試しました、そしてあなたがあなたがまだ何を得ても関係ありません &lt;code&gt;??????????&lt;/code&gt; &lt;code&gt;MySQL&lt;/code&gt; から。</target>
        </trans-unit>
        <trans-unit id="5b164784fa8f261338cec31e801b8e72a1828dc7" translate="yes" xml:space="preserve">
          <source>You can convert files on the fly with the iconv filter</source>
          <target state="translated">iconv フィルタを使って、その場でファイルを変換することができます。</target>
        </trans-unit>
        <trans-unit id="d403e71451a2f19d8575749fcd05090e7e348288" translate="yes" xml:space="preserve">
          <source>You cannot use unicode filenames with PHP and windows unless you use a 3rd part extension.</source>
          <target state="translated">PHPやwindowsでは、第3部の拡張モジュールを使用しない限り、 unicodeのファイル名を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="8b37a9d9e415bc8221c1b11d04ca54c6a6648f23" translate="yes" xml:space="preserve">
          <source>You need to make sure that every time you process a UTF-8 string, you do so safely.  This is, unfortunately, the hard part.  You'll probably want to make extensive use of PHP's &lt;a href=&quot;http://www.php.net/manual/en/book.mbstring.php&quot;&gt;&lt;code&gt;mbstring&lt;/code&gt;&lt;/a&gt; extension.</source>
          <target state="translated">UTF-8文字列を処理するたびに、安全に処理することを確認する必要があります。 残念ながら、これは難しい部分です。 おそらく、PHPの&lt;a href=&quot;http://www.php.net/manual/en/book.mbstring.php&quot;&gt; &lt;code&gt;mbstring&lt;/code&gt; &lt;/a&gt;拡張機能を広範囲に使用したいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="48f40e3284384ba88de282b171078281c9e11cac" translate="yes" xml:space="preserve">
          <source>You'll also need to identify the character set of your responses. You can either use AddDefaultCharset, as above, or write PHP code that returns the header. (Or you can add a META tag to your HTML documents.)</source>
          <target state="translated">また、レスポンスの文字セットを特定する必要があります。上記のようにAddDefaultCharsetを使用するか、ヘッダを返すPHPコードを書くことができます。(または、HTML ドキュメントに META タグを追加することもできます)。</target>
        </trans-unit>
        <trans-unit id="21faa67da1fdbfe3a5a17ee67b0e79f4017e8bfc" translate="yes" xml:space="preserve">
          <source>conversion</source>
          <target state="translated">conversion</target>
        </trans-unit>
        <trans-unit id="d6b88f784ad82597b546d77bd5d819d1ae014a0d" translate="yes" xml:space="preserve">
          <source>good luck!</source>
          <target state="translated">頑張れ</target>
        </trans-unit>
        <trans-unit id="dc7ad30ba9ebdea9c06f78450dfe81e3e379c9e9" translate="yes" xml:space="preserve">
          <source>if you want a mysql solution,  I had similar issues with 2 of my projects, after a server migration. After searching and trying a lot of solutions i came across with this one /nothing before this one worked):</source>
          <target state="translated">あなたがmysqlのソリューションが必要な場合、私はサーバーの移行の後、私のプロジェクトの2つで同様の問題を抱えていました。検索し、多くのソリューションを試した後、私はこの1つの何もこの1つの前に働いていた)に出くわした。)</target>
        </trans-unit>
        <trans-unit id="5858c8fc80c96241aabb9bf1ac3cedfc7e5fde56" translate="yes" xml:space="preserve">
          <source>mb_ uses MultiByte. It supports more characters but in general is a little slower.</source>
          <target state="translated">mb_は MultiByte を使用しています。より多くの文字をサポートしていますが、一般的には少し遅いです。</target>
        </trans-unit>
        <trans-unit id="ca9725ab9df433013617c6d2b1f80b15fec7783f" translate="yes" xml:space="preserve">
          <source>mime encoding functionality</source>
          <target state="translated">マイム符号化機能</target>
        </trans-unit>
        <trans-unit id="6753bf8acd23a41246a8480a0f2c510fcd3782e5" translate="yes" xml:space="preserve">
          <source>mysql: Charset and collation on tables and on connection (not the collation). Also don't use mysql - msqli or PDO</source>
          <target state="translated">mysql.テーブル上で、接続上の文字セットと照合(照合ではなく)。また、mysqlを使用しないでください-msqliまたはPDO</target>
        </trans-unit>
        <trans-unit id="72878135f7c3cf76c8c397477c2b790c3bfe5f9a" translate="yes" xml:space="preserve">
          <source>postgresql: pg_set_client_encoding</source>
          <target state="translated">postgresql:pg_set_client_encoding</target>
        </trans-unit>
        <trans-unit id="e75417cec808d303c6a86e1996166bafc1abc546" translate="yes" xml:space="preserve">
          <source>re applying what you have learned from the answers of this question on a fresh data could solve your problem.</source>
          <target state="translated">この質問の答えから学んだことを新鮮なデータで応用することで、あなたの問題を解決できるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b6333cd52beca5bbacde284512084b655544c695" translate="yes" xml:space="preserve">
          <source>some string helpers (len, substr, strpos, strrpos)</source>
          <target state="translated">いくつかの文字列ヘルパー (len,substr,strpos,strrpos)</target>
        </trans-unit>
        <trans-unit id="ef364574a8f0d1be78900349f12be514ef88db95" translate="yes" xml:space="preserve">
          <source>sqlite(3): Make sure it was compiled with unicode and intl support</source>
          <target state="translated">sqlite(3)。unicode および intl サポートでコンパイルされていることを確認。</target>
        </trans-unit>
        <trans-unit id="2f27ef05bfa13338492e0888a52b4b98262e6258" translate="yes" xml:space="preserve">
          <source>that was all !</source>
          <target state="translated">以上</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
