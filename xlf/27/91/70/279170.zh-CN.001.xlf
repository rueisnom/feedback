<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/279170">
    <body>
      <group id="279170">
        <trans-unit id="06af4577aef7c6aa04de62a9e9affe6b5e40b70b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For HTML before HTML5 only&lt;/em&gt;: note that the W3C HTML spec says that clients &quot;should&quot; default to sending forms back to the server in whatever charset the server served, but this is apparently only a recommendation, hence the need for being explicit on every single &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;em&gt;仅对于HTML5之前的HTML&lt;/em&gt; ：请注意，W3C HTML规范指出，客户端&amp;ldquo;应该&amp;rdquo;默认使用服务器提供的任何字符集将表单发送回服务器，但这显然仅是建议，因此需要在每一个服务器上都明确 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标签。</target>
        </trans-unit>
        <trans-unit id="63a5e5ecb09bd491d8a8810b798d6527433245c9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For HTML before HTML5 only&lt;/em&gt;: you want all data sent to you by browsers to be in UTF-8.  Unfortunately, if you go by the the only way to reliably do this is add the &lt;code&gt;accept-charset&lt;/code&gt; attribute to all your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags: &lt;code&gt;&amp;lt;form ... accept-charset=&quot;UTF-8&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;仅适用于HTML5之前的HTML&lt;/em&gt; ：您希望浏览器发送给您的所有数据都使用UTF-8。 不幸的是，如果唯一可靠的方法是将 &lt;code&gt;accept-charset&lt;/code&gt; 属性添加到所有 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记： &lt;code&gt;&amp;lt;form ... accept-charset=&quot;UTF-8&quot;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8c51bc805d030d10018e00d31e67169a5f6f3c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DATABASES&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;DATABASES&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b578f9568f5e971f11c2590a5e8ca72330cedc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Access&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;资料存取&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="6eaab0ed7f59813378f7ec1bba3510d7ed00e863" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Storage&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;资料储存&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5fbf4a00d6a882121a802d2725d98940aaaeb108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edit:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Edit:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0104b54fcea146c5135352deefd00773ae9075b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ICONV&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ICONV&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b9faff448a1c9eb4a9b5e4cce892878666473b55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INTL&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;INTL&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1673cd90fc65534f0976e8f49b4fcd67b98478cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Input&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="fbe923d3cfa7af2e6086dda3a5d6845ee1e97481" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Other Code Considerations&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;其他代码注意事项&lt;/strong&gt; ：</target>
        </trans-unit>
        <trans-unit id="226c6d195092d25e48f4779200988ceb25b71b01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Output&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="d10301de7a9ca554fa4dac27ebbda55facc94927" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP's built-in string operations are &lt;em&gt;not&lt;/em&gt; by default UTF-8 safe.&lt;/strong&gt;  There are some things you can safely do with normal PHP string operations (like concatenation), but for most things you should use the equivalent &lt;code&gt;mbstring&lt;/code&gt; function.</source>
          <target state="translated">&lt;strong&gt;PHP的内置字符串操作默认情况下&lt;em&gt;不是&lt;/em&gt; UTF-8安全的。&lt;/strong&gt; 您可以使用正常的PHP字符串操作（例如串联）安全地进行某些操作，但是对于大多数事情，您应该使用等效的 &lt;code&gt;mbstring&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="2bf5005644d67207d699204077f6491c88ae0c49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Some other Gotchas&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;其他一些陷阱&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="743f380d56d8b8ea4558c5433cb1e69cdffd790c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_string&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mb_string&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e6ba71b4dfcb183a9c30569388266d19535ac62" translate="yes" xml:space="preserve">
          <source>A good library to check into is &lt;a href=&quot;http://phputf8.sourceforge.net/&quot;&gt;phputf8&lt;/a&gt;. This rewrites all of the &quot;bad&quot; functions so you can safely work on UTF8 strings. There are extensions like the mbstring extension that try to do this for you, too, but I prefer using the library because it's more portable (but I write mass-market products, so that's important for me). But phputf8 can use mbstring behind the scenes, anyway, to increase performance.</source>
          <target state="translated">&lt;a href=&quot;http://phputf8.sourceforge.net/&quot;&gt;phputf8&lt;/a&gt;是一个很好的库。 这将重写所有&amp;ldquo;不良&amp;rdquo;功能，因此您可以安全地处理UTF8字符串。 也有类似mbstring扩展的扩展尝试为您做到这一点，但是我更喜欢使用该库，因为它具有更高的可移植性（但是我写的是大众市场产品，所以对我来说很重要）。 但是phputf8可以在后台使用mbstring来提高性能。</target>
        </trans-unit>
        <trans-unit id="66be105f647b3b6d7fea9e91efdb0af8b57b0a5e" translate="yes" xml:space="preserve">
          <source>After adding  this line to my config file everything works fine!</source>
          <target state="translated">在我的配置文件中添加这一行后,一切都很顺利!</target>
        </trans-unit>
        <trans-unit id="ad2335ab936d79f64b8be9cdb644fc54d355f7e9" translate="yes" xml:space="preserve">
          <source>As a side note, I also discovered by running &lt;code&gt;mb_internal_encoding()&lt;/code&gt; that the internal encoding wasn't utf-8, and I changed that by running &lt;code&gt;mb_internal_encoding(&quot;UTF-8&quot;);&lt;/code&gt;.</source>
          <target state="translated">附带说明，我还通过运行 &lt;code&gt;mb_internal_encoding()&lt;/code&gt; 发现内部编码不是utf-8，并且通过运行 &lt;code&gt;mb_internal_encoding(&quot;UTF-8&quot;);&lt;/code&gt; 更改了内部编码。 。</target>
        </trans-unit>
        <trans-unit id="b1ff57d696aa3ec09bd76c88944e1a7097ee37a3" translate="yes" xml:space="preserve">
          <source>Bad:</source>
          <target state="translated">Bad:</target>
        </trans-unit>
        <trans-unit id="50d0051ba372bbd20fb081fe3197142413d36a87" translate="yes" xml:space="preserve">
          <source>Calendars, dates, timezone and time</source>
          <target state="translated">日历、日期、时区和时间</target>
        </trans-unit>
        <trans-unit id="71fdd7641faff64b3e623e8dd14f6178bec7555d" translate="yes" xml:space="preserve">
          <source>Collation</source>
          <target state="translated">Collation</target>
        </trans-unit>
        <trans-unit id="d042e4b29618ce17f584c5ea070221c0f7d91503" translate="yes" xml:space="preserve">
          <source>Convertors</source>
          <target state="translated">Convertors</target>
        </trans-unit>
        <trans-unit id="3efa3f00ec81206e84b7d8365bbb3c2536320aa7" translate="yes" xml:space="preserve">
          <source>Currency formatting</source>
          <target state="translated">货币格式化</target>
        </trans-unit>
        <trans-unit id="d5bb76d4f2af1da73cdec9cd996d21666b8aaa4b" translate="yes" xml:space="preserve">
          <source>Declaring character encodings in HTML</source>
          <target state="translated">在HTML中声明字符编码</target>
        </trans-unit>
        <trans-unit id="bb3692b8edda6477fc06e9567b300b75a2bba9f9" translate="yes" xml:space="preserve">
          <source>Does not support HTTP input output conversion</source>
          <target state="translated">不支持HTTP输入输出转换</target>
        </trans-unit>
        <trans-unit id="794ecab07a1cf25661dcd00aef43b87b9493cf8b" translate="yes" xml:space="preserve">
          <source>Does not support function overloading</source>
          <target state="translated">不支持功能超载</target>
        </trans-unit>
        <trans-unit id="7d6c707795a253449aa3897eabc13c82bba0f06d" translate="yes" xml:space="preserve">
          <source>Does not support zend_multibite</source>
          <target state="translated">不支持zend_multibite</target>
        </trans-unit>
        <trans-unit id="ac7607d30da804d7490261abc5759d7c4b829406" translate="yes" xml:space="preserve">
          <source>Don't forget the META tag either (like this, or &lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup&quot;&gt;the HTML4 or XHTML version of it&lt;/a&gt;):</source>
          <target state="translated">不要忘记META标记（例如，或&lt;a href=&quot;http://www.w3.org/International/questions/qa-html-encoding-declarations#quicklookup&quot;&gt;HTML4或XHTML版本&lt;/a&gt; ）：</target>
        </trans-unit>
        <trans-unit id="4f7b323d49c49bf74f1433d88c9d3b49aa763eb8" translate="yes" xml:space="preserve">
          <source>Enables zend_multibyte support</source>
          <target state="translated">启用zend_multibyte支持</target>
        </trans-unit>
        <trans-unit id="06c4ea17f2f205a02094fcf1a8c86a4cab0b049c" translate="yes" xml:space="preserve">
          <source>FAQ: Changing (X)HTML page encoding to UTF-8</source>
          <target state="translated">常见问题。将(X)HTML页面编码改为UTF-8编码</target>
        </trans-unit>
        <trans-unit id="a6697dfee4d67a3e60a8f6e5b3ab085570c9806b" translate="yes" xml:space="preserve">
          <source>First of all if you are in &amp;lt; 5.3PHP then no. You've got a ton of problems to tackle.</source>
          <target state="translated">首先，如果您使用的是&amp;lt;5.3PHP，则不会。 您有很多问题要解决。</target>
        </trans-unit>
        <trans-unit id="8948689b97542f60657f89c506bc510f2f9aa1ba" translate="yes" xml:space="preserve">
          <source>From my reading of the current &lt;a href=&quot;http://whatwg.org/html&quot;&gt;HTML spec&lt;/a&gt;, the following sub-bullets are not necessary or even valid anymore for modern HTML.  My understanding is that browsers will work with and submit data in the character set specified for the document.  However, if you're targeting older versions of HTML (XHTML, HTML4, etc.), these points may still be useful:</source>
          <target state="translated">从我对当前&lt;a href=&quot;http://whatwg.org/html&quot;&gt;HTML规范的&lt;/a&gt;阅读中，对于现代HTML ，以下子项目不再是必需的，甚至不再有效。 我的理解是，浏览器将使用为文档指定的字符集并提交数据。 但是，如果您定位的是旧版HTML（XHTML，HTML4等），则以下几点可能仍然有用：</target>
        </trans-unit>
        <trans-unit id="f179b6f36465b5aac2f67605586252775def9c70" translate="yes" xml:space="preserve">
          <source>Good:</source>
          <target state="translated">Good:</target>
        </trans-unit>
        <trans-unit id="b79d7de20905687ddf09552514a209f7642eb172" translate="yes" xml:space="preserve">
          <source>Graphemes</source>
          <target state="translated">Graphemes</target>
        </trans-unit>
        <trans-unit id="a47ced5ebf103e6f29aef86c197000fed6c93968" translate="yes" xml:space="preserve">
          <source>I am surprised that none has mentioned the &lt;a href=&quot;http://php.net/intl&quot;&gt;&lt;strong&gt;intl&lt;/strong&gt;&lt;/a&gt; library, the one that has good support for &lt;strong&gt;unicode&lt;/strong&gt;, &lt;strong&gt;graphemes&lt;/strong&gt;, &lt;strong&gt;string operations&lt;/strong&gt; , &lt;strong&gt;localisation&lt;/strong&gt; and many more, see below.</source>
          <target state="translated">令我惊讶的是，没有人提到&lt;a href=&quot;http://php.net/intl&quot;&gt;&lt;strong&gt;intl&lt;/strong&gt;&lt;/a&gt;库，该库对&lt;strong&gt;unicode&lt;/strong&gt; ， &lt;strong&gt;graphemes&lt;/strong&gt; ， &lt;strong&gt;字符串操作&lt;/strong&gt; ， &lt;strong&gt;本地化&lt;/strong&gt;等提供了很好的支持，请参见下文。</target>
        </trans-unit>
        <trans-unit id="63a7aca8ab1413b2b54336381660a056df51aae1" translate="yes" xml:space="preserve">
          <source>I changed all my file encoding to UTF8 then the default encoding on my connection. This solved all the problems.</source>
          <target state="translated">我把我所有的文件编码都改成了UTF8,然后在我的连接上改成了默认的编码。这解决了所有的问题。</target>
        </trans-unit>
        <trans-unit id="7d04fad80998f11575c6ef10a584a7f72a849404" translate="yes" xml:space="preserve">
          <source>I found an issue with someone using PDO and the answer was to use this for the PDO connection string:</source>
          <target state="translated">我发现有人在使用PDO的时候发现了一个问题,答案是用这个来做PDO连接字符串。</target>
        </trans-unit>
        <trans-unit id="adf8e4bcbc3f4fb1f02131328680ee49d7ad4623" translate="yes" xml:space="preserve">
          <source>I found this solution &lt;a href=&quot;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&quot;&gt;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&lt;/a&gt; when i was looking to solve a insert from html query</source>
          <target state="translated">当我想解决html查询中的插入内容时，我找到了这个解决方案&lt;a href=&quot;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&quot;&gt;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3712718493dedcde16dfe00371c49ad1e75c3d08" translate="yes" xml:space="preserve">
          <source>I have just went through the same issue and found a good solution at PHP manuals.</source>
          <target state="translated">我刚刚经历了同样的问题,在PHP手册上找到了一个很好的解决方案。</target>
        </trans-unit>
        <trans-unit id="cbe87772a90cce5e56d7f7bcd63502aa95584759" translate="yes" xml:space="preserve">
          <source>I ll update this answer in case things change features added and so on.</source>
          <target state="translated">我将更新这个答案,以备不时之需。</target>
        </trans-unit>
        <trans-unit id="03011cd320b77197c5142401ea09ade77de5ac83" translate="yes" xml:space="preserve">
          <source>I recently discovered that using &lt;code&gt;strtolower()&lt;/code&gt; can cause issues where the data is truncated after a special character.</source>
          <target state="translated">我最近发现，使用 &lt;code&gt;strtolower()&lt;/code&gt; 可能会导致数据在特殊字符后被截断的问题。</target>
        </trans-unit>
        <trans-unit id="21120a9ba534d136733cce10663a538aca732686" translate="yes" xml:space="preserve">
          <source>I was doing everything right; the database, database connection and Content-Type HTTP header were all set to UTF-8, and it worked fine in all other browsers, but Internet Explorer still insisted on using the &quot;Western European&quot; encoding.</source>
          <target state="translated">我所做的一切都是正确的;数据库、数据库连接和内容类型HTTP头都被设置为UTF-8,在其他浏览器中都能正常工作,但Internet Explorer仍然坚持使用 &quot;西欧 &quot;编码。</target>
        </trans-unit>
        <trans-unit id="f3f6cf01462325f4e47dbce87e5164dfc905c429" translate="yes" xml:space="preserve">
          <source>I will quote some information about unicode support in PHP by &lt;strong&gt;Elizabeth Smith's&lt;/strong&gt;&lt;a href=&quot;http://www.slideshare.net/auroraeosrose/using-unicode-with-php&quot;&gt;slides&lt;/a&gt; at &lt;strong&gt;PHPBenelux'14&lt;/strong&gt;</source>
          <target state="translated">我将引用&lt;strong&gt;伊丽莎白&amp;middot;史密斯&lt;/strong&gt; （ &lt;strong&gt;Elizabeth Smith）&lt;/strong&gt;在&lt;strong&gt;PHPBenelux'14上&lt;/strong&gt; &lt;strong&gt;的&lt;/strong&gt; &lt;a href=&quot;http://www.slideshare.net/auroraeosrose/using-unicode-with-php&quot;&gt;幻灯片&lt;/a&gt;中有关PHP的Unicode支持的一些信息</target>
        </trans-unit>
        <trans-unit id="770525ab9fd169302211602b74e1ddefc1417f52" translate="yes" xml:space="preserve">
          <source>I'd like to add one thing to &lt;a href=&quot;https://stackoverflow.com/questions/279170/utf-8-all-the-way-through#279279&quot;&gt;chazomaticus' excellent answer&lt;/a&gt;:</source>
          <target state="translated">我想在&lt;a href=&quot;https://stackoverflow.com/questions/279170/utf-8-all-the-way-through#279279&quot;&gt;chazomaticus的出色答案中&lt;/a&gt;添加一件事：</target>
        </trans-unit>
        <trans-unit id="c0a702df3182396e3f9bc9b7512198794c576da5" translate="yes" xml:space="preserve">
          <source>I'm setting up a new server and want to support UTF-8 fully in my web application. I have tried this in the past on existing servers and always seem to end up having to fall back to ISO-8859-1.</source>
          <target state="translated">我正在建立一个新的服务器,想在我的网络应用中完全支持UTF-8。我过去曾在现有的服务器上尝试过,但最后似乎总是不得不返回到ISO-8859-1。</target>
        </trans-unit>
        <trans-unit id="35d3d2d3404abeb8346dba6488194ef8d13aafd7" translate="yes" xml:space="preserve">
          <source>IDN support</source>
          <target state="translated">IDN支持</target>
        </trans-unit>
        <trans-unit id="682b756eeb7b8de097992166c3aca915f1ccf3b0" translate="yes" xml:space="preserve">
          <source>If the driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-connection.html&quot;&gt;&lt;code&gt;SET NAMES 'utf8mb4'&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果驱动程序不提供自己的设置连接字符集的机制，则可能必须发出查询以告知MySQL您的应用程序希望连接上的数据如何被编码： &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-connection.html&quot;&gt; &lt;code&gt;SET NAMES 'utf8mb4'&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfe4b018ffc2451f02a8054a2d60f5a06e25c89b" translate="yes" xml:space="preserve">
          <source>If you want MySQL server to decide character set, and not PHP as a client (old behaviour; preferred, in my opinion), try adding &lt;code&gt;skip-character-set-client-handshake&lt;/code&gt; to your &lt;code&gt;my.cnf&lt;/code&gt;, under &lt;code&gt;[mysqld]&lt;/code&gt;, and restart &lt;code&gt;mysql&lt;/code&gt;.</source>
          <target state="translated">如果您希望MySQL服务器决定字符集，而不是PHP作为客户端（旧的行为；我认为首选），请尝试在 &lt;code&gt;[mysqld]&lt;/code&gt; 下的 &lt;code&gt;my.cnf&lt;/code&gt; 中添加 &lt;code&gt;skip-character-set-client-handshake&lt;/code&gt; shake 。重新启动 &lt;code&gt;mysql&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b48374e9bd1777c30f301bbd9674e2da8787a738" translate="yes" xml:space="preserve">
          <source>If you're stuck with plain &lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot;&gt;mysql&lt;/a&gt; but happen to be running PHP &amp;ge; 5.2.3, you can call &lt;a href=&quot;http://php.net/manual/en/function.mysql-set-charset.php&quot;&gt;&lt;code&gt;mysql_set_charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果您坚持使用普通的&lt;a href=&quot;http://php.net/manual/en/book.mysql.php&quot;&gt;mysql，&lt;/a&gt;但碰巧正在运行PHP&amp;ge;5.2.3，则可以调用&lt;a href=&quot;http://php.net/manual/en/function.mysql-set-charset.php&quot;&gt; &lt;code&gt;mysql_set_charset&lt;/code&gt; &lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9335d436ae15d41a84ad0b6a7a0f197c72f6f00b" translate="yes" xml:space="preserve">
          <source>If you're using &lt;a href=&quot;http://www.php.net/manual/en/book.mysqli.php&quot;&gt;mysqli&lt;/a&gt;, you can call &lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot;&gt;&lt;code&gt;set_charset()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">如果您使用的是&lt;a href=&quot;http://www.php.net/manual/en/book.mysqli.php&quot;&gt;mysqli&lt;/a&gt; ，则可以调用&lt;a href=&quot;http://php.net/manual/en/mysqli.set-charset.php&quot;&gt; &lt;code&gt;set_charset()&lt;/code&gt; &lt;/a&gt; ：</target>
        </trans-unit>
        <trans-unit id="fefe169ac2e400b0fc6ab51769c9866a48bc28e9" translate="yes" xml:space="preserve">
          <source>If you're using the &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; abstraction layer with PHP &amp;ge; 5.3.6, you can specify &lt;code&gt;charset&lt;/code&gt; in the &lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;DSN&lt;/a&gt;:</source>
          <target state="translated">如果您使用&lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PHP&amp;ge;5.3.6的PDO&lt;/a&gt;抽象层，则可以在&lt;a href=&quot;http://php.net/manual/en/ref.pdo-mysql.connection.php&quot;&gt;DSN中&lt;/a&gt;指定 &lt;code&gt;charset&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1898bc147327787e953f78d4016b5c48e60e87ad" translate="yes" xml:space="preserve">
          <source>If your application transmits text to other systems, they will also need to be informed of the character encoding.  With web applications, the browser must be informed of the encoding in which data is sent (through HTTP response headers or &lt;a href=&quot;https://stackoverflow.com/q/4696499&quot;&gt;HTML metadata&lt;/a&gt;).</source>
          <target state="translated">如果您的应用程序将文本传输到其他系统，则还需要告知他们字符编码。 对于Web应用程序，必须告知浏览器发送数据的编码（通过HTTP响应标头或&lt;a href=&quot;https://stackoverflow.com/q/4696499&quot;&gt;HTML元数据&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a129ed10d5f803fb83e471303457dc258c00ea47" translate="yes" xml:space="preserve">
          <source>In PHP, you can use the &lt;a href=&quot;http://www.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt;&lt;code&gt;default_charset&lt;/code&gt;&lt;/a&gt; php.ini option, or manually issue the &lt;code&gt;Content-Type&lt;/code&gt; MIME header yourself, which is just more work but has the same effect.</source>
          <target state="translated">在PHP中，您可以使用&lt;a href=&quot;http://www.php.net/manual/en/ini.core.php#ini.default-charset&quot;&gt; &lt;code&gt;default_charset&lt;/code&gt; &lt;/a&gt; php.ini选项，或者自己手动发出 &lt;code&gt;Content-Type&lt;/code&gt; MIME标头，这虽然工作更多，但效果相同。</target>
        </trans-unit>
        <trans-unit id="f8b2b69a6838665fed13eb36c4fcec2f4b757c01" translate="yes" xml:space="preserve">
          <source>In PHP, you'll need to either use the &lt;a href=&quot;http://us2.php.net/manual/en/ref.mbstring.php&quot;&gt;multibyte functions&lt;/a&gt;, or turn on &lt;a href=&quot;http://us2.php.net/manual/en/mbstring.configuration.php&quot;&gt;mbstring.func_overload&lt;/a&gt;. That way things like strlen will work if you have characters that take more than one byte.</source>
          <target state="translated">在PHP中，您将需要使用&lt;a href=&quot;http://us2.php.net/manual/en/ref.mbstring.php&quot;&gt;多字节函数&lt;/a&gt;或打开&lt;a href=&quot;http://us2.php.net/manual/en/mbstring.configuration.php&quot;&gt;mbstring.func_overload&lt;/a&gt; 。 这样，如果您使用的字符超过一个字节，strlen之类的东西就可以工作。</target>
        </trans-unit>
        <trans-unit id="fd2b6ceb2f874d60fca2e4bd22ed6eeb8d7bd6c0" translate="yes" xml:space="preserve">
          <source>In addition to setting &lt;code&gt;default_charset&lt;/code&gt; in php.ini, you can send the correct charset using &lt;code&gt;header()&lt;/code&gt; from within your code, before any output:</source>
          <target state="translated">除了在php.ini中设置 &lt;code&gt;default_charset&lt;/code&gt; 之外，还可以在任何输出之前使用代码中的 &lt;code&gt;header()&lt;/code&gt; 发送正确的字符集：</target>
        </trans-unit>
        <trans-unit id="fe91ce9865b5ecd79f40561addba9ba37c3cced6" translate="yes" xml:space="preserve">
          <source>In my case, I was using &lt;code&gt;mb_split&lt;/code&gt;, which uses regex.  Therefore I also had to manually make sure the regex encoding was utf-8 by doing &lt;code&gt;mb_regex_encoding('UTF-8');&lt;/code&gt;</source>
          <target state="translated">就我而言，我使用的是 &lt;code&gt;mb_split&lt;/code&gt; ，它使用了正则表达式。 因此，我还必须通过执行 &lt;code&gt;mb_regex_encoding('UTF-8');&lt;/code&gt; 来手动确保regex编码为utf-8 ；</target>
        </trans-unit>
        <trans-unit id="632241254f08ee5d73bd409b1d0c460dc9788224" translate="yes" xml:space="preserve">
          <source>In older versions of MySQL (&amp;lt; 5.5.3), you'll unfortunately be forced to use simply &lt;code&gt;utf8&lt;/code&gt;, which only supports a subset of Unicode characters.  I wish I were kidding.</source>
          <target state="translated">在旧版本的MySQL（&amp;lt;5.5.3）中，不幸的是，您将被迫仅使用 &lt;code&gt;utf8&lt;/code&gt; ，后者仅支持Unicode字符的子集。 我希望我在开玩笑。</target>
        </trans-unit>
        <trans-unit id="912a06bcfd3e9f52c102e2c87f7a921de2afc61b" translate="yes" xml:space="preserve">
          <source>In your application code (e.g. PHP), in whatever DB access method you use, you'll need to set the connection charset to &lt;code&gt;utf8mb4&lt;/code&gt;.  This way, MySQL does no conversion from its native UTF-8 when it hands data off to your application and vice versa.</source>
          <target state="translated">在您的应用程序代码（例如PHP）中，无论使用 &lt;code&gt;utf8mb4&lt;/code&gt; 数据库访问方法，都需要将连接字符集设置为utf8mb4 。 这样，当MySQL将数据交给您的应用程序时，MySQL不会从其本地UTF-8进行转换，反之亦然。</target>
        </trans-unit>
        <trans-unit id="0172cb92edbbc5688d0590b316c09f7a6bbc4e25" translate="yes" xml:space="preserve">
          <source>It turned out the page was missing the META tag. Adding that solved the problem.</source>
          <target state="translated">原来是页面缺少meta标签。添加了这个标签后,问题就解决了。</target>
        </trans-unit>
        <trans-unit id="909a5f0dfd8c3a4ef79cd1458e2b5fb136ad7fae" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iterators</target>
        </trans-unit>
        <trans-unit id="85cccc55a91ff650683ca4dcbe18b519c3e551fa" translate="yes" xml:space="preserve">
          <source>Just a note:</source>
          <target state="translated">我只是想说明一下。</target>
        </trans-unit>
        <trans-unit id="cb62b45096d74bf04e878b551336ed27b3e70bfb" translate="yes" xml:space="preserve">
          <source>Message formatting (replaces gettext)</source>
          <target state="translated">消息格式化(取代gettext)</target>
        </trans-unit>
        <trans-unit id="2918c4d5af1ec648f31fc83cb72666722f8d463c" translate="yes" xml:space="preserve">
          <source>Number formatting</source>
          <target state="translated">数字格式化</target>
        </trans-unit>
        <trans-unit id="c2e15a99804f3111c87710df5b8bbc36c1b58676" translate="yes" xml:space="preserve">
          <source>Obviously enough, all files you'll be serving (PHP, HTML, JavaScript, etc.) should be encoded in valid UTF-8.</source>
          <target state="translated">很显然,你要提供的所有文件(PHP、HTML、JavaScript等)都应该用有效的UTF-8编码。</target>
        </trans-unit>
        <trans-unit id="7a5f4b2172d0ba6cdfc6374714fe97f6276fa2ba" translate="yes" xml:space="preserve">
          <source>Output buffer handler</source>
          <target state="translated">输出缓冲区处理程序</target>
        </trans-unit>
        <trans-unit id="26f5d9263b944f4ffea960d76ef426383723d981" translate="yes" xml:space="preserve">
          <source>Plain text is not plain text, files have encodings</source>
          <target state="translated">纯文本不是纯文本,文件有编码的。</target>
        </trans-unit>
        <trans-unit id="224f0139fffbe62aa800883b0c73169a34b8189f" translate="yes" xml:space="preserve">
          <source>Primary for charset conversion</source>
          <target state="translated">主要用于字符集转换</target>
        </trans-unit>
        <trans-unit id="3c79dbd6ac5538d78945198363b90c930673b12a" translate="yes" xml:space="preserve">
          <source>Provides some wrappers for funtionallity such as strtoupper</source>
          <target state="translated">提供了一些包装材料,如strtoupper等。</target>
        </trans-unit>
        <trans-unit id="02be837b723fb590d4a8ea4f2058a4f78cd91434" translate="yes" xml:space="preserve">
          <source>Resource bundles</source>
          <target state="translated">资源包</target>
        </trans-unit>
        <trans-unit id="a37fde2217f946af090ae60ac59301f33e9bece6" translate="yes" xml:space="preserve">
          <source>Send everything in ASCII if you are using exec, proc_open and other command line calls</source>
          <target state="translated">如果你使用exec、proc_open和其他命令行调用,请以ASCII格式发送所有内容。</target>
        </trans-unit>
        <trans-unit id="65ad3613d563f20af3dd93010f55f976016b3a60" translate="yes" xml:space="preserve">
          <source>Setting the HTTP charset parameter</source>
          <target state="translated">设置HTTP charset参数</target>
        </trans-unit>
        <trans-unit id="637e537c6a0662f94014b3a6e3ff7ff53ba32088" translate="yes" xml:space="preserve">
          <source>Some drivers provide their own mechanism for configuring the connection character set, which both updates its own internal state and informs MySQL of the encoding to be used on the connection&amp;mdash;this is usually the preferred approach.   In PHP:</source>
          <target state="translated">一些驱动程序提供了自己的配置连接字符集的机制，该机制既可以更新其内部状态，又可以将要在连接上使用的编码通知MySQL-这通常是首选方法。 在PHP中：</target>
        </trans-unit>
        <trans-unit id="207a48134f0b853aa739eb8c5d3372fb7a7e2ef7" translate="yes" xml:space="preserve">
          <source>Sometime ago i had someone ask me to add utf8 support for a php/mysql application designed by someone else, i noticed that all files were encoded in ANSI, so I had to use ICONV to convert all files, change the database tables to use the utf8 charset and utf8_general_ci collate, add 'SET NAMES utf8' to the database abstraction layer after the connection (if using 5.3.6 or earlier otherwise you have to use charset=utf8 in the connection string) and change string functions to use the php multibyte string functions equivalent.</source>
          <target state="translated">前段时间,有人让我为别人设计的phpmysql程序添加utf8支持,我注意到所有的文件都是用ANSI编码,所以我必须用ICONV转换所有的文件,把数据库表改成使用utf8 charset和utf8_general_ci collate,在连接后的数据库抽象层添加'SET NAMES utf8'(如果使用5.3.6或更早的版本,否则必须在连接字符串中使用charset=utf8),并把字符串函数改成与php多字节字符串函数相当的函数。 3.6或更早的版本,否则必须在连接字符串中使用charset=utf8),并将字符串函数改为使用php的多字节字符串函数等效。</target>
        </trans-unit>
        <trans-unit id="b7ca532411e2a0f37bc7c62898bcacc6895fc8b7" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;utf8mb4&lt;/code&gt; character set on all tables and text columns in your database.  This makes MySQL physically store and retrieve values encoded natively in UTF-8.  Note that MySQL will implicitly use &lt;code&gt;utf8mb4&lt;/code&gt; encoding if a &lt;code&gt;utf8mb4_*&lt;/code&gt; collation is specified (without any explicit character set).</source>
          <target state="translated">在数据库的所有表和文本列上指定 &lt;code&gt;utf8mb4&lt;/code&gt; 字符集。 这使得MySQL在物理上存储和检索以UTF-8本地编码的值。 请注意，如果指定了 &lt;code&gt;utf8mb4_*&lt;/code&gt; 排序规则（没有任何显式字符集），则MySQL将隐式使用 &lt;code&gt;utf8mb4&lt;/code&gt; 编码。</target>
        </trans-unit>
        <trans-unit id="01ef8e43542fd0225f4be2d16d90a14a1985274c" translate="yes" xml:space="preserve">
          <source>Spoofchecker</source>
          <target state="translated">Spoofchecker</target>
        </trans-unit>
        <trans-unit id="b7adc98398543c6ac7fdfa87ff652b753458844a" translate="yes" xml:space="preserve">
          <source>Standardised locales, set locale per script</source>
          <target state="translated">标准化的地域,每个脚本设置地域。</target>
        </trans-unit>
        <trans-unit id="9cef3ed7b1d2767b1b75b7e0cfa79ac5b57098ba" translate="yes" xml:space="preserve">
          <source>Stream Filter &lt;code&gt;stream_filter_append($fp, 'convert.iconv.ISO-2022-JP/EUC-JP')&lt;/code&gt;</source>
          <target state="translated">流过滤器 &lt;code&gt;stream_filter_append($fp, 'convert.iconv.ISO-2022-JP/EUC-JP')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f5b5d04b61b87167f4ce215be3349bb000ca275" translate="yes" xml:space="preserve">
          <source>Supports transparent HTTP in/out encoding</source>
          <target state="translated">支持透明的HTTP输入输出编码</target>
        </trans-unit>
        <trans-unit id="582d3a55d7d8925dbd67239e75e1aca1a73af2a6" translate="yes" xml:space="preserve">
          <source>That is mostly because you are testing on &lt;strong&gt;your old data&lt;/strong&gt; which has been inserted to the database using the wrong charset and got converted and stored to actually the question mark characters &lt;code&gt;?&lt;/code&gt;. Which means you lost your original text forever and no matter what you try you will get &lt;code&gt;???????&lt;/code&gt;.</source>
          <target state="translated">这主要是因为您正在测试&lt;strong&gt;旧数据&lt;/strong&gt; ，这些&lt;strong&gt;旧数据&lt;/strong&gt;已使用错误的字符集插入数据库，并已转换并存储为实际的问号字符 &lt;code&gt;?&lt;/code&gt; 。 这意味着您将永远失去原始文本，无论您尝试什么，都将得到 &lt;code&gt;???????&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f9a141ac6949a7ea66b109b173df0117edc8e5e" translate="yes" xml:space="preserve">
          <source>That seems trivial, but IE7 has given me problems with that before.</source>
          <target state="translated">这似乎微不足道,但IE7之前就给我出过这样的问题。</target>
        </trans-unit>
        <trans-unit id="10b31519efe292a65c45c4715e1cf4bb614c331d" translate="yes" xml:space="preserve">
          <source>The W3C actually has a rather large &lt;a href=&quot;http://www.w3.org/International/&quot;&gt;section dedicated to I18N&lt;/a&gt;. They have a number of articles related to this issue &amp;ndash; describing the HTTP, (X)HTML and CSS side of things:</source>
          <target state="translated">实际上，W3C有很大&lt;a href=&quot;http://www.w3.org/International/&quot;&gt;一部分专用于I18N&lt;/a&gt; 。 他们有许多与此问题相关的文章-描述了HTTP，（X）HTML和CSS方面的内容：</target>
        </trans-unit>
        <trans-unit id="4f49ce6fbca1578d556973165019742531ed7c7a" translate="yes" xml:space="preserve">
          <source>The easy part is just specifying the charset in HTTP headers and in the database and such, but none of that matters if your PHP code doesn't output valid UTF8. That's the hard part, and PHP gives you virtually no help there. (I think PHP6 is supposed to fix the worst of this, but that's still a while away)</source>
          <target state="translated">最简单的部分就是在HTTP headers和数据库中指定字符集,但如果你的PHP代码不能输出有效的UTF8,这些都不重要。这是最难的部分,PHP几乎没有给你任何帮助。我认为 PHP6 应该可以解决这个问题,但这还需要一段时间)。</target>
        </trans-unit>
        <trans-unit id="2eca6cfca3016461d976cf886468837372d8ba57" translate="yes" xml:space="preserve">
          <source>The only thing I would add to these amazing answers is to emphasize on saving your files in utf8 encoding, i have noticed that browsers accept this property over setting utf8 as your code encoding. Any decent text editor will show you this, for example Notepad++ has a menu option for file enconding, it shows you the current encoding and enables you to change it. For all my php files I use utf8 without BOM.</source>
          <target state="translated">我唯一要补充的就是强调的是将文件保存为utf8编码,我注意到浏览器接受这个属性,而不是将utf8设置为代码编码。任何像样的文本编辑器都会告诉你这个,例如Notepad++有一个文件编码的菜单选项,它可以显示当前的编码并让你改变它。对于我所有的php文件,我都是用utf8,没有BOM。</target>
        </trans-unit>
        <trans-unit id="aabb4fa7740be048d6bc94be8a99701c67c6887f" translate="yes" xml:space="preserve">
          <source>The same consideration regarding &lt;code&gt;utf8mb4&lt;/code&gt;/&lt;code&gt;utf8&lt;/code&gt; applies as above.</source>
          <target state="translated">如上所述，关于 &lt;code&gt;utf8mb4&lt;/code&gt; / &lt;code&gt;utf8&lt;/code&gt; 的注意事项相同。</target>
        </trans-unit>
        <trans-unit id="d3149418384152b6a8646b1e2c84fb2829d07735" translate="yes" xml:space="preserve">
          <source>The site I took this from is down, but I was able to get it using the Google cache, luckily.</source>
          <target state="translated">我从这个网站上取下来的网站已经停机了,但我能够用谷歌的缓存来获得它,幸运的是。</target>
        </trans-unit>
        <trans-unit id="de921e19c600d4a63955aee66d84ee2993f8c2d6" translate="yes" xml:space="preserve">
          <source>The solution was to use</source>
          <target state="translated">解决办法是使用</target>
        </trans-unit>
        <trans-unit id="8d7f8223526b4dbca13f549494d81749c27ce04c" translate="yes" xml:space="preserve">
          <source>The top answer is excellent. Here is what I had to on a regular debian/php/mysql setup:</source>
          <target state="translated">上面的回答很好。下面是我在一个常规的debianphpmysql设置中的情况。</target>
        </trans-unit>
        <trans-unit id="2fcce31f6cb0431af1d8ba6779198785476b7250" translate="yes" xml:space="preserve">
          <source>They recommend using both the HTTP header and HTML meta tag (or XML declaration in case of XHTML served as XML).</source>
          <target state="translated">他们建议同时使用HTTP头和HTML元标签(如果是XHTML作为XML服务,则使用XML声明)。</target>
        </trans-unit>
        <trans-unit id="e4ad4bf1f1a927d88ec22e472c9e6b3808e51204" translate="yes" xml:space="preserve">
          <source>This is for a new Linux server, running MySQL 5, PHP, 5 and Apache 2.</source>
          <target state="translated">这是一个新的Linux服务器,运行MySQL 5、PHP、5和Apache 2。</target>
        </trans-unit>
        <trans-unit id="8fa896fbfc35af84e91997a19fde7a200f6410dd" translate="yes" xml:space="preserve">
          <source>This may cause troubles in case you're using anything other than UTF8.</source>
          <target state="translated">如果你使用的是UTF8以外的东西,这可能会造成麻烦。</target>
        </trans-unit>
        <trans-unit id="5a622fad92083ea56438e393bc329df640736daa" translate="yes" xml:space="preserve">
          <source>To know what you're doing (read: not mess it up), you really need to know UTF-8 and how it works on the lowest possible level.  Check out any of the links from &lt;a href=&quot;http://www.utf8.com/&quot;&gt;utf8.com&lt;/a&gt; for some good resources to learn everything you need to know.</source>
          <target state="translated">要知道您在做什么（请阅读：不要搞砸），您确实需要了解UTF-8及其在最低级别上的工作方式。 查看&lt;a href=&quot;http://www.utf8.com/&quot;&gt;utf8.com上的&lt;/a&gt;任何链接， 以获取一些好的资源，以学习您需要了解的所有内容。</target>
        </trans-unit>
        <trans-unit id="ba455ba021d7ce65308fca89d0584483a47a8d4e" translate="yes" xml:space="preserve">
          <source>Transliterator</source>
          <target state="translated">Transliterator</target>
        </trans-unit>
        <trans-unit id="efa99878bac8950b369b416ed67b7da66d18ad86" translate="yes" xml:space="preserve">
          <source>Tutorial: Character sets &amp;amp; encodings in XHTML, HTML and CSS</source>
          <target state="translated">教程：XHTML，HTML和CSS中的字符集和编码</target>
        </trans-unit>
        <trans-unit id="1a737ada225b54daf9665a302016b367189c3214" translate="yes" xml:space="preserve">
          <source>UTF-8 all the way through</source>
          <target state="translated">UTF-8一路走来</target>
        </trans-unit>
        <trans-unit id="4f626a9b47979a2a7f85ee3a003879389665a7e2" translate="yes" xml:space="preserve">
          <source>Unfortunately, you should verify every received string as being valid UTF-8 before you try to store it or use it anywhere.  PHP's &lt;a href=&quot;http://php.net/manual/en/function.mb-check-encoding.php&quot;&gt;&lt;code&gt;mb_check_encoding()&lt;/code&gt;&lt;/a&gt; does the trick, but you have to use it religiously.  There's really no way around this, as malicious clients can submit data in whatever encoding they want, and I haven't found a trick to get PHP to do this for you reliably.</source>
          <target state="translated">不幸的是，在尝试存储或在任何地方使用它之前，您应该验证每个接收到的字符串都是有效的UTF-8。 PHP的&lt;a href=&quot;http://php.net/manual/en/function.mb-check-encoding.php&quot;&gt; &lt;code&gt;mb_check_encoding()&lt;/code&gt; &lt;/a&gt;可以达到目的，但您必须谨慎使用。 真的没有办法解决这个问题，因为恶意客户端可以使用他们想要的任何编码来提交数据，而且我还没有找到使PHP可靠地为您执行此操作的技巧。</target>
        </trans-unit>
        <trans-unit id="bbbae2a97b532d10d05a657f576cdb6b71bc1b68" translate="yes" xml:space="preserve">
          <source>Unicode support in PHP is still a huge mess. While it's capable of converting an ISO8859 string (which it uses internally) to utf8, it lacks the capability to work with unicode strings natively, which means all the string processing functions will mangle and corrupt your strings. So you have to either use a separate library for proper utf8 support, or rewrite all the string handling functions yourself.</source>
          <target state="translated">PHP中对Unicode的支持仍然是个大问题。虽然它能够将ISO8859字符串(它内部使用的)转换为utf8,但它缺乏处理unicode字符串的能力,这意味着所有的字符串处理函数都会把你的字符串弄乱和损坏。所以你必须使用一个单独的库来支持utf8,或者自己重写所有的字符串处理函数。</target>
        </trans-unit>
        <trans-unit id="accd4b912118c7e4a7de25740b3e4c5a2c86712e" translate="yes" xml:space="preserve">
          <source>View Source</source>
          <target state="translated">查看来源</target>
        </trans-unit>
        <trans-unit id="48675f90267ddcde6fd852648cbdedc142bb7d96" translate="yes" xml:space="preserve">
          <source>When encoding the output using &lt;code&gt;json_encode()&lt;/code&gt;, add &lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt; as a second parameter.</source>
          <target state="translated">使用 &lt;code&gt;json_encode()&lt;/code&gt; 对输出进行编码时，请添加 &lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt; 作为第二个参数。</target>
        </trans-unit>
        <trans-unit id="15727aa8a979f4b718bd9a96ec3508ca46061cc8" translate="yes" xml:space="preserve">
          <source>Where exactly do I need to set the encoding/charsets? I'm aware that I need to configure Apache, MySQL, and PHP to do this &amp;mdash; is there some standard checklist I can follow, or perhaps troubleshoot where the mismatches occur?</source>
          <target state="translated">我到底需要在哪里设置编码/字符集？ 我知道我需要配置Apache，MySQL和PHP来执行此操作-是否可以遵循一些标准清单，或者对出现不匹配的地方进行故障排除？</target>
        </trans-unit>
        <trans-unit id="cbbf06985cb0082a248a4aaa3458b7838a14f917" translate="yes" xml:space="preserve">
          <source>Working with Unicode in PHP is easy as long as you realize that most of the &lt;strong&gt;string functions don't work with Unicode, and some might mangle strings completely&lt;/strong&gt;. PHP considers &quot;characters&quot; to be 1 byte long. Sometimes this is okay (for example, &lt;code&gt;explode()&lt;/code&gt; only looks for a byte sequence and uses it as a separator -- so it doesn't matter what actual characters you look for). But other times, when the function is actually designed to work on &lt;em&gt;characters&lt;/em&gt;, PHP has no idea that your text has multi-byte characters that are found with Unicode.</source>
          <target state="translated">只要您意识到大多数&lt;strong&gt;字符串函数不适用于Unicode，并且某些字符串函数可能会完全破坏字符串，&lt;/strong&gt;在PHP中使用Unicode就很容易。 PHP认为&amp;ldquo;字符&amp;rdquo;的长度为1个字节。 有时这是可以的（例如， &lt;code&gt;explode()&lt;/code&gt; 仅查找字节序列并将其用作分隔符，因此，无论要查找什么实际字符都没有关系）。 但是有时候，当该函数实际上是设计用于&lt;em&gt;字符时&lt;/em&gt; ，PHP不知道您的文本具有使用Unicode找到的多字节字符。</target>
        </trans-unit>
        <trans-unit id="6655db021e6fed68cec4c59ba76e1b3c487b6f57" translate="yes" xml:space="preserve">
          <source>Wrapper around ICU library</source>
          <target state="translated">ICU图书馆周围的包装纸</target>
        </trans-unit>
        <trans-unit id="2ae0ed48e37f2e02e46f33b03b7510c47ed8cefa" translate="yes" xml:space="preserve">
          <source>You are facing the problem of your non-latin characters is showing as &lt;code&gt;?????????&lt;/code&gt; , you asked a question, and it got closed with a reference to this canonical question, you tried everything and no matter what you do you still get &lt;code&gt;??????????&lt;/code&gt; from &lt;code&gt;MySQL&lt;/code&gt;.</source>
          <target state="translated">您正面临非拉丁字符显示为 &lt;code&gt;?????????&lt;/code&gt; 的问题 ，您提出了一个问题，并且在参考该规范问题后就被关闭了，您尝试了一切，不管您仍然得到什么 &lt;code&gt;??????????&lt;/code&gt; 来自 &lt;code&gt;MySQL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b164784fa8f261338cec31e801b8e72a1828dc7" translate="yes" xml:space="preserve">
          <source>You can convert files on the fly with the iconv filter</source>
          <target state="translated">你可以用iconv过滤器来转换文件。</target>
        </trans-unit>
        <trans-unit id="d403e71451a2f19d8575749fcd05090e7e348288" translate="yes" xml:space="preserve">
          <source>You cannot use unicode filenames with PHP and windows unless you use a 3rd part extension.</source>
          <target state="translated">你不能在PHP和windows中使用unicode文件名,除非你使用第三部分扩展。</target>
        </trans-unit>
        <trans-unit id="8b37a9d9e415bc8221c1b11d04ca54c6a6648f23" translate="yes" xml:space="preserve">
          <source>You need to make sure that every time you process a UTF-8 string, you do so safely.  This is, unfortunately, the hard part.  You'll probably want to make extensive use of PHP's &lt;a href=&quot;http://www.php.net/manual/en/book.mbstring.php&quot;&gt;&lt;code&gt;mbstring&lt;/code&gt;&lt;/a&gt; extension.</source>
          <target state="translated">您需要确保每次处理UTF-8字符串时都必须安全进行。 不幸的是，这是最困难的部分。 您可能需要广泛使用PHP的&lt;a href=&quot;http://www.php.net/manual/en/book.mbstring.php&quot;&gt; &lt;code&gt;mbstring&lt;/code&gt; &lt;/a&gt;扩展名。</target>
        </trans-unit>
        <trans-unit id="48f40e3284384ba88de282b171078281c9e11cac" translate="yes" xml:space="preserve">
          <source>You'll also need to identify the character set of your responses. You can either use AddDefaultCharset, as above, or write PHP code that returns the header. (Or you can add a META tag to your HTML documents.)</source>
          <target state="translated">你还需要确定你的响应的字符集。你可以像上面一样使用AddDefaultCharset,或者编写返回头的PHP代码。(或者你也可以在你的HTML文档中添加一个META标签)。</target>
        </trans-unit>
        <trans-unit id="21faa67da1fdbfe3a5a17ee67b0e79f4017e8bfc" translate="yes" xml:space="preserve">
          <source>conversion</source>
          <target state="translated">conversion</target>
        </trans-unit>
        <trans-unit id="d6b88f784ad82597b546d77bd5d819d1ae014a0d" translate="yes" xml:space="preserve">
          <source>good luck!</source>
          <target state="translated">好运</target>
        </trans-unit>
        <trans-unit id="dc7ad30ba9ebdea9c06f78450dfe81e3e379c9e9" translate="yes" xml:space="preserve">
          <source>if you want a mysql solution,  I had similar issues with 2 of my projects, after a server migration. After searching and trying a lot of solutions i came across with this one /nothing before this one worked):</source>
          <target state="translated">如果你想要一个mysql的解决方案,我在我的2个项目中,在服务器迁移后,遇到了类似的问题。在搜索和尝试了很多解决方案后,我遇到了这个问题,在这之前,我没有遇到过这个问题。)</target>
        </trans-unit>
        <trans-unit id="5858c8fc80c96241aabb9bf1ac3cedfc7e5fde56" translate="yes" xml:space="preserve">
          <source>mb_ uses MultiByte. It supports more characters but in general is a little slower.</source>
          <target state="translated">mb_使用MultiByte。它支持更多的字符,但总的来说速度稍慢。</target>
        </trans-unit>
        <trans-unit id="ca9725ab9df433013617c6d2b1f80b15fec7783f" translate="yes" xml:space="preserve">
          <source>mime encoding functionality</source>
          <target state="translated">哑剧编码功能</target>
        </trans-unit>
        <trans-unit id="6753bf8acd23a41246a8480a0f2c510fcd3782e5" translate="yes" xml:space="preserve">
          <source>mysql: Charset and collation on tables and on connection (not the collation). Also don't use mysql - msqli or PDO</source>
          <target state="translated">mysql:表和连接上的字符集和校验(不是校验)。另外,不要使用mysql-msqli或PDO。</target>
        </trans-unit>
        <trans-unit id="72878135f7c3cf76c8c397477c2b790c3bfe5f9a" translate="yes" xml:space="preserve">
          <source>postgresql: pg_set_client_encoding</source>
          <target state="translated">postgresql:pg_set_client_encoding</target>
        </trans-unit>
        <trans-unit id="e75417cec808d303c6a86e1996166bafc1abc546" translate="yes" xml:space="preserve">
          <source>re applying what you have learned from the answers of this question on a fresh data could solve your problem.</source>
          <target state="translated">在一个新鲜的数据上应用你从这个问题的答案所学到的东西可以解决你的问题。</target>
        </trans-unit>
        <trans-unit id="b6333cd52beca5bbacde284512084b655544c695" translate="yes" xml:space="preserve">
          <source>some string helpers (len, substr, strpos, strrpos)</source>
          <target state="translated">一些字符串助手 (len,substr,strpos,strrpos)</target>
        </trans-unit>
        <trans-unit id="ef364574a8f0d1be78900349f12be514ef88db95" translate="yes" xml:space="preserve">
          <source>sqlite(3): Make sure it was compiled with unicode and intl support</source>
          <target state="translated">sqlite(3)。确保它在编译时支持unicode和intl支持</target>
        </trans-unit>
        <trans-unit id="2f27ef05bfa13338492e0888a52b4b98262e6258" translate="yes" xml:space="preserve">
          <source>that was all !</source>
          <target state="translated">就这样!</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
