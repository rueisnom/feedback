<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/332030">
    <body>
      <group id="332030">
        <trans-unit id="99d04794a56a36c73842b9c59db592858c5153b2" translate="yes" xml:space="preserve">
          <source>(Also referes this to understand the explaination : &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（也参考此以理解说明：&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//www.cplusplus.com/doc/tutorial/typecasting/&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20ea5fe6eac765221d795971a58d40c72a549c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_cast&lt;/code&gt; also works similarly on &lt;code&gt;volatile&lt;/code&gt;, though that's less common.</source>
          <target state="translated">&lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;上也类似地工作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，尽管这种情况不太常见。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cb140de7b7093462f7632a3a68ae36acda609d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dyanamic_cast&lt;/code&gt;: does the same address offset at runtime like &lt;code&gt;static_cast&lt;/code&gt;, but also and an expensive safety check that a downcast is correct using RTTI.</source>
          <target state="translated">&lt;code&gt;dyanamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：在运行时执行与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;相同的地址偏移&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但是还使用RTTI进行昂贵的安全检查，以确保向下转换正确。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be2bec76e493134d3956e22fc405c489d20b9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0])           0&lt;/code&gt;: C++ actually found that the cast was invalid and returned &lt;code&gt;nullptr&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0]) 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：C ++实际上发现&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强制类型转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无效并返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ae0273f29c20fdaacc0b3d1e53c4b01482935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&lt;/code&gt; has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using &lt;code&gt;virtual&lt;/code&gt; inheritance. It also can only go through public inheritance - it will always fail to travel through &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</source>
          <target state="translated">&lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有一些限制。如果继承层次结构中有多个相同类型的对象（所谓的&amp;ldquo;可怕的钻石&amp;rdquo;），并且您没有使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;继承，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则此方法将无效&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。它也只能进行公共继承-它将始终无法通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;protected&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;继承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt; &lt;code&gt;private&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;继承。但是，这很少有问题，因为这种继承形式很少。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c97abb66902355c4c6142e48247c49964d2fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1])           0x7fffffffc940&lt;/code&gt; this one just believes us blindly: we said there is a &lt;code&gt;D&lt;/code&gt; at address &lt;code&gt;b2s[1]&lt;/code&gt;, and the compiler does no offset calculations.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1]) 0x7fffffffc940&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这只是盲目地相信我们：我们说&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;地址&lt;/font&gt; &lt;code&gt;b2s[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;有一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且编译器不执行偏移量计算。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b787f5723161dad2fb91c9d8e03daff42c020478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;, then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c49d9ddb4d5244de47c1294badb2d827edd5dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;: does nothing at runtime, not even the address offset. The pointer must point exactly to the correct type, not even a base class works. You generally don't want this unless raw byte streams are involved.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：在运行时不执行任何操作，甚至不执行地址偏移量。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指针必须精确地指向正确的类型，甚至基类也不能工作。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除非涉及原始字节流，否则通常不希望这样做。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b88df82db056e30e51342306a38d7ffd378796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0])            0x7fffffffc910&lt;/code&gt;: the compiler just went up 0x10 at compile time bytes to try and go from a &lt;code&gt;B2&lt;/code&gt; to the containing &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0]) 0x7fffffffc910&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：编译器在编译时字节刚升为0x10时尝试从&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转到包含&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; 的</target>
        </trans-unit>
        <trans-unit id="46d0aa8846427aef9241fa0ca6cc93db712f4c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (see above), then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（请参见上文），然后是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1924e08dfc6ff50fb972b89aa1c368e7c3dab218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (though ignoring access restrictions)</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（尽管忽略访问限制）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dee972523c79dc0537e1cd4345ad549a504f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through &lt;code&gt;virtual&lt;/code&gt; inheritance. It does not do checking, however, and it is undefined behavior to &lt;code&gt;static_cast&lt;/code&gt; down a hierarchy to a type that isn't actually the type of the object.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也可以通过继承层次结构进行转换。向上（朝向基类）进行强制转换时没有必要，但向下进行转换（只要不通过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;继承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行转换）就可以使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。但是，它不进行检查，并且将&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;层次结构&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;降低为实际上不是对象类型的类型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是未定义的行为&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4881bd0dc5fa56667dfcfde91be314eb4021fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt;: does one address offset at runtime (low runtime impact) and no safety checks that a downcast is correct.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：在运行时进行一个地址偏移（对运行时的影响较小），并且没有安全检查向下转换是否正确。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33821fbc0a423b3a33e1211e663f237b1b8cb930" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(A lot of theoretical and conceptual explanation has been given above)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（上面已经给出了很多理论和概念上的解释）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e977b26b63a097b04ed436ec19c0f430ced5ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; can be used to remove or add &lt;code&gt;const&lt;/code&gt; to a variable; no other C++ cast is capable of removing it (not even &lt;code&gt;reinterpret_cast&lt;/code&gt;). It is important to note that modifying a formerly &lt;code&gt;const&lt;/code&gt; value is only undefined if the original variable is &lt;code&gt;const&lt;/code&gt;; if you use it to take the &lt;code&gt;const&lt;/code&gt; off a reference to something that wasn't declared with &lt;code&gt;const&lt;/code&gt;, it is safe. This can be useful when overloading member functions based on &lt;code&gt;const&lt;/code&gt;, for instance. It can also be used to add &lt;code&gt;const&lt;/code&gt; to an object, such as to call a member function overload.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可用于将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;删除或添加&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到变量；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有其他C ++强制转换能够将其删除（甚至不能&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要的是要注意，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅当原始变量为&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;才&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以修改以前的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;值&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;；&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果使用它来使&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;脱离对未使用&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;声明的内容的引用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则这是安全的。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，这在基于&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;重载成员函数时很有用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它还可以用于向&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对象&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;添加&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，例如调用成员函数重载。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24212cba0632847457e6b4899173742e9cfd36ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards &amp;ndash; you can cast sideways or even up another chain. The &lt;code&gt;dynamic_cast&lt;/code&gt; will seek out the desired object and return it if possible. If it can't, it will return &lt;code&gt;nullptr&lt;/code&gt; in the case of a pointer, or throw &lt;code&gt;std::bad_cast&lt;/code&gt; in the case of a reference.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅用于处理多态。您可以将任何多态类型的指针或引用强制转换为任何其他类类型（多态类型至少具有一个声明或继承的虚函数）。您不仅可以向下投射，还可以使用它&amp;ndash;您可以侧向投射，甚至可以向上投射另一个链。该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将找出所需的对象，如果可能的话返回。如果不能，则&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在使用指针的情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用引用的情况下&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将返回&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::bad_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9664183f661997b40ee907b0d2869013ea8b231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another &amp;mdash; such as casting the value from one pointer to another, or storing a pointer in an &lt;code&gt;int&lt;/code&gt;, or all sorts of other nasty things. Largely, the only guarantee you get with &lt;code&gt;reinterpret_cast&lt;/code&gt; is that normally if you cast the result back to the original type, you will get the exact same value (but &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; if the intermediate type is smaller than the original type). There are a number of conversions that &lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是最危险的强制类型转换，应谨慎使用。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它将一种类型直接转换为另一种类型-例如将值从一个指针转换为另一种指针，或将指针存储在&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或各种其他讨厌的东西中。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在很大程度上，使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;获得的唯一保证&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是，通常，如果将结果强制转换回原始类型，则将获得完全相同的值（但&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果中间类型小于原始类型则&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有很多转换可以&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;也做不到 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它主要用于特别奇怪的转换和位操作，例如将原始数据流转换为实际数据，或将数据存储在指向对齐数据的指针的低位。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6fbbe6178727abb8a717a316ffa1b7d497044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt; vs &lt;code&gt;dynamic_cast&lt;/code&gt; vs &lt;code&gt;reinterpret_cast&lt;/code&gt; internals view on a downcast/upcast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;向下/向上广播的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部视图&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38b602c4cc2d63323ecfe0ae3d6bc96090e19770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, or pointer to &lt;code&gt;void*&lt;/code&gt;), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating &lt;code&gt;static_cast&lt;/code&gt; isn't necessary, but it's important to note that the &lt;code&gt;T(something)&lt;/code&gt; syntax is equivalent to &lt;code&gt;(T)something&lt;/code&gt; and should be avoided (more on that later). A &lt;code&gt;T(something, something_else)&lt;/code&gt; is safe, however, and guaranteed to call the constructor.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是您应该尝试使用的第一个演员表。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它的作用类似于类型之间的隐式转换（例如，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或指向&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指针&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;），它还可以调用显式转换函数（或隐式函数）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在许多情况下，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;无需&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明确声明&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，但必须注意，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;语法与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(T)something&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等效&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，应避免使用（稍后会详细介绍）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something, something_else)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;是安全的，但是，并保证调用构造函数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f10b3c4d099cea83615e753239bff94e7f3c1ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C-style cast&lt;/strong&gt; and &lt;strong&gt;function-style cast&lt;/strong&gt; are casts using &lt;code&gt;(type)object&lt;/code&gt; or &lt;code&gt;type(object)&lt;/code&gt;, respectively, and are functionally equivalent. They are defined as the first of the following which succeeds:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C样式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数样式&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转换分别是使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(object)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行的转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且在功能上等效。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;它们被定义为以下成功的第一个：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d2d12690e92643857e438e651091583a31a42fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: Cast from Derived to Base or viceversa creates &lt;em&gt;new&lt;/em&gt; copy! For people coming from C#/Java, this can be a huge surprise because the result is basically a chopped off object created from Derived.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;疑难杂症&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：从衍生角色转换为基础角色，反之亦然创建&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;副本！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于使用C＃/ Java的人来说，这可能是一个巨大的惊喜，因为其结果基本上是从Derived创建的对象。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bac6e263f5a53183ab317b8999b06f4e4af8c6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: If you cast base pointer to derived pointer but if actual object is not really derived type then you &lt;em&gt;don't&lt;/em&gt; get error. You get bad pointer and  very likely a segfault at runtime. Same goes for &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;陷阱&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：如果将基本指针转换为派生指针，但是如果实际对象不是真正派生类型，则&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不会&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出错。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您会得到错误的指针，很有可能在运行时出现段错误。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这同样适用于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db0842ccf51dfcb3d7efbeb12fceeeb77b0d2fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use C++ cast&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;何时使用C ++ cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc1891b50452cabe6ee24f5611acdca816c45c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce66e5c538d901143e8ead7a542d10eb15e5c439" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;const_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac4eb9b5acd87e28c62b5fbc4faaaf1db3512a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81e44620028491193504c883ef72fcd607f8dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dynamic_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd6415d2956dc3e1e675882f861d933d45d68c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c70ae525e0f9d6b46225d67d2b8845f7f0d2307d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67dbf2071e10cdcee9f7c486795a8b88d9c98465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba9b167ee3e215ecec1037311a373547f6128c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;static_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42c0032b3b16e37db02cd204b0858aa30912b0e" translate="yes" xml:space="preserve">
          <source>Another example is when you want to implement &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; as well as &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt;. To avoid code duplication, you can apply const_cast to return value of one function from another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;另一个示例是当您要实现&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以及&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为了避免代码重复，可以将const_cast应用于从另一个函数返回的值。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe1de896ffacbbb4b8376d2bab06c2d9fc6dd83d" translate="yes" xml:space="preserve">
          <source>Below are some of the &lt;strong&gt;practical examples&lt;/strong&gt; when I used &lt;strong&gt;static_cast&lt;/strong&gt;, &lt;strong&gt;dynamic_cast&lt;/strong&gt;, &lt;strong&gt;const_cast&lt;/strong&gt;, &lt;strong&gt;reinterpret_cast&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;下面是&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当我使用&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时的&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一些&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际示例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06aad5787dbc559de97b06dabcf6d4d79876f8f2" translate="yes" xml:space="preserve">
          <source>But because &lt;code&gt;b2s[0]&lt;/code&gt; was not a &lt;code&gt;D&lt;/code&gt;, it now points to an undefined memory region.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是因为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，所以它现在指向一个未定义的内存区域。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5580b5b92994da98f29dcf66d694bd9af7c51b0f" translate="yes" xml:space="preserve">
          <source>But this is wrong, because D is actually at 0x7fffffffc930, what is at 0x7fffffffc940 is the B2-like structure inside D! So trash gets accessed.</source>
          <target state="translated">但这是错误的,因为D实际上是在0x7fffffffffc930处,在0x7fffffc940处的是D内部的类似于B2的结构! 所以垃圾被访问。</target>
        </trans-unit>
        <trans-unit id="1636407c1772330f5809d111fbef0d07de231b8f" translate="yes" xml:space="preserve">
          <source>C++ compiler already knows how to convert between scaler types such as float to int. Use &lt;code&gt;static_cast&lt;/code&gt; for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++编译器已经知道如何在定标器类型之间进行转换，例如float到int。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对他们&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd84a23d42572cf02a2a2fb13fa9e63b4681b84e" translate="yes" xml:space="preserve">
          <source>C-style cast &lt;code&gt;(type)value&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C样式转换&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="656825f0b6169386ec4a61349a410fbab8856086" translate="yes" xml:space="preserve">
          <source>C-style casts also ignore access control when performing a &lt;code&gt;static_cast&lt;/code&gt;, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C样式转换在执行&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;时也会忽略访问控制&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，这意味着它们具有执行其他转换无法执行的操作的能力。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不过，这主要是一种争执，在我看来，这是避免使用C样式强制转换的另一个原因。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7405076271098f4474d3f1e565b760f01b07bb0" translate="yes" xml:space="preserve">
          <source>Cast from &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt; always succeeds if A and B are in inheritance hierarchy (or void) otherwise you get compile error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果A和B在继承层次结构（或void）中，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;则从&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强制转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;总是成功的，否则会出现编译错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9197bfc872a74595c98aaafe8ed8a9bd494568ee" translate="yes" xml:space="preserve">
          <source>Compile, run and disassemble with:</source>
          <target state="translated">编译、运行和拆卸与。</target>
        </trans-unit>
        <trans-unit id="0ecc2a94cc30cef1234a946bcfde6dc1e7fb16a6" translate="yes" xml:space="preserve">
          <source>Consider the following code example:</source>
          <target state="translated">考虑一下下面的代码示例。</target>
        </trans-unit>
        <trans-unit id="ed9c3d0787e29776fdb53b94bc5260e1d30832cb" translate="yes" xml:space="preserve">
          <source>Does &lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;this&lt;/a&gt; answer your question?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;请问&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这个&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;回答你的问题？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f88dd8c3d05c0119742997d832c827ad0bb6" translate="yes" xml:space="preserve">
          <source>Downcasting using the 'static_cast' in C++</source>
          <target state="translated">使用C++中的'static_cast'进行下划线操作</target>
        </trans-unit>
        <trans-unit id="54a502b64c8f30908d5dc52ab0743b009011907f" translate="yes" xml:space="preserve">
          <source>First there is a NULL check, and it returns NULL if th einput is NULL.</source>
          <target state="translated">首先有一个NULL检查,如果einput为NULL,则返回NULL。</target>
        </trans-unit>
        <trans-unit id="36dfaeed59ce5f884e642ab58970b2b24e1fb11e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt; if cast is invalid then dynamic_cast will throw bad_cast exception.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果强制转换无效，则dynamic_cast将引发bad_cast异常。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fbfa303623ff499116f91b0b4f89533004f5e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt;, if cast is invalid then dynamic_cast will return nullptr.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，如果强制转换无效，则dynamic_cast将返回nullptr。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="736c92c74e98d64f9c01088b4c653eaddd3420d6" translate="yes" xml:space="preserve">
          <source>For C++ beginners C-style casts look like being the superset operation over C++ casts (static_cast&amp;lt;&amp;gt;(), dynamic_cast&amp;lt;&amp;gt;(), const_cast&amp;lt;&amp;gt;(), reinterpret_cast&amp;lt;&amp;gt;()) and someone could prefer them over the C++ casts. In fact C-style cast is the superset and shorter to write.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对于C ++初学者而言，C样式强制转换看起来像是对C ++强制转换的超集操作（static_cast &amp;lt;&amp;gt;（），dynamic_cast &amp;lt;&amp;gt;（），const_cast &amp;lt;&amp;gt;（），reinterpret_cast &amp;lt;&amp;gt;（）），并且有人可能会更喜欢C ++强制转换。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;实际上，C样式强制转换是父集，编写起来比较短。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a64668ac9673b2f10528d076df1cf9bd7b353" translate="yes" xml:space="preserve">
          <source>For example, you can load 4 bytes of float to 4 bytes of int to see how bits in float looks like.</source>
          <target state="translated">例如,你可以把4个字节的float加载到4个字节的int中,看看float中的比特是什么样子的。</target>
        </trans-unit>
        <trans-unit id="4e6e7d43a0aac95fd86233b9dccdee4f262952d7" translate="yes" xml:space="preserve">
          <source>From the stdout output we see:</source>
          <target state="translated">从stdout输出中我们看到:</target>
        </trans-unit>
        <trans-unit id="c449c5ff531b0ce703b262016b6a4ef0245fc823" translate="yes" xml:space="preserve">
          <source>Function-style cast &lt;code&gt;type(value)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;函数样式转换&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(value)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0547d3bb719cf7855bcd1808ffcaa7f313fa0d3a" translate="yes" xml:space="preserve">
          <source>Here is a short quote from Bjarne Stroustrup's (the author of C++) book The C++ Programming Language 4th edition - page 302.</source>
          <target state="translated">以下是Bjarne Stroustrup(C++的作者)的《C++程序设计语言》第四版第302页。</target>
        </trans-unit>
        <trans-unit id="a1c4c328e5cddf9613426e0405a575561d1e72e6" translate="yes" xml:space="preserve">
          <source>Here is the sample.</source>
          <target state="translated">下面是样本。</target>
        </trans-unit>
        <trans-unit id="9f3be9905003f944fb72e085e1a9f85768a2652c" translate="yes" xml:space="preserve">
          <source>How does one decide which to use in which specific cases?</source>
          <target state="translated">如何决定在哪种具体的情况下使用哪种?</target>
        </trans-unit>
        <trans-unit id="18fcef7f45a3483e9706e3199d5354f2d47ab262" translate="yes" xml:space="preserve">
          <source>How is dynamic_cast implemented</source>
          <target state="translated">dynamic_cast是如何实现的</target>
        </trans-unit>
        <trans-unit id="23479e09b4911601778d7e1e7417e287948175db" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;static_cast&lt;/code&gt; works for simple pointers (not pointers to pointers), so the above code can be rewritten to avoid &lt;code&gt;reinterpret_cast&lt;/code&gt; (at a price of an extra variable) in the following way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;适用于简单的指针（而不是指向指针的指针），因此可以通过&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下方式&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重写以上代码，以避免&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（以额外的变量为代价）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3abec9e72150397dbb79393a6acc1cc943245e48" translate="yes" xml:space="preserve">
          <source>I believe that this will give a good intuition on how those casts are different:</source>
          <target state="translated">相信这样一来,就可以很好的直观的了解到那些CAST的不同之处了。</target>
        </trans-unit>
        <trans-unit id="cc457185fb8b24739881731c33ce05ebf528e823" translate="yes" xml:space="preserve">
          <source>I don't have the patience to analyze this further now, but as others said, the only way for this to work is for &lt;code&gt;__dynamic_cast&lt;/code&gt; to access some extra RTTI in-memory data structures that represent the class hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我现在没有耐心对此做进一步的分析，但是正如其他人所说的，唯一可行的方法是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;访问表示类层次结构的一些额外的RTTI内存中数据结构。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="515abf6695de31a8b6fbf4cf01c72f8fac080514" translate="yes" xml:space="preserve">
          <source>I have never used &lt;code&gt;reinterpret_cast&lt;/code&gt;, and wonder whether running into a case that needs it isn't a smell of bad design. In the code base I work on &lt;code&gt;dynamic_cast&lt;/code&gt; is used a lot. The difference with  &lt;code&gt;static_cast&lt;/code&gt; is that a &lt;code&gt;dynamic_cast&lt;/code&gt; does runtime checking which may (safer) or may not (more overhead) be what you want (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;msdn&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我从来没有使用过&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且想知道是否遇到需要它的情况不会引起不良设计的味道。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在我处理&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的代码库&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中，使用了很多代码。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的区别 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在于，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;会进行运行时检查，这可能（更安全）或可能（更多开销）不是您想要的（请参阅&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;msdn&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04ba2c9bedbaf0f352749135eff101a3f5c9ea" translate="yes" xml:space="preserve">
          <source>If an abort is the only action your code can take, maybe you only want to enable the &lt;code&gt;dynamic_cast&lt;/code&gt; in debug builds (&lt;code&gt;-NDEBUG&lt;/code&gt;), and use &lt;code&gt;static_cast&lt;/code&gt; otherwise, e.g. &lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;as done here&lt;/a&gt;, to not slow down your fast runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果中止是您的代码可以采取的唯一措施，则也许您只想&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在调试版本（&lt;/font&gt; &lt;code&gt;-NDEBUG&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;启用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;否则要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;，例如&lt;/font&gt;&lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此处所述&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，不要减慢快速运行的速度。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8e4f125f7aa40f62e946039c6563eb233f1cbd" translate="yes" xml:space="preserve">
          <source>In addition to the other answers so far, here is unobvious example where &lt;code&gt;static_cast&lt;/code&gt; is not sufficient so that &lt;code&gt;reinterpret_cast&lt;/code&gt; is needed. Suppose there is a function which in an output parameter returns pointers to objects of different classes (which do not share a common base class). A real example of such function is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;CoCreateInstance()&lt;/code&gt;&lt;/a&gt; (see the last parameter, which is in fact &lt;code&gt;void**&lt;/code&gt;). Suppose you request particular class of object from this function, so you know in advance the type for the pointer (which you often do for COM objects). In this case you cannot cast pointer to your pointer into &lt;code&gt;void**&lt;/code&gt; with &lt;code&gt;static_cast&lt;/code&gt;: you need &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除了到目前为止的其他答案之外，这是一个显而易见的示例，其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不够，因此需要&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;假设有一个函数，该函数在输出参数中返回指向不同类（不共享公共基类）的对象的指针。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;此类函数的真实示例是&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;CoCreateInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（请参阅最后一个参数，实际上是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;假设您从此函数请求特定的对象类，因此您事先知道了指针的类型（通常对COM对象执行此操作）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在这种情况下，无法&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;将指针转换为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：您需要&lt;/font&gt; &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">在代码中。</target>
        </trans-unit>
        <trans-unit id="f48f5e44150c506148699b958474295be46ab891" translate="yes" xml:space="preserve">
          <source>In this answer, I want to compare these three mechanisms on a concrete upcast/downcast example and analyze what happens to the underlying pointers/memory/assembly to give a concrete understanding of how they compare.</source>
          <target state="translated">在这个答案中,我想在一个具体的upcastdowncast的例子上比较一下这三种机制,并分析一下底层的指针内存组件(pointersmemoryassembly)的情况,让大家具体了解一下这三种机制的比较。</target>
        </trans-unit>
        <trans-unit id="a300a6b8a5c1988450622619a2f1fd181a511aa1" translate="yes" xml:space="preserve">
          <source>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a &lt;code&gt;reinterpret_cast&lt;/code&gt;, and the latter should be preferred when explicit casting is needed, unless you are sure &lt;code&gt;static_cast&lt;/code&gt; will succeed or &lt;code&gt;reinterpret_cast&lt;/code&gt; will fail. Even then, consider the longer, more explicit option.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，它可以在某些情况下替代其他强制类型转换，但由于具有降级到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的能力，因此可能非常危险&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，并且在需要显式强制转换时应首选后者，除非您确定&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将成功执行或&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将失败。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;即使这样，也可以考虑使用更长，更明确的选项。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea24132facf650f92f3d393dce2d133da6cea48" translate="yes" xml:space="preserve">
          <source>It might help if you know little bit of internals...</source>
          <target state="translated">如果你懂一点内务的话,可能会有帮助......</target>
        </trans-unit>
        <trans-unit id="53b2681298369920fcd6103c5e7b3fa26cea6a2a" translate="yes" xml:space="preserve">
          <source>It must therefore start from the &lt;code&gt;B2&lt;/code&gt; entry for that table, then walk this class hierarchy until it finds that the vtable for a &lt;code&gt;D&lt;/code&gt; typecast from &lt;code&gt;b2s[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，它必须从该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;表&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;条目&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;开始&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，然后遍历该类层次结构，直到&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;从&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;找到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;类型转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的vtable &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78486bda2cd7b271217be869eeddf907840635c2" translate="yes" xml:space="preserve">
          <source>Now, as mentioned at: &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/a&gt; in order to support the virtual method calls efficiently, the memory data structure of &lt;code&gt;D&lt;/code&gt; has to look something like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;现在，如&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table所述&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，为了有效地支持虚拟方法调用，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的内存数据结构&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必须类似于：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27ecdae4b0aaf4635a3e357abe87725b694b381a" translate="yes" xml:space="preserve">
          <source>Now, we can finally get back to type casting and the analysis of our concrete example.</source>
          <target state="translated">现在,我们终于可以回到类型铸造和具体实例的分析了。</target>
        </trans-unit>
        <trans-unit id="f68a5338ab683eaa5777e7d2d78aed399812d592" translate="yes" xml:space="preserve">
          <source>Obviously, if data is not correct for the type, you may get segfault.</source>
          <target state="translated">很明显,如果数据不对类型,你可能会得到segfault。</target>
        </trans-unit>
        <trans-unit id="31c25bfb760007360abc96fd76af460f7f9fef16" translate="yes" xml:space="preserve">
          <source>One example where this comes handy is iterating through some container like &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; which only returns its elements as const to make sure you don't change its key. However if your intent is to modify object's non-key members then it should be ok. You can use const_cast to remove constness.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个方便使用的示例是遍历一些容器，例如&lt;/font&gt;&lt;/font&gt; &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;容器&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅将其元素返回为const，以确保您不更改其键。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;但是，如果您打算修改对象的非关键成员，那么应该可以。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;您可以使用const_cast删除常数。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51b2ca86efbcbe6d929deae1e6732505d970d7c1" translate="yes" xml:space="preserve">
          <source>One this to be noted is: The &lt;strong&gt;dynamic_cast&lt;/strong&gt; would fail at run-time, however on most compilers it will also fail to compile because there are no virtual functions in the struct of the pointer being casted, meaning &lt;strong&gt;dynamic_cast&lt;/strong&gt; will work with only polymorphic class pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;需要注意的一个是：&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在运行时会失败，但是在大多数编译器上，它也将无法编译，因为在要转换的指针的结构中没有虚拟函数，这意味着&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅适用于多态类指针。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89e74eb11db54e231c9de7e18b7b9c7d4b12bdf1" translate="yes" xml:space="preserve">
          <source>Only line (4) compiles without error. Only &lt;strong&gt;reinterpret_cast&lt;/strong&gt; can be used to convert a pointer to an object to a pointer to an any unrelated object type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只有第（4）行编译没有错误。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;只能使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将指向对象的指针转换为指向任何不相关对象类型的指针。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abfbd6cd15d63c23c7d3d30c8e3a4758e6086f36" translate="yes" xml:space="preserve">
          <source>Otherwise, it sets up some arguments in the RDX, RSI and RDI and calls &lt;code&gt;__dynamic_cast&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;否则，它将在RDX，RSI和RDI中设置一些参数，并调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">可能的产出:</target>
        </trans-unit>
        <trans-unit id="538fb0772ec63cf8b0351898c002fdafced0cdc2" translate="yes" xml:space="preserve">
          <source>Related questions:</source>
          <target state="translated">相关问题:</target>
        </trans-unit>
        <trans-unit id="313f99c939e5a52696cfdcc3b8912697de919023" translate="yes" xml:space="preserve">
          <source>Tested on Ubuntu 18.04 amd64, GCC 7.4.0.</source>
          <target state="translated">在Ubuntu 18.04 amd64上测试,GCC 7.4.0。</target>
        </trans-unit>
        <trans-unit id="021a66c8a07594230bc210a2b2a2c898cb33f663" translate="yes" xml:space="preserve">
          <source>The disassembly is:</source>
          <target state="translated">的拆解是。</target>
        </trans-unit>
        <trans-unit id="0bc099ba8fe11b0382c44132df75211559d3b400" translate="yes" xml:space="preserve">
          <source>The key fact is that the memory data structure of &lt;code&gt;D&lt;/code&gt; contains inside it memory structure compatible with that of &lt;code&gt;B1&lt;/code&gt; and that of &lt;code&gt;B2&lt;/code&gt; internally.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;关键事实是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的内存数据结构&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部包含与&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;兼容的内存结构&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3e976115f67a49acd1ee58f48abd198fb94c35" translate="yes" xml:space="preserve">
          <source>The main problem of C-style casts is that they hide developer real intention of the cast. The C-style casts can do virtually all types of casting from normally safe casts done by static_cast&amp;lt;&amp;gt;() and dynamic_cast&amp;lt;&amp;gt;() to potentially dangerous casts like const_cast&amp;lt;&amp;gt;(), where const modifier can be removed so the const variables can be modified and reinterpret_cast&amp;lt;&amp;gt;() that can even reinterpret integer values to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C样式强制转换的主要问题是它们隐藏了开发人员的强制转换意图。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C样式转换几乎可以进行所有类型的转换，从由static_cast &amp;lt;&amp;gt;（）和dynamic_cast &amp;lt;&amp;gt;（）完成的通常安全的转换到具有潜在危险的转换，例如const_cast &amp;lt;&amp;gt;（），可以在其中删除const修饰符，以便const变量可以被修改并重新解释_cast &amp;lt;&amp;gt;（），甚至可以将整数值重新解释为指针。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11774ec8768fb7ecd6984b5866c62057e7c4d28b" translate="yes" xml:space="preserve">
          <source>The main reason why C++ casts were added to the language was to allow a developer to clarify his intentions - why he is going to do that cast. By using C-style casts which are perfectly valid in C++ you are making your code less readable and more error prone especially for other developers who didn't create your code. So to make your code more readable and explicit you should always prefer C++ casts over C-style casts.</source>
          <target state="translated">为什么在语言中加入C++casts的主要原因是为了让开发者明确自己的意图--为什么要做那个cast。通过使用在C++中完全有效的C-style casts,你就会使你的代码可读性降低,而且更容易出错,特别是对于其他开发者来说,他们并没有创建你的代码。所以,为了让你的代码更可读,更显式,你应该始终喜欢使用C++的cast而不是C-风格的cast。</target>
        </trans-unit>
        <trans-unit id="5ef5fdecb5232e3e7590fa6bc96a02829a894434" translate="yes" xml:space="preserve">
          <source>Then, on the downcast sections, it is now easy to understand how the invalid ones fail and why:</source>
          <target state="translated">那么,在下行的部分,现在就很容易理解了,无效的是如何失败的,为什么会失败。</target>
        </trans-unit>
        <trans-unit id="59fa3cd980523ba22f27487dd76ff3b1ac65f2e7" translate="yes" xml:space="preserve">
          <source>There is no runtime overhead for this cast.</source>
          <target state="translated">对于这种铸造,没有运行时的开销。</target>
        </trans-unit>
        <trans-unit id="9779cf96d0cd458a50e000127ed6fd4a8589f7ec" translate="yes" xml:space="preserve">
          <source>There is no way this can be done at compile time, and we will confirm that from the disassembly:</source>
          <target state="translated">这一点在编译时是没有办法做到的,我们会从拆解中确认。</target>
        </trans-unit>
        <trans-unit id="a8b241867b6c7154fb8aa178b38b565998bf85c2" translate="yes" xml:space="preserve">
          <source>Therefore we reach the critical conclusion:</source>
          <target state="translated">因此,我们得出关键的结论。</target>
        </trans-unit>
        <trans-unit id="483865e373a36f9d0c75153eca9c80714054a5ae" translate="yes" xml:space="preserve">
          <source>Therefore, if your code is not able to check for that &lt;code&gt;nullptr&lt;/code&gt; and take a valid non-abort action, you should just use &lt;code&gt;static_cast&lt;/code&gt; instead of dynamic cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，如果您的代码无法检查该&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;并采取有效的非中止操作，则应仅使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是动态&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强制转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14e84c6fca606a6849c36eb8eee9e7dfa0759f47" translate="yes" xml:space="preserve">
          <source>Therefore, the implicit &lt;code&gt;static_cast&lt;/code&gt; done there did correctly calculate the offset from the full &lt;code&gt;D&lt;/code&gt; data structure at 0x7fffffffc930 to the &lt;code&gt;B2&lt;/code&gt; like one which is at 0x7fffffffc940. We also infer that what lies between 0x7fffffffc930 and 0x7fffffffc940 is likely be the &lt;code&gt;B1&lt;/code&gt; data and vtable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此，在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;那里&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;执行的隐式&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以正确计算从&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;0x7fffffffc930 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的完整&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据结构到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的偏移量，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;就像&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在0x7fffffffc940处&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的偏移量&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一样。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们还推断，介于0x7fffffffc930和0x7fffffffc940之间的可能是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;数据和vtable。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a6c94b2c9fb51ea9c355e138cf15808a4189def" translate="yes" xml:space="preserve">
          <source>This C-style cast is far more dangerous than the named conversion operators
  because the notation is harder to spot in a large program and the kind of conversion intended by the programmer is not explicit.</source>
          <target state="translated">这种C式的铸型比命名的转换操作符要危险得多,因为在大型程序中,这种记号更难被发现,而且程序员想要的那种转换方式并不明确。</target>
        </trans-unit>
        <trans-unit id="b424ec8cf10bbc9a473b4bde47a88a393042ec27" translate="yes" xml:space="preserve">
          <source>This basically says that take these bytes at this memory location and think of it as given object.</source>
          <target state="translated">这基本上是说,在这个内存位置拿这些字节,把它当成给定对象。</target>
        </trans-unit>
        <trans-unit id="7a0ffe41fea2e124ad060c68ef6887208a4ba8f4" translate="yes" xml:space="preserve">
          <source>This is why reinterpret cast is potentially expensive! Here is &lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;an example where a one liner patch converting a &lt;code&gt;dynamic_cast&lt;/code&gt; to a &lt;code&gt;static_cast&lt;/code&gt; in a complex project reduced runtime by 33%!&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这就是为什么重新解释演员表可能会很昂贵的原因！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这是&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;一个示例，其中一个衬里补丁&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在复杂项目&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转换为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;减少了33％的运行时间！&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d99df69ad599cd0fda2e2aff6e4c8d7303c5683d" translate="yes" xml:space="preserve">
          <source>This means, dynamic_cast is very expensive compared to static_cast!</source>
          <target state="translated">这意味着,相比于static_cast,dynamic_cast是非常昂贵的!</target>
        </trans-unit>
        <trans-unit id="0acf04d9d8a83be16d8528eb9bd0b82b587353c8" translate="yes" xml:space="preserve">
          <source>This safety check allows you to query if a base class pointer is of a given type at runtime by checking a return of &lt;code&gt;nullptr&lt;/code&gt; which indicates an invalid downcast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通过此安全检查，您可以通过检查返回的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;返回（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;指示无效的向下转换）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;来查询运行时基类指针是否为给定类型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e15b1ea2c7f824ff37c90f1e8b7936f27b22efe9" translate="yes" xml:space="preserve">
          <source>This way, when &lt;code&gt;D&lt;/code&gt; gets passed to the base type array, the type cast actually calculates that offset and points something that looks exactly like a valid &lt;code&gt;B2&lt;/code&gt; in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;这样，当&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传递给基本类型数组时，类型转换实际上会计算该偏移量，并指向&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;与内存中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的有效&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;完全相似的内容&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="461ce6d7ac7fffd2efe5f78172ddcd55ba4ade9c" translate="yes" xml:space="preserve">
          <source>To understand, let's consider below code snippet:</source>
          <target state="translated">为了理解,让我们考虑一下下面的代码片段。</target>
        </trans-unit>
        <trans-unit id="71edd74dd328a7b59bb0add24d26eaba325228e3" translate="yes" xml:space="preserve">
          <source>Unlike other casts, there is runtime overhead.</source>
          <target state="translated">与其他CAST不同的是,有运行时的开销。</target>
        </trans-unit>
        <trans-unit id="b440267b36cd050855228bf69a71053dd1f4cede" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const_cast&lt;/code&gt; for casting away &lt;code&gt;const/volatile&lt;/code&gt;.  Avoid this unless you are stuck using a const-incorrect API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;放弃&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const/volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除非您使用的是const不正确的API，否则请避免这种情况。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33967e4229bc5029b76a7118b208e43eaeaf831f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;dynamic_cast&lt;/code&gt; for converting pointers/references within an inheritance hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;在继承层次结构中转换指针/引用。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74ffc11bceafcdfafef3cb243e8490c234069647" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reinterpret_cast&lt;/code&gt; for low-level reinterpreting of bit patterns.  Use with extreme caution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;对位模式进行低级重新解释。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用时要格外小心。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06070b016ef3361153d9ac1fe2f7fb6f604e13da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;static_cast&lt;/code&gt; for ordinary type conversions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;进行普通类型转换。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f261c621539ea72804a1bc9cd48ba82eab320a3e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;const_cast&lt;/strong&gt; to remove the const qualifier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;删除const限定词。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16639515eac22573770f0b98cac7779e7069d25a" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;reinterpret_cast&lt;/strong&gt; to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if we know what we are doing and we understand the aliasing issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;将指针类型与整数和其他指针类型进行不安全的转换。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;仅当我们知道我们在做什么并且了解别名问题时才使用此功能。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f63b8d2d1460077022f7bcf653b5d9e78a78586" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;static_cast&lt;/strong&gt; as the equivalent of a C-style cast that does value conversion, or when we need to explicitly up-cast a pointer from a class to its superclass.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;等效于进行值转换的C样式&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;强制&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转换，或者当我们需要将指针从类显式上载到其超类时。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6036b024144db4c9c71396f2a743f0c5ba4137ea" translate="yes" xml:space="preserve">
          <source>We can confirm this from the horrendous &lt;code&gt;-O0&lt;/code&gt; assembly that just moves the value around:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;我们可以从可怕的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-O0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;程序集中&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;确认这一点，该&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;程序集只会移动值：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb082e564095f32452366d629d1538ddb3671" translate="yes" xml:space="preserve">
          <source>What are the proper uses of:</source>
          <target state="translated">正确的用途是什么。</target>
        </trans-unit>
        <trans-unit id="7f0038b6257ec0adb6364ddfba9c0c40897c49cf" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used</source>
          <target state="translated">什么时候应该使用static_cast、dynamic_cast、const_cast和reinterpret_cast?</target>
        </trans-unit>
        <trans-unit id="5e05d0643bef3dea2a364460dccc72e536e8737e" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</source>
          <target state="translated">什么时候应该使用static_cast、dynamic_cast、 const_cast和reinterpret_cast?</target>
        </trans-unit>
        <trans-unit id="3bde5d7164ed2cf947d8f811c40c55b8a5630d9d" translate="yes" xml:space="preserve">
          <source>When you ask compiler to convert from type &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;static_cast&lt;/code&gt; calls &lt;code&gt;B&lt;/code&gt;'s constructor passing &lt;code&gt;A&lt;/code&gt; as param. Alternatively, &lt;code&gt;A&lt;/code&gt; could have a conversion operator (i.e. &lt;code&gt;A::operator B()&lt;/code&gt;).  If &lt;code&gt;B&lt;/code&gt; doesn't have such constructor, or &lt;code&gt;A&lt;/code&gt; doesn't have a conversion operator, then you get compile time error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;当您要求编译器从类型&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;转换&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;为&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; 时&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;调用&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的构造函数并将&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;作为参数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;传递&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;或者，&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可以具有转换运算符（即&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A::operator B()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有这样的构造函数，或者&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;没有转换运算符，那么您将得到编译时错误。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3782acc436913a8ac6615a5bf1fb86f8abc2ba6a" translate="yes" xml:space="preserve">
          <source>While other answers nicely described all differences between C++ casts, I would like to add a short note why you should not use C-style casts &lt;code&gt;(Type) var&lt;/code&gt; and &lt;code&gt;Type(var)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;尽管其他答案很好地描述了C ++强制转换之间的所有差异，但我想简短地说明一下为什么不应该使用C样式强制转换&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Type) var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;和&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type(var)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c2977aa35aba78f7d1f5411696d1f9e5128d3" translate="yes" xml:space="preserve">
          <source>While static_cast can do non-const to const it can't go other way around. The const_cast can do both ways.</source>
          <target state="translated">虽然static_cast可以做非const到const的转换,但不能反其道而行之。而const_cast可以做到这两种方式。</target>
        </trans-unit>
        <trans-unit id="3f21d8efd7b1b2b65b636be1695a8129ab01e5c4" translate="yes" xml:space="preserve">
          <source>an upcast or downcast only needs to shift the pointer value by a value known at compile time</source>
          <target state="translated">上行或下行指针只需要将指针值移动一个在编译时已知的值即可</target>
        </trans-unit>
        <trans-unit id="c20277379a211f27a3787e85a15e1ea6caec3973" translate="yes" xml:space="preserve">
          <source>check if pointer is NULL, and if yes return NULL</source>
          <target state="translated">检查指针是否为NULL,如果是,则返回NULL</target>
        </trans-unit>
        <trans-unit id="7322aa6022cbcaa23db1eadc8aad6574ae91af74" translate="yes" xml:space="preserve">
          <source>dynamic_cast uses runtime type information to figure out if cast is valid. For example, &lt;code&gt;(Base*)&lt;/code&gt; to &lt;code&gt;(Derived*)&lt;/code&gt; may fail if pointer is not actually of derived type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast使用运行时类型信息来确定强制转换是否有效。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;例如，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;如果指针实际上不是派生类型&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，则&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Base*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;到&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Derived*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;可能会失败。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94315b64fee53e82e90751f8a115b6a8ef3d6783" translate="yes" xml:space="preserve">
          <source>except that this one has the vtable for &lt;code&gt;D&lt;/code&gt; instead of &lt;code&gt;B2&lt;/code&gt;, and therefore all virtual calls work transparently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;除了这个拥有&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;而不是&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的vtable外，&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;因此所有虚拟调用都透明地工作。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="682a50d19e416195436708e48c7761923b8d6651" translate="yes" xml:space="preserve">
          <source>main.cpp</source>
          <target state="translated">main.cpp</target>
        </trans-unit>
        <trans-unit id="02f4fd2e20c3a623ba1400f9952d470361ae4d59" translate="yes" xml:space="preserve">
          <source>otherwise, subtract 0x10 from it to reach the &lt;code&gt;D&lt;/code&gt; which does not exist</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;否则，从中减去0x10到​​达&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;不存在&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;的&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="253191d40c8e7038fb1d1250e212cabda1243839" translate="yes" xml:space="preserve">
          <source>so we see that GCC does:</source>
          <target state="translated">所以我们看到,GCC确实。</target>
        </trans-unit>
        <trans-unit id="1889aaee9b532814e1aa423ce3e5acf4abeeb50d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;setarch&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;used to disable ASLR&lt;/a&gt; to make it easier to compare runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;其中&lt;/font&gt;&lt;/font&gt; &lt;code&gt;setarch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;被&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;用于禁用ASLR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;，使其更容易比较的运行。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
