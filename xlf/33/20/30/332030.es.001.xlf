<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/332030">
    <body>
      <group id="332030">
        <trans-unit id="99d04794a56a36c73842b9c59db592858c5153b2" translate="yes" xml:space="preserve">
          <source>(Also referes this to understand the explaination : &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Tambi&amp;eacute;n hace referencia a esto para comprender la explicaci&amp;oacute;n: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20ea5fe6eac765221d795971a58d40c72a549c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_cast&lt;/code&gt; also works similarly on &lt;code&gt;volatile&lt;/code&gt;, though that's less common.</source>
          <target state="translated">&lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n funciona de manera similar en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , aunque eso es menos com&amp;uacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cb140de7b7093462f7632a3a68ae36acda609d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dyanamic_cast&lt;/code&gt;: does the same address offset at runtime like &lt;code&gt;static_cast&lt;/code&gt;, but also and an expensive safety check that a downcast is correct using RTTI.</source>
          <target state="translated">&lt;code&gt;dyanamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : realiza el mismo desplazamiento de direcci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , pero tambi&amp;eacute;n y una costosa verificaci&amp;oacute;n de seguridad de que un downcast es correcto usando RTTI.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be2bec76e493134d3956e22fc405c489d20b9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0])           0&lt;/code&gt;: C++ actually found that the cast was invalid and returned &lt;code&gt;nullptr&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0]) 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iexcl;C ++ descubri&amp;oacute; que el lanzamiento no era v&amp;aacute;lido y devolvi&amp;oacute; &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; !&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ae0273f29c20fdaacc0b3d1e53c4b01482935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&lt;/code&gt; has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using &lt;code&gt;virtual&lt;/code&gt; inheritance. It also can only go through public inheritance - it will always fail to travel through &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</source>
          <target state="translated">&lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; embargo, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene algunas limitaciones. No funciona si hay varios objetos del mismo tipo en la jerarqu&amp;iacute;a de herencia (el llamado 'diamante temido') y no est&amp;aacute; utilizando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; herencia &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;virtual&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Tambi&amp;eacute;n solo puede pasar por herencia p&amp;uacute;blica; siempre fallar&amp;aacute; en viajar por &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;herencia &lt;/font&gt;&lt;/font&gt; &lt;code&gt;protected&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;private&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Sin embargo, esto rara vez es un problema, ya que tales formas de herencia son raras.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c97abb66902355c4c6142e48247c49964d2fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1])           0x7fffffffc940&lt;/code&gt; this one just believes us blindly: we said there is a &lt;code&gt;D&lt;/code&gt; at address &lt;code&gt;b2s[1]&lt;/code&gt;, and the compiler does no offset calculations.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1]) 0x7fffffffc940&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; este simplemente nos cree ciegamente: dijimos que hay una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en la direcci&amp;oacute;n &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y el compilador no realiza c&amp;aacute;lculos de compensaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b787f5723161dad2fb91c9d8e03daff42c020478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;, then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , luego &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c49d9ddb4d5244de47c1294badb2d827edd5dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;: does nothing at runtime, not even the address offset. The pointer must point exactly to the correct type, not even a base class works. You generally don't want this unless raw byte streams are involved.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : no hace nada en tiempo de ejecuci&amp;oacute;n, ni siquiera el desplazamiento de la direcci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El puntero debe apuntar exactamente al tipo correcto, ni siquiera una clase base funciona. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo general, no desea esto a menos que est&amp;eacute;n involucradas secuencias de bytes sin procesar.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b88df82db056e30e51342306a38d7ffd378796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0])            0x7fffffffc910&lt;/code&gt;: the compiler just went up 0x10 at compile time bytes to try and go from a &lt;code&gt;B2&lt;/code&gt; to the containing &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0]) 0x7fffffffc910&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : el compilador subi&amp;oacute; 0x10 en bytes de tiempo de compilaci&amp;oacute;n para intentar pasar de un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a un &lt;/font&gt; &lt;code&gt;D&lt;/code&gt; que&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contiene&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46d0aa8846427aef9241fa0ca6cc93db712f4c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (see above), then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (ver arriba), luego &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1924e08dfc6ff50fb972b89aa1c368e7c3dab218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (though ignoring access restrictions)</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (aunque ignora las restricciones de acceso)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dee972523c79dc0537e1cd4345ad549a504f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through &lt;code&gt;virtual&lt;/code&gt; inheritance. It does not do checking, however, and it is undefined behavior to &lt;code&gt;static_cast&lt;/code&gt; down a hierarchy to a type that isn't actually the type of the object.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tambi&amp;eacute;n puede emitir a trav&amp;eacute;s de jerarqu&amp;iacute;as de herencia. No es necesario cuando se lanza hacia arriba (hacia una clase base), pero cuando se lanza hacia abajo se puede usar siempre que no se lance a trav&amp;eacute;s de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; herencia &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;virtual&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . Sin embargo, no realiza comprobaciones, y es un comportamiento indefinido &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; una jerarqu&amp;iacute;a a un tipo que no es realmente el tipo del objeto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4881bd0dc5fa56667dfcfde91be314eb4021fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt;: does one address offset at runtime (low runtime impact) and no safety checks that a downcast is correct.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : hace un desplazamiento de direcci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n (bajo impacto en tiempo de ejecuci&amp;oacute;n) y no verifica que un downcast sea correcto.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33821fbc0a423b3a33e1211e663f237b1b8cb930" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(A lot of theoretical and conceptual explanation has been given above)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Se ha dado mucha explicaci&amp;oacute;n te&amp;oacute;rica y conceptual arriba)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e977b26b63a097b04ed436ec19c0f430ced5ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; can be used to remove or add &lt;code&gt;const&lt;/code&gt; to a variable; no other C++ cast is capable of removing it (not even &lt;code&gt;reinterpret_cast&lt;/code&gt;). It is important to note that modifying a formerly &lt;code&gt;const&lt;/code&gt; value is only undefined if the original variable is &lt;code&gt;const&lt;/code&gt;; if you use it to take the &lt;code&gt;const&lt;/code&gt; off a reference to something that wasn't declared with &lt;code&gt;const&lt;/code&gt;, it is safe. This can be useful when overloading member functions based on &lt;code&gt;const&lt;/code&gt;, for instance. It can also be used to add &lt;code&gt;const&lt;/code&gt; to an object, such as to call a member function overload.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede usar para eliminar o agregar&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a una variable; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ning&amp;uacute;n otro elenco de C ++ es capaz de eliminarlo (ni siquiera&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Es importante tener en cuenta que modificar un&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;valor&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;anteriormente&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; solo est&amp;aacute; indefinido si la variable original es&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;si lo usa para tomar la&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fuera una referencia a algo que no se declara con&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , es seguro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esto puede ser &amp;uacute;til al sobrecargar funciones miembro basadas en&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , por ejemplo. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n se puede usar para agregar&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a un objeto, como llamar a una sobrecarga de la funci&amp;oacute;n miembro.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24212cba0632847457e6b4899173742e9cfd36ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards &amp;ndash; you can cast sideways or even up another chain. The &lt;code&gt;dynamic_cast&lt;/code&gt; will seek out the desired object and return it if possible. If it can't, it will return &lt;code&gt;nullptr&lt;/code&gt; in the case of a pointer, or throw &lt;code&gt;std::bad_cast&lt;/code&gt; in the case of a reference.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usa exclusivamente para manejar el polimorfismo. Puede lanzar un puntero o referencia a cualquier tipo polim&amp;oacute;rfico a cualquier otro tipo de clase (un tipo polim&amp;oacute;rfico tiene al menos una funci&amp;oacute;n virtual, declarada o heredada). Puede usarlo para algo m&amp;aacute;s que lanzar hacia abajo: puede lanzar hacia los lados o incluso hacia arriba en otra cadena. El&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; buscar&amp;aacute; el objeto deseado y devolverlo si es posible. Si no puede, devolver&amp;aacute;&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el caso de un puntero, o arrojar&amp;aacute;&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::bad_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en el caso de una referencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9664183f661997b40ee907b0d2869013ea8b231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another &amp;mdash; such as casting the value from one pointer to another, or storing a pointer in an &lt;code&gt;int&lt;/code&gt;, or all sorts of other nasty things. Largely, the only guarantee you get with &lt;code&gt;reinterpret_cast&lt;/code&gt; is that normally if you cast the result back to the original type, you will get the exact same value (but &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; if the intermediate type is smaller than the original type). There are a number of conversions that &lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el lanzamiento m&amp;aacute;s peligroso y debe usarse con moderaci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Convierte un tipo directamente en otro, como convertir el valor de un puntero a otro, o almacenar un puntero en un&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , o todo tipo de otras cosas desagradables. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En gran medida, la &amp;uacute;nica garant&amp;iacute;a que obtiene con&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que, normalmente, si devuelve el resultado al tipo original, obtendr&amp;aacute; exactamente el mismo valor (pero&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; si el tipo intermedio es m&amp;aacute;s peque&amp;ntilde;o que el tipo original). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hay varias conversiones que&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No puede hacer, tambi&amp;eacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se usa principalmente para conversiones particularmente extra&amp;ntilde;as y manipulaciones de bits, como convertir un flujo de datos sin procesar en datos reales o almacenar datos en los bits bajos de un puntero en datos alineados.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6fbbe6178727abb8a717a316ffa1b7d497044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt; vs &lt;code&gt;dynamic_cast&lt;/code&gt; vs &lt;code&gt;reinterpret_cast&lt;/code&gt; internals view on a downcast/upcast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vista interna en un downcast / upcast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38b602c4cc2d63323ecfe0ae3d6bc96090e19770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, or pointer to &lt;code&gt;void*&lt;/code&gt;), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating &lt;code&gt;static_cast&lt;/code&gt; isn't necessary, but it's important to note that the &lt;code&gt;T(something)&lt;/code&gt; syntax is equivalent to &lt;code&gt;(T)something&lt;/code&gt; and should be avoided (more on that later). A &lt;code&gt;T(something, something_else)&lt;/code&gt; is safe, however, and guaranteed to call the constructor.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es el primer lanzamiento que debes intentar usar. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Hace cosas como conversiones impl&amp;iacute;citas entre tipos (como&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o puntero para&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), y tambi&amp;eacute;n puede llamar a funciones de conversi&amp;oacute;n expl&amp;iacute;citas (o impl&amp;iacute;citas). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En muchos casos, declarar expl&amp;iacute;citamente&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es necesario, pero es importante tener en cuenta que la&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;sintaxis de&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es equivalente a&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(T)something&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y debe evitarse (m&amp;aacute;s sobre eso m&amp;aacute;s adelante). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo,&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;una&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something, something_else)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es segura y garantiza llamar al constructor.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f10b3c4d099cea83615e753239bff94e7f3c1ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C-style cast&lt;/strong&gt; and &lt;strong&gt;function-style cast&lt;/strong&gt; are casts using &lt;code&gt;(type)object&lt;/code&gt; or &lt;code&gt;type(object)&lt;/code&gt;, respectively, and are functionally equivalent. They are defined as the first of the following which succeeds:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La conversi&amp;oacute;n de estilo C&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;conversi&amp;oacute;n de estilo de funci&amp;oacute;n&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; son conversiones utilizando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(object)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , respectivamente, y son funcionalmente equivalentes. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Se definen como el primero de los siguientes que tiene &amp;eacute;xito:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d2d12690e92643857e438e651091583a31a42fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: Cast from Derived to Base or viceversa creates &lt;em&gt;new&lt;/em&gt; copy! For people coming from C#/Java, this can be a huge surprise because the result is basically a chopped off object created from Derived.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gotcha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &amp;iexcl;Transmitir de Derivado a Base o viceversa crea una &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;nueva&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; copia! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para las personas que vienen de C # / Java, esto puede ser una gran sorpresa porque el resultado es b&amp;aacute;sicamente un objeto cortado creado a partir de Derived.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bac6e263f5a53183ab317b8999b06f4e4af8c6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: If you cast base pointer to derived pointer but if actual object is not really derived type then you &lt;em&gt;don't&lt;/em&gt; get error. You get bad pointer and  very likely a segfault at runtime. Same goes for &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gotcha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : si lanzas el puntero base al puntero derivado pero si el objeto real no es realmente un tipo derivado, entonces &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;no&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; obtienes un error. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Obtiene un puntero incorrecto y muy probablemente un segfault en tiempo de ejecuci&amp;oacute;n. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Lo mismo va para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db0842ccf51dfcb3d7efbeb12fceeeb77b0d2fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use C++ cast&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cu&amp;aacute;ndo usar C ++ cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc1891b50452cabe6ee24f5611acdca816c45c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce66e5c538d901143e8ead7a542d10eb15e5c439" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;const_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac4eb9b5acd87e28c62b5fbc4faaaf1db3512a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dynamic_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81e44620028491193504c883ef72fcd607f8dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dynamic_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd6415d2956dc3e1e675882f861d933d45d68c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c70ae525e0f9d6b46225d67d2b8845f7f0d2307d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67dbf2071e10cdcee9f7c486795a8b88d9c98465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba9b167ee3e215ecec1037311a373547f6128c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;static_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42c0032b3b16e37db02cd204b0858aa30912b0e" translate="yes" xml:space="preserve">
          <source>Another example is when you want to implement &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; as well as &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt;. To avoid code duplication, you can apply const_cast to return value of one function from another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Otro ejemplo es cuando desea implementar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; as&amp;iacute; como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para evitar la duplicaci&amp;oacute;n de c&amp;oacute;digo, puede aplicar const_cast para devolver el valor de una funci&amp;oacute;n de otra.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe1de896ffacbbb4b8376d2bab06c2d9fc6dd83d" translate="yes" xml:space="preserve">
          <source>Below are some of the &lt;strong&gt;practical examples&lt;/strong&gt; when I used &lt;strong&gt;static_cast&lt;/strong&gt;, &lt;strong&gt;dynamic_cast&lt;/strong&gt;, &lt;strong&gt;const_cast&lt;/strong&gt;, &lt;strong&gt;reinterpret_cast&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A continuaci&amp;oacute;n se presentan algunos &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ejemplos pr&amp;aacute;cticos&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; cuando utilic&amp;eacute; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06aad5787dbc559de97b06dabcf6d4d79876f8f2" translate="yes" xml:space="preserve">
          <source>But because &lt;code&gt;b2s[0]&lt;/code&gt; was not a &lt;code&gt;D&lt;/code&gt;, it now points to an undefined memory region.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Pero debido a que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no era una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , ahora apunta a una regi&amp;oacute;n de memoria indefinida.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5580b5b92994da98f29dcf66d694bd9af7c51b0f" translate="yes" xml:space="preserve">
          <source>But this is wrong, because D is actually at 0x7fffffffc930, what is at 0x7fffffffc940 is the B2-like structure inside D! So trash gets accessed.</source>
          <target state="translated">Pero esto está mal,porque D está en realidad a 0x7fffffc930,lo que está a 0x7fffffc940 es la estructura similar a B2 dentro de D! Así que se accede a la basura.</target>
        </trans-unit>
        <trans-unit id="1636407c1772330f5809d111fbef0d07de231b8f" translate="yes" xml:space="preserve">
          <source>C++ compiler already knows how to convert between scaler types such as float to int. Use &lt;code&gt;static_cast&lt;/code&gt; for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El compilador de C ++ ya sabe c&amp;oacute;mo convertir entre tipos de escaladores como float a int. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para ellos.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd84a23d42572cf02a2a2fb13fa9e63b4681b84e" translate="yes" xml:space="preserve">
          <source>C-style cast &lt;code&gt;(type)value&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;(type)value&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; conversi&amp;oacute;n &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(tipo) de&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; estilo C&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656825f0b6169386ec4a61349a410fbab8856086" translate="yes" xml:space="preserve">
          <source>C-style casts also ignore access control when performing a &lt;code&gt;static_cast&lt;/code&gt;, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los lanzamientos de estilo C tambi&amp;eacute;n ignoran el control de acceso al realizar un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo que significa que tienen la capacidad de realizar una operaci&amp;oacute;n que ning&amp;uacute;n otro lanzamiento puede. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, esto es principalmente un error, y en mi opini&amp;oacute;n es solo otra raz&amp;oacute;n para evitar los moldes de estilo C.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7405076271098f4474d3f1e565b760f01b07bb0" translate="yes" xml:space="preserve">
          <source>Cast from &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt; always succeeds if A and B are in inheritance hierarchy (or void) otherwise you get compile error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La conversi&amp;oacute;n de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; siempre tiene &amp;eacute;xito si A y B est&amp;aacute;n en la jerarqu&amp;iacute;a de herencia (o nula), de lo contrario, obtendr&amp;aacute; un error de compilaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9197bfc872a74595c98aaafe8ed8a9bd494568ee" translate="yes" xml:space="preserve">
          <source>Compile, run and disassemble with:</source>
          <target state="translated">Compilar,ejecutar y desmontar con:</target>
        </trans-unit>
        <trans-unit id="0ecc2a94cc30cef1234a946bcfde6dc1e7fb16a6" translate="yes" xml:space="preserve">
          <source>Consider the following code example:</source>
          <target state="translated">Considere el siguiente ejemplo de código:</target>
        </trans-unit>
        <trans-unit id="ed9c3d0787e29776fdb53b94bc5260e1d30832cb" translate="yes" xml:space="preserve">
          <source>Does &lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;this&lt;/a&gt; answer your question?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iquest; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Responde &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;esto a&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tu pregunta?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f88dd8c3d05c0119742997d832c827ad0bb6" translate="yes" xml:space="preserve">
          <source>Downcasting using the 'static_cast' in C++</source>
          <target state="translated">Downcasting usando el 'static_cast' en C++</target>
        </trans-unit>
        <trans-unit id="54a502b64c8f30908d5dc52ab0743b009011907f" translate="yes" xml:space="preserve">
          <source>First there is a NULL check, and it returns NULL if th einput is NULL.</source>
          <target state="translated">Primero hay una comprobación de NULL,y devuelve NULL si la entrada es NULL.</target>
        </trans-unit>
        <trans-unit id="36dfaeed59ce5f884e642ab58970b2b24e1fb11e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt; if cast is invalid then dynamic_cast will throw bad_cast exception.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; Si se lanza no es v&amp;aacute;lido entonces dynamic_cast arrojar&amp;aacute; una excepci&amp;oacute;n bad_cast.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fbfa303623ff499116f91b0b4f89533004f5e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt;, if cast is invalid then dynamic_cast will return nullptr.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , si la conversi&amp;oacute;n no es v&amp;aacute;lida, dynamic_cast devolver&amp;aacute; nullptr.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="736c92c74e98d64f9c01088b4c653eaddd3420d6" translate="yes" xml:space="preserve">
          <source>For C++ beginners C-style casts look like being the superset operation over C++ casts (static_cast&amp;lt;&amp;gt;(), dynamic_cast&amp;lt;&amp;gt;(), const_cast&amp;lt;&amp;gt;(), reinterpret_cast&amp;lt;&amp;gt;()) and someone could prefer them over the C++ casts. In fact C-style cast is the superset and shorter to write.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Para los principiantes de C ++, los lanzamientos de estilo C parecen ser la operaci&amp;oacute;n de superconjunto sobre los lanzamientos de C ++ (static_cast &amp;lt;&amp;gt; (), dynamic_cast &amp;lt;&amp;gt; (), const_cast &amp;lt;&amp;gt; (), reinterpret_cast &amp;lt;&amp;gt; ()) y alguien podr&amp;iacute;a preferirlos sobre los lanzamientos de C ++ . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De hecho, el elenco de estilo C es el superconjunto y m&amp;aacute;s corto de escribir.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a64668ac9673b2f10528d076df1cf9bd7b353" translate="yes" xml:space="preserve">
          <source>For example, you can load 4 bytes of float to 4 bytes of int to see how bits in float looks like.</source>
          <target state="translated">Por ejemplo,puedes cargar 4 bytes de flotación a 4 bytes de int para ver cómo se ven los bits en la flotación.</target>
        </trans-unit>
        <trans-unit id="4e6e7d43a0aac95fd86233b9dccdee4f262952d7" translate="yes" xml:space="preserve">
          <source>From the stdout output we see:</source>
          <target state="translated">Por la salida stdout que vemos:</target>
        </trans-unit>
        <trans-unit id="c449c5ff531b0ce703b262016b6a4ef0245fc823" translate="yes" xml:space="preserve">
          <source>Function-style cast &lt;code&gt;type(value)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;type(value)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; conversi&amp;oacute;n de estilo de funci&amp;oacute;n &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(valor)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0547d3bb719cf7855bcd1808ffcaa7f313fa0d3a" translate="yes" xml:space="preserve">
          <source>Here is a short quote from Bjarne Stroustrup's (the author of C++) book The C++ Programming Language 4th edition - page 302.</source>
          <target state="translated">Aquí hay una breve cita del libro de Bjarne Stroustrup (el autor de C++)El Lenguaje de Programación C++4ª edición-página 302.</target>
        </trans-unit>
        <trans-unit id="a1c4c328e5cddf9613426e0405a575561d1e72e6" translate="yes" xml:space="preserve">
          <source>Here is the sample.</source>
          <target state="translated">Aquí está la muestra.</target>
        </trans-unit>
        <trans-unit id="9f3be9905003f944fb72e085e1a9f85768a2652c" translate="yes" xml:space="preserve">
          <source>How does one decide which to use in which specific cases?</source>
          <target state="translated">¿Cómo se decide cuál utilizar en cada caso concreto?</target>
        </trans-unit>
        <trans-unit id="18fcef7f45a3483e9706e3199d5354f2d47ab262" translate="yes" xml:space="preserve">
          <source>How is dynamic_cast implemented</source>
          <target state="translated">¿Cómo se implementa dynamic_cast</target>
        </trans-unit>
        <trans-unit id="23479e09b4911601778d7e1e7417e287948175db" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;static_cast&lt;/code&gt; works for simple pointers (not pointers to pointers), so the above code can be rewritten to avoid &lt;code&gt;reinterpret_cast&lt;/code&gt; (at a price of an extra variable) in the following way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funciona para punteros simples (no punteros a punteros), por lo que el c&amp;oacute;digo anterior se puede reescribir para evitar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (al precio de una variable adicional) de la siguiente manera:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3abec9e72150397dbb79393a6acc1cc943245e48" translate="yes" xml:space="preserve">
          <source>I believe that this will give a good intuition on how those casts are different:</source>
          <target state="translated">Creo que esto dará una buena intuición de cómo esos moldes son diferentes:</target>
        </trans-unit>
        <trans-unit id="cc457185fb8b24739881731c33ce05ebf528e823" translate="yes" xml:space="preserve">
          <source>I don't have the patience to analyze this further now, but as others said, the only way for this to work is for &lt;code&gt;__dynamic_cast&lt;/code&gt; to access some extra RTTI in-memory data structures that represent the class hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;No tengo la paciencia para analizar esto m&amp;aacute;s a fondo ahora, pero como otros dijeron, la &amp;uacute;nica forma de que esto funcione es que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; acceda a algunas estructuras de datos en memoria RTTI adicionales que representan la jerarqu&amp;iacute;a de clases.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="515abf6695de31a8b6fbf4cf01c72f8fac080514" translate="yes" xml:space="preserve">
          <source>I have never used &lt;code&gt;reinterpret_cast&lt;/code&gt;, and wonder whether running into a case that needs it isn't a smell of bad design. In the code base I work on &lt;code&gt;dynamic_cast&lt;/code&gt; is used a lot. The difference with  &lt;code&gt;static_cast&lt;/code&gt; is that a &lt;code&gt;dynamic_cast&lt;/code&gt; does runtime checking which may (safer) or may not (more overhead) be what you want (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;msdn&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Nunca he usado &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y me pregunto si encontrarse con un caso que lo necesita no huele a mal dise&amp;ntilde;o. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En la base de c&amp;oacute;digo que trabajo en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se usa mucho. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;La diferencia con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; es que un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; realiza una verificaci&amp;oacute;n de tiempo de ejecuci&amp;oacute;n que puede (m&amp;aacute;s seguro) o no (m&amp;aacute;s sobrecarga) ser lo que desea (ver &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;msdn&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04ba2c9bedbaf0f352749135eff101a3f5c9ea" translate="yes" xml:space="preserve">
          <source>If an abort is the only action your code can take, maybe you only want to enable the &lt;code&gt;dynamic_cast&lt;/code&gt; in debug builds (&lt;code&gt;-NDEBUG&lt;/code&gt;), and use &lt;code&gt;static_cast&lt;/code&gt; otherwise, e.g. &lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;as done here&lt;/a&gt;, to not slow down your fast runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si un aborto es la &amp;uacute;nica acci&amp;oacute;n que puede llevar a cabo su c&amp;oacute;digo, tal vez solo desee habilitar el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;las &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;versiones&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de depuraci&amp;oacute;n ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-NDEBUG&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), y use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; de lo&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contrario, por ejemplo, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;como se hace aqu&amp;iacute;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , para no ralentizar sus ejecuciones r&amp;aacute;pidas.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8e4f125f7aa40f62e946039c6563eb233f1cbd" translate="yes" xml:space="preserve">
          <source>In addition to the other answers so far, here is unobvious example where &lt;code&gt;static_cast&lt;/code&gt; is not sufficient so that &lt;code&gt;reinterpret_cast&lt;/code&gt; is needed. Suppose there is a function which in an output parameter returns pointers to objects of different classes (which do not share a common base class). A real example of such function is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;CoCreateInstance()&lt;/code&gt;&lt;/a&gt; (see the last parameter, which is in fact &lt;code&gt;void**&lt;/code&gt;). Suppose you request particular class of object from this function, so you know in advance the type for the pointer (which you often do for COM objects). In this case you cannot cast pointer to your pointer into &lt;code&gt;void**&lt;/code&gt; with &lt;code&gt;static_cast&lt;/code&gt;: you need &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Adem&amp;aacute;s de las otras respuestas hasta ahora, aqu&amp;iacute; hay un ejemplo obvio en el que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no es suficiente para que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;se necesite &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Supongamos que hay una funci&amp;oacute;n que en un par&amp;aacute;metro de salida devuelve punteros a objetos de diferentes clases (que no comparten una clase base com&amp;uacute;n). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un ejemplo real de dicha funci&amp;oacute;n es &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;CoCreateInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (ver el &amp;uacute;ltimo par&amp;aacute;metro, que de hecho es &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Suponga que solicita una clase particular de objeto de esta funci&amp;oacute;n, de modo que sepa de antemano el tipo del puntero (lo que suele hacer con los objetos COM). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;En este caso, no puede convertir el puntero a su puntero en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; con &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : necesita &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">En código:</target>
        </trans-unit>
        <trans-unit id="f48f5e44150c506148699b958474295be46ab891" translate="yes" xml:space="preserve">
          <source>In this answer, I want to compare these three mechanisms on a concrete upcast/downcast example and analyze what happens to the underlying pointers/memory/assembly to give a concrete understanding of how they compare.</source>
          <target state="translated">En esta respuesta,quiero comparar estos tres mecanismos en un ejemplo concreto de &quot;upcastdowncast&quot; y analizar lo que sucede con el conjunto de memoria de puntero subyacente para dar una comprensión concreta de cómo se comparan.</target>
        </trans-unit>
        <trans-unit id="a300a6b8a5c1988450622619a2f1fd181a511aa1" translate="yes" xml:space="preserve">
          <source>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a &lt;code&gt;reinterpret_cast&lt;/code&gt;, and the latter should be preferred when explicit casting is needed, unless you are sure &lt;code&gt;static_cast&lt;/code&gt; will succeed or &lt;code&gt;reinterpret_cast&lt;/code&gt; will fail. Even then, consider the longer, more explicit option.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, puede usarse como reemplazo de otros lanzamientos en algunos casos, pero puede ser extremadamente peligroso debido a la capacidad de convertirse en &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y este &amp;uacute;ltimo debe preferirse cuando se necesita un lanzamiento expl&amp;iacute;cito, a menos que est&amp;eacute; seguro de que &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tendr&amp;aacute; &amp;eacute;xito o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fallar&amp;aacute;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Incluso entonces, considere la opci&amp;oacute;n m&amp;aacute;s larga y m&amp;aacute;s expl&amp;iacute;cita.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea24132facf650f92f3d393dce2d133da6cea48" translate="yes" xml:space="preserve">
          <source>It might help if you know little bit of internals...</source>
          <target state="translated">Podría ayudar si conoces un poco de los aspectos internos...</target>
        </trans-unit>
        <trans-unit id="53b2681298369920fcd6103c5e7b3fa26cea6a2a" translate="yes" xml:space="preserve">
          <source>It must therefore start from the &lt;code&gt;B2&lt;/code&gt; entry for that table, then walk this class hierarchy until it finds that the vtable for a &lt;code&gt;D&lt;/code&gt; typecast from &lt;code&gt;b2s[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, debe comenzar desde la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;entrada &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para esa tabla, luego recorrer esta jerarqu&amp;iacute;a de clases hasta que encuentre la tabla vtable para una &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;conversi&amp;oacute;n de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78486bda2cd7b271217be869eeddf907840635c2" translate="yes" xml:space="preserve">
          <source>Now, as mentioned at: &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/a&gt; in order to support the virtual method calls efficiently, the memory data structure of &lt;code&gt;D&lt;/code&gt; has to look something like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ahora, como se menciona en: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para admitir las llamadas a m&amp;eacute;todos virtuales de manera eficiente, la estructura de datos de memoria de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; tiene que ser algo as&amp;iacute; como:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27ecdae4b0aaf4635a3e357abe87725b694b381a" translate="yes" xml:space="preserve">
          <source>Now, we can finally get back to type casting and the analysis of our concrete example.</source>
          <target state="translated">Ahora,podemos finalmente volver a la fundición de tipos y al análisis de nuestro ejemplo concreto.</target>
        </trans-unit>
        <trans-unit id="f68a5338ab683eaa5777e7d2d78aed399812d592" translate="yes" xml:space="preserve">
          <source>Obviously, if data is not correct for the type, you may get segfault.</source>
          <target state="translated">Obviamente,si los datos no son correctos para el tipo,puede obtenerse un fallo de segmento.</target>
        </trans-unit>
        <trans-unit id="31c25bfb760007360abc96fd76af460f7f9fef16" translate="yes" xml:space="preserve">
          <source>One example where this comes handy is iterating through some container like &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; which only returns its elements as const to make sure you don't change its key. However if your intent is to modify object's non-key members then it should be ok. You can use const_cast to remove constness.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Un ejemplo donde esto es &amp;uacute;til es iterar a trav&amp;eacute;s de alg&amp;uacute;n contenedor como &lt;/font&gt;&lt;/font&gt; &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que solo devuelve sus elementos como constante para asegurarse de que no cambie su clave. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Sin embargo, si su intenci&amp;oacute;n es modificar los miembros no clave del objeto, entonces deber&amp;iacute;a estar bien. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Puede usar const_cast para eliminar la constness.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51b2ca86efbcbe6d929deae1e6732505d970d7c1" translate="yes" xml:space="preserve">
          <source>One this to be noted is: The &lt;strong&gt;dynamic_cast&lt;/strong&gt; would fail at run-time, however on most compilers it will also fail to compile because there are no virtual functions in the struct of the pointer being casted, meaning &lt;strong&gt;dynamic_cast&lt;/strong&gt; will work with only polymorphic class pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Algo&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;debe tenerse en cuenta es que: &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Dynamic_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; fallar&amp;aacute; en tiempo de ejecuci&amp;oacute;n, sin embargo, en la mayor&amp;iacute;a de los compiladores tambi&amp;eacute;n fallar&amp;aacute; al compilar porque no hay funciones virtuales en la estructura del puntero que se est&amp;aacute; &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;lanzando&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , lo que significa que &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; funcionar&amp;aacute; solo con punteros de clase polim&amp;oacute;rficos .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89e74eb11db54e231c9de7e18b7b9c7d4b12bdf1" translate="yes" xml:space="preserve">
          <source>Only line (4) compiles without error. Only &lt;strong&gt;reinterpret_cast&lt;/strong&gt; can be used to convert a pointer to an object to a pointer to an any unrelated object type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo la l&amp;iacute;nea (4) compila sin error. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Solo &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se puede usar para convertir un puntero a un objeto en un puntero a cualquier tipo de objeto no relacionado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abfbd6cd15d63c23c7d3d30c8e3a4758e6086f36" translate="yes" xml:space="preserve">
          <source>Otherwise, it sets up some arguments in the RDX, RSI and RDI and calls &lt;code&gt;__dynamic_cast&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De lo contrario, configura algunos argumentos en RDX, RSI y RDI y llama a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">Posible salida:</target>
        </trans-unit>
        <trans-unit id="538fb0772ec63cf8b0351898c002fdafced0cdc2" translate="yes" xml:space="preserve">
          <source>Related questions:</source>
          <target state="translated">Preguntas relacionadas:</target>
        </trans-unit>
        <trans-unit id="313f99c939e5a52696cfdcc3b8912697de919023" translate="yes" xml:space="preserve">
          <source>Tested on Ubuntu 18.04 amd64, GCC 7.4.0.</source>
          <target state="translated">Probado en Ubuntu 18.04 amd64,GCC 7.4.0.</target>
        </trans-unit>
        <trans-unit id="021a66c8a07594230bc210a2b2a2c898cb33f663" translate="yes" xml:space="preserve">
          <source>The disassembly is:</source>
          <target state="translated">El desmontaje es:</target>
        </trans-unit>
        <trans-unit id="0bc099ba8fe11b0382c44132df75211559d3b400" translate="yes" xml:space="preserve">
          <source>The key fact is that the memory data structure of &lt;code&gt;D&lt;/code&gt; contains inside it memory structure compatible with that of &lt;code&gt;B1&lt;/code&gt; and that of &lt;code&gt;B2&lt;/code&gt; internally.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El hecho clave es que la estructura de datos de memoria de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; contiene en su interior una estructura de memoria compatible con la de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y la de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; internamente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3e976115f67a49acd1ee58f48abd198fb94c35" translate="yes" xml:space="preserve">
          <source>The main problem of C-style casts is that they hide developer real intention of the cast. The C-style casts can do virtually all types of casting from normally safe casts done by static_cast&amp;lt;&amp;gt;() and dynamic_cast&amp;lt;&amp;gt;() to potentially dangerous casts like const_cast&amp;lt;&amp;gt;(), where const modifier can be removed so the const variables can be modified and reinterpret_cast&amp;lt;&amp;gt;() that can even reinterpret integer values to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;El principal problema de los elencos estilo C es que ocultan la verdadera intenci&amp;oacute;n del desarrollador del elenco. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Los lanzamientos de estilo C pueden realizar pr&amp;aacute;cticamente todos los tipos de lanzamientos desde lanzamientos normalmente seguros realizados por static_cast &amp;lt;&amp;gt; () y dynamic_cast &amp;lt;&amp;gt; () a lanzamientos potencialmente peligrosos como const_cast &amp;lt;&amp;gt; (), donde el modificador const puede eliminarse para que las variables const se puede modificar y reinterpretar_cast &amp;lt;&amp;gt; () que incluso puede reinterpretar valores enteros en punteros.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11774ec8768fb7ecd6984b5866c62057e7c4d28b" translate="yes" xml:space="preserve">
          <source>The main reason why C++ casts were added to the language was to allow a developer to clarify his intentions - why he is going to do that cast. By using C-style casts which are perfectly valid in C++ you are making your code less readable and more error prone especially for other developers who didn't create your code. So to make your code more readable and explicit you should always prefer C++ casts over C-style casts.</source>
          <target state="translated">La principal razón por la que se añadieron los moldes de C++al lenguaje fue para permitir a un desarrollador aclarar sus intenciones-por qué va a hacer ese molde.Al usar moldes de estilo C que son perfectamente válidos en C++estás haciendo tu código menos legible y más propenso a errores,especialmente para otros desarrolladores que no crearon tu código.Así que para hacer tu código más legible y explícito siempre deberías preferir los moldes de C++a los de C-style.</target>
        </trans-unit>
        <trans-unit id="5ef5fdecb5232e3e7590fa6bc96a02829a894434" translate="yes" xml:space="preserve">
          <source>Then, on the downcast sections, it is now easy to understand how the invalid ones fail and why:</source>
          <target state="translated">Entonces,en las secciones más bajas,ahora es fácil entender cómo fallan los inválidos y por qué:</target>
        </trans-unit>
        <trans-unit id="59fa3cd980523ba22f27487dd76ff3b1ac65f2e7" translate="yes" xml:space="preserve">
          <source>There is no runtime overhead for this cast.</source>
          <target state="translated">No hay tiempo de ejecución para este elenco.</target>
        </trans-unit>
        <trans-unit id="9779cf96d0cd458a50e000127ed6fd4a8589f7ec" translate="yes" xml:space="preserve">
          <source>There is no way this can be done at compile time, and we will confirm that from the disassembly:</source>
          <target state="translated">No hay forma de que esto se pueda hacer en tiempo de compilación,y lo confirmaremos a partir del desmontaje:</target>
        </trans-unit>
        <trans-unit id="a8b241867b6c7154fb8aa178b38b565998bf85c2" translate="yes" xml:space="preserve">
          <source>Therefore we reach the critical conclusion:</source>
          <target state="translated">Por lo tanto,llegamos a la conclusión crítica:</target>
        </trans-unit>
        <trans-unit id="483865e373a36f9d0c75153eca9c80714054a5ae" translate="yes" xml:space="preserve">
          <source>Therefore, if your code is not able to check for that &lt;code&gt;nullptr&lt;/code&gt; and take a valid non-abort action, you should just use &lt;code&gt;static_cast&lt;/code&gt; instead of dynamic cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, si su c&amp;oacute;digo no puede verificar ese &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y tomar una acci&amp;oacute;n v&amp;aacute;lida de no aborto, debe usar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; en&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;conversi&amp;oacute;n&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; din&amp;aacute;mica.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14e84c6fca606a6849c36eb8eee9e7dfa0759f47" translate="yes" xml:space="preserve">
          <source>Therefore, the implicit &lt;code&gt;static_cast&lt;/code&gt; done there did correctly calculate the offset from the full &lt;code&gt;D&lt;/code&gt; data structure at 0x7fffffffc930 to the &lt;code&gt;B2&lt;/code&gt; like one which is at 0x7fffffffc940. We also infer that what lies between 0x7fffffffc930 and 0x7fffffffc940 is likely be the &lt;code&gt;B1&lt;/code&gt; data and vtable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por lo tanto, el &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; impl&amp;iacute;cito &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;hecho all&amp;iacute; calcul&amp;oacute; correctamente el desplazamiento de la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;estructura de datos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; completa &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en 0x7fffffffc930 al &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como uno que est&amp;aacute; en 0x7fffffffc940. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Tambi&amp;eacute;n inferimos que lo que se encuentra entre 0x7fffffffc930 y 0x7fffffffc940 es probable que sean los &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;datos &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y vtable.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a6c94b2c9fb51ea9c355e138cf15808a4189def" translate="yes" xml:space="preserve">
          <source>This C-style cast is far more dangerous than the named conversion operators
  because the notation is harder to spot in a large program and the kind of conversion intended by the programmer is not explicit.</source>
          <target state="translated">Este molde de estilo C es mucho más peligroso que los operadores de conversión nombrados porque la notación es más difícil de detectar en un programa grande y el tipo de conversión que pretende el programador no es explícito.</target>
        </trans-unit>
        <trans-unit id="b424ec8cf10bbc9a473b4bde47a88a393042ec27" translate="yes" xml:space="preserve">
          <source>This basically says that take these bytes at this memory location and think of it as given object.</source>
          <target state="translated">Esto básicamente dice que tomar estos bytes en esta ubicación de memoria y pensar en ella como un objeto dado.</target>
        </trans-unit>
        <trans-unit id="7a0ffe41fea2e124ad060c68ef6887208a4ba8f4" translate="yes" xml:space="preserve">
          <source>This is why reinterpret cast is potentially expensive! Here is &lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;an example where a one liner patch converting a &lt;code&gt;dynamic_cast&lt;/code&gt; to a &lt;code&gt;static_cast&lt;/code&gt; in a complex project reduced runtime by 33%!&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Es por eso que reinterpretar el elenco es potencialmente costoso! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&amp;iexcl;Aqu&amp;iacute; hay &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;un ejemplo en el que un parche de una l&amp;iacute;nea que convierte una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en una &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; en un proyecto complejo reduce el tiempo de ejecuci&amp;oacute;n en un 33%! &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d99df69ad599cd0fda2e2aff6e4c8d7303c5683d" translate="yes" xml:space="preserve">
          <source>This means, dynamic_cast is very expensive compared to static_cast!</source>
          <target state="translated">Esto significa que el dynamic_cast es muy caro comparado con el static_cast!</target>
        </trans-unit>
        <trans-unit id="0acf04d9d8a83be16d8528eb9bd0b82b587353c8" translate="yes" xml:space="preserve">
          <source>This safety check allows you to query if a base class pointer is of a given type at runtime by checking a return of &lt;code&gt;nullptr&lt;/code&gt; which indicates an invalid downcast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Esta comprobaci&amp;oacute;n de seguridad le permite consultar si un puntero de clase base es de un tipo determinado en tiempo de ejecuci&amp;oacute;n mediante la comprobaci&amp;oacute;n de un retorno de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que indica un downcast no v&amp;aacute;lido.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e15b1ea2c7f824ff37c90f1e8b7936f27b22efe9" translate="yes" xml:space="preserve">
          <source>This way, when &lt;code&gt;D&lt;/code&gt; gets passed to the base type array, the type cast actually calculates that offset and points something that looks exactly like a valid &lt;code&gt;B2&lt;/code&gt; in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;De esta manera, cuando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pasa a la matriz de tipos base, el tipo de conversi&amp;oacute;n calcula ese desplazamiento y se&amp;ntilde;ala algo que se ve exactamente como un &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; v&amp;aacute;lido &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;en la memoria:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="461ce6d7ac7fffd2efe5f78172ddcd55ba4ade9c" translate="yes" xml:space="preserve">
          <source>To understand, let's consider below code snippet:</source>
          <target state="translated">Para entenderlo,consideremos el siguiente fragmento de código:</target>
        </trans-unit>
        <trans-unit id="71edd74dd328a7b59bb0add24d26eaba325228e3" translate="yes" xml:space="preserve">
          <source>Unlike other casts, there is runtime overhead.</source>
          <target state="translated">A diferencia de otros yesos,hay un tiempo de ejecución por encima.</target>
        </trans-unit>
        <trans-unit id="b440267b36cd050855228bf69a71053dd1f4cede" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const_cast&lt;/code&gt; for casting away &lt;code&gt;const/volatile&lt;/code&gt;.  Avoid this unless you are stuck using a const-incorrect API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para desechar &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const/volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Evita esto a menos que est&amp;eacute;s atascado usando una API const-incorrecta.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33967e4229bc5029b76a7118b208e43eaeaf831f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;dynamic_cast&lt;/code&gt; for converting pointers/references within an inheritance hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para convertir punteros / referencias dentro de una jerarqu&amp;iacute;a de herencia.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74ffc11bceafcdfafef3cb243e8490c234069647" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reinterpret_cast&lt;/code&gt; for low-level reinterpreting of bit patterns.  Use with extreme caution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Utilice &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para la &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpretaci&amp;oacute;n&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; de bajo nivel de patrones de bits. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Usar con extrema precauci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06070b016ef3361153d9ac1fe2f7fb6f604e13da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;static_cast&lt;/code&gt; for ordinary type conversions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para conversiones de tipo ordinario.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f261c621539ea72804a1bc9cd48ba82eab320a3e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;const_cast&lt;/strong&gt; to remove the const qualifier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para eliminar el calificador const.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16639515eac22573770f0b98cac7779e7069d25a" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;reinterpret_cast&lt;/strong&gt; to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if we know what we are doing and we understand the aliasing issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Utilice &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para realizar conversiones inseguras de tipos de puntero hacia y desde enteros y otros tipos de puntero. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Use esto solo si sabemos lo que estamos haciendo y entendemos los problemas de alias.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f63b8d2d1460077022f7bcf653b5d9e78a78586" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;static_cast&lt;/strong&gt; as the equivalent of a C-style cast that does value conversion, or when we need to explicitly up-cast a pointer from a class to its superclass.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Utilice &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como el equivalente de una conversi&amp;oacute;n de estilo C que realiza la conversi&amp;oacute;n de valor, o cuando necesitemos lanzar expl&amp;iacute;citamente un puntero desde una clase a su superclase.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6036b024144db4c9c71396f2a743f0c5ba4137ea" translate="yes" xml:space="preserve">
          <source>We can confirm this from the horrendous &lt;code&gt;-O0&lt;/code&gt; assembly that just moves the value around:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Podemos confirmar esto desde el horrendo &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ensamblaje &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-O0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que solo mueve el valor:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb082e564095f32452366d629d1538ddb3671" translate="yes" xml:space="preserve">
          <source>What are the proper uses of:</source>
          <target state="translated">¿Cuáles son los usos apropiados de:</target>
        </trans-unit>
        <trans-unit id="7f0038b6257ec0adb6364ddfba9c0c40897c49cf" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used</source>
          <target state="translated">¿Cuándo se debe utilizar static_cast,dynamic_cast,const_cast y reinterpret_cast</target>
        </trans-unit>
        <trans-unit id="5e05d0643bef3dea2a364460dccc72e536e8737e" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</source>
          <target state="translated">¿Cuándo se debe utilizar static_cast,dynamic_cast,const_cast y reinterpret_cast?</target>
        </trans-unit>
        <trans-unit id="3bde5d7164ed2cf947d8f811c40c55b8a5630d9d" translate="yes" xml:space="preserve">
          <source>When you ask compiler to convert from type &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;static_cast&lt;/code&gt; calls &lt;code&gt;B&lt;/code&gt;'s constructor passing &lt;code&gt;A&lt;/code&gt; as param. Alternatively, &lt;code&gt;A&lt;/code&gt; could have a conversion operator (i.e. &lt;code&gt;A::operator B()&lt;/code&gt;).  If &lt;code&gt;B&lt;/code&gt; doesn't have such constructor, or &lt;code&gt;A&lt;/code&gt; doesn't have a conversion operator, then you get compile time error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cuando le pide al compilador que convierta de tipo &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; llama al &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;constructor de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; pasando &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; como par&amp;aacute;metro. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Alternativamente, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; podr&amp;iacute;a tener un operador de conversi&amp;oacute;n (es decir, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A::operator B()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene dicho constructor, o &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; no tiene un operador de conversi&amp;oacute;n, entonces obtiene un error de tiempo de compilaci&amp;oacute;n.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3782acc436913a8ac6615a5bf1fb86f8abc2ba6a" translate="yes" xml:space="preserve">
          <source>While other answers nicely described all differences between C++ casts, I would like to add a short note why you should not use C-style casts &lt;code&gt;(Type) var&lt;/code&gt; and &lt;code&gt;Type(var)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Si bien otras respuestas describieron muy bien todas las diferencias entre los moldes de C ++, me gustar&amp;iacute;a agregar una breve nota de por qu&amp;eacute; no deber&amp;iacute;a usar moldes de estilo C &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Type) var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; y &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type(var)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c2977aa35aba78f7d1f5411696d1f9e5128d3" translate="yes" xml:space="preserve">
          <source>While static_cast can do non-const to const it can't go other way around. The const_cast can do both ways.</source>
          <target state="translated">Mientras que static_cast puede hacer non-constante para constar no puede ir al revés.El const_cast puede hacer ambas cosas.</target>
        </trans-unit>
        <trans-unit id="3f21d8efd7b1b2b65b636be1695a8129ab01e5c4" translate="yes" xml:space="preserve">
          <source>an upcast or downcast only needs to shift the pointer value by a value known at compile time</source>
          <target state="translated">un upcast o downcast sólo necesita cambiar el valor del puntero por un valor conocido en tiempo de compilación</target>
        </trans-unit>
        <trans-unit id="c20277379a211f27a3787e85a15e1ea6caec3973" translate="yes" xml:space="preserve">
          <source>check if pointer is NULL, and if yes return NULL</source>
          <target state="translated">compruebe si el puntero es NULL,y si es así devuelva NULL</target>
        </trans-unit>
        <trans-unit id="7322aa6022cbcaa23db1eadc8aad6574ae91af74" translate="yes" xml:space="preserve">
          <source>dynamic_cast uses runtime type information to figure out if cast is valid. For example, &lt;code&gt;(Base*)&lt;/code&gt; to &lt;code&gt;(Derived*)&lt;/code&gt; may fail if pointer is not actually of derived type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast utiliza informaci&amp;oacute;n de tipo de tiempo de ejecuci&amp;oacute;n para determinar si la conversi&amp;oacute;n es v&amp;aacute;lida. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Por ejemplo, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Base*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; a &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Derived*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; puede fallar si el puntero no es del tipo derivado.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94315b64fee53e82e90751f8a115b6a8ef3d6783" translate="yes" xml:space="preserve">
          <source>except that this one has the vtable for &lt;code&gt;D&lt;/code&gt; instead of &lt;code&gt;B2&lt;/code&gt;, and therefore all virtual calls work transparently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;excepto que este tiene la vtable para &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; en&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; lugar de &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , y por lo tanto todas las llamadas virtuales funcionan de manera transparente.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="682a50d19e416195436708e48c7761923b8d6651" translate="yes" xml:space="preserve">
          <source>main.cpp</source>
          <target state="translated">main.cpp</target>
        </trans-unit>
        <trans-unit id="02f4fd2e20c3a623ba1400f9952d470361ae4d59" translate="yes" xml:space="preserve">
          <source>otherwise, subtract 0x10 from it to reach the &lt;code&gt;D&lt;/code&gt; which does not exist</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;de lo contrario, reste 0x10 para llegar a la &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; que no existe&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="253191d40c8e7038fb1d1250e212cabda1243839" translate="yes" xml:space="preserve">
          <source>so we see that GCC does:</source>
          <target state="translated">así que vemos que GCC lo hace:</target>
        </trans-unit>
        <trans-unit id="1889aaee9b532814e1aa423ce3e5acf4abeeb50d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;setarch&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;used to disable ASLR&lt;/a&gt; to make it easier to compare runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;donde &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setarch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; se &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;usa para deshabilitar ASLR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; para que sea m&amp;aacute;s f&amp;aacute;cil comparar ejecuciones.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
