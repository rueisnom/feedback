<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/332030">
    <body>
      <group id="332030">
        <trans-unit id="99d04794a56a36c73842b9c59db592858c5153b2" translate="yes" xml:space="preserve">
          <source>(Also referes this to understand the explaination : &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Также ссылаются на это, чтобы понять объяснение: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20ea5fe6eac765221d795971a58d40c72a549c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_cast&lt;/code&gt; also works similarly on &lt;code&gt;volatile&lt;/code&gt;, though that's less common.</source>
          <target state="translated">&lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; также работает аналогично для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , хотя это встречается реже.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cb140de7b7093462f7632a3a68ae36acda609d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dyanamic_cast&lt;/code&gt;: does the same address offset at runtime like &lt;code&gt;static_cast&lt;/code&gt;, but also and an expensive safety check that a downcast is correct using RTTI.</source>
          <target state="translated">&lt;code&gt;dyanamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : делает то же самое смещение адреса во время выполнения, что и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , но также и дорогую проверку безопасности, что обратное преобразование корректно с использованием RTTI.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be2bec76e493134d3956e22fc405c489d20b9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0])           0&lt;/code&gt;: C++ actually found that the cast was invalid and returned &lt;code&gt;nullptr&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0]) 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : C ++ фактически обнаружил, что приведение было недопустимым, и вернул &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; !&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ae0273f29c20fdaacc0b3d1e53c4b01482935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&lt;/code&gt; has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using &lt;code&gt;virtual&lt;/code&gt; inheritance. It also can only go through public inheritance - it will always fail to travel through &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</source>
          <target state="translated">&lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; есть некоторые ограничения. Он не работает, если в иерархии наследования есть несколько объектов одного типа (так называемый &amp;laquo;страшный бриллиант&amp;raquo;), и вы не используете &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; наследование. Он также может проходить только через публичное наследство - он всегда не сможет пройти через &lt;/font&gt;&lt;/font&gt; &lt;code&gt;protected&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt; &lt;code&gt;private&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; наследование. Однако это редко является проблемой, поскольку такие формы наследования встречаются редко.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c97abb66902355c4c6142e48247c49964d2fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1])           0x7fffffffc940&lt;/code&gt; this one just believes us blindly: we said there is a &lt;code&gt;D&lt;/code&gt; at address &lt;code&gt;b2s[1]&lt;/code&gt;, and the compiler does no offset calculations.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1]) 0x7fffffffc940&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; этот просто верит нам слепо: мы сказали, что есть &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;адрес &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; по адресу &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и компилятор не выполняет вычисления смещения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b787f5723161dad2fb91c9d8e03daff42c020478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;, then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , затем &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c49d9ddb4d5244de47c1294badb2d827edd5dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;: does nothing at runtime, not even the address offset. The pointer must point exactly to the correct type, not even a base class works. You generally don't want this unless raw byte streams are involved.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : ничего не делает во время выполнения, даже смещение адреса. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Указатель должен точно указывать на правильный тип, даже базовый класс не работает. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Обычно вы этого не хотите, если не задействованы необработанные потоки байтов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b88df82db056e30e51342306a38d7ffd378796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0])            0x7fffffffc910&lt;/code&gt;: the compiler just went up 0x10 at compile time bytes to try and go from a &lt;code&gt;B2&lt;/code&gt; to the containing &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0]) 0x7fffffffc910&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : компилятор просто поднялся на 0x10 в байтах времени компиляции, чтобы попытаться перейти от &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; к содержащему &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46d0aa8846427aef9241fa0ca6cc93db712f4c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (see above), then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (см. выше), затем &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1924e08dfc6ff50fb972b89aa1c368e7c3dab218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (though ignoring access restrictions)</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (хотя игнорируя ограничения доступа)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dee972523c79dc0537e1cd4345ad549a504f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through &lt;code&gt;virtual&lt;/code&gt; inheritance. It does not do checking, however, and it is undefined behavior to &lt;code&gt;static_cast&lt;/code&gt; down a hierarchy to a type that isn't actually the type of the object.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; также может &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;приводиться&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; через иерархии наследования. Это не нужно при приведении вверх (к базовому классу), но при приведении вниз его можно использовать до тех пор, пока оно не преобразуется посредством &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; наследования. Однако он не выполняет проверку, и поведение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вниз по иерархии до типа, который на самом деле не является типом объекта, не определено.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4881bd0dc5fa56667dfcfde91be314eb4021fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt;: does one address offset at runtime (low runtime impact) and no safety checks that a downcast is correct.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : делает одно смещение адреса во время выполнения (низкое влияние времени выполнения) и не проверяет безопасность на предмет правильности даункаста.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33821fbc0a423b3a33e1211e663f237b1b8cb930" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(A lot of theoretical and conceptual explanation has been given above)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(Много теоретического и концептуального объяснения было дано выше)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e977b26b63a097b04ed436ec19c0f430ced5ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; can be used to remove or add &lt;code&gt;const&lt;/code&gt; to a variable; no other C++ cast is capable of removing it (not even &lt;code&gt;reinterpret_cast&lt;/code&gt;). It is important to note that modifying a formerly &lt;code&gt;const&lt;/code&gt; value is only undefined if the original variable is &lt;code&gt;const&lt;/code&gt;; if you use it to take the &lt;code&gt;const&lt;/code&gt; off a reference to something that wasn't declared with &lt;code&gt;const&lt;/code&gt;, it is safe. This can be useful when overloading member functions based on &lt;code&gt;const&lt;/code&gt;, for instance. It can also be used to add &lt;code&gt;const&lt;/code&gt; to an object, such as to call a member function overload.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может использоваться для удаления или добавления&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в переменную; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;никакой другой C ++ cast не способен удалить его (даже&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Важно отметить, что изменение прежнего&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;значения&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не определено, только если исходная переменная является&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;если вы используете его&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;чтобы взять&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; от ссылки на то&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;что не было объявлено с&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , это безопасно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Это может быть полезно, например, при перегрузке функций-членов на основе&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Его также можно использовать для добавления&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; к объекту, например, для вызова перегрузки функции-члена.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24212cba0632847457e6b4899173742e9cfd36ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards &amp;ndash; you can cast sideways or even up another chain. The &lt;code&gt;dynamic_cast&lt;/code&gt; will seek out the desired object and return it if possible. If it can't, it will return &lt;code&gt;nullptr&lt;/code&gt; in the case of a pointer, or throw &lt;code&gt;std::bad_cast&lt;/code&gt; in the case of a reference.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; используется исключительно для обработки полиморфизма. Вы можете привести указатель или ссылку на любой полиморфный тип к любому другому типу класса (полиморфный тип имеет как минимум одну виртуальную функцию, объявленную или унаследованную). Вы можете использовать его не только для того, чтобы бросать вниз - вы можете кастовать вбок или даже на другую цепь.&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет искать нужный объект и вернуть его&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;если&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;возможно. Если это невозможно, он вернет&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в случае указателя или бросит&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::bad_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в случае ссылки.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9664183f661997b40ee907b0d2869013ea8b231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another &amp;mdash; such as casting the value from one pointer to another, or storing a pointer in an &lt;code&gt;int&lt;/code&gt;, or all sorts of other nasty things. Largely, the only guarantee you get with &lt;code&gt;reinterpret_cast&lt;/code&gt; is that normally if you cast the result back to the original type, you will get the exact same value (but &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; if the intermediate type is smaller than the original type). There are a number of conversions that &lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - самый опасный тип, и его следует использовать очень экономно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он превращает один тип непосредственно в другой - например, приведение значения от одного указателя к другому или сохранение указателя в&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или всякие другие неприятные вещи. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В основном, единственная гарантия, которую вы получаете с&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; заключается в том, что обычно, если вы приведете результат обратно к исходному типу, вы получите точно такое же значение (но&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; если промежуточный тип меньше исходного типа). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Существует ряд преобразований, которые&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не могу сделать тоже. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он используется главным образом для особенно странных преобразований и битовых манипуляций, таких как превращение потока необработанных данных в реальные данные или хранение данных в младших битах указателя на выровненные данные.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6fbbe6178727abb8a717a316ffa1b7d497044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt; vs &lt;code&gt;dynamic_cast&lt;/code&gt; vs &lt;code&gt;reinterpret_cast&lt;/code&gt; internals view on a downcast/upcast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; внутреннее представление на downcast / upcast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38b602c4cc2d63323ecfe0ae3d6bc96090e19770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, or pointer to &lt;code&gt;void*&lt;/code&gt;), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating &lt;code&gt;static_cast&lt;/code&gt; isn't necessary, but it's important to note that the &lt;code&gt;T(something)&lt;/code&gt; syntax is equivalent to &lt;code&gt;(T)something&lt;/code&gt; and should be avoided (more on that later). A &lt;code&gt;T(something, something_else)&lt;/code&gt; is safe, however, and guaranteed to call the constructor.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; - первый каст, который вы должны попытаться использовать. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Он выполняет такие вещи, как неявные преобразования между типами (например,&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или указатель на&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ), а также может вызывать явные функции преобразования (или неявные). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Во многих случаях явное указание&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не является необходимым, но важно отметить,&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; синтаксис&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; T (что-то)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; эквивалентен&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(T)something&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и его следует избегать (подробнее об этом позже). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something, something_else)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; безопасно и гарантированно вызывает конструктор.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f10b3c4d099cea83615e753239bff94e7f3c1ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C-style cast&lt;/strong&gt; and &lt;strong&gt;function-style cast&lt;/strong&gt; are casts using &lt;code&gt;(type)object&lt;/code&gt; or &lt;code&gt;type(object)&lt;/code&gt;, respectively, and are functionally equivalent. They are defined as the first of the following which succeeds:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;С-стиль литые&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;функция стиль литой&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; являются слепками с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;использованием &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; или &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(object)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , соответственно, и функционально эквивалентны. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Они определены как первое из следующего, что успешно:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d2d12690e92643857e438e651091583a31a42fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: Cast from Derived to Base or viceversa creates &lt;em&gt;new&lt;/em&gt; copy! For people coming from C#/Java, this can be a huge surprise because the result is basically a chopped off object created from Derived.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Попался&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : приведение от Derived к Base или наоборот создаст &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;новую&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; копию! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для людей, пришедших из C # / Java, это может быть огромным сюрпризом, поскольку в результате получается в основном отрубленный объект, созданный из Derived.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bac6e263f5a53183ab317b8999b06f4e4af8c6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: If you cast base pointer to derived pointer but if actual object is not really derived type then you &lt;em&gt;don't&lt;/em&gt; get error. You get bad pointer and  very likely a segfault at runtime. Same goes for &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поправка&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : если вы приведете базовый указатель к производному указателю, но если фактический объект не является действительно производным типом, вы &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;не&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; получите ошибку. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы получаете плохой указатель и, скорее всего, segfault во время выполнения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;То же самое относится и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;к &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; к &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db0842ccf51dfcb3d7efbeb12fceeeb77b0d2fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use C++ cast&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда использовать C ++ cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc1891b50452cabe6ee24f5611acdca816c45c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce66e5c538d901143e8ead7a542d10eb15e5c439" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;const_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac4eb9b5acd87e28c62b5fbc4faaaf1db3512a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81e44620028491193504c883ef72fcd607f8dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dynamic_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd6415d2956dc3e1e675882f861d933d45d68c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c70ae525e0f9d6b46225d67d2b8845f7f0d2307d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67dbf2071e10cdcee9f7c486795a8b88d9c98465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast:&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba9b167ee3e215ecec1037311a373547f6128c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;static_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42c0032b3b16e37db02cd204b0858aa30912b0e" translate="yes" xml:space="preserve">
          <source>Another example is when you want to implement &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; as well as &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt;. To avoid code duplication, you can apply const_cast to return value of one function from another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Другой пример - когда вы хотите реализовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; а также &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Чтобы избежать дублирования кода, вы можете применить const_cast для возврата значения одной функции из другой.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe1de896ffacbbb4b8376d2bab06c2d9fc6dd83d" translate="yes" xml:space="preserve">
          <source>Below are some of the &lt;strong&gt;practical examples&lt;/strong&gt; when I used &lt;strong&gt;static_cast&lt;/strong&gt;, &lt;strong&gt;dynamic_cast&lt;/strong&gt;, &lt;strong&gt;const_cast&lt;/strong&gt;, &lt;strong&gt;reinterpret_cast&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ниже приведены некоторые &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;практические примеры,&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; когда я использовал &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06aad5787dbc559de97b06dabcf6d4d79876f8f2" translate="yes" xml:space="preserve">
          <source>But because &lt;code&gt;b2s[0]&lt;/code&gt; was not a &lt;code&gt;D&lt;/code&gt;, it now points to an undefined memory region.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Но поскольку &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не был &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , теперь он указывает на неопределенную область памяти.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5580b5b92994da98f29dcf66d694bd9af7c51b0f" translate="yes" xml:space="preserve">
          <source>But this is wrong, because D is actually at 0x7fffffffc930, what is at 0x7fffffffc940 is the B2-like structure inside D! So trash gets accessed.</source>
          <target state="translated">Но это неправильно,потому что D на самом деле на 0x7fffffc930,то,что на 0x7fffffc940-это B2-подобная структура внутри D! Так что мусор получает доступ.</target>
        </trans-unit>
        <trans-unit id="1636407c1772330f5809d111fbef0d07de231b8f" translate="yes" xml:space="preserve">
          <source>C++ compiler already knows how to convert between scaler types such as float to int. Use &lt;code&gt;static_cast&lt;/code&gt; for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Компилятор C ++ уже знает, как преобразовывать типы масштабирования, такие как float, в int. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для них.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd84a23d42572cf02a2a2fb13fa9e63b4681b84e" translate="yes" xml:space="preserve">
          <source>C-style cast &lt;code&gt;(type)value&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;(type)value&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; C в стиле C&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="656825f0b6169386ec4a61349a410fbab8856086" translate="yes" xml:space="preserve">
          <source>C-style casts also ignore access control when performing a &lt;code&gt;static_cast&lt;/code&gt;, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Приведения типа C также игнорируют управление доступом при выполнении &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , что означает, что они имеют возможность выполнять операции, которые не могут выполнять другие приведения. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Хотя это в основном клудж, и, на мой взгляд, это просто еще одна причина избегать бросков в стиле C.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7405076271098f4474d3f1e565b760f01b07bb0" translate="yes" xml:space="preserve">
          <source>Cast from &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt; always succeeds if A and B are in inheritance hierarchy (or void) otherwise you get compile error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Преобразование из &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; всегда успешно, если A и B находятся в иерархии наследования (или void), в противном случае вы получите ошибку компиляции.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9197bfc872a74595c98aaafe8ed8a9bd494568ee" translate="yes" xml:space="preserve">
          <source>Compile, run and disassemble with:</source>
          <target state="translated">Соберитесь,бегите и разбирайте вместе:</target>
        </trans-unit>
        <trans-unit id="0ecc2a94cc30cef1234a946bcfde6dc1e7fb16a6" translate="yes" xml:space="preserve">
          <source>Consider the following code example:</source>
          <target state="translated">Рассмотрим следующий пример кода:</target>
        </trans-unit>
        <trans-unit id="ed9c3d0787e29776fdb53b94bc5260e1d30832cb" translate="yes" xml:space="preserve">
          <source>Does &lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;this&lt;/a&gt; answer your question?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Имеет ли &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;это&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ответ на &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ваш вопрос?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f88dd8c3d05c0119742997d832c827ad0bb6" translate="yes" xml:space="preserve">
          <source>Downcasting using the 'static_cast' in C++</source>
          <target state="translated">Обнаружение с помощью 'static_cast' в C++</target>
        </trans-unit>
        <trans-unit id="54a502b64c8f30908d5dc52ab0743b009011907f" translate="yes" xml:space="preserve">
          <source>First there is a NULL check, and it returns NULL if th einput is NULL.</source>
          <target state="translated">Сначала идет проверка NULL,и она возвращает NULL,если на входе NULL.</target>
        </trans-unit>
        <trans-unit id="36dfaeed59ce5f884e642ab58970b2b24e1fb11e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt; if cast is invalid then dynamic_cast will throw bad_cast exception.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; to &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; если приведение неверно, dynamic_cast вызовет исключение bad_cast.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fbfa303623ff499116f91b0b4f89533004f5e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt;, if cast is invalid then dynamic_cast will return nullptr.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; к &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , если приведение неверно, то dynamic_cast вернет nullptr.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="736c92c74e98d64f9c01088b4c653eaddd3420d6" translate="yes" xml:space="preserve">
          <source>For C++ beginners C-style casts look like being the superset operation over C++ casts (static_cast&amp;lt;&amp;gt;(), dynamic_cast&amp;lt;&amp;gt;(), const_cast&amp;lt;&amp;gt;(), reinterpret_cast&amp;lt;&amp;gt;()) and someone could prefer them over the C++ casts. In fact C-style cast is the superset and shorter to write.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Для начинающих в C ++ приведение в стиле C выглядит как операция надмножества приведения в C ++ (static_cast &amp;lt;&amp;gt; (), dynamic_cast &amp;lt;&amp;gt; (), const_cast &amp;lt;&amp;gt; (), reinterpret_cast &amp;lt;&amp;gt; ()), и кто-то может предпочесть их приведениям C ++ , &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Фактически, бросок в стиле C - это суперсет, и его можно писать короче.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a64668ac9673b2f10528d076df1cf9bd7b353" translate="yes" xml:space="preserve">
          <source>For example, you can load 4 bytes of float to 4 bytes of int to see how bits in float looks like.</source>
          <target state="translated">Например,вы можете загрузить 4 байта флота в 4 байта int,чтобы посмотреть,как выглядят биты в float.</target>
        </trans-unit>
        <trans-unit id="4e6e7d43a0aac95fd86233b9dccdee4f262952d7" translate="yes" xml:space="preserve">
          <source>From the stdout output we see:</source>
          <target state="translated">Из вывода stdout,который мы видим:</target>
        </trans-unit>
        <trans-unit id="c449c5ff531b0ce703b262016b6a4ef0245fc823" translate="yes" xml:space="preserve">
          <source>Function-style cast &lt;code&gt;type(value)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;type(value)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; приведения в стиле функции &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(значение)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0547d3bb719cf7855bcd1808ffcaa7f313fa0d3a" translate="yes" xml:space="preserve">
          <source>Here is a short quote from Bjarne Stroustrup's (the author of C++) book The C++ Programming Language 4th edition - page 302.</source>
          <target state="translated">Вот краткая цитата из книги Bjarne Stroustrup (автора C++)The C++Programming Language 4-е издание-page 302.</target>
        </trans-unit>
        <trans-unit id="a1c4c328e5cddf9613426e0405a575561d1e72e6" translate="yes" xml:space="preserve">
          <source>Here is the sample.</source>
          <target state="translated">Вот образец.</target>
        </trans-unit>
        <trans-unit id="9f3be9905003f944fb72e085e1a9f85768a2652c" translate="yes" xml:space="preserve">
          <source>How does one decide which to use in which specific cases?</source>
          <target state="translated">Как решить,в каких конкретных случаях использовать?</target>
        </trans-unit>
        <trans-unit id="18fcef7f45a3483e9706e3199d5354f2d47ab262" translate="yes" xml:space="preserve">
          <source>How is dynamic_cast implemented</source>
          <target state="translated">Как реализуется dynamic_cast</target>
        </trans-unit>
        <trans-unit id="23479e09b4911601778d7e1e7417e287948175db" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;static_cast&lt;/code&gt; works for simple pointers (not pointers to pointers), so the above code can be rewritten to avoid &lt;code&gt;reinterpret_cast&lt;/code&gt; (at a price of an extra variable) in the following way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; работает для простых указателей (не указателей на указатели), поэтому приведенный выше код можно переписать, чтобы избежать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (по цене дополнительной переменной) следующим образом:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3abec9e72150397dbb79393a6acc1cc943245e48" translate="yes" xml:space="preserve">
          <source>I believe that this will give a good intuition on how those casts are different:</source>
          <target state="translated">Я верю,что это даст хорошую интуицию о том,как эти слепки отличаются:</target>
        </trans-unit>
        <trans-unit id="cc457185fb8b24739881731c33ce05ebf528e823" translate="yes" xml:space="preserve">
          <source>I don't have the patience to analyze this further now, but as others said, the only way for this to work is for &lt;code&gt;__dynamic_cast&lt;/code&gt; to access some extra RTTI in-memory data structures that represent the class hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;У меня нет терпения, чтобы проанализировать это сейчас, но, как говорили другие, единственный способ для этого - предоставить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; доступ к некоторым дополнительным структурам данных RTTI в памяти, которые представляют иерархию классов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="515abf6695de31a8b6fbf4cf01c72f8fac080514" translate="yes" xml:space="preserve">
          <source>I have never used &lt;code&gt;reinterpret_cast&lt;/code&gt;, and wonder whether running into a case that needs it isn't a smell of bad design. In the code base I work on &lt;code&gt;dynamic_cast&lt;/code&gt; is used a lot. The difference with  &lt;code&gt;static_cast&lt;/code&gt; is that a &lt;code&gt;dynamic_cast&lt;/code&gt; does runtime checking which may (safer) or may not (more overhead) be what you want (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;msdn&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Я никогда не использовал &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;мне &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;интересно, не пахнет ли случай, который ему нужен, плохим дизайном. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В кодовой базе я много работаю над &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Разница с &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; заключается в том, что &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; выполняет проверку во время выполнения, которая может (безопаснее) или не может (больше накладных расходов) быть тем, что вы хотите (см. &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Msdn&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04ba2c9bedbaf0f352749135eff101a3f5c9ea" translate="yes" xml:space="preserve">
          <source>If an abort is the only action your code can take, maybe you only want to enable the &lt;code&gt;dynamic_cast&lt;/code&gt; in debug builds (&lt;code&gt;-NDEBUG&lt;/code&gt;), and use &lt;code&gt;static_cast&lt;/code&gt; otherwise, e.g. &lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;as done here&lt;/a&gt;, to not slow down your fast runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если прерывание является единственным действием, которое может выполнить ваш код, возможно, вы хотите включить &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в сборках отладки ( &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-NDEBUG&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) и использовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; в&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; противном случае, например, &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;как это сделано здесь&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , чтобы не замедлять ваши быстрые запуски.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8e4f125f7aa40f62e946039c6563eb233f1cbd" translate="yes" xml:space="preserve">
          <source>In addition to the other answers so far, here is unobvious example where &lt;code&gt;static_cast&lt;/code&gt; is not sufficient so that &lt;code&gt;reinterpret_cast&lt;/code&gt; is needed. Suppose there is a function which in an output parameter returns pointers to objects of different classes (which do not share a common base class). A real example of such function is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;CoCreateInstance()&lt;/code&gt;&lt;/a&gt; (see the last parameter, which is in fact &lt;code&gt;void**&lt;/code&gt;). Suppose you request particular class of object from this function, so you know in advance the type for the pointer (which you often do for COM objects). In this case you cannot cast pointer to your pointer into &lt;code&gt;void**&lt;/code&gt; with &lt;code&gt;static_cast&lt;/code&gt;: you need &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В дополнение к другим ответам на данный момент приведен неочевидный пример, в котором &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; недостаточно, поэтому &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;требуется &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Предположим, есть функция, которая в выходном параметре возвращает указатели на объекты разных классов (которые не разделяют общий базовый класс). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Реальным примером такой функции является &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;CoCreateInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (см. Последний параметр, который на самом деле &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Предположим, вы запрашиваете определенный класс объекта у этой функции, поэтому заранее знаете тип указателя (что вы часто делаете для COM-объектов). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В этом случае вы не можете привести указатель к вашему указателю в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; с помощью &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : вам нужно &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">В коде:</target>
        </trans-unit>
        <trans-unit id="f48f5e44150c506148699b958474295be46ab891" translate="yes" xml:space="preserve">
          <source>In this answer, I want to compare these three mechanisms on a concrete upcast/downcast example and analyze what happens to the underlying pointers/memory/assembly to give a concrete understanding of how they compare.</source>
          <target state="translated">В этом ответе я хочу сравнить эти три механизма на конкретном примере upcastdowncast и проанализировать,что происходит с базовой сборкой pointersmoryassemble,чтобы дать конкретное понимание того,как они сравниваются.</target>
        </trans-unit>
        <trans-unit id="a300a6b8a5c1988450622619a2f1fd181a511aa1" translate="yes" xml:space="preserve">
          <source>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a &lt;code&gt;reinterpret_cast&lt;/code&gt;, and the latter should be preferred when explicit casting is needed, unless you are sure &lt;code&gt;static_cast&lt;/code&gt; will succeed or &lt;code&gt;reinterpret_cast&lt;/code&gt; will fail. Even then, consider the longer, more explicit option.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Поэтому в некоторых случаях он может использоваться в качестве замены для других приведений, но может быть чрезвычайно опасным из-за способности переходить в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и последнее должно быть предпочтительным, когда требуется явное приведение, если вы не уверены, что &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет успешным или &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не удастся. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Даже тогда рассмотрим более длинный и более явный вариант.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea24132facf650f92f3d393dce2d133da6cea48" translate="yes" xml:space="preserve">
          <source>It might help if you know little bit of internals...</source>
          <target state="translated">Это может помочь,если ты знаешь немного о внутренностях...</target>
        </trans-unit>
        <trans-unit id="53b2681298369920fcd6103c5e7b3fa26cea6a2a" translate="yes" xml:space="preserve">
          <source>It must therefore start from the &lt;code&gt;B2&lt;/code&gt; entry for that table, then walk this class hierarchy until it finds that the vtable for a &lt;code&gt;D&lt;/code&gt; typecast from &lt;code&gt;b2s[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следовательно, он должен начинаться с &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;записи &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для этой таблицы, а затем пройти по этой иерархии классов, пока не обнаружит, что vtable для типа &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; приведен из &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78486bda2cd7b271217be869eeddf907840635c2" translate="yes" xml:space="preserve">
          <source>Now, as mentioned at: &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/a&gt; in order to support the virtual method calls efficiently, the memory data structure of &lt;code&gt;D&lt;/code&gt; has to look something like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Теперь, как уже упоминалось по адресу: &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , для эффективной поддержки вызовов виртуальных методов структура данных в памяти &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; должна выглядеть примерно так:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27ecdae4b0aaf4635a3e357abe87725b694b381a" translate="yes" xml:space="preserve">
          <source>Now, we can finally get back to type casting and the analysis of our concrete example.</source>
          <target state="translated">Теперь,наконец,мы можем вернуться к типовому литью и анализу нашего конкретного примера.</target>
        </trans-unit>
        <trans-unit id="f68a5338ab683eaa5777e7d2d78aed399812d592" translate="yes" xml:space="preserve">
          <source>Obviously, if data is not correct for the type, you may get segfault.</source>
          <target state="translated">Очевидно,что если данные не подходят для данного типа,вы можете получить segfault.</target>
        </trans-unit>
        <trans-unit id="31c25bfb760007360abc96fd76af460f7f9fef16" translate="yes" xml:space="preserve">
          <source>One example where this comes handy is iterating through some container like &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; which only returns its elements as const to make sure you don't change its key. However if your intent is to modify object's non-key members then it should be ok. You can use const_cast to remove constness.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Одним из примеров, где это удобно, является итерация по некоторому контейнеру, например, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который возвращает только свои элементы как const, чтобы убедиться, что вы не изменили его ключ. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Однако если ваше намерение состоит в том, чтобы изменить неключевые члены объекта, тогда все должно быть в порядке. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вы можете использовать const_cast для удаления константности.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51b2ca86efbcbe6d929deae1e6732505d970d7c1" translate="yes" xml:space="preserve">
          <source>One this to be noted is: The &lt;strong&gt;dynamic_cast&lt;/strong&gt; would fail at run-time, however on most compilers it will also fail to compile because there are no virtual functions in the struct of the pointer being casted, meaning &lt;strong&gt;dynamic_cast&lt;/strong&gt; will work with only polymorphic class pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следует отметить следующее: &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast не&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет работать во время выполнения, однако на большинстве компиляторов он также не будет компилироваться, поскольку в структуре преобразуемого указателя нет виртуальных функций, то есть &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет работать только с полиморфными указателями классов. ,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89e74eb11db54e231c9de7e18b7b9c7d4b12bdf1" translate="yes" xml:space="preserve">
          <source>Only line (4) compiles without error. Only &lt;strong&gt;reinterpret_cast&lt;/strong&gt; can be used to convert a pointer to an object to a pointer to an any unrelated object type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Только строка (4) компилируется без ошибок. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Только &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может использоваться для преобразования указателя на объект в указатель на любой не связанный тип объекта.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abfbd6cd15d63c23c7d3d30c8e3a4758e6086f36" translate="yes" xml:space="preserve">
          <source>Otherwise, it sets up some arguments in the RDX, RSI and RDI and calls &lt;code&gt;__dynamic_cast&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В противном случае он устанавливает некоторые аргументы в RDX, RSI и RDI и вызывает &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">Возможный вывод:</target>
        </trans-unit>
        <trans-unit id="538fb0772ec63cf8b0351898c002fdafced0cdc2" translate="yes" xml:space="preserve">
          <source>Related questions:</source>
          <target state="translated">Похожие вопросы:</target>
        </trans-unit>
        <trans-unit id="313f99c939e5a52696cfdcc3b8912697de919023" translate="yes" xml:space="preserve">
          <source>Tested on Ubuntu 18.04 amd64, GCC 7.4.0.</source>
          <target state="translated">Протестировано на Ubuntu 18.04 amd64,GCC 7.4.0.</target>
        </trans-unit>
        <trans-unit id="021a66c8a07594230bc210a2b2a2c898cb33f663" translate="yes" xml:space="preserve">
          <source>The disassembly is:</source>
          <target state="translated">Демонтаж:</target>
        </trans-unit>
        <trans-unit id="0bc099ba8fe11b0382c44132df75211559d3b400" translate="yes" xml:space="preserve">
          <source>The key fact is that the memory data structure of &lt;code&gt;D&lt;/code&gt; contains inside it memory structure compatible with that of &lt;code&gt;B1&lt;/code&gt; and that of &lt;code&gt;B2&lt;/code&gt; internally.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ключевым фактом является то, что структура данных памяти &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; содержит внутри себя структуру памяти, совместимую со структурой &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;внутренней &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;структуры &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3e976115f67a49acd1ee58f48abd198fb94c35" translate="yes" xml:space="preserve">
          <source>The main problem of C-style casts is that they hide developer real intention of the cast. The C-style casts can do virtually all types of casting from normally safe casts done by static_cast&amp;lt;&amp;gt;() and dynamic_cast&amp;lt;&amp;gt;() to potentially dangerous casts like const_cast&amp;lt;&amp;gt;(), where const modifier can be removed so the const variables can be modified and reinterpret_cast&amp;lt;&amp;gt;() that can even reinterpret integer values to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Основная проблема приведений в стиле C заключается в том, что они скрывают реальные намерения разработчиков. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Приведения в стиле C могут выполнять практически все типы приведения, от обычно безопасных приведения, выполняемых static_cast &amp;lt;&amp;gt; () и dynamic_cast &amp;lt;&amp;gt; (), к потенциально опасным приведениям, таким как const_cast &amp;lt;&amp;gt; (), где модификатор const можно удалить, поэтому переменные const может быть изменен и reinterpret_cast &amp;lt;&amp;gt; (), который может даже интерпретировать целочисленные значения для указателей.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11774ec8768fb7ecd6984b5866c62057e7c4d28b" translate="yes" xml:space="preserve">
          <source>The main reason why C++ casts were added to the language was to allow a developer to clarify his intentions - why he is going to do that cast. By using C-style casts which are perfectly valid in C++ you are making your code less readable and more error prone especially for other developers who didn't create your code. So to make your code more readable and explicit you should always prefer C++ casts over C-style casts.</source>
          <target state="translated">Основная причина,по которой касты на Си++были добавлены в язык,состояла в том,чтобы дать возможность разработчику прояснить свои намерения-почему он собирается делать такую кастинг.Используя касты в стиле Си,которые отлично работают в Си++,вы делаете свой код менее читабельным и более склонным к ошибкам,особенно для других разработчиков,которые не создавали ваш код.Поэтому,чтобы сделать свой код более читабельным и явным,вы всегда должны предпочитать C++casts,а не C-style casts.</target>
        </trans-unit>
        <trans-unit id="5ef5fdecb5232e3e7590fa6bc96a02829a894434" translate="yes" xml:space="preserve">
          <source>Then, on the downcast sections, it is now easy to understand how the invalid ones fail and why:</source>
          <target state="translated">Затем,на секциях downcast,теперь легко понять,как недействительные терпят неудачу и почему:</target>
        </trans-unit>
        <trans-unit id="59fa3cd980523ba22f27487dd76ff3b1ac65f2e7" translate="yes" xml:space="preserve">
          <source>There is no runtime overhead for this cast.</source>
          <target state="translated">Для этого актерского состава нет накладных расходов.</target>
        </trans-unit>
        <trans-unit id="9779cf96d0cd458a50e000127ed6fd4a8589f7ec" translate="yes" xml:space="preserve">
          <source>There is no way this can be done at compile time, and we will confirm that from the disassembly:</source>
          <target state="translated">Это невозможно сделать во время компиляции,и мы это подтвердим из разборки:</target>
        </trans-unit>
        <trans-unit id="a8b241867b6c7154fb8aa178b38b565998bf85c2" translate="yes" xml:space="preserve">
          <source>Therefore we reach the critical conclusion:</source>
          <target state="translated">Поэтому мы приходим к критическому выводу:</target>
        </trans-unit>
        <trans-unit id="483865e373a36f9d0c75153eca9c80714054a5ae" translate="yes" xml:space="preserve">
          <source>Therefore, if your code is not able to check for that &lt;code&gt;nullptr&lt;/code&gt; and take a valid non-abort action, you should just use &lt;code&gt;static_cast&lt;/code&gt; instead of dynamic cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следовательно, если ваш код не может проверить наличие этого &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и выполнить допустимое действие без прерывания, вы должны просто использовать &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вместо динамического приведения.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14e84c6fca606a6849c36eb8eee9e7dfa0759f47" translate="yes" xml:space="preserve">
          <source>Therefore, the implicit &lt;code&gt;static_cast&lt;/code&gt; done there did correctly calculate the offset from the full &lt;code&gt;D&lt;/code&gt; data structure at 0x7fffffffc930 to the &lt;code&gt;B2&lt;/code&gt; like one which is at 0x7fffffffc940. We also infer that what lies between 0x7fffffffc930 and 0x7fffffffc940 is likely be the &lt;code&gt;B1&lt;/code&gt; data and vtable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Следовательно, неявный &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; выполненный там, правильно рассчитал смещение от полной &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;структуры данных &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в 0x7fffffffc930 до &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; подобного той, которая находится в 0x7fffffffc940. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мы также делаем вывод, что то, что лежит между 0x7fffffffc930 и 0x7fffffffc940, вероятно, будет &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;данными &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и vtable.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a6c94b2c9fb51ea9c355e138cf15808a4189def" translate="yes" xml:space="preserve">
          <source>This C-style cast is far more dangerous than the named conversion operators
  because the notation is harder to spot in a large program and the kind of conversion intended by the programmer is not explicit.</source>
          <target state="translated">Этот ролик в стиле Си гораздо опаснее,чем именованные операторы преобразования,так как нотацию сложнее обнаружить в большой программе,а вид преобразования,задуманный программистом,не является явным.</target>
        </trans-unit>
        <trans-unit id="b424ec8cf10bbc9a473b4bde47a88a393042ec27" translate="yes" xml:space="preserve">
          <source>This basically says that take these bytes at this memory location and think of it as given object.</source>
          <target state="translated">В основном это говорит о том,что возьмите эти байты в этой ячейке памяти и думайте об этом как о данном объекте.</target>
        </trans-unit>
        <trans-unit id="7a0ffe41fea2e124ad060c68ef6887208a4ba8f4" translate="yes" xml:space="preserve">
          <source>This is why reinterpret cast is potentially expensive! Here is &lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;an example where a one liner patch converting a &lt;code&gt;dynamic_cast&lt;/code&gt; to a &lt;code&gt;static_cast&lt;/code&gt; in a complex project reduced runtime by 33%!&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот почему реинтерпретация броска потенциально дорогая! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Вот &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;пример, где патч с одним вкладышем, преобразующий &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в сложном проекте, сократил время выполнения на 33%! &lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;,&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d99df69ad599cd0fda2e2aff6e4c8d7303c5683d" translate="yes" xml:space="preserve">
          <source>This means, dynamic_cast is very expensive compared to static_cast!</source>
          <target state="translated">Это значит,что dynamic_cast очень дорогой по сравнению со статическим!</target>
        </trans-unit>
        <trans-unit id="0acf04d9d8a83be16d8528eb9bd0b82b587353c8" translate="yes" xml:space="preserve">
          <source>This safety check allows you to query if a base class pointer is of a given type at runtime by checking a return of &lt;code&gt;nullptr&lt;/code&gt; which indicates an invalid downcast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Эта проверка безопасности позволяет вам запрашивать, имеет ли указатель базового класса заданный тип во время выполнения, проверяя возвращение &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который указывает на недопустимое снижение.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e15b1ea2c7f824ff37c90f1e8b7936f27b22efe9" translate="yes" xml:space="preserve">
          <source>This way, when &lt;code&gt;D&lt;/code&gt; gets passed to the base type array, the type cast actually calculates that offset and points something that looks exactly like a valid &lt;code&gt;B2&lt;/code&gt; in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Таким образом, когда &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; передается в массив базового типа, приведение типа фактически вычисляет это смещение и указывает что-то, что выглядит точно как действительный &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в памяти:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="461ce6d7ac7fffd2efe5f78172ddcd55ba4ade9c" translate="yes" xml:space="preserve">
          <source>To understand, let's consider below code snippet:</source>
          <target state="translated">Чтобы понять,давайте рассмотрим фрагмент кода ниже:</target>
        </trans-unit>
        <trans-unit id="71edd74dd328a7b59bb0add24d26eaba325228e3" translate="yes" xml:space="preserve">
          <source>Unlike other casts, there is runtime overhead.</source>
          <target state="translated">В отличие от других отливок,здесь есть накладные расходы.</target>
        </trans-unit>
        <trans-unit id="b440267b36cd050855228bf69a71053dd1f4cede" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const_cast&lt;/code&gt; for casting away &lt;code&gt;const/volatile&lt;/code&gt;.  Avoid this unless you are stuck using a const-incorrect API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для отбрасывания &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const/volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Избегайте этого, если вы не застряли с использованием некорректного API-интерфейса.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33967e4229bc5029b76a7118b208e43eaeaf831f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;dynamic_cast&lt;/code&gt; for converting pointers/references within an inheritance hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для преобразования указателей / ссылок в иерархии наследования.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74ffc11bceafcdfafef3cb243e8490c234069647" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reinterpret_cast&lt;/code&gt; for low-level reinterpreting of bit patterns.  Use with extreme caution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для низкоуровневой реинтерпретации битовых комбинаций. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте с особой осторожностью.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06070b016ef3361153d9ac1fe2f7fb6f604e13da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;static_cast&lt;/code&gt; for ordinary type conversions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для обычных преобразований типов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f261c621539ea72804a1bc9cd48ba82eab320a3e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;const_cast&lt;/strong&gt; to remove the const qualifier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для удаления квалификатора const.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16639515eac22573770f0b98cac7779e7069d25a" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;reinterpret_cast&lt;/strong&gt; to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if we know what we are doing and we understand the aliasing issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; для небезопасных преобразований типов указателей в целочисленные и другие типы указателей и обратно. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте это, только если мы знаем, что делаем, и понимаем проблемы псевдонимов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f63b8d2d1460077022f7bcf653b5d9e78a78586" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;static_cast&lt;/strong&gt; as the equivalent of a C-style cast that does value conversion, or when we need to explicitly up-cast a pointer from a class to its superclass.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Используйте &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в качестве эквивалента приведения типа C, который выполняет преобразование значений, или когда нам нужно явно преобразовать указатель из класса в его суперкласс.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6036b024144db4c9c71396f2a743f0c5ba4137ea" translate="yes" xml:space="preserve">
          <source>We can confirm this from the horrendous &lt;code&gt;-O0&lt;/code&gt; assembly that just moves the value around:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Мы можем подтвердить это из ужасной &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;сборки &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-O0&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; которая просто перемещает значение:&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb082e564095f32452366d629d1538ddb3671" translate="yes" xml:space="preserve">
          <source>What are the proper uses of:</source>
          <target state="translated">Каково правильное использование:</target>
        </trans-unit>
        <trans-unit id="7f0038b6257ec0adb6364ddfba9c0c40897c49cf" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used</source>
          <target state="translated">Когда следует использовать static_cast,dynamic_cast,const_cast и reinterpret_cast</target>
        </trans-unit>
        <trans-unit id="5e05d0643bef3dea2a364460dccc72e536e8737e" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</source>
          <target state="translated">Когда следует использовать static_cast,dynamic_cast,const_cast и reinterpret_cast?</target>
        </trans-unit>
        <trans-unit id="3bde5d7164ed2cf947d8f811c40c55b8a5630d9d" translate="yes" xml:space="preserve">
          <source>When you ask compiler to convert from type &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;static_cast&lt;/code&gt; calls &lt;code&gt;B&lt;/code&gt;'s constructor passing &lt;code&gt;A&lt;/code&gt; as param. Alternatively, &lt;code&gt;A&lt;/code&gt; could have a conversion operator (i.e. &lt;code&gt;A::operator B()&lt;/code&gt;).  If &lt;code&gt;B&lt;/code&gt; doesn't have such constructor, or &lt;code&gt;A&lt;/code&gt; doesn't have a conversion operator, then you get compile time error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Когда вы просите компилятор преобразовать тип &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; в &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вызывает конструктор &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , передавая &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; в&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; качестве параметра. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В качестве альтернативы, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может иметь оператор преобразования (т.е. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A::operator B()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Если &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не имеет такого конструктора или &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; не имеет оператора преобразования, вы получите ошибку времени компиляции.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3782acc436913a8ac6615a5bf1fb86f8abc2ba6a" translate="yes" xml:space="preserve">
          <source>While other answers nicely described all differences between C++ casts, I would like to add a short note why you should not use C-style casts &lt;code&gt;(Type) var&lt;/code&gt; and &lt;code&gt;Type(var)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;В то время как другие ответы хорошо описывают все различия между приведениями C ++, я хотел бы добавить краткое замечание, почему вы не должны использовать приведение в стиле C &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Type) var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; и &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type(var)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c2977aa35aba78f7d1f5411696d1f9e5128d3" translate="yes" xml:space="preserve">
          <source>While static_cast can do non-const to const it can't go other way around. The const_cast can do both ways.</source>
          <target state="translated">В то время как static_cast может делать неконстанты для константы,он не может пойти другим путем.Константа может делать и то,и другое.</target>
        </trans-unit>
        <trans-unit id="3f21d8efd7b1b2b65b636be1695a8129ab01e5c4" translate="yes" xml:space="preserve">
          <source>an upcast or downcast only needs to shift the pointer value by a value known at compile time</source>
          <target state="translated">при передаче вверх или вниз необходимо только сдвинуть значение указателя на значение,известное во время компиляции.</target>
        </trans-unit>
        <trans-unit id="c20277379a211f27a3787e85a15e1ea6caec3973" translate="yes" xml:space="preserve">
          <source>check if pointer is NULL, and if yes return NULL</source>
          <target state="translated">проверьте,NULL ли указатель,и если да,то верните NULL.</target>
        </trans-unit>
        <trans-unit id="7322aa6022cbcaa23db1eadc8aad6574ae91af74" translate="yes" xml:space="preserve">
          <source>dynamic_cast uses runtime type information to figure out if cast is valid. For example, &lt;code&gt;(Base*)&lt;/code&gt; to &lt;code&gt;(Derived*)&lt;/code&gt; may fail if pointer is not actually of derived type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast использует информацию о типе среды выполнения, чтобы выяснить, является ли приведение действительным. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Например, от &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Base*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; до &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Derived*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; может произойти сбой, если указатель фактически не является производным типом.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94315b64fee53e82e90751f8a115b6a8ef3d6783" translate="yes" xml:space="preserve">
          <source>except that this one has the vtable for &lt;code&gt;D&lt;/code&gt; instead of &lt;code&gt;B2&lt;/code&gt;, and therefore all virtual calls work transparently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;за исключением того, что этот имеет vtable для &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; вместо &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , и поэтому все виртуальные вызовы работают прозрачно.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="682a50d19e416195436708e48c7761923b8d6651" translate="yes" xml:space="preserve">
          <source>main.cpp</source>
          <target state="translated">main.cpp</target>
        </trans-unit>
        <trans-unit id="02f4fd2e20c3a623ba1400f9952d470361ae4d59" translate="yes" xml:space="preserve">
          <source>otherwise, subtract 0x10 from it to reach the &lt;code&gt;D&lt;/code&gt; which does not exist</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;в противном случае вычтите 0x10 из него, чтобы достичь &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; ,&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; который не существует&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="253191d40c8e7038fb1d1250e212cabda1243839" translate="yes" xml:space="preserve">
          <source>so we see that GCC does:</source>
          <target state="translated">так что мы видим,что GCC делает:</target>
        </trans-unit>
        <trans-unit id="1889aaee9b532814e1aa423ce3e5acf4abeeb50d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;setarch&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;used to disable ASLR&lt;/a&gt; to make it easier to compare runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;где &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setarch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; будет &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;использоваться для отключения ASLR&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , чтобы облегчить сравнение прогонов.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
