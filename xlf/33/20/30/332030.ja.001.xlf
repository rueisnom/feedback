<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/332030">
    <body>
      <group id="332030">
        <trans-unit id="99d04794a56a36c73842b9c59db592858c5153b2" translate="yes" xml:space="preserve">
          <source>(Also referes this to understand the explaination : &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（また、説明を理解するためにこれを&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照します&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ://www.cplusplus.com/doc/tutorial/typecasting/ &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20ea5fe6eac765221d795971a58d40c72a549c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_cast&lt;/code&gt; also works similarly on &lt;code&gt;volatile&lt;/code&gt;, though that's less common.</source>
          <target state="translated">&lt;code&gt;const_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;またに同様に動作&lt;/font&gt;&lt;/font&gt; &lt;code&gt;volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ものはあまり一般的ですが、。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cb140de7b7093462f7632a3a68ae36acda609d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dyanamic_cast&lt;/code&gt;: does the same address offset at runtime like &lt;code&gt;static_cast&lt;/code&gt;, but also and an expensive safety check that a downcast is correct using RTTI.</source>
          <target state="translated">&lt;code&gt;dyanamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：実行時に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と同じアドレスオフセットを実行しますが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、RTTIを使用してダウンキャストが正しいかどうかのコストのかかる安全性チェックも行います。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be2bec76e493134d3956e22fc405c489d20b9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0])           0&lt;/code&gt;: C++ actually found that the cast was invalid and returned &lt;code&gt;nullptr&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0]) 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：C ++は、キャストが無効であることを実際に検出し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を返しました&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;！&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ae0273f29c20fdaacc0b3d1e53c4b01482935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&lt;/code&gt; has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using &lt;code&gt;virtual&lt;/code&gt; inheritance. It also can only go through public inheritance - it will always fail to travel through &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</source>
          <target state="translated">&lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_castに&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はいくつかの制限があります。継承階層に同じタイプのオブジェクトが複数あり（いわゆる「恐怖のひし形」）、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用していない場合は機能しません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。また、パブリック継承のみを通過できます。常に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;protected&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;private&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通過できません&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。ただし、そのような形式の継承はまれであるため、これが問題になることはほとんどありません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c97abb66902355c4c6142e48247c49964d2fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1])           0x7fffffffc940&lt;/code&gt; this one just believes us blindly: we said there is a &lt;code&gt;D&lt;/code&gt; at address &lt;code&gt;b2s[1]&lt;/code&gt;, and the compiler does no offset calculations.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1]) 0x7fffffffc940&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは私たちを盲目的に信じているだけです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アドレス&lt;/font&gt; &lt;code&gt;b2s[1]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; が&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、コンパイラーはオフセット計算を行いません。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b787f5723161dad2fb91c9d8e03daff42c020478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;, then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、その後&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c49d9ddb4d5244de47c1294badb2d827edd5dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;: does nothing at runtime, not even the address offset. The pointer must point exactly to the correct type, not even a base class works. You generally don't want this unless raw byte streams are involved.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：実行時には何もせず、アドレスオフセットも行いません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインターは、正しい型を正確に指す必要があります。基本クラスでさえ機能しません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;生のバイトストリームが関係しない限り、通常はこれを望まないでしょう。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b88df82db056e30e51342306a38d7ffd378796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0])            0x7fffffffc910&lt;/code&gt;: the compiler just went up 0x10 at compile time bytes to try and go from a &lt;code&gt;B2&lt;/code&gt; to the containing &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0]) 0x7fffffffc910&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：コンパイラーは、コンパイル時にバイト0x10を上げて、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から包含&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;移動しようとしました&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46d0aa8846427aef9241fa0ca6cc93db712f4c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (see above), then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（上記を参照）、次に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1924e08dfc6ff50fb972b89aa1c368e7c3dab218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (though ignoring access restrictions)</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（ただし、アクセス制限は無視されます）&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dee972523c79dc0537e1cd4345ad549a504f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through &lt;code&gt;virtual&lt;/code&gt; inheritance. It does not do checking, however, and it is undefined behavior to &lt;code&gt;static_cast&lt;/code&gt; down a hierarchy to a type that isn't actually the type of the object.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、継承階層を介してキャストすることもできます。上向きに（基本クラスに向かって）キャストする場合は不要ですが、下向きにキャストする場合は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;介してキャストしない限り使用できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。ただし、チェックは行われず&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、階層を実際にオブジェクトのタイプではないタイプ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は未定義の動作&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4881bd0dc5fa56667dfcfde91be314eb4021fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt;: does one address offset at runtime (low runtime impact) and no safety checks that a downcast is correct.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：実行時に1つのアドレスオフセットを実行し（実行時への影響が少ない）、ダウンキャストが正しいことの安全性チェックは行われません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33821fbc0a423b3a33e1211e663f237b1b8cb930" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(A lot of theoretical and conceptual explanation has been given above)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（多くの理論的および概念的な説明が上に与えられました）&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e977b26b63a097b04ed436ec19c0f430ced5ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; can be used to remove or add &lt;code&gt;const&lt;/code&gt; to a variable; no other C++ cast is capable of removing it (not even &lt;code&gt;reinterpret_cast&lt;/code&gt;). It is important to note that modifying a formerly &lt;code&gt;const&lt;/code&gt; value is only undefined if the original variable is &lt;code&gt;const&lt;/code&gt;; if you use it to take the &lt;code&gt;const&lt;/code&gt; off a reference to something that wasn't declared with &lt;code&gt;const&lt;/code&gt;, it is safe. This can be useful when overloading member functions based on &lt;code&gt;const&lt;/code&gt;, for instance. It can also be used to add &lt;code&gt;const&lt;/code&gt; to an object, such as to call a member function overload.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を変数&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から削除または追加するために使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他のC ++キャストでは削除できません（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;さえも&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以前の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;値の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変更は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、元の変数が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合にのみ未定義である&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ことに注意することが重要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これを使用して、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; で&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;宣言されていないものへの参照から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;削除&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;すると、安全です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、たとえば&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;基づいてメンバー関数をオーバーロードする場合に役立ち&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メンバー関数のオーバーロードを呼び出すなど、オブジェクトに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を追加するためにも使用でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24212cba0632847457e6b4899173742e9cfd36ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards &amp;ndash; you can cast sideways or even up another chain. The &lt;code&gt;dynamic_cast&lt;/code&gt; will seek out the desired object and return it if possible. If it can't, it will return &lt;code&gt;nullptr&lt;/code&gt; in the case of a pointer, or throw &lt;code&gt;std::bad_cast&lt;/code&gt; in the case of a reference.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、ポリモーフィズムの処理にのみ使用されます。ポインタまたはポリモーフィック型への参照を他のクラス型にキャストできます（ポリモーフィック型には、宣言または継承された少なくとも1つの仮想関数があります）。下向きにキャストするだけでなく、横向きにキャストしたり、別のチェーンにキャストしたりすることもできます。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; をは、&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;目的のオブジェクトを探し出し、可能であればそれを返します。できない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合は、ポインターの場合は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を返し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、参照の場合は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::bad_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;スロー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9664183f661997b40ee907b0d2869013ea8b231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another &amp;mdash; such as casting the value from one pointer to another, or storing a pointer in an &lt;code&gt;int&lt;/code&gt;, or all sorts of other nasty things. Largely, the only guarantee you get with &lt;code&gt;reinterpret_cast&lt;/code&gt; is that normally if you cast the result back to the original type, you will get the exact same value (but &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; if the intermediate type is smaller than the original type). There are a number of conversions that &lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は最も危険なキャストであり、非常に慎重に使用する必要があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある型から別の型に直接変換します。たとえば、あるポインタから別のポインタに値をキャストしたり、ポインタを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;格納し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たり、あらゆる種類の厄介なことをしたりします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;大部分は、唯一のあなたが得る保証&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（しかし、あなたは元の型に結果バックをキャストし、通常ならば、あなたは正確に同じ値を取得することで&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;はない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中間型が元の型よりも小さい場合）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換というのがいくつかあります&lt;/font&gt;&lt;/font&gt;&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;できません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは主に、生データストリームを実際のデータに変換したり、整列されたデータへのポインターの下位ビットにデータを格納したりするなど、特に奇妙な変換やビット操作に使用されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6fbbe6178727abb8a717a316ffa1b7d497044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt; vs &lt;code&gt;dynamic_cast&lt;/code&gt; vs &lt;code&gt;reinterpret_cast&lt;/code&gt; internals view on a downcast/upcast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;対&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; はの&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部には、A意気消沈/アップキャストに表示します&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38b602c4cc2d63323ecfe0ae3d6bc96090e19770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, or pointer to &lt;code&gt;void*&lt;/code&gt;), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating &lt;code&gt;static_cast&lt;/code&gt; isn't necessary, but it's important to note that the &lt;code&gt;T(something)&lt;/code&gt; syntax is equivalent to &lt;code&gt;(T)something&lt;/code&gt; and should be avoided (more on that later). A &lt;code&gt;T(something, something_else)&lt;/code&gt; is safe, however, and guaranteed to call the constructor.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、最初に使用するキャストです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは、型間の暗黙的な変換（&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へのポインター、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;へのポインター&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;など&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）などの処理を行い、明示的な変換関数（または暗黙的な変換関数）を呼び出すこともできます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;多くの場合、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;明示的に指定&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する必要はありませんが、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;構文は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(T)something&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同等で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あり、避ける必要があることに注意することが重要&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（これについては後で詳しく説明します）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something, something_else)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、安全であり、そしてコンストラクタを呼び出すことが保証されています。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f10b3c4d099cea83615e753239bff94e7f3c1ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C-style cast&lt;/strong&gt; and &lt;strong&gt;function-style cast&lt;/strong&gt; are casts using &lt;code&gt;(type)object&lt;/code&gt; or &lt;code&gt;type(object)&lt;/code&gt;, respectively, and are functionally equivalent. They are defined as the first of the following which succeeds:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cスタイルのキャスト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数スタイルのキャスト&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、それぞれ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(object)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用したキャスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;であり、機能的に同等です。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これらは、成功する次の最初のものとして定義されます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d2d12690e92643857e438e651091583a31a42fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: Cast from Derived to Base or viceversa creates &lt;em&gt;new&lt;/em&gt; copy! For people coming from C#/Java, this can be a huge surprise because the result is basically a chopped off object created from Derived.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gotcha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：DerivedからBaseへのキャスト、またはその逆で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;新しい&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コピー&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が作成され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C＃/ Javaから来た人にとっては、結果は基本的にDerivedから作成された切り取られたオブジェクトであるため、これは大きな驚きになる可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bac6e263f5a53183ab317b8999b06f4e4af8c6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: If you cast base pointer to derived pointer but if actual object is not really derived type then you &lt;em&gt;don't&lt;/em&gt; get error. You get bad pointer and  very likely a segfault at runtime. Same goes for &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;落とし穴&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：ベースポインターを派生ポインターにキャストしても、実際のオブジェクトが実際に派生型で&lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ない&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、エラーは発生&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しませ&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ん。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行時にポインタが不良になり、セグメンテーション違反が発生する可能性が非常に高くなります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;同じことがのために行く&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db0842ccf51dfcb3d7efbeb12fceeeb77b0d2fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use C++ cast&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++キャストを使用する場合&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc1891b50452cabe6ee24f5611acdca816c45c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce66e5c538d901143e8ead7a542d10eb15e5c439" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;const_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac4eb9b5acd87e28c62b5fbc4faaaf1db3512a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81e44620028491193504c883ef72fcd607f8dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dynamic_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd6415d2956dc3e1e675882f861d933d45d68c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c70ae525e0f9d6b46225d67d2b8845f7f0d2307d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67dbf2071e10cdcee9f7c486795a8b88d9c98465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast：&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba9b167ee3e215ecec1037311a373547f6128c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;static_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42c0032b3b16e37db02cd204b0858aa30912b0e" translate="yes" xml:space="preserve">
          <source>Another example is when you want to implement &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; as well as &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt;. To avoid code duplication, you can apply const_cast to return value of one function from another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;別の例は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;および&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を実装する場合です&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードの重複を回避するために、const_castを適用して、ある関数の戻り値を別の関数から返すことができます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe1de896ffacbbb4b8376d2bab06c2d9fc6dd83d" translate="yes" xml:space="preserve">
          <source>Below are some of the &lt;strong&gt;practical examples&lt;/strong&gt; when I used &lt;strong&gt;static_cast&lt;/strong&gt;, &lt;strong&gt;dynamic_cast&lt;/strong&gt;, &lt;strong&gt;const_cast&lt;/strong&gt;, &lt;strong&gt;reinterpret_cast&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は、いくつかのある&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;具体例&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が使用し&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_castを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_castを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_castを&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_castはは&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06aad5787dbc559de97b06dabcf6d4d79876f8f2" translate="yes" xml:space="preserve">
          <source>But because &lt;code&gt;b2s[0]&lt;/code&gt; was not a &lt;code&gt;D&lt;/code&gt;, it now points to an undefined memory region.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なかった&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ため、未定義のメモリ領域を指します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5580b5b92994da98f29dcf66d694bd9af7c51b0f" translate="yes" xml:space="preserve">
          <source>But this is wrong, because D is actually at 0x7fffffffc930, what is at 0x7fffffffc940 is the B2-like structure inside D! So trash gets accessed.</source>
          <target state="translated">しかし、これは間違っていて、実際にはDが0x7fffffffc930にあり、0x7fffffc940にあるのはDの中のB2のような構造体なのです! つまり、ゴミがアクセスされてしまうのです。</target>
        </trans-unit>
        <trans-unit id="1636407c1772330f5809d111fbef0d07de231b8f" translate="yes" xml:space="preserve">
          <source>C++ compiler already knows how to convert between scaler types such as float to int. Use &lt;code&gt;static_cast&lt;/code&gt; for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++コンパイラは、floatなどのスケーラー型とint型の間の変換方法をすでに知っています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それらには&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd84a23d42572cf02a2a2fb13fa9e63b4681b84e" translate="yes" xml:space="preserve">
          <source>C-style cast &lt;code&gt;(type)value&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cスタイルのキャスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="656825f0b6169386ec4a61349a410fbab8856086" translate="yes" xml:space="preserve">
          <source>C-style casts also ignore access control when performing a &lt;code&gt;static_cast&lt;/code&gt;, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cスタイルのキャストは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実行するときにアクセス制御も無視します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。つまり、他のキャストではできない操作を実行する機能があります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、これは大部分がクラッジであり、Cスタイルのキャストを回避するもう1つの理由にすぎません。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7405076271098f4474d3f1e565b760f01b07bb0" translate="yes" xml:space="preserve">
          <source>Cast from &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt; always succeeds if A and B are in inheritance hierarchy (or void) otherwise you get compile error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;AおよびBが継承階層（またはvoid）にある場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;への&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャストは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;常に成功します。それ以外の場合は、コンパイルエラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9197bfc872a74595c98aaafe8ed8a9bd494568ee" translate="yes" xml:space="preserve">
          <source>Compile, run and disassemble with:</source>
          <target state="translated">コンパイルして、実行して、一緒に分解します。</target>
        </trans-unit>
        <trans-unit id="0ecc2a94cc30cef1234a946bcfde6dc1e7fb16a6" translate="yes" xml:space="preserve">
          <source>Consider the following code example:</source>
          <target state="translated">次のコード例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="ed9c3d0787e29776fdb53b94bc5260e1d30832cb" translate="yes" xml:space="preserve">
          <source>Does &lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;this&lt;/a&gt; answer your question?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これは&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、あなたの質問に答えますか？&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f88dd8c3d05c0119742997d832c827ad0bb6" translate="yes" xml:space="preserve">
          <source>Downcasting using the 'static_cast' in C++</source>
          <target state="translated">C++の 'static_cast' を使用したダウンキャスト</target>
        </trans-unit>
        <trans-unit id="54a502b64c8f30908d5dc52ab0743b009011907f" translate="yes" xml:space="preserve">
          <source>First there is a NULL check, and it returns NULL if th einput is NULL.</source>
          <target state="translated">最初に NULL チェックがあり、入力が NULL の場合は NULL を返します。</target>
        </trans-unit>
        <trans-unit id="36dfaeed59ce5f884e642ab58970b2b24e1fb11e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt; if cast is invalid then dynamic_cast will throw bad_cast exception.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下のための&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャストが無効な場合、その後のdynamic_castはbad_cast例外がスローされます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fbfa303623ff499116f91b0b4f89533004f5e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt;, if cast is invalid then dynamic_cast will return nullptr.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下のために&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャストが無効である場合、dynamic_castのはnullptrを返します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="736c92c74e98d64f9c01088b4c653eaddd3420d6" translate="yes" xml:space="preserve">
          <source>For C++ beginners C-style casts look like being the superset operation over C++ casts (static_cast&amp;lt;&amp;gt;(), dynamic_cast&amp;lt;&amp;gt;(), const_cast&amp;lt;&amp;gt;(), reinterpret_cast&amp;lt;&amp;gt;()) and someone could prefer them over the C++ casts. In fact C-style cast is the superset and shorter to write.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++初心者の場合、Cスタイルのキャストは、C ++キャスト（static_cast &amp;lt;&amp;gt;（）、dynamic_cast &amp;lt;&amp;gt;（）、const_cast &amp;lt;&amp;gt;（）、reinterpret_cast &amp;lt;&amp;gt;（））のスーパーセット操作のように見え、誰かがC ++キャストよりも好む可能性があります。 。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;実際、Cスタイルのキャストはスーパーセットであり、書くのに短いです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a64668ac9673b2f10528d076df1cf9bd7b353" translate="yes" xml:space="preserve">
          <source>For example, you can load 4 bytes of float to 4 bytes of int to see how bits in float looks like.</source>
          <target state="translated">例えば、floatの4バイトをintの4バイトにロードして、floatの中のビットがどのように見えるかを見ることができます。</target>
        </trans-unit>
        <trans-unit id="4e6e7d43a0aac95fd86233b9dccdee4f262952d7" translate="yes" xml:space="preserve">
          <source>From the stdout output we see:</source>
          <target state="translated">標準出力からは、以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="c449c5ff531b0ce703b262016b6a4ef0245fc823" translate="yes" xml:space="preserve">
          <source>Function-style cast &lt;code&gt;type(value)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;関数スタイルのキャスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(value)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0547d3bb719cf7855bcd1808ffcaa7f313fa0d3a" translate="yes" xml:space="preserve">
          <source>Here is a short quote from Bjarne Stroustrup's (the author of C++) book The C++ Programming Language 4th edition - page 302.</source>
          <target state="translated">ここでは、Bjarne Stroustrup氏(C++の著者)の著書「The C++Programming Language 第4版」の302ページからの短い引用です。</target>
        </trans-unit>
        <trans-unit id="a1c4c328e5cddf9613426e0405a575561d1e72e6" translate="yes" xml:space="preserve">
          <source>Here is the sample.</source>
          <target state="translated">こちらがサンプルです。</target>
        </trans-unit>
        <trans-unit id="9f3be9905003f944fb72e085e1a9f85768a2652c" translate="yes" xml:space="preserve">
          <source>How does one decide which to use in which specific cases?</source>
          <target state="translated">具体的にどのようなケースで使用するかは、どのようにして決めるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="18fcef7f45a3483e9706e3199d5354f2d47ab262" translate="yes" xml:space="preserve">
          <source>How is dynamic_cast implemented</source>
          <target state="translated">dynamic_cast はどのように実装されていますか?</target>
        </trans-unit>
        <trans-unit id="23479e09b4911601778d7e1e7417e287948175db" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;static_cast&lt;/code&gt; works for simple pointers (not pointers to pointers), so the above code can be rewritten to avoid &lt;code&gt;reinterpret_cast&lt;/code&gt; (at a price of an extra variable) in the following way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しかし、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、単純なポインタのための作品（ポインタへのポインタではない）、上記のコードは避けるのに書き換えることができるので、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のように（余分な変数の価格で）：&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3abec9e72150397dbb79393a6acc1cc943245e48" translate="yes" xml:space="preserve">
          <source>I believe that this will give a good intuition on how those casts are different:</source>
          <target state="translated">そうすることで、それらのキャストがどのように違うのか、直感的にわかるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="cc457185fb8b24739881731c33ce05ebf528e823" translate="yes" xml:space="preserve">
          <source>I don't have the patience to analyze this further now, but as others said, the only way for this to work is for &lt;code&gt;__dynamic_cast&lt;/code&gt; to access some extra RTTI in-memory data structures that represent the class hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;現在、これをさらに分析する忍耐力はありませんが、他の人が言ったように、これが機能する唯一の方法は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がクラス階層を表す追加のRTTIインメモリデータ構造にアクセスすることです。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="515abf6695de31a8b6fbf4cf01c72f8fac080514" translate="yes" xml:space="preserve">
          <source>I have never used &lt;code&gt;reinterpret_cast&lt;/code&gt;, and wonder whether running into a case that needs it isn't a smell of bad design. In the code base I work on &lt;code&gt;dynamic_cast&lt;/code&gt; is used a lot. The difference with  &lt;code&gt;static_cast&lt;/code&gt; is that a &lt;code&gt;dynamic_cast&lt;/code&gt; does runtime checking which may (safer) or may not (more overhead) be what you want (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;msdn&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私が使用したことがない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; はを&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そして不思議は、それを必要とする場合に実行しているかどうか悪いデザインの匂いではありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;コードベースでは、私が&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に取り組んでいるの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;がよく使われています。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;の違い &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が実行時チェックを実行することであり、これは（安全）または希望しない（オーバーヘッドが多い）かもしれません（&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;msdnを&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;参照&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04ba2c9bedbaf0f352749135eff101a3f5c9ea" translate="yes" xml:space="preserve">
          <source>If an abort is the only action your code can take, maybe you only want to enable the &lt;code&gt;dynamic_cast&lt;/code&gt; in debug builds (&lt;code&gt;-NDEBUG&lt;/code&gt;), and use &lt;code&gt;static_cast&lt;/code&gt; otherwise, e.g. &lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;as done here&lt;/a&gt;, to not slow down your fast runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;中止がコードで実行できる唯一のアクションである場合、おそらく&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;デバッグビルド（&lt;/font&gt; &lt;code&gt;-NDEBUG&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;）で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を有効にし、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;を使用して&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば&lt;/font&gt;&lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、ここ&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行ったように）&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、高速実行を遅くしないようにします。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8e4f125f7aa40f62e946039c6563eb233f1cbd" translate="yes" xml:space="preserve">
          <source>In addition to the other answers so far, here is unobvious example where &lt;code&gt;static_cast&lt;/code&gt; is not sufficient so that &lt;code&gt;reinterpret_cast&lt;/code&gt; is needed. Suppose there is a function which in an output parameter returns pointers to objects of different classes (which do not share a common base class). A real example of such function is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;CoCreateInstance()&lt;/code&gt;&lt;/a&gt; (see the last parameter, which is in fact &lt;code&gt;void**&lt;/code&gt;). Suppose you request particular class of object from this function, so you know in advance the type for the pointer (which you often do for COM objects). In this case you cannot cast pointer to your pointer into &lt;code&gt;void**&lt;/code&gt; with &lt;code&gt;static_cast&lt;/code&gt;: you need &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の回答に加えて、これまでに、ここに自明の例で&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;なるように十分ではありません&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; はが&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;必要とされています。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;出力パラメーターで、異なるクラス（共通の基本クラスを共有しない）のオブジェクトへのポインターを返す関数があるとします。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのような関数の実際の例は、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;CoCreateInstance()&lt;/code&gt; です&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;（最後のパラメーターを参照してください。これは実際には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この関数からオブジェクトの特定のクラスを要求するとします。これにより、ポインターのタイプ（COMオブジェクトに対してよく行う）が事前にわかります。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して、ポインターへのポインターを&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;キャストすることはできません&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。reinterpret_cast &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;が必要です。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">コードでは</target>
        </trans-unit>
        <trans-unit id="f48f5e44150c506148699b958474295be46ab891" translate="yes" xml:space="preserve">
          <source>In this answer, I want to compare these three mechanisms on a concrete upcast/downcast example and analyze what happens to the underlying pointers/memory/assembly to give a concrete understanding of how they compare.</source>
          <target state="translated">この回答では、具体的なアップキャスト・ダウンキャストの例でこれらの3つのメカニズムを比較し、それらがどのように比較されているかを具体的に理解するために、基礎となるポインタメモリ・アッセンブリーに何が起こるかを分析したいと思います。</target>
        </trans-unit>
        <trans-unit id="a300a6b8a5c1988450622619a2f1fd181a511aa1" translate="yes" xml:space="preserve">
          <source>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a &lt;code&gt;reinterpret_cast&lt;/code&gt;, and the latter should be preferred when explicit casting is needed, unless you are sure &lt;code&gt;static_cast&lt;/code&gt; will succeed or &lt;code&gt;reinterpret_cast&lt;/code&gt; will fail. Even then, consider the longer, more explicit option.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、いくつかの事例では、他のキャストのための代替として使用することができますが、ために委譲する機能で、非常に危険なことができ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、明示的なキャストが必要になったとき、あなたが確信している場合を除き、後者は、好まれるべきで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;成功しますか&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は失敗します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それでも、より長く、より明示的なオプションを検討してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea24132facf650f92f3d393dce2d133da6cea48" translate="yes" xml:space="preserve">
          <source>It might help if you know little bit of internals...</source>
          <target state="translated">内部のことを少しでも知っていれば助かるかもしれませんが...。</target>
        </trans-unit>
        <trans-unit id="53b2681298369920fcd6103c5e7b3fa26cea6a2a" translate="yes" xml:space="preserve">
          <source>It must therefore start from the &lt;code&gt;B2&lt;/code&gt; entry for that table, then walk this class hierarchy until it finds that the vtable for a &lt;code&gt;D&lt;/code&gt; typecast from &lt;code&gt;b2s[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、そのテーブルの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;エントリ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から開始し、&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;からの&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;型キャストの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;vtableが見つかるまで、このクラス階層&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たどる必要があり&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78486bda2cd7b271217be869eeddf907840635c2" translate="yes" xml:space="preserve">
          <source>Now, as mentioned at: &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/a&gt; in order to support the virtual method calls efficiently, the memory data structure of &lt;code&gt;D&lt;/code&gt; has to look something like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;：&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;//en.wikipedia.org/wiki/Virtual_method_table&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;で&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;言及されているように&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、仮想メソッド呼び出しを効率的にサポートするには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メモリデータ構造が&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;次のようになっている必要があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27ecdae4b0aaf4635a3e357abe87725b694b381a" translate="yes" xml:space="preserve">
          <source>Now, we can finally get back to type casting and the analysis of our concrete example.</source>
          <target state="translated">さて、いよいよタイプキャスティングと具体例の分析に戻ります。</target>
        </trans-unit>
        <trans-unit id="f68a5338ab683eaa5777e7d2d78aed399812d592" translate="yes" xml:space="preserve">
          <source>Obviously, if data is not correct for the type, you may get segfault.</source>
          <target state="translated">明らかに、データが型に合っていないとセグメンテーションフォールトが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="31c25bfb760007360abc96fd76af460f7f9fef16" translate="yes" xml:space="preserve">
          <source>One example where this comes handy is iterating through some container like &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; which only returns its elements as const to make sure you don't change its key. However if your intent is to modify object's non-key members then it should be ok. You can use const_cast to remove constness.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが便利な例の1つは&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、キーを変更しないようにするために、要素をconstとしてのみ返す&lt;/font&gt;&lt;/font&gt; &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;などのコンテナを反復処理&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;することです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、オブジェクトの非キーメンバーを変更することが目的の場合は、問題ありません。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_castを使用してconstnessを削除できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51b2ca86efbcbe6d929deae1e6732505d970d7c1" translate="yes" xml:space="preserve">
          <source>One this to be noted is: The &lt;strong&gt;dynamic_cast&lt;/strong&gt; would fail at run-time, however on most compilers it will also fail to compile because there are no virtual functions in the struct of the pointer being casted, meaning &lt;strong&gt;dynamic_cast&lt;/strong&gt; will work with only polymorphic class pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;注目すべき点の1つは、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は実行時に失敗しますが、キャストされるポインターの構造体に仮想関数がないため、ほとんどのコンパイラーではコンパイルにも失敗します。つまり、&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポリモーフィッククラスポインターのみで機能します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89e74eb11db54e231c9de7e18b7b9c7d4b12bdf1" translate="yes" xml:space="preserve">
          <source>Only line (4) compiles without error. Only &lt;strong&gt;reinterpret_cast&lt;/strong&gt; can be used to convert a pointer to an object to a pointer to an any unrelated object type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;行（4）のみがエラーなしでコンパイルされます。&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のみを&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用して、オブジェクトへのポインターを、関係のないオブジェクトタイプへのポインターに変換できます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abfbd6cd15d63c23c7d3d30c8e3a4758e6086f36" translate="yes" xml:space="preserve">
          <source>Otherwise, it sets up some arguments in the RDX, RSI and RDI and calls &lt;code&gt;__dynamic_cast&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合は、RDX、RSI、およびRDIにいくつかの引数を設定し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を呼び出し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">出力可能。</target>
        </trans-unit>
        <trans-unit id="538fb0772ec63cf8b0351898c002fdafced0cdc2" translate="yes" xml:space="preserve">
          <source>Related questions:</source>
          <target state="translated">関連する質問。</target>
        </trans-unit>
        <trans-unit id="313f99c939e5a52696cfdcc3b8912697de919023" translate="yes" xml:space="preserve">
          <source>Tested on Ubuntu 18.04 amd64, GCC 7.4.0.</source>
          <target state="translated">Ubuntu 18.04 amd64、GCC 7.4.0でテスト。</target>
        </trans-unit>
        <trans-unit id="021a66c8a07594230bc210a2b2a2c898cb33f663" translate="yes" xml:space="preserve">
          <source>The disassembly is:</source>
          <target state="translated">解体です。</target>
        </trans-unit>
        <trans-unit id="0bc099ba8fe11b0382c44132df75211559d3b400" translate="yes" xml:space="preserve">
          <source>The key fact is that the memory data structure of &lt;code&gt;D&lt;/code&gt; contains inside it memory structure compatible with that of &lt;code&gt;B1&lt;/code&gt; and that of &lt;code&gt;B2&lt;/code&gt; internally.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;重要な事実は、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;メモリデータ構造の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;内部に、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のメモリデータ構造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のメモリデータ構造と&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;互換性のあるメモリ構造が含まれていること&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;です。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3e976115f67a49acd1ee58f48abd198fb94c35" translate="yes" xml:space="preserve">
          <source>The main problem of C-style casts is that they hide developer real intention of the cast. The C-style casts can do virtually all types of casting from normally safe casts done by static_cast&amp;lt;&amp;gt;() and dynamic_cast&amp;lt;&amp;gt;() to potentially dangerous casts like const_cast&amp;lt;&amp;gt;(), where const modifier can be removed so the const variables can be modified and reinterpret_cast&amp;lt;&amp;gt;() that can even reinterpret integer values to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cスタイルのキャストの主な問題は、キャストの開発者の本当の意図を隠すことです。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Cスタイルのキャストは、static_cast &amp;lt;&amp;gt;（）およびdynamic_cast &amp;lt;&amp;gt;（）によって行われる通常は安全なキャストから、const_cast &amp;lt;&amp;gt;（）などの潜在的に危険なキャストまで、実質的にすべてのタイプのキャストを実行できます。const修飾子を削除してconst変数を削除できます。変更してreinterpret_cast &amp;lt;&amp;gt;（）を使用して、整数値をポインターに再解釈することもできます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11774ec8768fb7ecd6984b5866c62057e7c4d28b" translate="yes" xml:space="preserve">
          <source>The main reason why C++ casts were added to the language was to allow a developer to clarify his intentions - why he is going to do that cast. By using C-style casts which are perfectly valid in C++ you are making your code less readable and more error prone especially for other developers who didn't create your code. So to make your code more readable and explicit you should always prefer C++ casts over C-style casts.</source>
          <target state="translated">C++のキャストが言語に追加された主な理由は、開発者が自分の意図を明確にできるようにするためです。C++で完全に有効な C スタイルのキャストを使用すると、コードが読みにくくなり、特にコードを作成していない他の開発者にとってはエラーが発生しやすくなります。ですから、コードをより読みやすく明示的なものにするためには、C スタイルのキャストよりも C++のキャストを使うべきです。</target>
        </trans-unit>
        <trans-unit id="5ef5fdecb5232e3e7590fa6bc96a02829a894434" translate="yes" xml:space="preserve">
          <source>Then, on the downcast sections, it is now easy to understand how the invalid ones fail and why:</source>
          <target state="translated">そして、ダウンキャストの部分では、無効なものがどのように失敗するのか、なぜ失敗するのかが簡単に理解できるようになりました。</target>
        </trans-unit>
        <trans-unit id="59fa3cd980523ba22f27487dd76ff3b1ac65f2e7" translate="yes" xml:space="preserve">
          <source>There is no runtime overhead for this cast.</source>
          <target state="translated">このキャストには実行時のオーバーヘッドはありません。</target>
        </trans-unit>
        <trans-unit id="9779cf96d0cd458a50e000127ed6fd4a8589f7ec" translate="yes" xml:space="preserve">
          <source>There is no way this can be done at compile time, and we will confirm that from the disassembly:</source>
          <target state="translated">コンパイル時にできるわけがないので、分解から確認します。</target>
        </trans-unit>
        <trans-unit id="a8b241867b6c7154fb8aa178b38b565998bf85c2" translate="yes" xml:space="preserve">
          <source>Therefore we reach the critical conclusion:</source>
          <target state="translated">したがって、我々は批判的な結論に達する。</target>
        </trans-unit>
        <trans-unit id="483865e373a36f9d0c75153eca9c80714054a5ae" translate="yes" xml:space="preserve">
          <source>Therefore, if your code is not able to check for that &lt;code&gt;nullptr&lt;/code&gt; and take a valid non-abort action, you should just use &lt;code&gt;static_cast&lt;/code&gt; instead of dynamic cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、コードがその&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;をチェックできず&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、有効な非中止アクションを実行できない場合は&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、動的キャストの代わりに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用する必要があります&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14e84c6fca606a6849c36eb8eee9e7dfa0759f47" translate="yes" xml:space="preserve">
          <source>Therefore, the implicit &lt;code&gt;static_cast&lt;/code&gt; done there did correctly calculate the offset from the full &lt;code&gt;D&lt;/code&gt; data structure at 0x7fffffffc930 to the &lt;code&gt;B2&lt;/code&gt; like one which is at 0x7fffffffc940. We also infer that what lies between 0x7fffffffc930 and 0x7fffffffc940 is likely be the &lt;code&gt;B1&lt;/code&gt; data and vtable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;したがって、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そこで行わ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;れる暗黙の&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;0x7fffffffc930に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ある完全な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データ構造&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;0x7fffffffc940にある&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ような&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;までのオフセットを正しく計算&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;しました。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;また、0x7fffffffc930と0x7fffffffc940の間にあるのは、おそらく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;データとvtableである&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と推測しています&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a6c94b2c9fb51ea9c355e138cf15808a4189def" translate="yes" xml:space="preserve">
          <source>This C-style cast is far more dangerous than the named conversion operators
  because the notation is harder to spot in a large program and the kind of conversion intended by the programmer is not explicit.</source>
          <target state="translated">このCスタイルのキャストは,名前付き変換演算子よりもはるかに危険です.なぜなら,この表記法は大規模なプログラムでは見つけにくく,プログラマが意図する変換の種類が明示的ではないからです.</target>
        </trans-unit>
        <trans-unit id="b424ec8cf10bbc9a473b4bde47a88a393042ec27" translate="yes" xml:space="preserve">
          <source>This basically says that take these bytes at this memory location and think of it as given object.</source>
          <target state="translated">これは基本的には、このメモリの位置でこれらのバイトを取り、それを与えられたオブジェクトとして考えてくださいと言っています。</target>
        </trans-unit>
        <trans-unit id="7a0ffe41fea2e124ad060c68ef6887208a4ba8f4" translate="yes" xml:space="preserve">
          <source>This is why reinterpret cast is potentially expensive! Here is &lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;an example where a one liner patch converting a &lt;code&gt;dynamic_cast&lt;/code&gt; to a &lt;code&gt;static_cast&lt;/code&gt; in a complex project reduced runtime by 33%!&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これが、キャストの再解釈が潜在的に高価になる理由です！&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;以下は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;複雑なプロジェクトで&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換するワンライナーパッチが&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ランタイムを33％削減した例です。&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d99df69ad599cd0fda2e2aff6e4c8d7303c5683d" translate="yes" xml:space="preserve">
          <source>This means, dynamic_cast is very expensive compared to static_cast!</source>
          <target state="translated">つまり、static_castに比べてdynamic_castは非常に高い!ということです。</target>
        </trans-unit>
        <trans-unit id="0acf04d9d8a83be16d8528eb9bd0b82b587353c8" translate="yes" xml:space="preserve">
          <source>This safety check allows you to query if a base class pointer is of a given type at runtime by checking a return of &lt;code&gt;nullptr&lt;/code&gt; which indicates an invalid downcast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;この安全性チェック&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;では、無効なダウンキャストを示す&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;戻りをチェックすることにより、実行時に基本クラスポインターが特定の型であるかどうかを照会できます&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e15b1ea2c7f824ff37c90f1e8b7936f27b22efe9" translate="yes" xml:space="preserve">
          <source>This way, when &lt;code&gt;D&lt;/code&gt; gets passed to the base type array, the type cast actually calculates that offset and points something that looks exactly like a valid &lt;code&gt;B2&lt;/code&gt; in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;このように、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;が基本型配列に渡されると、型キャストは実際にそのオフセットを計算し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、メモリ内の&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;有効な&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; の&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ように見えるものをポイント&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="461ce6d7ac7fffd2efe5f78172ddcd55ba4ade9c" translate="yes" xml:space="preserve">
          <source>To understand, let's consider below code snippet:</source>
          <target state="translated">分かりやすいように、以下のコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="71edd74dd328a7b59bb0add24d26eaba325228e3" translate="yes" xml:space="preserve">
          <source>Unlike other casts, there is runtime overhead.</source>
          <target state="translated">他のキャストとは異なり、実行時のオーバーヘッドがあります。</target>
        </trans-unit>
        <trans-unit id="b440267b36cd050855228bf69a71053dd1f4cede" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const_cast&lt;/code&gt; for casting away &lt;code&gt;const/volatile&lt;/code&gt;.  Avoid this unless you are stuck using a const-incorrect API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;const/volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;をキャスト&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ために&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const-incorrect APIを使用してスタックしない限り、これを回避してください。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33967e4229bc5029b76a7118b208e43eaeaf831f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;dynamic_cast&lt;/code&gt; for converting pointers/references within an inheritance hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;継承階層内でポインター/参照を変換&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;するには、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74ffc11bceafcdfafef3cb243e8490c234069647" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reinterpret_cast&lt;/code&gt; for low-level reinterpreting of bit patterns.  Use with extreme caution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用は&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; は&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ビットパターンの再解釈低レベルのために。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;細心の注意を払って使用してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06070b016ef3361153d9ac1fe2f7fb6f604e13da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;static_cast&lt;/code&gt; for ordinary type conversions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;通常の型変換には&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f261c621539ea72804a1bc9cd48ba82eab320a3e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;const_cast&lt;/strong&gt; to remove the const qualifier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;してconst修飾子を削除します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16639515eac22573770f0b98cac7779e7069d25a" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;reinterpret_cast&lt;/strong&gt; to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if we know what we are doing and we understand the aliasing issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、整数やその他のポインター型との間のポインター型の安全でない変換を行います。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;私たちが何をしているのかを知っていて、エイリアスの問題を理解している場合にのみ、これを使用してください。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f63b8d2d1460077022f7bcf653b5d9e78a78586" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;static_cast&lt;/strong&gt; as the equivalent of a C-style cast that does value conversion, or when we need to explicitly up-cast a pointer from a class to its superclass.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、値の変換を行うCスタイルのキャストに相当&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;する&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;もの&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;として、またはクラスからそのスーパークラスにポインターを明示的にアップキャストする必要がある場合に使用します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6036b024144db4c9c71396f2a743f0c5ba4137ea" translate="yes" xml:space="preserve">
          <source>We can confirm this from the horrendous &lt;code&gt;-O0&lt;/code&gt; assembly that just moves the value around:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は、値を移動するだけの&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;恐ろしい&lt;/font&gt;&lt;/font&gt; &lt;code&gt;-O0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;アセンブリ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から確認でき&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb082e564095f32452366d629d1538ddb3671" translate="yes" xml:space="preserve">
          <source>What are the proper uses of:</source>
          <target state="translated">適正な使い方とは?</target>
        </trans-unit>
        <trans-unit id="7f0038b6257ec0adb6364ddfba9c0c40897c49cf" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used</source>
          <target state="translated">static_cast,dynamic_cast,const_cast,reinterpret_castはいつ使うべきか?</target>
        </trans-unit>
        <trans-unit id="5e05d0643bef3dea2a364460dccc72e536e8737e" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</source>
          <target state="translated">static_cast,dynamic_cast,const_cast,reinterpret_castはいつ使うべきですか?</target>
        </trans-unit>
        <trans-unit id="3bde5d7164ed2cf947d8f811c40c55b8a5630d9d" translate="yes" xml:space="preserve">
          <source>When you ask compiler to convert from type &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;static_cast&lt;/code&gt; calls &lt;code&gt;B&lt;/code&gt;'s constructor passing &lt;code&gt;A&lt;/code&gt; as param. Alternatively, &lt;code&gt;A&lt;/code&gt; could have a conversion operator (i.e. &lt;code&gt;A::operator B()&lt;/code&gt;).  If &lt;code&gt;B&lt;/code&gt; doesn't have such constructor, or &lt;code&gt;A&lt;/code&gt; doesn't have a conversion operator, then you get compile time error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あなたは型へ変換するコンパイラを尋ねるときに&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;を&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; をを&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;呼び出し、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;渡すのコンストラクタ&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; PARAMとして。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;あるいは、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は変換演算子を持つことができます（つまり、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A::operator B()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;）。&lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;そのようなコンストラクタがない&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、または&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; に&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;変換演算子がない場合、コンパイル時エラーが発生します。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3782acc436913a8ac6615a5bf1fb86f8abc2ba6a" translate="yes" xml:space="preserve">
          <source>While other answers nicely described all differences between C++ casts, I would like to add a short note why you should not use C-style casts &lt;code&gt;(Type) var&lt;/code&gt; and &lt;code&gt;Type(var)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;他の回答ではC ++キャスト間のすべての違いをうまく説明していますが、Cスタイルのキャスト&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Type) var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;と&lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type(var)&lt;/code&gt; を&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用しない理由を簡単に説明します&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c2977aa35aba78f7d1f5411696d1f9e5128d3" translate="yes" xml:space="preserve">
          <source>While static_cast can do non-const to const it can't go other way around. The const_cast can do both ways.</source>
          <target state="translated">static_castはconstからconstへの非constの変換を行うことができますが、その逆はできません。const_cast は両方の方法を行うことができます。</target>
        </trans-unit>
        <trans-unit id="3f21d8efd7b1b2b65b636be1695a8129ab01e5c4" translate="yes" xml:space="preserve">
          <source>an upcast or downcast only needs to shift the pointer value by a value known at compile time</source>
          <target state="translated">アップキャストやダウンキャストは、コンパイル時に既知の値だけポインタの値をシフトする必要があります。</target>
        </trans-unit>
        <trans-unit id="c20277379a211f27a3787e85a15e1ea6caec3973" translate="yes" xml:space="preserve">
          <source>check if pointer is NULL, and if yes return NULL</source>
          <target state="translated">ポインタがNULLであるかどうかをチェックし、yesの場合はNULLを返す</target>
        </trans-unit>
        <trans-unit id="7322aa6022cbcaa23db1eadc8aad6574ae91af74" translate="yes" xml:space="preserve">
          <source>dynamic_cast uses runtime type information to figure out if cast is valid. For example, &lt;code&gt;(Base*)&lt;/code&gt; to &lt;code&gt;(Derived*)&lt;/code&gt; may fail if pointer is not actually of derived type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_castは、ランタイムタイプ情報を使用して、キャストが有効かどうかを判断します。&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;たとえば、&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ポインタが実際に派生型でない場合&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Base*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;から&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Derived*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は失敗する可能性があります。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94315b64fee53e82e90751f8a115b6a8ef3d6783" translate="yes" xml:space="preserve">
          <source>except that this one has the vtable for &lt;code&gt;D&lt;/code&gt; instead of &lt;code&gt;B2&lt;/code&gt;, and therefore all virtual calls work transparently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ただし、これ&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;には&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;ではなく&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;のvtableがあるため&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;、すべての仮想呼び出しは透過的に機能します。&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="682a50d19e416195436708e48c7761923b8d6651" translate="yes" xml:space="preserve">
          <source>main.cpp</source>
          <target state="translated">main.cpp</target>
        </trans-unit>
        <trans-unit id="02f4fd2e20c3a623ba1400f9952d470361ae4d59" translate="yes" xml:space="preserve">
          <source>otherwise, subtract 0x10 from it to reach the &lt;code&gt;D&lt;/code&gt; which does not exist</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;それ以外の場合は、0x10を減算&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して、存在しない&lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;に到達し&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="253191d40c8e7038fb1d1250e212cabda1243839" translate="yes" xml:space="preserve">
          <source>so we see that GCC does:</source>
          <target state="translated">ということで、GCCがそうであることがわかります。</target>
        </trans-unit>
        <trans-unit id="1889aaee9b532814e1aa423ce3e5acf4abeeb50d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;setarch&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;used to disable ASLR&lt;/a&gt; to make it easier to compare runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ここで、&lt;/font&gt;&lt;/font&gt; &lt;code&gt;setarch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;は&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASLRを無効に&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;して実行の比較を容易にするために&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;使用され&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ます。&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
