<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/332030">
    <body>
      <group id="332030">
        <trans-unit id="99d04794a56a36c73842b9c59db592858c5153b2" translate="yes" xml:space="preserve">
          <source>(Also referes this to understand the explaination : &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/a&gt;)</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(또한 설명을 이해하기 위해 이것을 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/typecasting/&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조하십시오&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;http://www.cplusplus.com/doc/tutorial/typecasting/&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; )&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="20ea5fe6eac765221d795971a58d40c72a549c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_cast&lt;/code&gt; also works similarly on &lt;code&gt;volatile&lt;/code&gt;, though that's less common.</source>
          <target state="translated">&lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;volatile&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서도 비슷하게 작동 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만 덜 일반적입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="8cb140de7b7093462f7632a3a68ae36acda609d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dyanamic_cast&lt;/code&gt;: does the same address offset at runtime like &lt;code&gt;static_cast&lt;/code&gt;, but also and an expensive safety check that a downcast is correct using RTTI.</source>
          <target state="translated">&lt;code&gt;dyanamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 런타임시 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 동일한 주소 오프셋을 수행 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지만 RTTI를 사용하여 다운 캐스트가 올바른지 고가의 안전 검사를 수행합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3be2bec76e493134d3956e22fc405c489d20b9da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0])           0&lt;/code&gt;: C++ actually found that the cast was invalid and returned &lt;code&gt;nullptr&lt;/code&gt;!</source>
          <target state="translated">&lt;code&gt;dynamic_cast&amp;lt;D*&amp;gt;(b2s[0]) 0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : C ++은 실제로 캐스트가 유효하지 않으며 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 리턴 함을 발견했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ae0273f29c20fdaacc0b3d1e53c4b01482935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dynamic_cast&lt;/code&gt; has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using &lt;code&gt;virtual&lt;/code&gt; inheritance. It also can only go through public inheritance - it will always fail to travel through &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</source>
          <target state="translated">&lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에는 몇 가지 제한 사항이 있습니다. 상속 계층 구조에 동일한 유형의 객체가 여러 개 있고 (소위 '두려운 다이아몬드') &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 상속을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하지 않는 경우에는 작동하지 않습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 또한 공공 상속을 통해서만 갈 수 있습니다-항상 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;protected&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;private&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 상속을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통해 여행하지 못합니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 그러나 이런 형태의 상속은 드물기 때문에 이것은 거의 문제가되지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="58c97abb66902355c4c6142e48247c49964d2fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1])           0x7fffffffc940&lt;/code&gt; this one just believes us blindly: we said there is a &lt;code&gt;D&lt;/code&gt; at address &lt;code&gt;b2s[1]&lt;/code&gt;, and the compiler does no offset calculations.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&amp;lt;D*&amp;gt;(b2s[1]) 0x7fffffffc940&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이것은 우리를 맹목적으로 믿습니다. 우리는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;주소 &lt;/font&gt; &lt;code&gt;b2s[1]&lt;/code&gt; &lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 있다고 말했고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일러는 오프셋 계산을하지 않습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b787f5723161dad2fb91c9d8e03daff42c020478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;, then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c49d9ddb4d5244de47c1294badb2d827edd5dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reinterpret_cast&lt;/code&gt;: does nothing at runtime, not even the address offset. The pointer must point exactly to the correct type, not even a base class works. You generally don't want this unless raw byte streams are involved.</source>
          <target state="translated">&lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 런타임시 주소 오프셋이 아닌 아무 것도 수행하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터는 정확한 유형을 가리켜 야하며 기본 클래스조차 작동하지 않습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원시 바이트 스트림이 포함되지 않는 한 일반적으로 이것을 원하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b88df82db056e30e51342306a38d7ffd378796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0])            0x7fffffffc910&lt;/code&gt;: the compiler just went up 0x10 at compile time bytes to try and go from a &lt;code&gt;B2&lt;/code&gt; to the containing &lt;code&gt;D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&amp;lt;D*&amp;gt;(b2s[0]) 0x7fffffffc910&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 컴파일러가 컴파일 타임 바이트에서 0x10 위로 올라가 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 포함하는 &lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 이동하려고 시도했습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="46d0aa8846427aef9241fa0ca6cc93db712f4c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (see above), then &lt;code&gt;const_cast&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (위 참조), &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1924e08dfc6ff50fb972b89aa1c368e7c3dab218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; (though ignoring access restrictions)</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (액세스 제한을 무시하지만)&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94dee972523c79dc0537e1cd4345ad549a504f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt; can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through &lt;code&gt;virtual&lt;/code&gt; inheritance. It does not do checking, however, and it is undefined behavior to &lt;code&gt;static_cast&lt;/code&gt; down a hierarchy to a type that isn't actually the type of the object.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 상속 계층을 통해 캐스트 할 수도 있습니다. 기본 클래스를 향해 위쪽으로 캐스팅 할 때는 필요하지 않지만 아래쪽으로 캐스팅 할 때는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;virtual&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 상속을 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;통해 캐스팅하지 않는 한 사용할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. 그러나 검사를 수행하지는 않으며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;계층 구조를 실제로 객체 유형이 아닌 유형 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;으로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하는 것은 정의되지 않은 동작 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4881bd0dc5fa56667dfcfde91be314eb4021fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;static_cast&lt;/code&gt;: does one address offset at runtime (low runtime impact) and no safety checks that a downcast is correct.</source>
          <target state="translated">&lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 런타임시 하나의 주소 오프셋 (런타임 영향이 낮음)을 수행하며 다운 캐스트가 올바른지 안전성을 확인하지 않습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33821fbc0a423b3a33e1211e663f237b1b8cb930" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(A lot of theoretical and conceptual explanation has been given above)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;(위에 많은 이론적이고 개념적인 설명이 있습니다)&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e977b26b63a097b04ed436ec19c0f430ced5ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/strong&gt; can be used to remove or add &lt;code&gt;const&lt;/code&gt; to a variable; no other C++ cast is capable of removing it (not even &lt;code&gt;reinterpret_cast&lt;/code&gt;). It is important to note that modifying a formerly &lt;code&gt;const&lt;/code&gt; value is only undefined if the original variable is &lt;code&gt;const&lt;/code&gt;; if you use it to take the &lt;code&gt;const&lt;/code&gt; off a reference to something that wasn't declared with &lt;code&gt;const&lt;/code&gt;, it is safe. This can be useful when overloading member functions based on &lt;code&gt;const&lt;/code&gt;, for instance. It can also be used to add &lt;code&gt;const&lt;/code&gt; to an object, such as to call a member function overload.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;변수&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;제거하거나 추가 할 수 있습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 C ++ 캐스트는 그것을 제거 할 수 없습니다 (&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 조차도&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이전의&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;을 수정하는&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;것은 원래 변수가&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; 인&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 경우에만 정의되지 않습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 사용하여&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; const로&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 선언되지 않은 것에 대한 참조를&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 제외하면 안전합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 따라 멤버 함수를 오버로드 할 때 유용 할 수 있습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;멤버 함수 오버로드를 호출하는 것과 같이 객체&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에&lt;/font&gt;&lt;/font&gt; &lt;code&gt;const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 추가하는 데 사용될 수도 있습니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="24212cba0632847457e6b4899173742e9cfd36ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/strong&gt; is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards &amp;ndash; you can cast sideways or even up another chain. The &lt;code&gt;dynamic_cast&lt;/code&gt; will seek out the desired object and return it if possible. If it can't, it will return &lt;code&gt;nullptr&lt;/code&gt; in the case of a pointer, or throw &lt;code&gt;std::bad_cast&lt;/code&gt; in the case of a reference.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 다형성 처리에만 사용됩니다. 다형성 유형에 대한 포인터 또는 참조를 다른 클래스 유형으로 캐스트 할 수 있습니다 (다형성 유형에는 선언되거나 상속 된 가상 함수가 하나 이상 있습니다). 아래쪽으로 캐스팅하는 것 이상으로 사용할 수 있습니다. 옆으로 던지거나 다른 체인에 던질 수도 있습니다.&lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; 는이&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 원하는 개체를 추구하고 가능하다면 그것을 반환합니다. 그렇지 않으면&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터의 경우&lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;반환&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하거나&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;참조의 경우&lt;/font&gt;&lt;/font&gt; &lt;code&gt;std::bad_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;throw&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b9664183f661997b40ee907b0d2869013ea8b231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; is the most dangerous cast, and should be used very sparingly. It turns one type directly into another &amp;mdash; such as casting the value from one pointer to another, or storing a pointer in an &lt;code&gt;int&lt;/code&gt;, or all sorts of other nasty things. Largely, the only guarantee you get with &lt;code&gt;reinterpret_cast&lt;/code&gt; is that normally if you cast the result back to the original type, you will get the exact same value (but &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; if the intermediate type is smaller than the original type). There are a number of conversions that &lt;strong&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/strong&gt; cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 가장 위험한 캐스트이므로 매우 드물게 사용해야합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 포인터에서 다른 포인터로 값을 캐스팅하거나&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 다른 모든 종류의 불쾌한 것들에&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터를 저장하는 것과 같이 한 유형을 다른 유형으로 직접 변환합니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;대부분의 단지 당신이받을 보장&lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (하지만 당신은 원래의 형식으로 결과 다시 캐스팅 일반적으로, 당신은 동일한 가치를 얻을 것입니다&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 하지&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 중간 형이 원래의 형태보다 작은 경우). &lt;/font&gt;&lt;strong&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변환 된 많은 전환이 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 수 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;원시 데이터 스트림을 실제 데이터로 변환하거나 정렬 된 데이터에 대한 포인터의 낮은 비트에 데이터를 저장하는 것과 같이 특히 이상한 변환 및 비트 조작에 주로 사용됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1b6fbbe6178727abb8a717a316ffa1b7d497044f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt; vs &lt;code&gt;dynamic_cast&lt;/code&gt; vs &lt;code&gt;reinterpret_cast&lt;/code&gt; internals view on a downcast/upcast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다운 캐스트 / 업 캐스트에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; vs &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 내부보기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38b602c4cc2d63323ecfe0ae3d6bc96090e19770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/strong&gt; is the first cast you should attempt to use. It does things like implicit conversions between types (such as &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, or pointer to &lt;code&gt;void*&lt;/code&gt;), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating &lt;code&gt;static_cast&lt;/code&gt; isn't necessary, but it's important to note that the &lt;code&gt;T(something)&lt;/code&gt; syntax is equivalent to &lt;code&gt;(T)something&lt;/code&gt; and should be avoided (more on that later). A &lt;code&gt;T(something, something_else)&lt;/code&gt; is safe, however, and guaranteed to call the constructor.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 사용하려는 첫 번째 캐스트입니다. 형식 간 암시 적 변환 (예 :&lt;/font&gt;&lt;/font&gt; &lt;code&gt;int&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; to&lt;/font&gt;&lt;/font&gt; &lt;code&gt;float&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는&lt;/font&gt;&lt;/font&gt; &lt;code&gt;void*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 포인터&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;)과 같은 작업을 수행하며 명시 적 변환 함수 (또는 암시 적 함수)를 호출 할 수도 있습니다. 많은 경우에&lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 명시 적으로 언급&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;할 필요는 없지만&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 구문은&lt;/font&gt;&lt;/font&gt; &lt;code&gt;(T)something&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동일&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하므로 피해야합니다 (나중에 자세히 설명). 그러나&lt;/font&gt;&lt;/font&gt; &lt;code&gt;T(something, something_else)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 안전하며 생성자를 호출하도록 보장됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f10b3c4d099cea83615e753239bff94e7f3c1ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C-style cast&lt;/strong&gt; and &lt;strong&gt;function-style cast&lt;/strong&gt; are casts using &lt;code&gt;(type)object&lt;/code&gt; or &lt;code&gt;type(object)&lt;/code&gt;, respectively, and are functionally equivalent. They are defined as the first of the following which succeeds:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 스타일 캐스트&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수 스타일 캐스트&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 각각 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)object&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 또는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(object)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 캐스트 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;되며 기능적으로 동일합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;성공한 다음 중 첫 번째로 정의됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1d2d12690e92643857e438e651091583a31a42fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: Cast from Derived to Base or viceversa creates &lt;em&gt;new&lt;/em&gt; copy! For people coming from C#/Java, this can be a huge surprise because the result is basically a chopped off object created from Derived.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gotcha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 파생에서 기본으로 또는 그 반대로 캐스트하면 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;새&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사본이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;만들어집니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C # / Java에서 온 사람들에게는 결과가 기본적으로 Derived에서 만든 잘게 잘린 객체이기 때문에 이것은 놀라운 일입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2bac6e263f5a53183ab317b8999b06f4e4af8c6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Gotcha&lt;/strong&gt;: If you cast base pointer to derived pointer but if actual object is not really derived type then you &lt;em&gt;don't&lt;/em&gt; get error. You get bad pointer and  very likely a segfault at runtime. Same goes for &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Gotcha&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 기본 포인터를 파생 포인터로 캐스팅하지만 실제 객체가 실제로 파생되지 않은 유형 인 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;오류가 발생 &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하지 않습니다&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임에 포인터가 잘못되어 segfault가 발생할 가능성이 큽니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 도 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 마찬가지입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="db0842ccf51dfcb3d7efbeb12fceeeb77b0d2fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use C++ cast&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 캐스트 사용시기&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc1891b50452cabe6ee24f5611acdca816c45c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce66e5c538d901143e8ead7a542d10eb15e5c439" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;const_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;const_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ac4eb9b5acd87e28c62b5fbc4faaaf1db3512a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81e44620028491193504c883ef72fcd607f8dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dynamic_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;dynamic_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cd6415d2956dc3e1e675882f861d933d45d68c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c70ae525e0f9d6b46225d67d2b8845f7f0d2307d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;reinterpret_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67dbf2071e10cdcee9f7c486795a8b88d9c98465" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast :&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast :&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba9b167ee3e215ecec1037311a373547f6128c61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_cast&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;static_cast&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d42c0032b3b16e37db02cd204b0858aa30912b0e" translate="yes" xml:space="preserve">
          <source>Another example is when you want to implement &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; as well as &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt;. To avoid code duplication, you can apply const_cast to return value of one function from another.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또 다른 예는 &lt;/font&gt; &lt;code&gt;const T&amp;amp; SomeClass::foo() const&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 뿐만 아니라 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;T&amp;amp; SomeClass::foo()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 구현하려는 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드 중복을 피하기 위해 const_cast를 적용하여 한 함수의 값을 다른 함수에서 반환 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fe1de896ffacbbb4b8376d2bab06c2d9fc6dd83d" translate="yes" xml:space="preserve">
          <source>Below are some of the &lt;strong&gt;practical examples&lt;/strong&gt; when I used &lt;strong&gt;static_cast&lt;/strong&gt;, &lt;strong&gt;dynamic_cast&lt;/strong&gt;, &lt;strong&gt;const_cast&lt;/strong&gt;, &lt;strong&gt;reinterpret_cast&lt;/strong&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast를&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용한 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제 예제&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 입니다.&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06aad5787dbc559de97b06dabcf6d4d79876f8f2" translate="yes" xml:space="preserve">
          <source>But because &lt;code&gt;b2s[0]&lt;/code&gt; was not a &lt;code&gt;D&lt;/code&gt;, it now points to an undefined memory region.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 아니 었으므로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 정의되지 않은 메모리 영역을 가리 킵니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5580b5b92994da98f29dcf66d694bd9af7c51b0f" translate="yes" xml:space="preserve">
          <source>But this is wrong, because D is actually at 0x7fffffffc930, what is at 0x7fffffffc940 is the B2-like structure inside D! So trash gets accessed.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 D는 실제로 0x7fffffffc930에 있기 때문에 잘못되었습니다. 0x7fffffffc940은 D 내부의 B2와 같은 구조입니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;휴지통에 액세스합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1636407c1772330f5809d111fbef0d07de231b8f" translate="yes" xml:space="preserve">
          <source>C++ compiler already knows how to convert between scaler types such as float to int. Use &lt;code&gt;static_cast&lt;/code&gt; for them.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 컴파일러는 float과 같은 스케일러 유형을 int로 변환하는 방법을 이미 알고 있습니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="bd84a23d42572cf02a2a2fb13fa9e63b4681b84e" translate="yes" xml:space="preserve">
          <source>C-style cast &lt;code&gt;(type)value&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 스타일 캐스트 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(type)value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="656825f0b6169386ec4a61349a410fbab8856086" translate="yes" xml:space="preserve">
          <source>C-style casts also ignore access control when performing a &lt;code&gt;static_cast&lt;/code&gt;, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 스타일 캐스트는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 수행 할 때 액세스 제어를 무시하므로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 캐스트가 할 수없는 작업을 수행 할 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 대부분 kludge이며, 제 생각에는 C 스타일 캐스트를 피하는 또 다른 이유입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d7405076271098f4474d3f1e565b760f01b07bb0" translate="yes" xml:space="preserve">
          <source>Cast from &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt; always succeeds if A and B are in inheritance hierarchy (or void) otherwise you get compile error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;A와 B가 상속 계층 (또는 void)에 있으면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;*&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;캐스트는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;항상 성공합니다. 그렇지 않으면 컴파일 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9197bfc872a74595c98aaafe8ed8a9bd494568ee" translate="yes" xml:space="preserve">
          <source>Compile, run and disassemble with:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음을 사용하여 컴파일, 실행 및 분해하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0ecc2a94cc30cef1234a946bcfde6dc1e7fb16a6" translate="yes" xml:space="preserve">
          <source>Consider the following code example:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음 코드 예제를 고려하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c3d0787e29776fdb53b94bc5260e1d30832cb" translate="yes" xml:space="preserve">
          <source>Does &lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;this&lt;/a&gt; answer your question?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/casting_comparison&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 귀하의 질문에 대답 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니까 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6341f88dd8c3d05c0119742997d832c827ad0bb6" translate="yes" xml:space="preserve">
          <source>Downcasting using the 'static_cast' in C++</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서 'static_cast'를 사용한 다운 캐스팅&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="54a502b64c8f30908d5dc52ab0743b009011907f" translate="yes" xml:space="preserve">
          <source>First there is a NULL check, and it returns NULL if th einput is NULL.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;먼저 NULL 검사가 있고 입력이 NULL이면 NULL을 반환합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="36dfaeed59ce5f884e642ab58970b2b24e1fb11e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&amp;amp;&lt;/code&gt; to &lt;code&gt;B&amp;amp;&lt;/code&gt; if cast is invalid then dynamic_cast will throw bad_cast exception.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;들어 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B&amp;amp;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 캐스트가 무효 인 경우 다음 dynamic_cast는이 bad_cast 예외를 throw합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="63fbfa303623ff499116f91b0b4f89533004f5e5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A*&lt;/code&gt; to &lt;code&gt;B*&lt;/code&gt;, if cast is invalid then dynamic_cast will return nullptr.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;들어 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;A*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B*&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 캐스트 인 경우, 무효 다음 dynamic_cast는이 nullptr을 반환합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="736c92c74e98d64f9c01088b4c653eaddd3420d6" translate="yes" xml:space="preserve">
          <source>For C++ beginners C-style casts look like being the superset operation over C++ casts (static_cast&amp;lt;&amp;gt;(), dynamic_cast&amp;lt;&amp;gt;(), const_cast&amp;lt;&amp;gt;(), reinterpret_cast&amp;lt;&amp;gt;()) and someone could prefer them over the C++ casts. In fact C-style cast is the superset and shorter to write.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 초보자의 경우 C 스타일 캐스트는 C ++ 캐스트 (static_cast &amp;lt;&amp;gt; (), dynamic_cast &amp;lt;&amp;gt; (), const_cast &amp;lt;&amp;gt; (), reinterpret_cast &amp;lt;&amp;gt; ())에 대한 수퍼 세트 작업 인 것처럼 보이고 누군가 C ++ 캐스트보다 선호 할 수 있습니다. . &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실제로 C 스타일 캐스트는 슈퍼 세트이며 작성하기가 더 짧습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6c1a64668ac9673b2f10528d076df1cf9bd7b353" translate="yes" xml:space="preserve">
          <source>For example, you can load 4 bytes of float to 4 bytes of int to see how bits in float looks like.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, 4 바이트의 float를 4 바이트의 int로로드하여 float의 비트가 어떻게 보이는지 확인할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="4e6e7d43a0aac95fd86233b9dccdee4f262952d7" translate="yes" xml:space="preserve">
          <source>From the stdout output we see:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;stdout 출력에서 ​​다음을 볼 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c449c5ff531b0ce703b262016b6a4ef0245fc823" translate="yes" xml:space="preserve">
          <source>Function-style cast &lt;code&gt;type(value)&lt;/code&gt;</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;함수형 캐스트 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;type(value)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0547d3bb719cf7855bcd1808ffcaa7f313fa0d3a" translate="yes" xml:space="preserve">
          <source>Here is a short quote from Bjarne Stroustrup's (the author of C++) book The C++ Programming Language 4th edition - page 302.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Bjarne Stroustrup (C ++의 저자) 저서 C ++ Programming Language 4th edition-302 쪽에서 인용 한 내용은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a1c4c328e5cddf9613426e0405a575561d1e72e6" translate="yes" xml:space="preserve">
          <source>Here is the sample.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;샘플은 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9f3be9905003f944fb72e085e1a9f85768a2652c" translate="yes" xml:space="preserve">
          <source>How does one decide which to use in which specific cases?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;어떤 경우에 어떤 것을 사용할 것인지 어떻게 결정합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="18fcef7f45a3483e9706e3199d5354f2d47ab262" translate="yes" xml:space="preserve">
          <source>How is dynamic_cast implemented</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast는 어떻게 구현됩니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="23479e09b4911601778d7e1e7417e287948175db" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;static_cast&lt;/code&gt; works for simple pointers (not pointers to pointers), so the above code can be rewritten to avoid &lt;code&gt;reinterpret_cast&lt;/code&gt; (at a price of an extra variable) in the following way:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 포인터에 대한 포인터가 아닌 간단한 포인터에 대해 작동하므로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같은 방법으로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (추가 변수의 가격으로) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;를 피하기 위해 위의 코드를 다시 작성할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3abec9e72150397dbb79393a6acc1cc943245e48" translate="yes" xml:space="preserve">
          <source>I believe that this will give a good intuition on how those casts are different:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이것이 캐스트가 어떻게 다른지에 대한 좋은 직감을 줄 것이라고 믿습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="cc457185fb8b24739881731c33ce05ebf528e823" translate="yes" xml:space="preserve">
          <source>I don't have the patience to analyze this further now, but as others said, the only way for this to work is for &lt;code&gt;__dynamic_cast&lt;/code&gt; to access some extra RTTI in-memory data structures that represent the class hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 이것을 더 분석 할 인내심이 없지만, 다른 사람들이 말했듯이, 이것이 작동하는 유일한 방법은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 클래스 계층을 나타내는 여분의 RTTI 인 메모리 데이터 구조에 액세스하는 것입니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="515abf6695de31a8b6fbf4cf01c72f8fac080514" translate="yes" xml:space="preserve">
          <source>I have never used &lt;code&gt;reinterpret_cast&lt;/code&gt;, and wonder whether running into a case that needs it isn't a smell of bad design. In the code base I work on &lt;code&gt;dynamic_cast&lt;/code&gt; is used a lot. The difference with  &lt;code&gt;static_cast&lt;/code&gt; is that a &lt;code&gt;dynamic_cast&lt;/code&gt; does runtime checking which may (safer) or may not (more overhead) be what you want (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;msdn&lt;/a&gt;).</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;나는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용한 적이 없으며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, 필요한 경우가 나쁜 디자인의 냄새가 아닌지 궁금합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;코드베이스에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 작업 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 많이 사용됩니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와의 차이점 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 런타임 검사를 수행하여 원하는 것을 (더 이상) 더 많이 (더 많은 오버 헤드) 할 수 없다는 것입니다 ( &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/c36yw7x9(VS.80).aspx&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;msdn&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;).&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ca04ba2c9bedbaf0f352749135eff101a3f5c9ea" translate="yes" xml:space="preserve">
          <source>If an abort is the only action your code can take, maybe you only want to enable the &lt;code&gt;dynamic_cast&lt;/code&gt; in debug builds (&lt;code&gt;-NDEBUG&lt;/code&gt;), and use &lt;code&gt;static_cast&lt;/code&gt; otherwise, e.g. &lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;as done here&lt;/a&gt;, to not slow down your fast runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;중단이 코드에서 수행 할 수있는 유일한 작업 인 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;디버그 빌드 ( &lt;/font&gt; &lt;code&gt;-NDEBUG&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; ) &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 사용하도록 설정하고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않은 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 &lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하여 ( &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예 : &lt;/font&gt;&lt;a href=&quot;https://github.com/gem5/gem5/blob/9fc9c67b4242c03f165951775be5cd0812f2a705/src/base/cast.hh#L40&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;수행 한 것처럼)&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 빠른 실행 속도를 늦추지 않을 수 있습니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9b8e4f125f7aa40f62e946039c6563eb233f1cbd" translate="yes" xml:space="preserve">
          <source>In addition to the other answers so far, here is unobvious example where &lt;code&gt;static_cast&lt;/code&gt; is not sufficient so that &lt;code&gt;reinterpret_cast&lt;/code&gt; is needed. Suppose there is a function which in an output parameter returns pointers to objects of different classes (which do not share a common base class). A real example of such function is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt;&lt;code&gt;CoCreateInstance()&lt;/code&gt;&lt;/a&gt; (see the last parameter, which is in fact &lt;code&gt;void**&lt;/code&gt;). Suppose you request particular class of object from this function, so you know in advance the type for the pointer (which you often do for COM objects). In this case you cannot cast pointer to your pointer into &lt;code&gt;void**&lt;/code&gt; with &lt;code&gt;static_cast&lt;/code&gt;: you need &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;지금까지의 다른 답변 외에도 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 충분하지 않아 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 필요한 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;명백한 예가 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;출력 매개 변수에 다른 클래스 (공통 기본 클래스를 공유하지 않는)의 오브젝트에 대한 포인터를 리턴하는 함수가 있다고 가정하십시오. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이러한 함수의 실제 예는 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686615%28v=vs.85%29.aspx&quot;&gt; &lt;code&gt;CoCreateInstance()&lt;/code&gt; &lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; (실제로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 마지막 매개 변수 참조 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;). &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 함수에서 특정 클래스의 객체를 요청한다고 가정하면 포인터의 유형 (COM 객체에 대해 자주 사용하는 유형)을 미리 알고 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 경우 당신이로 포인터 포인터를 캐스팅 할 수없는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;void**&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; : 당신이 필요 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;yourPointer)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="da6adb2e9c618356084933ae4271293e912a777e" translate="yes" xml:space="preserve">
          <source>In code:</source>
          <target state="translated">코드에서 :</target>
        </trans-unit>
        <trans-unit id="f48f5e44150c506148699b958474295be46ab891" translate="yes" xml:space="preserve">
          <source>In this answer, I want to compare these three mechanisms on a concrete upcast/downcast example and analyze what happens to the underlying pointers/memory/assembly to give a concrete understanding of how they compare.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 답변에서는 구체적인 업 캐스트 / 다운 캐스트 예제에서이 세 가지 메커니즘을 비교하고 기본 포인터 / 메모리 / 어셈블리에 어떤 일이 발생하는지 분석하여 이들이 어떻게 비교되는지에 대한 구체적인 이해를 제공하고자합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a300a6b8a5c1988450622619a2f1fd181a511aa1" translate="yes" xml:space="preserve">
          <source>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a &lt;code&gt;reinterpret_cast&lt;/code&gt;, and the latter should be preferred when explicit casting is needed, unless you are sure &lt;code&gt;static_cast&lt;/code&gt; will succeed or &lt;code&gt;reinterpret_cast&lt;/code&gt; will fail. Even then, consider the longer, more explicit option.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 일부 경우 다른 캐스트의 대체물로 사용될 수 있지만 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 전환 할 수 있기 때문에 매우 위험 할 수 있으며 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 성공하거나 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;확실하지 않은 경우 명시 적 캐스트가 필요한 경우 후자가 선호됩니다. &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 실패합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그럼에도 불구하고 더 길고 더 명확한 옵션을 고려하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7ea24132facf650f92f3d393dce2d133da6cea48" translate="yes" xml:space="preserve">
          <source>It might help if you know little bit of internals...</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내부 정보를 조금만 아는 경우 도움이 될 수 있습니다 ...&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="53b2681298369920fcd6103c5e7b3fa26cea6a2a" translate="yes" xml:space="preserve">
          <source>It must therefore start from the &lt;code&gt;B2&lt;/code&gt; entry for that table, then walk this class hierarchy until it finds that the vtable for a &lt;code&gt;D&lt;/code&gt; typecast from &lt;code&gt;b2s[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;해당 테이블 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 항목에서 시작한 다음 &lt;/font&gt; &lt;code&gt;b2s[0]&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; typecast &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 vtable이 발견 될 때까지이 클래스 계층 구조를 따라 &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가십시오&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="78486bda2cd7b271217be869eeddf907840635c2" translate="yes" xml:space="preserve">
          <source>Now, as mentioned at: &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/a&gt; in order to support the virtual method calls efficiently, the memory data structure of &lt;code&gt;D&lt;/code&gt; has to look something like:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가상 메소드 호출을 효율적으로 지원하기 위해 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;https://en.wikipedia.org/wiki/Virtual_method_table&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에서 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;언급했듯이 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 메모리 데이터 구조는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음과 같아야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="27ecdae4b0aaf4635a3e357abe87725b694b381a" translate="yes" xml:space="preserve">
          <source>Now, we can finally get back to type casting and the analysis of our concrete example.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이제 타입 캐스팅과 구체적인 예제 분석으로 돌아갈 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f68a5338ab683eaa5777e7d2d78aed399812d592" translate="yes" xml:space="preserve">
          <source>Obviously, if data is not correct for the type, you may get segfault.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;데이터가 유형에 맞지 않으면 segfault가 발생할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="31c25bfb760007360abc96fd76af460f7f9fef16" translate="yes" xml:space="preserve">
          <source>One example where this comes handy is iterating through some container like &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; which only returns its elements as const to make sure you don't change its key. However if your intent is to modify object's non-key members then it should be ok. You can use const_cast to remove constness.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 편리한 예는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;set&amp;lt;T&amp;gt;&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 같은 컨테이너를 반복하는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;set &amp;lt;T&amp;gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 요소를 const로만 반환하여 키를 변경하지 않도록합니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그러나 객체의 키가 아닌 멤버를 수정하려는 의도라면 괜찮을 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast를 사용하여 constness를 제거 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="51b2ca86efbcbe6d929deae1e6732505d970d7c1" translate="yes" xml:space="preserve">
          <source>One this to be noted is: The &lt;strong&gt;dynamic_cast&lt;/strong&gt; would fail at run-time, however on most compilers it will also fail to compile because there are no virtual functions in the struct of the pointer being casted, meaning &lt;strong&gt;dynamic_cast&lt;/strong&gt; will work with only polymorphic class pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한 가지 주목해야이는 다음과 같습니다 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast는이&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 그러나 대부분의 컴파일러에 그것은 또한 의미 주조되는 포인터의 구조체에는 가상 함수가 없기 때문에 컴파일 실패, 실행시에 실패 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast는이&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 단지 다형성 클래스 포인터와 함께 작동합니다 .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="89e74eb11db54e231c9de7e18b7b9c7d4b12bdf1" translate="yes" xml:space="preserve">
          <source>Only line (4) compiles without error. Only &lt;strong&gt;reinterpret_cast&lt;/strong&gt; can be used to convert a pointer to an object to a pointer to an any unrelated object type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;라인 (4) 만 오류없이 컴파일됩니다. &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 만 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하여 객체에 대한 포인터를 관련이없는 객체 유형에 대한 포인터로 변환 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="abfbd6cd15d63c23c7d3d30c8e3a4758e6086f36" translate="yes" xml:space="preserve">
          <source>Otherwise, it sets up some arguments in the RDX, RSI and RDI and calls &lt;code&gt;__dynamic_cast&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 RDX, RSI 및 RDI에 일부 인수를 설정하고 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;__dynamic_cast&lt;/code&gt; 를&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; .&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;가능한 출력 :&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="538fb0772ec63cf8b0351898c002fdafced0cdc2" translate="yes" xml:space="preserve">
          <source>Related questions:</source>
          <target state="translated">관련 질문 :</target>
        </trans-unit>
        <trans-unit id="313f99c939e5a52696cfdcc3b8912697de919023" translate="yes" xml:space="preserve">
          <source>Tested on Ubuntu 18.04 amd64, GCC 7.4.0.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;Ubuntu 18.04 amd64, GCC 7.4.0에서 테스트되었습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="021a66c8a07594230bc210a2b2a2c898cb33f663" translate="yes" xml:space="preserve">
          <source>The disassembly is:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;분해는 다음과 같습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0bc099ba8fe11b0382c44132df75211559d3b400" translate="yes" xml:space="preserve">
          <source>The key fact is that the memory data structure of &lt;code&gt;D&lt;/code&gt; contains inside it memory structure compatible with that of &lt;code&gt;B1&lt;/code&gt; and that of &lt;code&gt;B2&lt;/code&gt; internally.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;중요한 사실은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 메모리 데이터 구조는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;내부에 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 과 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 메모리 구조와 호환되는 메모리 구조를 포함 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;한다는 것입니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5a3e976115f67a49acd1ee58f48abd198fb94c35" translate="yes" xml:space="preserve">
          <source>The main problem of C-style casts is that they hide developer real intention of the cast. The C-style casts can do virtually all types of casting from normally safe casts done by static_cast&amp;lt;&amp;gt;() and dynamic_cast&amp;lt;&amp;gt;() to potentially dangerous casts like const_cast&amp;lt;&amp;gt;(), where const modifier can be removed so the const variables can be modified and reinterpret_cast&amp;lt;&amp;gt;() that can even reinterpret integer values to pointers.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 스타일 캐스트의 주요 문제점은 캐스트의 개발자의 의도를 숨기고 있다는 것입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C 스타일 캐스트는 static_cast &amp;lt;&amp;gt; () 및 dynamic_cast &amp;lt;&amp;gt; ()에 의해 수행되는 일반적으로 안전한 캐스트에서 const_cast &amp;lt;&amp;gt; ()와 같은 잠재적으로 위험한 캐스트에 이르기까지 거의 모든 유형의 캐스트를 수행 할 수 있습니다. 정수 값을 포인터로 재 해석 할 수있는 수정 및 reinterpret_cast &amp;lt;&amp;gt; ()&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="11774ec8768fb7ecd6984b5866c62057e7c4d28b" translate="yes" xml:space="preserve">
          <source>The main reason why C++ casts were added to the language was to allow a developer to clarify his intentions - why he is going to do that cast. By using C-style casts which are perfectly valid in C++ you are making your code less readable and more error prone especially for other developers who didn't create your code. So to make your code more readable and explicit you should always prefer C++ casts over C-style casts.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++ 캐스트가 언어에 추가 된 주된 이유는 개발자가 자신의 의도를 명확히 할 수 있도록했기 때문입니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;C ++에서 완벽하게 유효한 C 스타일 캐스트를 사용하면 코드를 작성하지 않은 다른 개발자에게 코드를 읽기 어렵고 오류가 발생하기 쉽습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 코드를보다 읽기 쉽고 명확하게하려면 항상 C 스타일 캐스트보다 C ++ 캐스트를 선호해야합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5ef5fdecb5232e3e7590fa6bc96a02829a894434" translate="yes" xml:space="preserve">
          <source>Then, on the downcast sections, it is now easy to understand how the invalid ones fail and why:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그런 다음 다운 캐스트 섹션에서 이제 유효하지 않은 섹션이 실패하는 이유와 이유를 쉽게 이해할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="59fa3cd980523ba22f27487dd76ff3b1ac65f2e7" translate="yes" xml:space="preserve">
          <source>There is no runtime overhead for this cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 캐스트에 대한 런타임 오버 헤드가 없습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="9779cf96d0cd458a50e000127ed6fd4a8589f7ec" translate="yes" xml:space="preserve">
          <source>There is no way this can be done at compile time, and we will confirm that from the disassembly:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;컴파일 타임 에이 작업을 수행 할 수있는 방법이 없으며 분해에서 확인합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="a8b241867b6c7154fb8aa178b38b565998bf85c2" translate="yes" xml:space="preserve">
          <source>Therefore we reach the critical conclusion:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 우리는 중요한 결론에 도달합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="483865e373a36f9d0c75153eca9c80714054a5ae" translate="yes" xml:space="preserve">
          <source>Therefore, if your code is not able to check for that &lt;code&gt;nullptr&lt;/code&gt; and take a valid non-abort action, you should just use &lt;code&gt;static_cast&lt;/code&gt; instead of dynamic cast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 코드에서 해당 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 을 확인 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하고 유효한 중단되지 않은 조치를 수행 할 수없는 경우 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;동적 캐스트 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용해야 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="14e84c6fca606a6849c36eb8eee9e7dfa0759f47" translate="yes" xml:space="preserve">
          <source>Therefore, the implicit &lt;code&gt;static_cast&lt;/code&gt; done there did correctly calculate the offset from the full &lt;code&gt;D&lt;/code&gt; data structure at 0x7fffffffc930 to the &lt;code&gt;B2&lt;/code&gt; like one which is at 0x7fffffffc940. We also infer that what lies between 0x7fffffffc930 and 0x7fffffffc940 is likely be the &lt;code&gt;B1&lt;/code&gt; data and vtable.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;따라서 암시 적 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 0x7fffffffc930 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 전체 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 데이터 구조에서 0x7fffffffc940의 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 까지의 오프셋을 올바르게 계산했습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또한 0x7fffffffc930과 0x7fffffffc940 사이에있는 것은 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B1&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 데이터와 vtable &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일 가능성이 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1a6c94b2c9fb51ea9c355e138cf15808a4189def" translate="yes" xml:space="preserve">
          <source>This C-style cast is far more dangerous than the named conversion operators
  because the notation is harder to spot in a large program and the kind of conversion intended by the programmer is not explicit.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 C 스타일 캐스트는 큰 프로그램에서 표기법을 찾기가 더 어렵고 프로그래머가 의도 한 변환 종류가 명시 적이 지 않기 때문에 명명 된 변환 연산자보다 훨씬 위험합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b424ec8cf10bbc9a473b4bde47a88a393042ec27" translate="yes" xml:space="preserve">
          <source>This basically says that take these bytes at this memory location and think of it as given object.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 기본적 으로이 바이트를이 메모리 위치에서 가져 와서 주어진 객체로 생각한다고 말합니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7a0ffe41fea2e124ad060c68ef6887208a4ba8f4" translate="yes" xml:space="preserve">
          <source>This is why reinterpret cast is potentially expensive! Here is &lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;an example where a one liner patch converting a &lt;code&gt;dynamic_cast&lt;/code&gt; to a &lt;code&gt;static_cast&lt;/code&gt; in a complex project reduced runtime by 33%!&lt;/a&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것이 재 해석 캐스트가 잠재적으로 비싼 이유입니다! &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다음은 &lt;/font&gt;&lt;a href=&quot;https://gem5-review.googlesource.com/c/public/gem5/+/25964&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;복잡한 프로젝트에서 &lt;/font&gt;&lt;/a&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 로 변환하는 하나의 라이너 패치로 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;런타임이 33 % 단축 된 예입니다! &lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="d99df69ad599cd0fda2e2aff6e4c8d7303c5683d" translate="yes" xml:space="preserve">
          <source>This means, dynamic_cast is very expensive compared to static_cast!</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이것은 dynamic_cast가 static_cast에 비해 매우 비싸다는 것을 의미합니다!&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="0acf04d9d8a83be16d8528eb9bd0b82b587353c8" translate="yes" xml:space="preserve">
          <source>This safety check allows you to query if a base class pointer is of a given type at runtime by checking a return of &lt;code&gt;nullptr&lt;/code&gt; which indicates an invalid downcast.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이 안전 점검을 통해 런타임에 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;유효하지 않은 다운 캐스트를 나타내는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;nullptr&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 의 리턴을 확인하여 기본 클래스 포인터가 주어진 유형인지 조회 할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="e15b1ea2c7f824ff37c90f1e8b7936f27b22efe9" translate="yes" xml:space="preserve">
          <source>This way, when &lt;code&gt;D&lt;/code&gt; gets passed to the base type array, the type cast actually calculates that offset and points something that looks exactly like a valid &lt;code&gt;B2&lt;/code&gt; in memory:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이런 식으로 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 기본 형식 배열로 전달되면 형식 캐스트는 실제로 해당 오프셋을 계산하고 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;메모리 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;의 유효한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 와 똑같이 보이는 것을 가리 킵니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="461ce6d7ac7fffd2efe5f78172ddcd55ba4ade9c" translate="yes" xml:space="preserve">
          <source>To understand, let's consider below code snippet:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;이해하기 위해 아래 코드 스 니펫을 고려하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="71edd74dd328a7b59bb0add24d26eaba325228e3" translate="yes" xml:space="preserve">
          <source>Unlike other casts, there is runtime overhead.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 캐스트와 달리 런타임 오버 헤드가 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="b440267b36cd050855228bf69a71053dd1f4cede" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;const_cast&lt;/code&gt; for casting away &lt;code&gt;const/volatile&lt;/code&gt;.  Avoid this unless you are stuck using a const-incorrect API.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt; &lt;code&gt;const/volatile&lt;/code&gt; 을&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 멀리 캐스팅 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;const_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const-incorrect API를 사용하지 않으면 이것을 피하십시오.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="33967e4229bc5029b76a7118b208e43eaeaf831f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;dynamic_cast&lt;/code&gt; for converting pointers/references within an inheritance hierarchy.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;상속 계층 내에서 포인터 / 참조를 변환 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="74ffc11bceafcdfafef3cb243e8490c234069647" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reinterpret_cast&lt;/code&gt; for low-level reinterpreting of bit patterns.  Use with extreme caution.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;비트 패턴을 하위 수준으로 재 해석 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하려면 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;매우주의해서 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="06070b016ef3361153d9ac1fe2f7fb6f604e13da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;static_cast&lt;/code&gt; for ordinary type conversions.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;일반 유형 변환 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="f261c621539ea72804a1bc9cd48ba82eab320a3e" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;const_cast&lt;/strong&gt; to remove the const qualifier.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const 한정자를 제거 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하려면 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="16639515eac22573770f0b98cac7779e7069d25a" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;reinterpret_cast&lt;/strong&gt; to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if we know what we are doing and we understand the aliasing issues.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;reinterpret_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 를 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하여 정수 및 기타 포인터 유형간에 포인터 유형의 안전하지 않은 변환을 수행 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;하십시오 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리가하는 일을 알고 앨리어싱 문제를 이해하는 경우에만 이것을 사용하십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="2f63b8d2d1460077022f7bcf653b5d9e78a78586" translate="yes" xml:space="preserve">
          <source>Use &lt;strong&gt;static_cast&lt;/strong&gt; as the equivalent of a C-style cast that does value conversion, or when we need to explicitly up-cast a pointer from a class to its superclass.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;사용 &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 값 변환을 수행, 또는 우리가 명시 적으로 필요로 할 때 슈퍼 클래스에 클래스에서 포인터를 캐스팅 C 스타일 캐스트에 해당있다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="6036b024144db4c9c71396f2a743f0c5ba4137ea" translate="yes" xml:space="preserve">
          <source>We can confirm this from the horrendous &lt;code&gt;-O0&lt;/code&gt; assembly that just moves the value around:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;값을 이동시키는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;끔찍한 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;-O0&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 어셈블리 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에서이를 확인할 수 있습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c3adb082e564095f32452366d629d1538ddb3671" translate="yes" xml:space="preserve">
          <source>What are the proper uses of:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;올바른 사용법은 무엇입니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7f0038b6257ec0adb6364ddfba9c0c40897c49cf" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast, dynamic_cast, const_cast 및 reinterpret_cast를 사용해야하는시기&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="5e05d0643bef3dea2a364460dccc72e536e8737e" translate="yes" xml:space="preserve">
          <source>When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast, dynamic_cast, const_cast 및 reinterpret_cast는 언제 사용해야합니까?&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3bde5d7164ed2cf947d8f811c40c55b8a5630d9d" translate="yes" xml:space="preserve">
          <source>When you ask compiler to convert from type &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;static_cast&lt;/code&gt; calls &lt;code&gt;B&lt;/code&gt;'s constructor passing &lt;code&gt;A&lt;/code&gt; as param. Alternatively, &lt;code&gt;A&lt;/code&gt; could have a conversion operator (i.e. &lt;code&gt;A::operator B()&lt;/code&gt;).  If &lt;code&gt;B&lt;/code&gt; doesn't have such constructor, or &lt;code&gt;A&lt;/code&gt; doesn't have a conversion operator, then you get compile time error.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;당신이 형 변환하는 컴파일러를 물어 보면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;에 &lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; , &lt;/font&gt; &lt;code&gt;static_cast&lt;/code&gt; 는&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 호출 &lt;/font&gt; &lt;code&gt;B&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 통과의 생성자 &lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; PARAM으로. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;또는 &lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에는 변환 연산자 (예 : &lt;/font&gt; &lt;code&gt;A::operator B()&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; )가있을 수 있습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;경우 &lt;/font&gt; &lt;code&gt;B&lt;/code&gt; 는&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 같은 생성자가없는, 또는 &lt;/font&gt; &lt;code&gt;A&lt;/code&gt; 가&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 변환 연산자를 가지고 있지 않습니다, 당신은 컴파일 타임 오류가 발생합니다.&lt;/font&gt;&lt;/font&gt; &lt;code&gt;A&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3782acc436913a8ac6615a5bf1fb86f8abc2ba6a" translate="yes" xml:space="preserve">
          <source>While other answers nicely described all differences between C++ casts, I would like to add a short note why you should not use C-style casts &lt;code&gt;(Type) var&lt;/code&gt; and &lt;code&gt;Type(var)&lt;/code&gt;.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;다른 답변은 C ++ 캐스트 간의 모든 차이점을 잘 설명했지만 C 스타일 캐스트 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Type) var&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 및 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;Type(var)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 사용하지 않아야하는 이유를 간단히 설명하고 싶습니다 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="ed9c2977aa35aba78f7d1f5411696d1f9e5128d3" translate="yes" xml:space="preserve">
          <source>While static_cast can do non-const to const it can't go other way around. The const_cast can do both ways.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;static_cast는 const가 아닌 const를 수행 할 수는 있지만 다른 방법으로는 사용할 수 없습니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;const_cast는 두 가지 방법을 모두 수행 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="3f21d8efd7b1b2b65b636be1695a8129ab01e5c4" translate="yes" xml:space="preserve">
          <source>an upcast or downcast only needs to shift the pointer value by a value known at compile time</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;업 캐스트 또는 다운 캐스트는 컴파일 시간에 알려진 값만큼 포인터 값만 이동하면됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="c20277379a211f27a3787e85a15e1ea6caec3973" translate="yes" xml:space="preserve">
          <source>check if pointer is NULL, and if yes return NULL</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터가 NULL인지 확인하고, 그렇다면 NULL을 반환&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="7322aa6022cbcaa23db1eadc8aad6574ae91af74" translate="yes" xml:space="preserve">
          <source>dynamic_cast uses runtime type information to figure out if cast is valid. For example, &lt;code&gt;(Base*)&lt;/code&gt; to &lt;code&gt;(Derived*)&lt;/code&gt; may fail if pointer is not actually of derived type.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;dynamic_cast는 런타임 유형 정보를 사용하여 캐스트가 유효한지 알아냅니다. &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;예를 들어, &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;포인터가 실제로 파생 된 유형이 아닌 경우 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Base*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; ~ &lt;/font&gt;&lt;/font&gt; &lt;code&gt;(Derived*)&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 가 실패 할 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="94315b64fee53e82e90751f8a115b6a8ef3d6783" translate="yes" xml:space="preserve">
          <source>except that this one has the vtable for &lt;code&gt;D&lt;/code&gt; instead of &lt;code&gt;B2&lt;/code&gt;, and therefore all virtual calls work transparently.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;단 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;, &lt;/font&gt; &lt;code&gt;B2&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대신 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; 에&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 대한 vtable이 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;있으므로 모든 가상 호출이 투명하게 작동합니다.&lt;/font&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="682a50d19e416195436708e48c7761923b8d6651" translate="yes" xml:space="preserve">
          <source>main.cpp</source>
          <target state="translated">main.cpp</target>
        </trans-unit>
        <trans-unit id="02f4fd2e20c3a623ba1400f9952d470361ae4d59" translate="yes" xml:space="preserve">
          <source>otherwise, subtract 0x10 from it to reach the &lt;code&gt;D&lt;/code&gt; which does not exist</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;그렇지 않으면 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;존재하지 않는 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;D&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 에 도달하기 위해 0x10을 빼십시오.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="253191d40c8e7038fb1d1250e212cabda1243839" translate="yes" xml:space="preserve">
          <source>so we see that GCC does:</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;우리는 GCC가 다음을 수행한다는 것을 알 수 있습니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
        <trans-unit id="1889aaee9b532814e1aa423ce3e5acf4abeeb50d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;setarch&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;used to disable ASLR&lt;/a&gt; to make it easier to compare runs.</source>
          <target state="translated">&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;여기서 &lt;/font&gt;&lt;/font&gt; &lt;code&gt;setarch&lt;/code&gt; &lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 는 &lt;/font&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;실행을보다 쉽게 ​​비교할 수 있도록 &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11238457/disable-and-re-enable-address-space-layout-randomization-only-for-myself&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;ASLR을 비활성화하는 데 사용&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt;&lt;font style=&quot;vertical-align: inherit;&quot;&gt; 됩니다.&lt;/font&gt;&lt;/font&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
