<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/332365">
    <body>
      <group id="332365">
        <trans-unit id="f5dccbefc9eb641263e9035c2feacfbb42ddecab" translate="yes" xml:space="preserve">
          <source>' )</source>
          <target state="translated">' )</target>
        </trans-unit>
        <trans-unit id="a0f651cde227a7b6a2f745cc1abcae1e478af7dd" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;All code examples in this answer were run on a PostgreSQL 9.1.2 database server.&lt;/em&gt;)</source>
          <target state="translated">( &lt;em&gt;Все примеры кода в этом ответе выполнялись на сервере базы данных PostgreSQL 9.1.2.&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="2e2f5034350c8def8869f07ee89d9d21bf27cfa2" translate="yes" xml:space="preserve">
          <source>(for example) to add the new student, where the &lt;code&gt;$xxx&lt;/code&gt; variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.</source>
          <target state="translated">(например), чтобы добавить нового студента, где содержимое переменной &lt;code&gt;$xxx&lt;/code&gt; было взято непосредственно из HTML-формы, без проверки формата или экранирования специальных символов.</target>
        </trans-unit>
        <trans-unit id="fdfe2e70fde31449eb3c2bab22ca555028d85e07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Source: &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt;)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(Источник: &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt; )&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="22e2aaa76f874c66b707cacfaa9f76f22b05d735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It drops the students table.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Это опускает стол студентов.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7df5880bf1ba6e654e04c1e22cc8c944922f40cc" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;sup&gt;Edited &lt;strong&gt;&lt;em&gt;again&lt;/em&gt;&lt;/strong&gt; as per &lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04&lt;/a&gt;'s astute comment&lt;/sup&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;sup&gt;Отредактировано &lt;strong&gt;&lt;em&gt;снова&lt;/em&gt;&lt;/strong&gt; в соответствии с проницательным комментарием &lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04&lt;/a&gt;&lt;/sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="bb625ab0058fc67ab4b565ae8d8e1039f625de02" translate="yes" xml:space="preserve">
          <source>A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:</source>
          <target state="translated">Одиночная кавычка-это начало и конец строки.Точка с запятой-это конец утверждения.Так что,если бы они делали такую выборку:</target>
        </trans-unit>
        <trans-unit id="019a59a22cb46f0149dfc5d8931593e59be710d8" translate="yes" xml:space="preserve">
          <source>Add a new record to the Students table with a Name value of 'Robert'</source>
          <target state="translated">Добавьте новую запись в таблицу &quot;Студенты&quot; со значением имени &quot;Роберт&quot;.</target>
        </trans-unit>
        <trans-unit id="9fc8a6c3ef2f442e2ab6de0ab4090a41c331c51f" translate="yes" xml:space="preserve">
          <source>After the values from the first name, middle name textbox &lt;em&gt;FNMName.Text&lt;/em&gt; (which is &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt;) and the last name textbox &lt;em&gt;LName.Text&lt;/em&gt; (let's call it &lt;code&gt;Derper&lt;/code&gt;) are concatenated with the rest of the query, the result is now actually &lt;em&gt;two queries&lt;/em&gt; separated by the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot;&gt;statement terminator&lt;/a&gt; (semicolon).  The second query has been &lt;strong&gt;injected&lt;/strong&gt; into the first.  When the code executes this query against the database, it will look like this</source>
          <target state="translated">После значений из имени, отчество текстовое поле &lt;em&gt;FNMName.Text&lt;/em&gt; (что &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt; КАПЛИ СТОЛБОВ; - ) и текстовое поле фамилии &lt;em&gt;LName.Text&lt;/em&gt; (назовем его &lt;code&gt;Derper&lt;/code&gt; ) объединяются с остальной частью запроса, в результате теперь фактически &lt;em&gt;два запроса&lt;/em&gt; разделены &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot;&gt;оператором-&lt;/a&gt; разделителем (точка с запятой). Второй запрос был &lt;strong&gt;введен&lt;/strong&gt; в первый. Когда код выполняет этот запрос к базе данных, он будет выглядеть так</target>
        </trans-unit>
        <trans-unit id="131934a34697f59c9b548cee1ee07df44489f026" translate="yes" xml:space="preserve">
          <source>And someone enters the name &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt;</source>
          <target state="translated">И кто-то вводит имя &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt; КАПЛИ СТОЛБОВ; -</target>
        </trans-unit>
        <trans-unit id="b200166f579d9d7d277600fbbc63e5e7c3c3bd94" translate="yes" xml:space="preserve">
          <source>As everyone else has pointed out already, the &lt;code&gt;');&lt;/code&gt; closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don't allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the &lt;code&gt;mysqli_multi_query&lt;/code&gt; function.</source>
          <target state="translated">Как уже отмечали все остальные, &lt;code&gt;');&lt;/code&gt; закрывает исходное утверждение, а затем следует второе утверждение. Большинство фреймворков, в том числе такие языки, как PHP, к настоящему времени имеют настройки безопасности по умолчанию, которые не позволяют использовать несколько операторов в одной строке SQL. Например, в PHP вы можете выполнять несколько операторов в одной строке SQL только с &lt;code&gt;mysqli_multi_query&lt;/code&gt; функции mysqli_multi_query .</target>
        </trans-unit>
        <trans-unit id="aa7e84b685e35609e43c1cebf379c461d7c891aa" translate="yes" xml:space="preserve">
          <source>As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code.  If you use parameterized queries, such as by using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx&quot;&gt;&lt;code&gt;SqlParameter&lt;/code&gt;&lt;/a&gt; in ADO.NET, the input will, at minimum, be automatically sanitized to guard against SQL injection.</source>
          <target state="translated">Как отмечалось в комиксе XKCD, одним из способов защиты от атак с использованием SQL-инъекций является очистка входных данных базы данных, например, путем экранирования специальных символов, чтобы они не могли изменить базовую команду SQL и, следовательно, не могли вызвать выполнение произвольного кода SQL. Если вы используете параметризованные запросы, такие как &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx&quot;&gt; &lt;code&gt;SqlParameter&lt;/code&gt; &lt;/a&gt; в ADO.NET, входные данные, как минимум, будут автоматически очищены для защиты от внедрения SQL.</target>
        </trans-unit>
        <trans-unit id="87829ea42fc70807b5291e8b0b9f0e46c8bca893" translate="yes" xml:space="preserve">
          <source>But a clever user can supply whatever they want:</source>
          <target state="translated">Но умный пользователь может поставлять все,что захочет:</target>
        </trans-unit>
        <trans-unit id="ce2f5da38f14260cb520df0b6cf6ea2e91248b7c" translate="yes" xml:space="preserve">
          <source>Delete the Students table</source>
          <target state="translated">Удалить таблицу &quot;Студенты</target>
        </trans-unit>
        <trans-unit id="c5a98777d68005235e5c5992186f39d71f52499d" translate="yes" xml:space="preserve">
          <source>Everything past the second query is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot;&gt;marked as a comment&lt;/a&gt;:  &lt;code&gt;--', 'Derper')&lt;/code&gt;</source>
          <target state="translated">Все после второго запроса &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot;&gt;помечается как комментарий&lt;/a&gt; : &lt;code&gt;--', 'Derper')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f33300310e5de518f91c41d40a5ef517fad1fdfe" translate="yes" xml:space="preserve">
          <source>Everything's fine. Now imagine you provide this string as the password:</source>
          <target state="translated">Все в порядке.Теперь представьте,что вы предоставляете эту строку в качестве пароля:</target>
        </trans-unit>
        <trans-unit id="c187e1d066434050adebcb225730c5347293b540" translate="yes" xml:space="preserve">
          <source>Example of PHP vulnerable code using PDO:</source>
          <target state="translated">Пример уязвимого кода PHP с использованием PDO:</target>
        </trans-unit>
        <trans-unit id="26ed4305eca2e4ca311ed3cb1f6c8de24c1bae8b" translate="yes" xml:space="preserve">
          <source>FWIW, I also think the comic in question has an important detail wrong: if you're thinking about &lt;em&gt;sanitizing&lt;/em&gt; your database inputs, as the comic suggests, you're still doing it wrong. Instead, you should think in terms of &lt;em&gt;quarantining&lt;/em&gt; your database inputs, and the correct way to do this is via parameterized queries.</source>
          <target state="translated">FWIW, я также думаю, что в комиксе есть неправильная важная деталь: если вы думаете о &lt;em&gt;дезинфекции&lt;/em&gt; входных данных вашей базы данных, как предлагает комикс, вы все равно делаете это неправильно. Вместо этого вы должны думать с точки зрения &lt;em&gt;карантина&lt;/em&gt; входных данных вашей базы данных, и правильный способ сделать это - через параметризованные запросы.</target>
        </trans-unit>
        <trans-unit id="8379d9d413b61d4aa6abb0ecd900209b2ade4480" translate="yes" xml:space="preserve">
          <source>How does the SQL injection from the “Bobby Tables” XKCD comic work</source>
          <target state="translated">Как работает SQL-инъекция из комикса &quot;Bobby Tables&quot; XKCD</target>
        </trans-unit>
        <trans-unit id="7764fec83ece4bf060d4c0efc0b3928e567ed559" translate="yes" xml:space="preserve">
          <source>However, sanitizing inputs at the application level may not stop more advanced SQL injection techniques. For example, &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;there are ways to circumvent the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; PHP function&lt;/a&gt;. For added protection, many database systems support &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt;. If properly implemented in the backend, prepared statements can make SQL injection impossible by treating data inputs as semantically separate from the rest of the command.</source>
          <target state="translated">Однако очистка входных данных на уровне приложений может не остановить более продвинутые методы внедрения SQL. Например, &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;есть способы обойти PHP-функцию &lt;code&gt;mysql_real_escape_string&lt;/code&gt; &lt;/a&gt; . Для дополнительной защиты многие системы баз данных поддерживают &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;подготовленные операторы&lt;/em&gt;&lt;/a&gt; . При правильной реализации в бэкэнде подготовленные операторы могут сделать внедрение SQL невозможным, обрабатывая ввод данных как семантически отдельный от остальной части команды.</target>
        </trans-unit>
        <trans-unit id="9c5cfce95e395b48a50005b91951a8e612e3b5b9" translate="yes" xml:space="preserve">
          <source>I know both &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; are for comments, but doesn't the word &lt;code&gt;DROP&lt;/code&gt; get commented as well since it is part of the same line?</source>
          <target state="translated">Я знаю, что &lt;code&gt;'&lt;/code&gt; и &lt;code&gt;--&lt;/code&gt; для комментариев, но разве слово &lt;code&gt;DROP&lt;/code&gt; тоже не комментируется, поскольку оно является частью одной строки?</target>
        </trans-unit>
        <trans-unit id="a604718c1a9d707cb8e65adc266b636e6570cdff" translate="yes" xml:space="preserve">
          <source>INSERT INTO Students VALUES ( '</source>
          <target state="translated">ИНСЕРТ В СТУДЕНЧЕСКИХ ЦЕНАХ(''</target>
        </trans-unit>
        <trans-unit id="461191a3dafd5a83379f796a40bfa1b1193c6cd3" translate="yes" xml:space="preserve">
          <source>If student_name is the one given, that does the selection with the name &quot;Robert&quot; and then drops the table.  The &quot;-- &quot; part changes the rest of the given query into a comment.</source>
          <target state="translated">Если задано имя student_name,то это делает выбор с именем &quot;Robert&quot;,а затем бросает таблицу.Часть &quot;--&quot; превращает оставшуюся часть заданного запроса в комментарий.</target>
        </trans-unit>
        <trans-unit id="139dafd9d52972e29c58ae782bf096e4a550dcc5" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;peter&lt;/code&gt; as the username and &lt;code&gt;secret&lt;/code&gt; as the password, the resulting SQL string would look like this:</source>
          <target state="translated">Если вы &lt;code&gt;peter&lt;/code&gt; качестве имени пользователя и &lt;code&gt;secret&lt;/code&gt; в качестве пароля, результирующая строка SQL будет выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="9bdf72b4d7e09fec8b6e948d4c391a1889ecf5d9" translate="yes" xml:space="preserve">
          <source>In this case, ' is not a comment character.  It's used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:</source>
          <target state="translated">В данном случае ' не является символом комментария.Он используется для разграничения строковых литералов.Художник комиксов делает ставку на идею,что в данной школе есть динамический sql,который выглядит примерно так:</target>
        </trans-unit>
        <trans-unit id="19c6a7a74341e9efe95de0fdb1852846d3f4021e" translate="yes" xml:space="preserve">
          <source>It's important to notice that during the &lt;code&gt;INSERT&lt;/code&gt; operation the application isn't checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command. This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL&amp;nbsp;&lt;em&gt;injection&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">Важно отметить, что во время операции &lt;code&gt;INSERT&lt;/code&gt; приложение не проверяет ввод на наличие каких-либо специальных символов, и поэтому позволяет вводить произвольный ввод в команду SQL. Это означает, что злонамеренный пользователь может вставить в поле, обычно предназначенное для ввода данных пользователем, специальные символы, такие как кавычки, а также произвольный код SQL, чтобы система базы данных выполнила его, следовательно, &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL- &lt;em&gt;инъекция&lt;/em&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a912262d2aa40547772a8e800c0f213bec8d8d54" translate="yes" xml:space="preserve">
          <source>Just looking at:</source>
          <target state="translated">Просто смотрю:</target>
        </trans-unit>
        <trans-unit id="49aa9e517ee2cc59732b724e9ab3b7522a1ed9ce" translate="yes" xml:space="preserve">
          <source>Let's assume the application uses the following SQL to insert data into the table:</source>
          <target state="translated">Предположим,что приложение использует следующий SQL для вставки данных в таблицу:</target>
        </trans-unit>
        <trans-unit id="30b44dcf7150c4c363ba1edcf66e4cf3db5207e2" translate="yes" xml:space="preserve">
          <source>Let's say the name was used in a variable, &lt;code&gt;$Name&lt;/code&gt;.  You then run this query:</source>
          <target state="translated">Допустим, имя использовалось в переменной &lt;code&gt;$Name&lt;/code&gt; . Затем вы запускаете этот запрос:</target>
        </trans-unit>
        <trans-unit id="8d860cdc3777611007e2d6ff4d20e28c2a6d7ead" translate="yes" xml:space="preserve">
          <source>Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.</source>
          <target state="translated">Ммм,я слишком медленно,я уже вижу 8 ответов перед своими в оранжевой группе...:-)Популярная тема,кажется.</target>
        </trans-unit>
        <trans-unit id="d91e053c54896e652403b7bc76d0d5c47b82c0e8" translate="yes" xml:space="preserve">
          <source>Mom supposed the database programmer made a request looking like:</source>
          <target state="translated">Мама предположила,что программист базы данных сделал запрос:</target>
        </trans-unit>
        <trans-unit id="96bb971af970b55c072ef0967dfb0650a326ca16" translate="yes" xml:space="preserve">
          <source>Mostly we will try to patch forms input. But this is not the only place where you can get attacked with SQL injection. You can do very simple attack with URL which send data through GET request;
Consider the fallowing example:</source>
          <target state="translated">В основном мы попытаемся исправить ввод форм.Но это не единственное место,где можно подвергнуться атаке с помощью SQL-инъекции.Можно сделать очень простую атаку по URL,который посылает данные через GET-запрос;Рассмотрим пример падения:</target>
        </trans-unit>
        <trans-unit id="bc011a90b27267bbf94983c51810cde1d11b8154" translate="yes" xml:space="preserve">
          <source>No one pointed this out before so through I might alert some of you.</source>
          <target state="translated">Никто не указывал на это раньше,поэтому я могу предупредить некоторых из вас.</target>
        </trans-unit>
        <trans-unit id="db882356d5143646304aa5d620f5a86bb8a20a10" translate="yes" xml:space="preserve">
          <source>No, &lt;code&gt;'&lt;/code&gt; isn't a comment in SQL, but a delimiter.</source>
          <target state="translated">Нет, это не комментарий в SQL, а разделитель.</target>
        </trans-unit>
        <trans-unit id="4d11e639fabc057421eb05c7aa5bad84e45a7b76" translate="yes" xml:space="preserve">
          <source>Now someone could try something like this</source>
          <target state="translated">Теперь кто-нибудь может попробовать что-нибудь подобное</target>
        </trans-unit>
        <trans-unit id="de20cc0fa527aedc63635b0e9bb07117e87ba818" translate="yes" xml:space="preserve">
          <source>Now the query would be something like this (to search the student table)</source>
          <target state="translated">Теперь запрос будет что-то вроде этого (для поиска в таблице учеников).</target>
        </trans-unit>
        <trans-unit id="7646e113eeae59dc18798a0466c8a3f0c8a20b6b" translate="yes" xml:space="preserve">
          <source>On some systems, the &lt;code&gt;select&lt;/code&gt; would get ran first followed by the &lt;code&gt;drop&lt;/code&gt; statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!</source>
          <target state="translated">В некоторых системах &lt;code&gt;select&lt;/code&gt; запускается первым, а затем оператором &lt;code&gt;drop&lt;/code&gt; ! Сообщение: не вставляйте значения в ваш SQL. Вместо этого используйте параметры!</target>
        </trans-unit>
        <trans-unit id="983c898ac23c7963028dec422bc84cc391ab0264" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;foobar&lt;/code&gt; with the actual name of the student. A normal insert operation would look like this:</source>
          <target state="translated">Замените &lt;code&gt;foobar&lt;/code&gt; реальным именем ученика. Обычная операция вставки будет выглядеть так:</target>
        </trans-unit>
        <trans-unit id="6245c95fed8f15a937f9961aafd6f5047abf8924" translate="yes" xml:space="preserve">
          <source>Robert Tables</source>
          <target state="translated">Роберт Таблз</target>
        </trans-unit>
        <trans-unit id="0c2b7d925905b95e3db45c6bf19999ae433aedd2" translate="yes" xml:space="preserve">
          <source>Robert'); DROP TABLE Students; --</source>
          <target state="translated">Robert');DROP TABLE Students;--</target>
        </trans-unit>
        <trans-unit id="37120a5976df382d07bdbca079622bcbe6aa10b9" translate="yes" xml:space="preserve">
          <source>SQL injection is the database equivalent of a remote &lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot;&gt;arbitrary code execution&lt;/a&gt; vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.</source>
          <target state="translated">SQL-инъекция является эквивалентом уязвимости удаленного выполнения &lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot;&gt;произвольного кода&lt;/a&gt; в операционной системе или приложении. Потенциальное влияние успешной атаки с использованием SQL-инъекции нельзя недооценивать - в зависимости от системы базы данных и конфигурации приложения злоумышленник может использовать ее для потери данных (как в этом случае), получения несанкционированного доступа к данным или даже выполнения произвольный код на самой машине.</target>
        </trans-unit>
        <trans-unit id="3026fffcc7a3643389d223c1b0e95482127105a3" translate="yes" xml:space="preserve">
          <source>Say you naively wrote a student creation method like this:</source>
          <target state="translated">Скажем,ты наивно написал такой метод создания учеников:</target>
        </trans-unit>
        <trans-unit id="ddb93c7ca1ae41e329036ba77ece07624d6a8bbd" translate="yes" xml:space="preserve">
          <source>Since the admin account has high privileges deleting the table from this account is possible.</source>
          <target state="translated">Так как учетная запись администратора имеет высокие привилегии,удаление таблицы из этой учетной записи возможно.</target>
        </trans-unit>
        <trans-unit id="9663830b177751610a508e2d8647db1deab1d0cb" translate="yes" xml:space="preserve">
          <source>Since the user input is not sanitized, The above query has is manipulated into 2 parts</source>
          <target state="translated">Так как пользовательский ввод не дезинфицирован,вышеприведенный запрос манипулируется в 2 части</target>
        </trans-unit>
        <trans-unit id="dd9a0d6b67b9bbba7661f7e23c2b4420d6344c6e" translate="yes" xml:space="preserve">
          <source>So if &lt;code&gt;$firstName&lt;/code&gt; contains &lt;code&gt;Robert'); DROP TABLE students; --&lt;/code&gt; the database program will execute the following request directly on the DB:</source>
          <target state="translated">Так что, если &lt;code&gt;$firstName&lt;/code&gt; содержит &lt;code&gt;Robert'); DROP TABLE students; --&lt;/code&gt; DROP TABLE студенты; - программа базы данных выполнит следующий запрос непосредственно в БД:</target>
        </trans-unit>
        <trans-unit id="a465c66b5dc128bd57f8fcdcf456255c8a8a7859" translate="yes" xml:space="preserve">
          <source>So now the ' character ends the string literal before the programmer was expecting it.  Combined with the ; character to end the statement, an attacker can now add whatever sql they want.  The -- comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.</source>
          <target state="translated">Итак,теперь символ ' заканчивается строковым литералом до того,как его ожидал программист.В сочетании с символом;в конце оператора злоумышленник теперь может добавлять любой квадратный метр.Комментарий --в конце должен быть уверен,что любой оставшийся sql в оригинальном утверждении не помешает компиляции запроса на сервере.</target>
        </trans-unit>
        <trans-unit id="5e96ce08b6516eb0bdfd1e8209b76ce5401e37a1" translate="yes" xml:space="preserve">
          <source>Solution - use PDO prepare() &amp;amp; bindParam() methods:</source>
          <target state="translated">Решение - используйте методы PDO prepare () и bindParam ():</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="ed7851e23950df599910f44b392a86be5fb06a01" translate="yes" xml:space="preserve">
          <source>That would enable you to log in to any account without knowing the password. So you don't need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.</source>
          <target state="translated">Это позволит вам войти в любой аккаунт,не зная пароля.Таким образом,для использования SQL инъекции вам не нужно иметь возможность использовать два оператора,хотя вы можете делать более разрушительные вещи,если сможете предоставить несколько операторов.</target>
        </trans-unit>
        <trans-unit id="6f01ea093d0abce096b0f1ba94e2bd02ddf0d650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;');&lt;/code&gt; ends the query, it doesn't start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.</source>
          <target state="translated">&lt;code&gt;');&lt;/code&gt; заканчивает запрос, комментарий не начинается Затем он удаляет таблицу студентов и комментирует оставшуюся часть запроса, который должен был быть выполнен.</target>
        </trans-unit>
        <trans-unit id="2d5e55ae2ea8efc24225552a86bfc8c2a77c138d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'&lt;/code&gt; character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.</source>
          <target state="translated">Символ &lt;code&gt;'&lt;/code&gt; в SQL используется для строковых констант. В этом случае он используется для окончания строковой константы, а не для комментария.</target>
        </trans-unit>
        <trans-unit id="f92ff1774fac1c9b4900067042e78a60943008ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'&lt;/code&gt; in the student's name is not a comment, it's the closing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot;&gt;string delimiter&lt;/a&gt;.  Since the student's name is a string, it's needed syntactically to complete the hypothetical query.  Injection attacks only work &lt;em&gt;when the SQL query they inject results in valid SQL&lt;/em&gt;.</source>
          <target state="translated">&amp;laquo;Имя студента - это не комментарий, это &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot;&gt;разделитель&lt;/a&gt; закрывающей строки . Поскольку имя студента является строкой, оно необходимо синтаксически для завершения гипотетического запроса. Атаки с использованием инъекций работают только &lt;em&gt;тогда, когда вводимые ими SQL-запросы приводят к действительному SQL&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="aceae0413666e84da23e62ac60c8bac74e2f5d8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; only comments the remainder of the line.</source>
          <target state="translated">The &lt;code&gt;--&lt;/code&gt; только комментирует остаток строки.</target>
        </trans-unit>
        <trans-unit id="74098fc9f260146c228104b6c65f525edc48784f" translate="yes" xml:space="preserve">
          <source>The SQL injection here is the result of the name of the student terminating the statement and including a separate &lt;code&gt;DROP TABLE&lt;/code&gt; command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error. The last line of the output confirms that the database server has dropped the table.</source>
          <target state="translated">Внедрение SQL здесь является результатом того, что имя студента завершает оператор и включает отдельную команду &lt;code&gt;DROP TABLE&lt;/code&gt; ; две черты в конце ввода предназначены для закомментирования любого оставшегося кода, который в противном случае мог бы вызвать ошибку. Последняя строка вывода подтверждает, что сервер базы данных отбросил таблицу.</target>
        </trans-unit>
        <trans-unit id="d2e3583e0dbe2234f515adc562e653eb57e46697" translate="yes" xml:space="preserve">
          <source>The SQL would become:</source>
          <target state="translated">SQL станет:</target>
        </trans-unit>
        <trans-unit id="98ed052ab768c42b4c51024ac95005d02b55e79b" translate="yes" xml:space="preserve">
          <source>The code is mistakenly placing anything the user supplied as the variable. You wanted the SQL to be:</source>
          <target state="translated">Код ошибочно помещает в переменную все,что пользователь указал в качестве переменной.Вы хотели,чтобы SQL был:</target>
        </trans-unit>
        <trans-unit id="1a1f5503c8dacf159b36aa6dc81597f075d43234" translate="yes" xml:space="preserve">
          <source>The code to retrieve user name from request is</source>
          <target state="translated">Код для получения имени пользователя из запроса -</target>
        </trans-unit>
        <trans-unit id="133d738d5f98f614bed15f518ef065e70ac0ec32" translate="yes" xml:space="preserve">
          <source>The double dash (--) will just comment out remaining part of the query.</source>
          <target state="translated">Двойная тире (--)просто прокомментирует оставшуюся часть запроса.</target>
        </trans-unit>
        <trans-unit id="1504af61394d6829bd808405ed9344a3c5620dec" translate="yes" xml:space="preserve">
          <source>The first one will do the normal search.</source>
          <target state="translated">Первый выполнит обычный поиск.</target>
        </trans-unit>
        <trans-unit id="c406de1c10a6141ff755969fdb6d8f9fd28f392b" translate="yes" xml:space="preserve">
          <source>The original code in the school's program probably looks something like</source>
          <target state="translated">Оригинальный код в школьной программе,вероятно,выглядит так.</target>
        </trans-unit>
        <trans-unit id="1f92ec13c954912f1e1bcc65272443cfb80a31ce" translate="yes" xml:space="preserve">
          <source>The result?</source>
          <target state="translated">Результат?</target>
        </trans-unit>
        <trans-unit id="c762df0f9ec734a489ffde76def0caa39fa5c6bb" translate="yes" xml:space="preserve">
          <source>The resultant query becomes</source>
          <target state="translated">Результирующий запрос становится</target>
        </trans-unit>
        <trans-unit id="5df6724d22e0babfe904b6b14173f098d3dab8ae" translate="yes" xml:space="preserve">
          <source>The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).</source>
          <target state="translated">Второй уронит ученика таблицы,если учетная запись имеет достаточные привилегии (как правило,учетная запись администратора школы выполнит такой запрос и получит привилегии,о которых говорилось выше).</target>
        </trans-unit>
        <trans-unit id="2d104507ada99e5d8537b24476a8fdc95e35ad06" translate="yes" xml:space="preserve">
          <source>The semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...</source>
          <target state="translated">Точка с запятой заканчивается командой вставки и начинается другая;точка с запятой --комментирует оставшуюся часть строки.Команда DROP TABLE выполняется...</target>
        </trans-unit>
        <trans-unit id="30ed2dd959ffaed009b9812f05737346b7e5d2ed" translate="yes" xml:space="preserve">
          <source>The writer of the database probably did a</source>
          <target state="translated">Автор базы данных,вероятно,сделал</target>
        </trans-unit>
        <trans-unit id="0f86d3dd6c873d977a65f9095a5db0a162d4537d" translate="yes" xml:space="preserve">
          <source>Then the resulting SQL string would be this:</source>
          <target state="translated">Тогда результирующая SQL-строка была бы такой:</target>
        </trans-unit>
        <trans-unit id="5c1a493136ed3ba8c5afdcf8999adbcbf6478f23" translate="yes" xml:space="preserve">
          <source>This drops (deletes) the student table.</source>
          <target state="translated">При этом таблица ученика удаляется.</target>
        </trans-unit>
        <trans-unit id="09d35ca1f5c9f54142fbc66f3b9ae42880e84716" translate="yes" xml:space="preserve">
          <source>This is dangerous as it can nullify password authentication, if present</source>
          <target state="translated">Это опасно,так как может свести на нет аутентификацию по паролю,если она присутствует.</target>
        </trans-unit>
        <trans-unit id="8a2d0b2b0e59d3e8ece42c60838ae2d5a4cbdb6e" translate="yes" xml:space="preserve">
          <source>This is how it works:
Lets suppose the administrator is looking for records of student</source>
          <target state="translated">Вот как это работает:Предположим,что администратор ищет записи об ученике.</target>
        </trans-unit>
        <trans-unit id="fe81f720466bedf90225a9b8c3c25cc2caad04a3" translate="yes" xml:space="preserve">
          <source>This is the naive way to add text input into a query, and is &lt;em&gt;very bad&lt;/em&gt;, as you will see.</source>
          <target state="translated">Это наивный способ добавить ввод текста в запрос, и, как вы увидите, он &lt;em&gt;очень плохой&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f4b6f2ee70fc32667125f99134f18f48f6d5e0e2" translate="yes" xml:space="preserve">
          <source>This is why bind parameters are a good thing.</source>
          <target state="translated">Вот почему параметры связывания-это хорошо.</target>
        </trans-unit>
        <trans-unit id="f34eda5ca211eb3175806664d5fd38d21af5eda6" translate="yes" xml:space="preserve">
          <source>To make it clear what's happening, let's try this with a simple table containing only the name field and add a single row:</source>
          <target state="translated">Чтобы прояснить,что происходит,давайте попробуем это сделать с помощью простой таблицы,содержащей только поле имени,и добавим одну строку:</target>
        </trans-unit>
        <trans-unit id="69e18205e6435018fec90b85d4e3a87afed1d5d3" translate="yes" xml:space="preserve">
          <source>Try to replace table_name with the real table name. If he get your table name right they would empty your table! &lt;strong&gt;(It is very easy to brut force this URL with simple script)&lt;/strong&gt;</source>
          <target state="translated">Попробуйте заменить table_name реальным именем таблицы. Если он получит правильное название вашей таблицы, они очистят вашу таблицу! &lt;strong&gt;(Очень просто взломать этот URL простым скриптом)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bafa483229452946a2498bdf56c79df0cbc5f7e3" translate="yes" xml:space="preserve">
          <source>What does this SQL do:</source>
          <target state="translated">Что делает этот SQL:</target>
        </trans-unit>
        <trans-unit id="e256ca0ab96555169f167cecea8df3dedc1d6266" translate="yes" xml:space="preserve">
          <source>What gets run on the database is this query:</source>
          <target state="translated">Что запускается в базе данных,так это этот запрос:</target>
        </trans-unit>
        <trans-unit id="21339d9c4840b2a2bb4902b933d347e8cb815a77" translate="yes" xml:space="preserve">
          <source>What happens when we insert Little Bobby Tables's name into the table?</source>
          <target state="translated">Что случится,когда мы вставим имя Маленького Бобби Таблиша в стол?</target>
        </trans-unit>
        <trans-unit id="daa8241056744ddd3490433b4056a17c6aaf1a07" translate="yes" xml:space="preserve">
          <source>What you get is:</source>
          <target state="translated">То,что ты получаешь:</target>
        </trans-unit>
        <trans-unit id="1ce587cc039592196a56f7601d62743da75474c3" translate="yes" xml:space="preserve">
          <source>When we query the table, we get this:</source>
          <target state="translated">Когда мы запрашиваем таблицу,мы получаем это:</target>
        </trans-unit>
        <trans-unit id="a0a70210ca826c39f74e99f7815e7828691e7797" translate="yes" xml:space="preserve">
          <source>You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let's say you have a login system which checks a username and a password with this simple select:</source>
          <target state="translated">Однако вы можете манипулировать существующим SQL-оператором с помощью SQL-инъекции без необходимости добавлять второй оператор.Допустим,у вас есть система логина,которая проверяет имя пользователя и пароль с помощью этого простого выбора:</target>
        </trans-unit>
        <trans-unit id="b1d33b75385409327c7ad149de2f5700e2332439" translate="yes" xml:space="preserve">
          <source>You don't need to input form data to make SQL injection.</source>
          <target state="translated">Вам не нужно вводить данные из формы,чтобы сделать SQL инъекцию.</target>
        </trans-unit>
        <trans-unit id="506b8b70be03f131ecad01eb971b38a21bfc62da" translate="yes" xml:space="preserve">
          <source>Your query would look something like this...</source>
          <target state="translated">Ваш запрос будет выглядеть так...</target>
        </trans-unit>
        <trans-unit id="84e0def289034c082b05baf61e91d33a82183f27" translate="yes" xml:space="preserve">
          <source>Your url would look 
&lt;a href=&quot;http://yoursite.com/show?id=1&quot;&gt;http://yoursite.com/show?id=1&lt;/a&gt;</source>
          <target state="translated">Ваш URL будет выглядеть &lt;a href=&quot;http://yoursite.com/show?id=1&quot;&gt;http://yoursite.com/show?id=1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5150b572e20984159df6524b5d5ea5e28030eaec" translate="yes" xml:space="preserve">
          <source>` )</source>
          <target state="translated">` )</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="6bd9dfe1efad33667e69e751d695397aab30aac7" translate="yes" xml:space="preserve">
          <source>ie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.</source>
          <target state="translated">т.е.он досрочно прекратит вставку,выполнит любой вредоносный код,который захочет взломщик,а затем прокомментирует любой оставшийся код.</target>
        </trans-unit>
        <trans-unit id="7eace1c108e9774e1c99d6e09e4b22fb30e874ff" translate="yes" xml:space="preserve">
          <source>which, in plain English, roughly translates to the two queries:</source>
          <target state="translated">что,на простом английском,примерно переводится на два запроса:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
