<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/332365">
    <body>
      <group id="332365">
        <trans-unit id="f5dccbefc9eb641263e9035c2feacfbb42ddecab" translate="yes" xml:space="preserve">
          <source>' )</source>
          <target state="translated">' )</target>
        </trans-unit>
        <trans-unit id="a0f651cde227a7b6a2f745cc1abcae1e478af7dd" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;All code examples in this answer were run on a PostgreSQL 9.1.2 database server.&lt;/em&gt;)</source>
          <target state="translated">（ &lt;em&gt;この回答のすべてのコード例は、PostgreSQL 9.1.2データベースサーバーで実行されました。&lt;/em&gt; ）</target>
        </trans-unit>
        <trans-unit id="2e2f5034350c8def8869f07ee89d9d21bf27cfa2" translate="yes" xml:space="preserve">
          <source>(for example) to add the new student, where the &lt;code&gt;$xxx&lt;/code&gt; variable contents was taken directly out of an HTML form, without checking format nor escaping special characters.</source>
          <target state="translated">（たとえば） &lt;code&gt;$xxx&lt;/code&gt; 変数の内容がHTMLフォームから直接取り出された新しい学生を追加します。形式をチェックしたり、特殊文字をエスケープしたりすることはありません。</target>
        </trans-unit>
        <trans-unit id="fdfe2e70fde31449eb3c2bab22ca555028d85e07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Source: &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt;)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（出典： &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https&lt;/a&gt; : //xkcd.com/327/ ）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="22e2aaa76f874c66b707cacfaa9f76f22b05d735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It drops the students table.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それは学生のテーブルを落とします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7df5880bf1ba6e654e04c1e22cc8c944922f40cc" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;sup&gt;Edited &lt;strong&gt;&lt;em&gt;again&lt;/em&gt;&lt;/strong&gt; as per &lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04&lt;/a&gt;'s astute comment&lt;/sup&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;&lt;sup&gt;&lt;a href=&quot;https://stackoverflow.com/users/287586/dan04&quot;&gt;dan04の慎重&lt;/a&gt;なコメントに従って &lt;strong&gt;&lt;em&gt;再度&lt;/em&gt;&lt;/strong&gt;編集&lt;/sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="bb625ab0058fc67ab4b565ae8d8e1039f625de02" translate="yes" xml:space="preserve">
          <source>A single quote is the start and end of a string. A semicolon is the end of a statement. So if they were doing a select like this:</source>
          <target state="translated">シングルクォートは文字列の先頭と末尾です。セミコロンは文の終わりです。ですから、もし彼らが次のようなセレクトをしていたとします。</target>
        </trans-unit>
        <trans-unit id="019a59a22cb46f0149dfc5d8931593e59be710d8" translate="yes" xml:space="preserve">
          <source>Add a new record to the Students table with a Name value of 'Robert'</source>
          <target state="translated">学生テーブルに名前の値が「Robert」の新しいレコードを追加します。</target>
        </trans-unit>
        <trans-unit id="9fc8a6c3ef2f442e2ab6de0ab4090a41c331c51f" translate="yes" xml:space="preserve">
          <source>After the values from the first name, middle name textbox &lt;em&gt;FNMName.Text&lt;/em&gt; (which is &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt;) and the last name textbox &lt;em&gt;LName.Text&lt;/em&gt; (let's call it &lt;code&gt;Derper&lt;/code&gt;) are concatenated with the rest of the query, the result is now actually &lt;em&gt;two queries&lt;/em&gt; separated by the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot;&gt;statement terminator&lt;/a&gt; (semicolon).  The second query has been &lt;strong&gt;injected&lt;/strong&gt; into the first.  When the code executes this query against the database, it will look like this</source>
          <target state="translated">名、ミドルネームのテキストボックス&lt;em&gt;FNMName.Text&lt;/em&gt; （ &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt; の値の後に、 ドロップテーブルの生徒; - ）と姓のテキストボックス&lt;em&gt;LName.Text&lt;/em&gt; （ &lt;em&gt;Derper&lt;/em&gt;と呼ぶことにし &lt;code&gt;Derper&lt;/code&gt; ）が残りのクエリと連結され、結果は実際には&lt;a href=&quot;http://en.wikipedia.org/wiki/SQL#Language_elements&quot;&gt;ステートメントターミネーター&lt;/a&gt; （セミコロン）で区切られた&lt;em&gt;2つのクエリになり&lt;/em&gt;ます。 2番目のクエリは最初のクエリに&lt;strong&gt;挿入さ&lt;/strong&gt;れています。 コードがデータベースに対してこのクエリを実行すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="131934a34697f59c9b548cee1ee07df44489f026" translate="yes" xml:space="preserve">
          <source>And someone enters the name &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt;</source>
          <target state="translated">そして誰かが &lt;code&gt;Robert'); DROP TABLE STUDENTS; --&lt;/code&gt; という名前を入力します '）; ドロップテーブルの生徒; -</target>
        </trans-unit>
        <trans-unit id="b200166f579d9d7d277600fbbc63e5e7c3c3bd94" translate="yes" xml:space="preserve">
          <source>As everyone else has pointed out already, the &lt;code&gt;');&lt;/code&gt; closes the original statement and then a second statement follows. Most frameworks, including languages like PHP, have default security settings by now that don't allow multiple statements in one SQL string. In PHP, for example, you can only run multiple statements in one SQL string by using the &lt;code&gt;mysqli_multi_query&lt;/code&gt; function.</source>
          <target state="translated">他の皆がすでに指摘したように、 &lt;code&gt;');&lt;/code&gt; 元のステートメントを閉じてから、2番目のステートメントが続きます。 PHPなどの言語を含むほとんどのフレームワークには、デフォルトのセキュリティ設定があり、1つのSQL文字列で複数のステートメントを使用することはできません。 たとえば、PHPでは、 &lt;code&gt;mysqli_multi_query&lt;/code&gt; 関数を使用して1つのSQL文字列で複数のステートメントのみを実行できます。</target>
        </trans-unit>
        <trans-unit id="aa7e84b685e35609e43c1cebf379c461d7c891aa" translate="yes" xml:space="preserve">
          <source>As noted by the XKCD comic, one way of protecting against SQL injection attacks is to sanitize database inputs, such as by escaping special characters, so that they cannot modify the underlying SQL command and therefore cannot cause execution of arbitrary SQL code.  If you use parameterized queries, such as by using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx&quot;&gt;&lt;code&gt;SqlParameter&lt;/code&gt;&lt;/a&gt; in ADO.NET, the input will, at minimum, be automatically sanitized to guard against SQL injection.</source>
          <target state="translated">XKCDコミックで述べられているように、SQLインジェクション攻撃から保護する1つの方法は、特殊文字をエスケープするなどしてデータベース入力をサニタイズすることです。これにより、特殊文字が基礎となるSQLコマンドを変更できなくなり、任意のSQLコードを実行できなくなります。 ADO.NETで&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx&quot;&gt; &lt;code&gt;SqlParameter&lt;/code&gt; &lt;/a&gt;を使用するなど、パラメーター化されたクエリを使用する場合、SQLインジェクションを防ぐために、入力は少なくとも自動的にサニタイズされます。</target>
        </trans-unit>
        <trans-unit id="87829ea42fc70807b5291e8b0b9f0e46c8bca893" translate="yes" xml:space="preserve">
          <source>But a clever user can supply whatever they want:</source>
          <target state="translated">しかし、賢いユーザーは、彼らが望むものを何でも供給することができます。</target>
        </trans-unit>
        <trans-unit id="ce2f5da38f14260cb520df0b6cf6ea2e91248b7c" translate="yes" xml:space="preserve">
          <source>Delete the Students table</source>
          <target state="translated">学生」テーブルを削除します。</target>
        </trans-unit>
        <trans-unit id="c5a98777d68005235e5c5992186f39d71f52499d" translate="yes" xml:space="preserve">
          <source>Everything past the second query is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot;&gt;marked as a comment&lt;/a&gt;:  &lt;code&gt;--', 'Derper')&lt;/code&gt;</source>
          <target state="translated">2番目のクエリを過ぎたものはすべて&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms181627.aspx&quot;&gt;コメントとしてマークされ&lt;/a&gt;ます： &lt;code&gt;--', 'Derper')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f33300310e5de518f91c41d40a5ef517fad1fdfe" translate="yes" xml:space="preserve">
          <source>Everything's fine. Now imagine you provide this string as the password:</source>
          <target state="translated">問題ありません。この文字列をパスワードとして入力すると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="c187e1d066434050adebcb225730c5347293b540" translate="yes" xml:space="preserve">
          <source>Example of PHP vulnerable code using PDO:</source>
          <target state="translated">PDOを使ったPHPの脆弱性コードの例。</target>
        </trans-unit>
        <trans-unit id="26ed4305eca2e4ca311ed3cb1f6c8de24c1bae8b" translate="yes" xml:space="preserve">
          <source>FWIW, I also think the comic in question has an important detail wrong: if you're thinking about &lt;em&gt;sanitizing&lt;/em&gt; your database inputs, as the comic suggests, you're still doing it wrong. Instead, you should think in terms of &lt;em&gt;quarantining&lt;/em&gt; your database inputs, and the correct way to do this is via parameterized queries.</source>
          <target state="translated">FWIW、私はまた、問題のコミックに重要な詳細が間違っていると思います。データベースの入力を&lt;em&gt;サニタイズ&lt;/em&gt;することを考えている場合、コミックが示唆しているように、それはまだ間違っています。 代わりに、データベース入力の&lt;em&gt;隔離&lt;/em&gt;という観点から考える必要があります。これを行う正しい方法は、パラメーター化されたクエリを使用することです。</target>
        </trans-unit>
        <trans-unit id="8379d9d413b61d4aa6abb0ecd900209b2ade4480" translate="yes" xml:space="preserve">
          <source>How does the SQL injection from the “Bobby Tables” XKCD comic work</source>
          <target state="translated">どのように &quot;ボビーのテーブル &quot;XKCDコミックからのSQLインジェクションは動作します。</target>
        </trans-unit>
        <trans-unit id="7764fec83ece4bf060d4c0efc0b3928e567ed559" translate="yes" xml:space="preserve">
          <source>However, sanitizing inputs at the application level may not stop more advanced SQL injection techniques. For example, &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;there are ways to circumvent the &lt;code&gt;mysql_real_escape_string&lt;/code&gt; PHP function&lt;/a&gt;. For added protection, many database systems support &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;prepared statements&lt;/em&gt;&lt;/a&gt;. If properly implemented in the backend, prepared statements can make SQL injection impossible by treating data inputs as semantically separate from the rest of the command.</source>
          <target state="translated">ただし、アプリケーションレベルで入力をサニタイズしても、より高度なSQLインジェクションテクニックを停止できない場合があります。 たとえば、 &lt;a href=&quot;https://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string&quot;&gt;PHP関数 &lt;code&gt;mysql_real_escape_string&lt;/code&gt; を回避する方法があります&lt;/a&gt; 。 保護を強化するために、多くのデータベースシステムは&lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;&lt;em&gt;準備済みステートメントを&lt;/em&gt;&lt;/a&gt;サポート&lt;em&gt;してい&lt;/em&gt;ます。 バックエンドで適切に実装されている場合、準備されたステートメントは、データ入力をコマンドの残りの部分から意味的に分離して扱うことにより、SQLインジェクションを不可能にする可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c5cfce95e395b48a50005b91951a8e612e3b5b9" translate="yes" xml:space="preserve">
          <source>I know both &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; are for comments, but doesn't the word &lt;code&gt;DROP&lt;/code&gt; get commented as well since it is part of the same line?</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt; と &lt;code&gt;--&lt;/code&gt; 両方がコメント用であることはわかっていますが、 &lt;code&gt;DROP&lt;/code&gt; という単語は同じ行の一部なのでコメントもされませんか？</target>
        </trans-unit>
        <trans-unit id="a604718c1a9d707cb8e65adc266b636e6570cdff" translate="yes" xml:space="preserve">
          <source>INSERT INTO Students VALUES ( '</source>
          <target state="translated">INSERT INTO Students VALUES('</target>
        </trans-unit>
        <trans-unit id="461191a3dafd5a83379f796a40bfa1b1193c6cd3" translate="yes" xml:space="preserve">
          <source>If student_name is the one given, that does the selection with the name &quot;Robert&quot; and then drops the table.  The &quot;-- &quot; part changes the rest of the given query into a comment.</source>
          <target state="translated">student_nameが指定されたものであれば、&quot;Robert &quot;という名前の選択を行い、テーブルを削除します。&quot;--&quot;の部分は、与えられたクエリの残りの部分をコメントに変更します。</target>
        </trans-unit>
        <trans-unit id="139dafd9d52972e29c58ae782bf096e4a550dcc5" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;peter&lt;/code&gt; as the username and &lt;code&gt;secret&lt;/code&gt; as the password, the resulting SQL string would look like this:</source>
          <target state="translated">ユーザー名に &lt;code&gt;peter&lt;/code&gt; を、パスワードに &lt;code&gt;secret&lt;/code&gt; を指定すると、結果のSQL文字列は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9bdf72b4d7e09fec8b6e948d4c391a1889ecf5d9" translate="yes" xml:space="preserve">
          <source>In this case, ' is not a comment character.  It's used to delimit string literals.  The comic artist is banking on the idea that the school in question has dynamic sql somewhere that looks something like this:</source>
          <target state="translated">この場合、'はコメント文字ではありません。これは文字列リテラルの区切りに使われます。この漫画家は、問題の学校がどこかにこのような動的なSQLを持っているという考えに基づいています。</target>
        </trans-unit>
        <trans-unit id="19c6a7a74341e9efe95de0fdb1852846d3f4021e" translate="yes" xml:space="preserve">
          <source>It's important to notice that during the &lt;code&gt;INSERT&lt;/code&gt; operation the application isn't checking the input for any special characters, and is therefore allowing arbitrary input to be entered into the SQL command. This means that a malicious user can insert, into a field normally intended for user input, special symbols such as quotes along with arbitrary SQL code to cause the database system to execute it, hence &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL&amp;nbsp;&lt;em&gt;injection&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;INSERT&lt;/code&gt; 操作中、アプリケーションは特殊文字の入力をチェックしていないため、SQLコマンドに任意の入力を入力できることに注意してください。 これは、悪意のあるユーザーが、通常はユーザー入力を目的としたフィールドに、引用符などの特別な記号と任意のSQLコードを挿入して、データベースシステムに実行させ、 &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL &lt;em&gt;インジェクション&lt;/em&gt;&lt;/a&gt;を実行させることを意味します 。</target>
        </trans-unit>
        <trans-unit id="a912262d2aa40547772a8e800c0f213bec8d8d54" translate="yes" xml:space="preserve">
          <source>Just looking at:</source>
          <target state="translated">見ているだけで</target>
        </trans-unit>
        <trans-unit id="49aa9e517ee2cc59732b724e9ab3b7522a1ed9ce" translate="yes" xml:space="preserve">
          <source>Let's assume the application uses the following SQL to insert data into the table:</source>
          <target state="translated">アプリケーションが以下のSQLを使用してテーブルにデータを挿入するとします。</target>
        </trans-unit>
        <trans-unit id="30b44dcf7150c4c363ba1edcf66e4cf3db5207e2" translate="yes" xml:space="preserve">
          <source>Let's say the name was used in a variable, &lt;code&gt;$Name&lt;/code&gt;.  You then run this query:</source>
          <target state="translated">名前が変数 &lt;code&gt;$Name&lt;/code&gt; 使用されていたとしましょう。 次に、このクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="8d860cdc3777611007e2d6ff4d20e28c2a6d7ead" translate="yes" xml:space="preserve">
          <source>Mmm, I am too slow, I see already 8 answers before mine in the orange band... :-) A popular topic, it seems.</source>
          <target state="translated">うーん、私は遅すぎて、オレンジ色の帯に私の前にすでに8つの回答が表示されています...:-)人気のある話題のようですね。</target>
        </trans-unit>
        <trans-unit id="d91e053c54896e652403b7bc76d0d5c47b82c0e8" translate="yes" xml:space="preserve">
          <source>Mom supposed the database programmer made a request looking like:</source>
          <target state="translated">母さんはデータベースプログラマーがこんな風にリクエストしたんだろうな</target>
        </trans-unit>
        <trans-unit id="96bb971af970b55c072ef0967dfb0650a326ca16" translate="yes" xml:space="preserve">
          <source>Mostly we will try to patch forms input. But this is not the only place where you can get attacked with SQL injection. You can do very simple attack with URL which send data through GET request;
Consider the fallowing example:</source>
          <target state="translated">大抵はフォーム入力にパッチを当ててみます。しかし、SQLインジェクションで攻撃される場所はこれだけではありません。あなたは、GETリクエストを介してデータを送信するURLを使用して非常に単純な攻撃を行うことができます;以下の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bc011a90b27267bbf94983c51810cde1d11b8154" translate="yes" xml:space="preserve">
          <source>No one pointed this out before so through I might alert some of you.</source>
          <target state="translated">誰も指摘していないので、私はあなたの一部を警告するかもしれないので、スルーしてください。</target>
        </trans-unit>
        <trans-unit id="db882356d5143646304aa5d620f5a86bb8a20a10" translate="yes" xml:space="preserve">
          <source>No, &lt;code&gt;'&lt;/code&gt; isn't a comment in SQL, but a delimiter.</source>
          <target state="translated">いいえ、 &lt;code&gt;'&lt;/code&gt; はSQLのコメントではなく、区切り文字です。</target>
        </trans-unit>
        <trans-unit id="4d11e639fabc057421eb05c7aa5bad84e45a7b76" translate="yes" xml:space="preserve">
          <source>Now someone could try something like this</source>
          <target state="translated">これで誰かが次のようなことを試すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="de20cc0fa527aedc63635b0e9bb07117e87ba818" translate="yes" xml:space="preserve">
          <source>Now the query would be something like this (to search the student table)</source>
          <target state="translated">クエリは次のようになります(学生テーブルを検索する場合)。</target>
        </trans-unit>
        <trans-unit id="7646e113eeae59dc18798a0466c8a3f0c8a20b6b" translate="yes" xml:space="preserve">
          <source>On some systems, the &lt;code&gt;select&lt;/code&gt; would get ran first followed by the &lt;code&gt;drop&lt;/code&gt; statement! The message is: DONT EMBED VALUES INTO YOUR SQL. Instead use parameters!</source>
          <target state="translated">一部のシステムでは、 &lt;code&gt;select&lt;/code&gt; が最初に実行され、その後に &lt;code&gt;drop&lt;/code&gt; ステートメントが実行されます。 メッセージは次のとおりです。SQLに値を埋め込まないでください。 代わりにパラメータを使用してください！</target>
        </trans-unit>
        <trans-unit id="983c898ac23c7963028dec422bc84cc391ab0264" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;foobar&lt;/code&gt; with the actual name of the student. A normal insert operation would look like this:</source>
          <target state="translated">&lt;code&gt;foobar&lt;/code&gt; を実際の学生の名前に置き換えます。 通常の挿入操作は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6245c95fed8f15a937f9961aafd6f5047abf8924" translate="yes" xml:space="preserve">
          <source>Robert Tables</source>
          <target state="translated">ロバートテーブル</target>
        </trans-unit>
        <trans-unit id="0c2b7d925905b95e3db45c6bf19999ae433aedd2" translate="yes" xml:space="preserve">
          <source>Robert'); DROP TABLE Students; --</source>
          <target state="translated">Robert');DROP TABLE Students;--。</target>
        </trans-unit>
        <trans-unit id="37120a5976df382d07bdbca079622bcbe6aa10b9" translate="yes" xml:space="preserve">
          <source>SQL injection is the database equivalent of a remote &lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot;&gt;arbitrary code execution&lt;/a&gt; vulnerability in an operating system or application.  The potential impact of a successful SQL injection attack cannot be underestimated--depending on the database system and application configuration, it can be used by an attacker to cause data loss (as in this case), gain unauthorized access to data, or even execute arbitrary code on the host machine itself.</source>
          <target state="translated">SQLインジェクションは、オペレーティングシステムまたはアプリケーションにおけるリモートの&lt;a href=&quot;http://en.wikipedia.org/wiki/Arbitrary_code_execution&quot;&gt;任意コード実行の&lt;/a&gt;脆弱性に相当するデータベースです。 SQLインジェクション攻撃が成功した場合の潜在的な影響を過小評価することはできません-データベースシステムとアプリケーションの構成によっては、攻撃者がこれを使用して（この場合のように）データ損失を引き起こしたり、データへの不正アクセスを実行したり、実行したりすることさえできますホストマシン自体の任意のコード。</target>
        </trans-unit>
        <trans-unit id="3026fffcc7a3643389d223c1b0e95482127105a3" translate="yes" xml:space="preserve">
          <source>Say you naively wrote a student creation method like this:</source>
          <target state="translated">こんな感じで学生の作り方をナイーブに書いたとしましょう。</target>
        </trans-unit>
        <trans-unit id="ddb93c7ca1ae41e329036ba77ece07624d6a8bbd" translate="yes" xml:space="preserve">
          <source>Since the admin account has high privileges deleting the table from this account is possible.</source>
          <target state="translated">管理者アカウントは高い権限を持っているので、このアカウントからテーブルを削除することができます。</target>
        </trans-unit>
        <trans-unit id="9663830b177751610a508e2d8647db1deab1d0cb" translate="yes" xml:space="preserve">
          <source>Since the user input is not sanitized, The above query has is manipulated into 2 parts</source>
          <target state="translated">ユーザ入力はサニタイズされていないので、上記のクエリは2つの部分に操作されます。</target>
        </trans-unit>
        <trans-unit id="dd9a0d6b67b9bbba7661f7e23c2b4420d6344c6e" translate="yes" xml:space="preserve">
          <source>So if &lt;code&gt;$firstName&lt;/code&gt; contains &lt;code&gt;Robert'); DROP TABLE students; --&lt;/code&gt; the database program will execute the following request directly on the DB:</source>
          <target state="translated">&lt;code&gt;$firstName&lt;/code&gt; に &lt;code&gt;Robert'); DROP TABLE students; --&lt;/code&gt; が含まれている場合'）; DROP TABLEの学生。 -データベースプログラムは、DBで次の要求を直接実行します。</target>
        </trans-unit>
        <trans-unit id="a465c66b5dc128bd57f8fcdcf456255c8a8a7859" translate="yes" xml:space="preserve">
          <source>So now the ' character ends the string literal before the programmer was expecting it.  Combined with the ; character to end the statement, an attacker can now add whatever sql they want.  The -- comment at the end is to make sure any remaining sql in the original statement does not prevent the query from compiling on the server.</source>
          <target state="translated">これで、プログラマが期待する前に'文字が文字列リテラルを終了させることになります。文の最後の;文字と組み合わせることで、攻撃者は好きなSQLを追加することができるようになりました。最後の --コメントは、元の文に残っている SQL がサーバ上でのコンパイルを妨げないことを確認するためのものです。</target>
        </trans-unit>
        <trans-unit id="5e96ce08b6516eb0bdfd1e8209b76ce5401e37a1" translate="yes" xml:space="preserve">
          <source>Solution - use PDO prepare() &amp;amp; bindParam() methods:</source>
          <target state="translated">解決策-PDO prepare（）およびbindParam（）メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="5ff57f4185e884322f43c9c59da60f12f41285ea" translate="yes" xml:space="preserve">
          <source>TL;DR</source>
          <target state="translated">TL;DR</target>
        </trans-unit>
        <trans-unit id="ed7851e23950df599910f44b392a86be5fb06a01" translate="yes" xml:space="preserve">
          <source>That would enable you to log in to any account without knowing the password. So you don't need to be able to use two statements in order to use SQL injection, although you can do more destructive things if you are able to supply multiple statements.</source>
          <target state="translated">これにより、パスワードを知らなくても、どのアカウントにもログインできるようになります。つまり、SQLインジェクションを使用するためには、2つのステートメントを使用できる必要はありませんが、複数のステートメントを供給することができれば、より破壊的なことができるようになります。</target>
        </trans-unit>
        <trans-unit id="6f01ea093d0abce096b0f1ba94e2bd02ddf0d650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;');&lt;/code&gt; ends the query, it doesn't start a comment. Then it drops the students table and comments the rest of the query that was supposed to be executed.</source>
          <target state="translated">&lt;code&gt;');&lt;/code&gt; クエリを終了し、コメントを開始しません。 次に、studentsテーブルを削除し、実行されるはずだった残りのクエリにコメントを付けます。</target>
        </trans-unit>
        <trans-unit id="2d5e55ae2ea8efc24225552a86bfc8c2a77c138d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'&lt;/code&gt; character in SQL is used  for string constants. In this case it is used for ending the string constant and not for comment.</source>
          <target state="translated">SQLの &lt;code&gt;'&lt;/code&gt; 文字は、文字列定数に使用されます。 この場合、コメントではなく文字列定数の終了に使用されます。</target>
        </trans-unit>
        <trans-unit id="f92ff1774fac1c9b4900067042e78a60943008ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'&lt;/code&gt; in the student's name is not a comment, it's the closing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot;&gt;string delimiter&lt;/a&gt;.  Since the student's name is a string, it's needed syntactically to complete the hypothetical query.  Injection attacks only work &lt;em&gt;when the SQL query they inject results in valid SQL&lt;/em&gt;.</source>
          <target state="translated">学生の名前の &lt;code&gt;'&lt;/code&gt; はコメントではなく、終了&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms179899.aspx&quot;&gt;文字列の区切り文字&lt;/a&gt;です。 学生の名前は文字列であるため、仮想クエリを完了するには構文的に必要です。 インジェクション攻撃は&lt;em&gt;、それらがインジェクトするSQLクエリが有効なSQLになる場合に&lt;/em&gt;のみ機能&lt;em&gt;します&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="aceae0413666e84da23e62ac60c8bac74e2f5d8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; only comments the remainder of the line.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; は行の残りの部分にのみコメントします。</target>
        </trans-unit>
        <trans-unit id="74098fc9f260146c228104b6c65f525edc48784f" translate="yes" xml:space="preserve">
          <source>The SQL injection here is the result of the name of the student terminating the statement and including a separate &lt;code&gt;DROP TABLE&lt;/code&gt; command; the two dashes at the end of the input are intended to comment out any leftover code that would otherwise cause an error. The last line of the output confirms that the database server has dropped the table.</source>
          <target state="translated">ここでのSQLインジェクションは、ステートメントを終了し、別の &lt;code&gt;DROP TABLE&lt;/code&gt; コマンドを含む学生の名前の結果です。 入力の最後にある2つのダッシュは、エラーが発生する残りのコードをコメント化するためのものです。 出力の最後の行は、データベースサーバーがテーブルを削除したことを確認します。</target>
        </trans-unit>
        <trans-unit id="d2e3583e0dbe2234f515adc562e653eb57e46697" translate="yes" xml:space="preserve">
          <source>The SQL would become:</source>
          <target state="translated">SQLになってしまう。</target>
        </trans-unit>
        <trans-unit id="98ed052ab768c42b4c51024ac95005d02b55e79b" translate="yes" xml:space="preserve">
          <source>The code is mistakenly placing anything the user supplied as the variable. You wanted the SQL to be:</source>
          <target state="translated">このコードは、ユーザーが指定したものを誤って変数として配置しています。SQLにしたかったのですね。</target>
        </trans-unit>
        <trans-unit id="1a1f5503c8dacf159b36aa6dc81597f075d43234" translate="yes" xml:space="preserve">
          <source>The code to retrieve user name from request is</source>
          <target state="translated">リクエストからユーザー名を取得するコードは</target>
        </trans-unit>
        <trans-unit id="133d738d5f98f614bed15f518ef065e70ac0ec32" translate="yes" xml:space="preserve">
          <source>The double dash (--) will just comment out remaining part of the query.</source>
          <target state="translated">二重ダッシュ(--)は、クエリの残りの部分をコメントアウトするだけです。</target>
        </trans-unit>
        <trans-unit id="1504af61394d6829bd808405ed9344a3c5620dec" translate="yes" xml:space="preserve">
          <source>The first one will do the normal search.</source>
          <target state="translated">最初の方は通常の検索を行います。</target>
        </trans-unit>
        <trans-unit id="c406de1c10a6141ff755969fdb6d8f9fd28f392b" translate="yes" xml:space="preserve">
          <source>The original code in the school's program probably looks something like</source>
          <target state="translated">学校のプログラムの元のコードは、おそらく次のようなものでしょう。</target>
        </trans-unit>
        <trans-unit id="1f92ec13c954912f1e1bcc65272443cfb80a31ce" translate="yes" xml:space="preserve">
          <source>The result?</source>
          <target state="translated">結果は?</target>
        </trans-unit>
        <trans-unit id="c762df0f9ec734a489ffde76def0caa39fa5c6bb" translate="yes" xml:space="preserve">
          <source>The resultant query becomes</source>
          <target state="translated">結果のクエリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="5df6724d22e0babfe904b6b14173f098d3dab8ae" translate="yes" xml:space="preserve">
          <source>The second one will drop the table student if the account has sufficient privileges (Generally the school admin account will run such query and will have the privileges talked about above).</source>
          <target state="translated">2つ目は、アカウントが十分な権限を持っている場合は、テーブルの学生をドロップします(一般的に学校の管理者アカウントは、このようなクエリを実行し、上記の話の権限を持つことになります)。</target>
        </trans-unit>
        <trans-unit id="2d104507ada99e5d8537b24476a8fdc95e35ad06" translate="yes" xml:space="preserve">
          <source>The semicolon ends the insert command and starts another; the -- comments out the rest of the line. The DROP TABLE command is executed...</source>
          <target state="translated">セミコロンはinsertコマンドを終了し、別のコマンドを開始します;--は行の残りの部分をコメントアウトします。DROP TABLEコマンドが実行されます。</target>
        </trans-unit>
        <trans-unit id="30ed2dd959ffaed009b9812f05737346b7e5d2ed" translate="yes" xml:space="preserve">
          <source>The writer of the database probably did a</source>
          <target state="translated">データベースの作者はおそらく</target>
        </trans-unit>
        <trans-unit id="0f86d3dd6c873d977a65f9095a5db0a162d4537d" translate="yes" xml:space="preserve">
          <source>Then the resulting SQL string would be this:</source>
          <target state="translated">そうすると、結果として得られるSQL文字列は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5c1a493136ed3ba8c5afdcf8999adbcbf6478f23" translate="yes" xml:space="preserve">
          <source>This drops (deletes) the student table.</source>
          <target state="translated">学生テーブルを削除します。</target>
        </trans-unit>
        <trans-unit id="09d35ca1f5c9f54142fbc66f3b9ae42880e84716" translate="yes" xml:space="preserve">
          <source>This is dangerous as it can nullify password authentication, if present</source>
          <target state="translated">これはパスワード認証を無効にすることができるので危険です。</target>
        </trans-unit>
        <trans-unit id="8a2d0b2b0e59d3e8ece42c60838ae2d5a4cbdb6e" translate="yes" xml:space="preserve">
          <source>This is how it works:
Lets suppose the administrator is looking for records of student</source>
          <target state="translated">これがその仕組みです。管理者が学生の記録を探しているとします。</target>
        </trans-unit>
        <trans-unit id="fe81f720466bedf90225a9b8c3c25cc2caad04a3" translate="yes" xml:space="preserve">
          <source>This is the naive way to add text input into a query, and is &lt;em&gt;very bad&lt;/em&gt;, as you will see.</source>
          <target state="translated">これは、クエリにテキスト入力を追加する素朴な方法であり、後で説明するように&lt;em&gt;非常に悪い方法&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="f4b6f2ee70fc32667125f99134f18f48f6d5e0e2" translate="yes" xml:space="preserve">
          <source>This is why bind parameters are a good thing.</source>
          <target state="translated">だからこそ、バインドパラメータが良いのです。</target>
        </trans-unit>
        <trans-unit id="f34eda5ca211eb3175806664d5fd38d21af5eda6" translate="yes" xml:space="preserve">
          <source>To make it clear what's happening, let's try this with a simple table containing only the name field and add a single row:</source>
          <target state="translated">何が起こっているのかを明確にするために、名前フィールドのみを含むシンプルなテーブルで、1行を追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="69e18205e6435018fec90b85d4e3a87afed1d5d3" translate="yes" xml:space="preserve">
          <source>Try to replace table_name with the real table name. If he get your table name right they would empty your table! &lt;strong&gt;(It is very easy to brut force this URL with simple script)&lt;/strong&gt;</source>
          <target state="translated">table_nameを実際のテーブル名に置き換えてください。 彼があなたのテーブル名を正しければ、彼らはあなたのテーブルを空にするでしょう！ &lt;strong&gt;（単純なスクリプトでこのURLを強制するのは非常に簡単です）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bafa483229452946a2498bdf56c79df0cbc5f7e3" translate="yes" xml:space="preserve">
          <source>What does this SQL do:</source>
          <target state="translated">このSQLは何をするのか。</target>
        </trans-unit>
        <trans-unit id="e256ca0ab96555169f167cecea8df3dedc1d6266" translate="yes" xml:space="preserve">
          <source>What gets run on the database is this query:</source>
          <target state="translated">データベース上で実行されるのは、このクエリです。</target>
        </trans-unit>
        <trans-unit id="21339d9c4840b2a2bb4902b933d347e8cb815a77" translate="yes" xml:space="preserve">
          <source>What happens when we insert Little Bobby Tables's name into the table?</source>
          <target state="translated">リトル・ボビー・テーブルズの名前をテーブルに挿入するとどうなりますか?</target>
        </trans-unit>
        <trans-unit id="daa8241056744ddd3490433b4056a17c6aaf1a07" translate="yes" xml:space="preserve">
          <source>What you get is:</source>
          <target state="translated">あなたが得るものは</target>
        </trans-unit>
        <trans-unit id="1ce587cc039592196a56f7601d62743da75474c3" translate="yes" xml:space="preserve">
          <source>When we query the table, we get this:</source>
          <target state="translated">テーブルに問い合わせをすると、こんな感じになります。</target>
        </trans-unit>
        <trans-unit id="a0a70210ca826c39f74e99f7815e7828691e7797" translate="yes" xml:space="preserve">
          <source>You can, however, manipulate an existing SQL statement via SQL injection without having to add a second statement. Let's say you have a login system which checks a username and a password with this simple select:</source>
          <target state="translated">しかし、2つ目のステートメントを追加することなく、SQLインジェクションを使用して既存のSQLステートメントを操作することができます。例えば、このような単純な選択でユーザ名とパスワードをチェックするログインシステムがあるとしましょう。</target>
        </trans-unit>
        <trans-unit id="b1d33b75385409327c7ad149de2f5700e2332439" translate="yes" xml:space="preserve">
          <source>You don't need to input form data to make SQL injection.</source>
          <target state="translated">フォームデータを入力しなくてもSQLインジェクションができます。</target>
        </trans-unit>
        <trans-unit id="506b8b70be03f131ecad01eb971b38a21bfc62da" translate="yes" xml:space="preserve">
          <source>Your query would look something like this...</source>
          <target state="translated">あなたのクエリは次のようになります...</target>
        </trans-unit>
        <trans-unit id="84e0def289034c082b05baf61e91d33a82183f27" translate="yes" xml:space="preserve">
          <source>Your url would look 
&lt;a href=&quot;http://yoursite.com/show?id=1&quot;&gt;http://yoursite.com/show?id=1&lt;/a&gt;</source>
          <target state="translated">あなたのURLは&lt;a href=&quot;http://yoursite.com/show?id=1&quot;&gt;http://yoursite.com/show?id=1の&lt;/a&gt;ようになります</target>
        </trans-unit>
        <trans-unit id="5150b572e20984159df6524b5d5ea5e28030eaec" translate="yes" xml:space="preserve">
          <source>` )</source>
          <target state="translated">` )</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="6bd9dfe1efad33667e69e751d695397aab30aac7" translate="yes" xml:space="preserve">
          <source>ie. it will terminate early the insert statement, execute whatever malicious code the cracker wants, then comment out whatever remainder of code there might be.</source>
          <target state="translated">つまり、挿入文を早期に終了させ、クラッカーが望む悪意のあるコードを実行し、残りのコードをコメントアウトします。</target>
        </trans-unit>
        <trans-unit id="7eace1c108e9774e1c99d6e09e4b22fb30e874ff" translate="yes" xml:space="preserve">
          <source>which, in plain English, roughly translates to the two queries:</source>
          <target state="translated">これは、平易な英語では、大まかには2つのクエリに翻訳されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
