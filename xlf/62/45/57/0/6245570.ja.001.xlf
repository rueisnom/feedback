<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/6245570">
    <body>
      <group id="6245570">
        <trans-unit id="8133ceea4f3b1873ceba304f648ff04295782531" translate="yes" xml:space="preserve">
          <source>&amp;ndash;  &lt;em&gt;Darien 26. Mar 2014&lt;/em&gt;</source>
          <target state="translated">&amp;ndash; &lt;em&gt;ダリエン26. 2014年3月&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c96d5e8229460bb530f351849a826792c648d7d" translate="yes" xml:space="preserve">
          <source>(FYI this was done with git version 1.8.3.1)</source>
          <target state="translated">(参考までにこれはgitバージョン1.8.3.1で行いました)</target>
        </trans-unit>
        <trans-unit id="eb76da96396586431c48171dd4d7d83850bcafff" translate="yes" xml:space="preserve">
          <source>(credit: Limited Atonement)</source>
          <target state="translated">(クレジット:リミテッド・アトメント)</target>
        </trans-unit>
        <trans-unit id="d7a70fc8696406f7c322d51454d7ff4563f2c630" translate="yes" xml:space="preserve">
          <source>--long
Give the output in the long-format. This is the default.</source>
          <target state="translated">--long 出力をロングフォーマットで指定します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="53ff5f4e36374c62d7589c9da97b5b34beba1c97" translate="yes" xml:space="preserve">
          <source>--porcelain[=]
Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.</source>
          <target state="translated">--porcelain[=]スクリプト用にパースしやすい形式で出力します。これは短い出力と似ていますが、Git のバージョンやユーザーの設定に関係なく安定して出力されます。詳細は以下を参照ください。</target>
        </trans-unit>
        <trans-unit id="cc11b80ee95e7773de86f42b7a8390a82b0c5556" translate="yes" xml:space="preserve">
          <source>--short
Give the output in the short-format.</source>
          <target state="translated">--short ショートフォーマットで出力します。</target>
        </trans-unit>
        <trans-unit id="3ea869c3abac592aafdefc71fd30738598515c6e" translate="yes" xml:space="preserve">
          <source>-b
--branch
Show the branch and tracking info even in short-format.</source>
          <target state="translated">-b --branch 短いフォーマットでもブランチとトラッキング情報を表示します。</target>
        </trans-unit>
        <trans-unit id="da94785153f25a7bba5318b0af327610f474c509" translate="yes" xml:space="preserve">
          <source>-v
--verbose
In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of git diff --cached). If -v is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of git diff).</source>
          <target state="translated">-v --verbose 変更されたファイルの名前だけでなく、コミットするために段階的に変更されたテキストも表示します (つまり、git diff --cached の出力のようなものです)。v を二度指定した場合は、作業ツリーの中でまだステージされていない変更も表示します (つまり、git diff の出力のように)。</target>
        </trans-unit>
        <trans-unit id="f910ca918e78d6d5c4c84a00c09ba8801ecfde82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awk&lt;/code&gt; reads that as &quot;do the stuff in &lt;code&gt;{}&lt;/code&gt; on lines matching the regex&quot;. By default it assumes whitespace-delimited fields, so you print the second. If you can assume that only the line with your branch has the *, you can drop the ^.  Ah, bash golf!</source>
          <target state="translated">&lt;code&gt;awk&lt;/code&gt; はそれを「正規表現に一致する行で &lt;code&gt;{}&lt;/code&gt; の処理を行う」と読みます。 デフォルトでは、空白で区切られたフィールドを想定しているため、2番目を印刷します。 ブランチのある行だけに*があると想定できる場合は、^をドロップできます。 ああ、バッシュゴルフ！</target>
        </trans-unit>
        <trans-unit id="6169663f32dce268e09ffd8c1f8dce43a0bd5d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cat .git/HEAD&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;cat .git/HEAD&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6b5cceeee7928ac50f1d3437f8e70932b2d2354b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git branch&lt;/code&gt; show current branch name only.</source>
          <target state="translated">&lt;code&gt;git branch&lt;/code&gt; は現在のブランチ名のみを表示します。</target>
        </trans-unit>
        <trans-unit id="f3c5d1be174ef6bb481f0dca227ae92631f66d3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3f8322bb058992ff1c2b17d1b6a10fb0c3bcfa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;
This is nicer if you have and aren't scared of awk.</source>
          <target state="translated">&lt;strong&gt;更新&lt;/strong&gt;これはawkが怖いのではない方に適しています。</target>
        </trans-unit>
        <trans-unit id="03e5e8712e4864cb60618e100898a2b73304336f" translate="yes" xml:space="preserve">
          <source>A less noisy version for git status would do the trick</source>
          <target state="translated">git の状態に合わせてノイズの少ないバージョンを用意するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="42b604dda9377e915bb06c9f2ea6ab51b3da88e8" translate="yes" xml:space="preserve">
          <source>Add it to &lt;code&gt;PS1&lt;/code&gt; using Mac :</source>
          <target state="translated">Macを使用して &lt;code&gt;PS1&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="f32cbba31e2762faa316ec9b380b20ced504064a" translate="yes" xml:space="preserve">
          <source>After running that command :</source>
          <target state="translated">そのコマンドを実行した後に .</target>
        </trans-unit>
        <trans-unit id="67594c5d46af809b0fcd12d70fecbd1c4ab97cd6" translate="yes" xml:space="preserve">
          <source>And while I am there, the one liner to get the remote tracking branch (if any)</source>
          <target state="translated">そして、私がそこにいる間に、リモートトラッキングブランチを取得するためのワンライナー(もしあれば</target>
        </trans-unit>
        <trans-unit id="bbeb2683d9854477aa71e38e54e434fc51d8d075" translate="yes" xml:space="preserve">
          <source>As of version 2.22 of git you could just use:</source>
          <target state="translated">gitのバージョン2.22の時点では、ただ使えただけです。</target>
        </trans-unit>
        <trans-unit id="a58e8469a81529fe2ebba444d66dec21fac1ae50" translate="yes" xml:space="preserve">
          <source>As per man page:</source>
          <target state="translated">人のページの通りです。</target>
        </trans-unit>
        <trans-unit id="605e334d21152dcfd245edad943fffec64e46e75" translate="yes" xml:space="preserve">
          <source>Before running the command above :</source>
          <target state="translated">上記のコマンドを実行する前に .</target>
        </trans-unit>
        <trans-unit id="13c7cbaf068750a9941ceea308e0b1ee9c03eabe" translate="yes" xml:space="preserve">
          <source>Both should give the same branch name if you're on a branch. If you're on a detached head answers differ.</source>
          <target state="translated">どちらも枝に乗っている場合は同じ枝名をつけるべきです。あなたが離れた頭の上にいる場合は、答えが異なります。</target>
        </trans-unit>
        <trans-unit id="66e0e16d65c1d0ba586ca0dae4f213b79d0e1f3b" translate="yes" xml:space="preserve">
          <source>But with Git I'm not sure when I am editing a file in NetBeans or Notepad++, whether it's tied to the master or another branch.</source>
          <target state="translated">ただ、Gitだと、NetBeansやNotepad++でファイルを編集しているときに、マスターに紐付けられているのか、別のブランチに紐付けられているのか、よくわかりません。</target>
        </trans-unit>
        <trans-unit id="3dc80232de3d727f397efbb04c5d2fb0a0288dc7" translate="yes" xml:space="preserve">
          <source>Dont worry, if it is not GIT repository , it will not display error because of &lt;code&gt;[-d .git]&lt;/code&gt; which checks if &lt;code&gt;.git&lt;/code&gt; folder exists or not.</source>
          <target state="translated">心配する必要はありません。GITリポジトリではない場合、 &lt;code&gt;.git&lt;/code&gt; フォルダが存在するかどうかを確認する &lt;code&gt;[-d .git]&lt;/code&gt; のため、エラーは表示されません。</target>
        </trans-unit>
        <trans-unit id="60ee0f501d6609a7b80726ce97530442d7de5c3a" translate="yes" xml:space="preserve">
          <source>Edit your .bashrc with &lt;code&gt;sudo nano ~/.bashrc&lt;/code&gt; command (for Ubuntu) and add the following to the top:</source>
          <target state="translated">&lt;code&gt;sudo nano ~/.bashrc&lt;/code&gt; nano〜 / .bashrcコマンド（Ubuntuの場合）を使用して.bashrcを編集し、次の行を先頭に追加します。</target>
        </trans-unit>
        <trans-unit id="dc37b383da66a13ef33122d989bf602c6e0d7ba3" translate="yes" xml:space="preserve">
          <source>Else, it reads &lt;code&gt;.git/HEAD&lt;/code&gt; file. Next steps depends on its contents:</source>
          <target state="translated">そうでない場合は、 &lt;code&gt;.git/HEAD&lt;/code&gt; ファイルを読み取ります。 次の手順は、その内容によって異なります。</target>
        </trans-unit>
        <trans-unit id="844a18267f7570ccd804466117309648571134db" translate="yes" xml:space="preserve">
          <source>Explanation:</source>
          <target state="translated">Explanation:</target>
        </trans-unit>
        <trans-unit id="c669932973df71268e9fb7a787530e80ce9e57f0" translate="yes" xml:space="preserve">
          <source>First, there is special case if &lt;em&gt;rebase&lt;/em&gt; in progress is detected.  Git uses unnamed branch (detached HEAD) during the rebase process to make it atomic, and original branch is saved elsewhere.</source>
          <target state="translated">まず、進行中の&lt;em&gt;リベース&lt;/em&gt;が検出された場合、特別なケースがあります。 Gitはリベースプロセス中に名前のないブランチ（デタッチされたHEAD）を使用してアトミックにし、元のブランチは別の場所に保存されます。</target>
        </trans-unit>
        <trans-unit id="6f84f275a5d07fac75784083a2c365df609e10c1" translate="yes" xml:space="preserve">
          <source>For my own reference (but it might be useful to others) I made an overview of most (basic command line) techniques mentioned in this thread, each applied to several use cases: HEAD is (pointing at):</source>
          <target state="translated">私自身の参考のために (他の人にも役立つかもしれませんが)、このスレッドで述べられているほとんどの (基本的なコマンドラインの)テクニックの概要を、それぞれいくつかのユースケースに適用してみました。HEAD は (指し示している)</target>
        </trans-unit>
        <trans-unit id="9128965c45535416829f3ad378d18ae46e46c6ab" translate="yes" xml:space="preserve">
          <source>Found a command line solution of the same length as &lt;a href=&quot;https://stackoverflow.com/a/10014163/1260665&quot;&gt;Oliver Refalo's&lt;/a&gt;, using good ol' awk:</source>
          <target state="translated">good ol 'awkを使用して、 &lt;a href=&quot;https://stackoverflow.com/a/10014163/1260665&quot;&gt;Oliver Refalo&lt;/a&gt;と同じ長さのコマンドラインソリューションを見つけました。</target>
        </trans-unit>
        <trans-unit id="b8abd50f9025396b3c625116e9ec5006f201c6a4" translate="yes" xml:space="preserve">
          <source>GIT_AUTHOR_EMAIL - Committer/Author Email</source>
          <target state="translated">GIT_AUTHOR_EMAIL-CommitterAuthor 電子メール</target>
        </trans-unit>
        <trans-unit id="8426df6d43097326869d676f59343982c47f86fb" translate="yes" xml:space="preserve">
          <source>GIT_BRANCH - Name of the branch currently being used, e.g. &quot;master&quot; or &quot;origin/foo&quot;</source>
          <target state="translated">GIT_BRANCH-現在使用しているブランチの名前。</target>
        </trans-unit>
        <trans-unit id="da2682880180dac19b77cfa40d0c8ed095fd4cab" translate="yes" xml:space="preserve">
          <source>GIT_COMMIT - SHA of the current</source>
          <target state="translated">GIT_COMMIT-現在の SHA</target>
        </trans-unit>
        <trans-unit id="6f20f367661c10262d93d4f6777a3c7112b0a0e8" translate="yes" xml:space="preserve">
          <source>GIT_COMMITTER_EMAIL - Committer/Author Email</source>
          <target state="translated">GIT_COMMITTER_EMAIL-CommitterAuthor 電子メール</target>
        </trans-unit>
        <trans-unit id="cf1676fc1333e4c56ffbe9da66f03f926fbdfac3" translate="yes" xml:space="preserve">
          <source>GIT_PREVIOUS_COMMIT - SHA of the previous built commit from the same branch (the current SHA on first build in branch)</source>
          <target state="translated">GIT_PREVIOUS_COMMIT-同じブランチからの前回ビルドされたコミットの SHA (ブランチ内の最初のビルド時の現在の SHA)</target>
        </trans-unit>
        <trans-unit id="87dba9cf9923ac7f9160e07d088d9703f88614d6" translate="yes" xml:space="preserve">
          <source>GIT_URL - Repository remote URL</source>
          <target state="translated">GIT_URL-リポジトリのリモート URL</target>
        </trans-unit>
        <trans-unit id="b1a771c71f46483f30cdbf59105a1ef593f37887" translate="yes" xml:space="preserve">
          <source>GIT_URL_N - Repository remote URLs when there are more than 1 remotes, e.g. GIT_URL_1, GIT_URL_2</source>
          <target state="translated">GIT_URL_N-複数のリモートがある場合のリポジトリのリモート URL、例:GIT_URL_1,GIT_URL_2</target>
        </trans-unit>
        <trans-unit id="87de3402fc5cce2316730d5405a39c96ef1a7ef4" translate="yes" xml:space="preserve">
          <source>How &lt;a href=&quot;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&quot;&gt;git-prompt.sh&lt;/a&gt; from &lt;code&gt;contrib/&lt;/code&gt; does it (git version 2.3.0), as defined in &lt;code&gt;__git_ps1&lt;/code&gt; helper function:</source>
          <target state="translated">&lt;code&gt;__git_ps1&lt;/code&gt; ヘルパー関数で定義されているように、 &lt;code&gt;contrib/&lt;/code&gt; &lt;a href=&quot;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&quot;&gt;git-prompt.sh&lt;/a&gt;がそれを行う方法（gitバージョン2.3.0）：</target>
        </trans-unit>
        <trans-unit id="bd2234cca283576ca75aee25f85b40b2e379bb36" translate="yes" xml:space="preserve">
          <source>How to get the current branch name in Git</source>
          <target state="translated">Gitで現在のブランチ名を取得する方法</target>
        </trans-unit>
        <trans-unit id="b57d8cb51e4df48a58790f017b0d1a416a4fef99" translate="yes" xml:space="preserve">
          <source>I  know this is late but on a linux/mac ,from the terminal  you can use the following.</source>
          <target state="translated">遅くなりましたが、linuxmacでは、ターミナルから以下のように使えます。</target>
        </trans-unit>
        <trans-unit id="02ecd9cb6350ae59f27577d90f2286642fe8a862" translate="yes" xml:space="preserve">
          <source>I have a simple script called &lt;code&gt;git-cbr&lt;/code&gt; (&lt;em&gt;current branch&lt;/em&gt;) which prints out the current branch name.</source>
          <target state="translated">現在のブランチ名を出力する &lt;code&gt;git-cbr&lt;/code&gt; （ &lt;em&gt;現在のブランチ&lt;/em&gt; ）と呼ばれる簡単なスクリプトがあります。</target>
        </trans-unit>
        <trans-unit id="e7453a339ec551688876d7cf172018998ade5f5e" translate="yes" xml:space="preserve">
          <source>I hope that helps.</source>
          <target state="translated">参考になれば幸いです。</target>
        </trans-unit>
        <trans-unit id="7fcace9fc25d584358ba347617e4da0a40fc0a8f" translate="yes" xml:space="preserve">
          <source>I put this script in a custom folder (&lt;code&gt;~/.bin&lt;/code&gt;). The folder is in &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">このスクリプトをカスタムフォルダー（ &lt;code&gt;~/.bin&lt;/code&gt; ）に配置しました。 フォルダーは &lt;code&gt;$PATH&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="10310fa7b2e92c561df9c5771ec0237f52689c67" translate="yes" xml:space="preserve">
          <source>I recommend using any of these two commands.</source>
          <target state="translated">この2つのコマンドのいずれかを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="619e41c93dfe5ad3c57ff5c318f5a31358f6f774" translate="yes" xml:space="preserve">
          <source>I use this in scripts that need the current branch name. It will show you the current short symbolic reference to HEAD, which will be your current branch name.</source>
          <target state="translated">私は現在のブランチ名を必要とするスクリプトでこれを使用しています。これは、現在のブランチ名となる HEAD への短いシンボリック参照を表示します。</target>
        </trans-unit>
        <trans-unit id="07d367c6a7ef001d37906cd3fdc84ef98ad56b3d" translate="yes" xml:space="preserve">
          <source>I'm from a Subversion background and, when I had a branch, I knew what I was working on with &quot;These working files point to this branch&quot;.</source>
          <target state="translated">私はSubversionの出身で、ブランチを持っていると、「これらの作業ファイルはこのブランチを指しています」で何を作業しているのかがわかりました。</target>
        </trans-unit>
        <trans-unit id="ddcba8f14fe4c553748caa288e7feb373ed4f292" translate="yes" xml:space="preserve">
          <source>If it doesn't start with &lt;code&gt;'ref: '&lt;/code&gt;, then it is detached HEAD (anonymous branch), pointing directly to some commit. Use &lt;code&gt;git describe ...&lt;/code&gt; to write the current commit in human-readable form.</source>
          <target state="translated">&lt;code&gt;'ref: '&lt;/code&gt; で始まらない場合は、デタッチされたHEAD（匿名ブランチ）で、いくつかのコミットを直接指します。 &lt;code&gt;git describe ...&lt;/code&gt; を使用して、現在のコミットを人間が読める形式で記述します 。</target>
        </trans-unit>
        <trans-unit id="3ed07c096f7118af313f4abdbfa4009664b092ff" translate="yes" xml:space="preserve">
          <source>If it starts with &lt;code&gt;'ref: '&lt;/code&gt; prefix, then &lt;code&gt;.git/HEAD&lt;/code&gt; is symref (symbolic reference), and we are on normal branch.  Strip this prefix to get full name, and strip &lt;code&gt;refs/heads/&lt;/code&gt; to get short name of the current branch:</source>
          <target state="translated">&lt;code&gt;'ref: '&lt;/code&gt; プレフィックスで始まる場合、 &lt;code&gt;.git/HEAD&lt;/code&gt; はsymref（シンボリック参照）であり、通常のブランチにいます。 このプレフィックスを削除して完全な名前を取得し、 &lt;code&gt;refs/heads/&lt;/code&gt; を削除して現在のブランチの短い名前を取得します。</target>
        </trans-unit>
        <trans-unit id="7e336b5b952c54875dc0f7c7b4c1070bc646a2c4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;.git/HEAD&lt;/code&gt; file is a symbolic link (a very rare case, from the ancient history of Git), it uses &lt;code&gt;git symbolic-ref HEAD 2&amp;gt;/dev/null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.git/HEAD&lt;/code&gt; ファイルがシンボリックリンクである場合（Gitの古代の歴史からの非常にまれなケース）、それは &lt;code&gt;git symbolic-ref HEAD 2&amp;gt;/dev/null&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="a34f73e21b8142cd02e3787a9f24b6c4e7f05b4c" translate="yes" xml:space="preserve">
          <source>If this file doesn't exist, then there is no current branch.  This usually happens if the repository is bare.</source>
          <target state="translated">このファイルが存在しない場合、現在のブランチは存在しません。これは通常、リポジトリがベアの場合に起こります。</target>
        </trans-unit>
        <trans-unit id="0d3b8966786f1472375b95e3f7b100bf846dad46" translate="yes" xml:space="preserve">
          <source>If you really want the last branch/tag checked out in detached HEAD state as well.</source>
          <target state="translated">本当に最後のbranchtagをdetached HEAD状態でもチェックアウトしたいのであれば。</target>
        </trans-unit>
        <trans-unit id="c9e2eebe139108d70c064f223c21bc37dbb0457e" translate="yes" xml:space="preserve">
          <source>If you want to retrieve only the name of the branch you are on, you can do:</source>
          <target state="translated">今いるブランチの名前だけを取得したい場合には</target>
        </trans-unit>
        <trans-unit id="1ddaf919eab835192af5ec00d5b247c1991055aa" translate="yes" xml:space="preserve">
          <source>In Netbeans, ensure that versioning annotations are enabled (View -&amp;gt; Show Versioning
Labels). You can then see the branch name next to project name.</source>
          <target state="translated">Netbeansで、バージョニングアノテーションが有効になっていることを確認します（[表示]-&amp;gt; [バージョニングラベルの表示]）。 プロジェクト名の横にブランチ名が表示されます。</target>
        </trans-unit>
        <trans-unit id="f66963cd193ffdbd511966280e92a2a14f971926" translate="yes" xml:space="preserve">
          <source>It prints out</source>
          <target state="translated">プリントアウトする</target>
        </trans-unit>
        <trans-unit id="99261818f6547b5ed54374d3a2426ea44c25412d" translate="yes" xml:space="preserve">
          <source>Now,</source>
          <target state="translated">Now,</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="85a0e86891f08833d56bc27a54026fa6647589b1" translate="yes" xml:space="preserve">
          <source>OR (more verbose)</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="1463f9d236e80b3999b6c9fd3da40eb7615ec4c7" translate="yes" xml:space="preserve">
          <source>On Git v1.7+ you can also do:</source>
          <target state="translated">Git v1.7+でもできます。</target>
        </trans-unit>
        <trans-unit id="dd221d3e942e9c5d6a5ab57fb1fa3a478f96948b" translate="yes" xml:space="preserve">
          <source>On an earlier client, this seems to work:</source>
          <target state="translated">以前のクライアントでは、これはうまくいくようです。</target>
        </trans-unit>
        <trans-unit id="f98636865293eb46c55167f19522d9f00339f265" translate="yes" xml:space="preserve">
          <source>One more alternative:</source>
          <target state="translated">もう一つの代替案。</target>
        </trans-unit>
        <trans-unit id="2d5001df4c420a27aeb8f1460a5e5f335f0443cc" translate="yes" xml:space="preserve">
          <source>Open your terminal (ctrl-alt-t) and enter the commands</source>
          <target state="translated">ターミナルを開き (ctrl-alt-t)、コマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="92505d253eed8422f020d662afdef1e2bb497077" translate="yes" xml:space="preserve">
          <source>Over time, we might have a really long list of branches.</source>
          <target state="translated">時間が経てば、本当に長い枝のリストができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="390fcf6665394474a4208236397a723ae5bbd841" translate="yes" xml:space="preserve">
          <source>Print the name of the current branch. In detached HEAD state, nothing is printed.</source>
          <target state="translated">現在のブランチの名前を印刷します。デタッチドHEAD状態では、何も表示されません。</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7219e206d564fb2b7dd369cb03d9b47b3c933b09" translate="yes" xml:space="preserve">
          <source>Response to the above command will look as follows:</source>
          <target state="translated">上記コマンドのレスポンスは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fd19e6d6cb4b26b0ef86cb95d8b5872a311f4828" translate="yes" xml:space="preserve">
          <source>Results:</source>
          <target state="translated">Results:</target>
        </trans-unit>
        <trans-unit id="89d4908007e5d3cd39a8eb471738e7cff0167c6c" translate="yes" xml:space="preserve">
          <source>Returns either branch name or SHA1 when on detached head:</source>
          <target state="translated">アタッチされたヘッド上にある場合、ブランチ名またはSHA1を返します。</target>
        </trans-unit>
        <trans-unit id="f4d247abdde4a1ac9551ab9c7fdcced163f568be" translate="yes" xml:space="preserve">
          <source>Show just the current branch in Git (Sep 2009)</source>
          <target state="translated">Git の現在のブランチだけを表示する (2009年9月)</target>
        </trans-unit>
        <trans-unit id="0e02c56b5a3c9e558f119f89eea7afd80f2321ac" translate="yes" xml:space="preserve">
          <source>So now when I'm in a git repo, I just simply type &lt;code&gt;git cbr&lt;/code&gt; to print out the current branch name.</source>
          <target state="translated">したがって、gitリポジトリにいるときは、単に &lt;code&gt;git cbr&lt;/code&gt; と入力して現在のブランチ名を出力します。</target>
        </trans-unit>
        <trans-unit id="7331bb621ea97ca6a384f2f5c5900a671bb7a13b" translate="yes" xml:space="preserve">
          <source>Sorry this is another command-line answer, but that's what I was looking for when I found this question and many of these answers were helpful. My solution is the following bash shell function:</source>
          <target state="translated">これは別のコマンドラインの回答で申し訳ありませんが、私がこの質問を見つけたときに探していたもので、これらの回答の多くが参考になりました。私の解決策は以下のbashシェル関数です。</target>
        </trans-unit>
        <trans-unit id="d688e182d41fe098b1e0cac6d042ffa2e6f3b670" translate="yes" xml:space="preserve">
          <source>The following shell command tells you the branch that you are currently in.</source>
          <target state="translated">以下のシェルコマンドは、現在いるブランチを教えてくれます。</target>
        </trans-unit>
        <trans-unit id="52e0b6ffb6c0eace73206f823c72f7829763e773" translate="yes" xml:space="preserve">
          <source>The git plugin sets several environment variables you can use in your scripts:</source>
          <target state="translated">git プラグインは、スクリプトで使用できる環境変数をいくつか設定します。</target>
        </trans-unit>
        <trans-unit id="64879d6216add4a11b0e4e0342d763da17c1eb15" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version v1 format.</source>
          <target state="translated">version パラメータは、フォーマットのバージョンを指定するために使用されます。これはオプションで、デフォルトはオリジナルのバージョン v1 フォーマットです。</target>
        </trans-unit>
        <trans-unit id="e4698fd2770221138d40ad62b70b38e72fed3ab1" translate="yes" xml:space="preserve">
          <source>Then paste the code</source>
          <target state="translated">その後、コードを貼り付けます。</target>
        </trans-unit>
        <trans-unit id="10378fc15bb4cdd59537d7c94841a65bb996038b" translate="yes" xml:space="preserve">
          <source>There's no problem with &lt;code&gt;git&lt;/code&gt; in bash, it tells me what I'm doing.</source>
          <target state="translated">bashの &lt;code&gt;git&lt;/code&gt; には何の問題もありません。私が何をしているのかがわかります。</target>
        </trans-unit>
        <trans-unit id="59e1311da91c5c09aa2bc73654e368b11e1d32bd" translate="yes" xml:space="preserve">
          <source>This is a short version of @dmaestro12's answer and without tag support.</source>
          <target state="translated">これは@dmaestro12さんの回答の短縮版で、タグサポートなしのものです。</target>
        </trans-unit>
        <trans-unit id="373e0b4920bf317f10262860fb12b612d4d407b5" translate="yes" xml:space="preserve">
          <source>This should always give me something both human-readable and directly usable as an argument to &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">これは常に私に人間が読めるものと &lt;code&gt;git checkout&lt;/code&gt; の引数として直接使用できるものの両方を与えるはずです。</target>
        </trans-unit>
        <trans-unit id="109843f163e4dc16ec4ecdab7595b1c59ef55429" translate="yes" xml:space="preserve">
          <source>This works because the &lt;code&gt;git&lt;/code&gt; command takes its first argument and tries to run a script that goes by the name of &lt;code&gt;git-arg1&lt;/code&gt;. For instance, &lt;code&gt;git branch&lt;/code&gt; tries to run a script called &lt;code&gt;git-branch&lt;/code&gt;, etc.</source>
          <target state="translated">これが機能するのは、 &lt;code&gt;git&lt;/code&gt; コマンドが最初の引数を取り、 &lt;code&gt;git-arg1&lt;/code&gt; という名前のスクリプトを実行しようとするためです。 たとえば、 &lt;code&gt;git branch&lt;/code&gt; は &lt;code&gt;git-branch&lt;/code&gt; などのスクリプトを実行しようとします。</target>
        </trans-unit>
        <trans-unit id="f3e4e63e660eb801a9739c483443901c4d25e19e" translate="yes" xml:space="preserve">
          <source>To display the current branch you're on, without the other branches listed, you can do the following:</source>
          <target state="translated">他のブランチを表示せずに現在のブランチを表示するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="3c7aa770bf76e0cc17ce474053f61f54f185eaa7" translate="yes" xml:space="preserve">
          <source>To show only the branch name in Git v1.8 and later (thank's to Greg for pointing that out):</source>
          <target state="translated">Git v1.8 以降でブランチ名だけを表示するようにしました (指摘してくれた Greg に感謝します)。</target>
        </trans-unit>
        <trans-unit id="93fcd4a57152e0271d5779a68b63e49982f31e95" translate="yes" xml:space="preserve">
          <source>To show only the branch you are currently on, use:</source>
          <target state="translated">現在いるブランチだけを表示するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="3291b6778588949335da75fbc8aa68d8b56233a2" translate="yes" xml:space="preserve">
          <source>Well simple enough, I got it in a one liner (bash)</source>
          <target state="translated">まあ単純にワンライナーでゲットしました(バシッ)</target>
        </trans-unit>
        <trans-unit id="6e76d1f2ffabce1382bec289214bdedf37eb7c7d" translate="yes" xml:space="preserve">
          <source>What about this?</source>
          <target state="translated">これはどうなの?</target>
        </trans-unit>
        <trans-unit id="0c3a32ed99ad638e132ab4baa53794cc845b581a" translate="yes" xml:space="preserve">
          <source>When you are in branch master and your prompt is &lt;code&gt;$&lt;/code&gt;, you will get &lt;code&gt;* master&lt;/code&gt; as follows.</source>
          <target state="translated">ブランチマスターでプロンプトが &lt;code&gt;$&lt;/code&gt; の場合、次のように &lt;code&gt;* master&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="9b46f7ac23c222b5aa87f171360254c0ea572e08" translate="yes" xml:space="preserve">
          <source>When you don't want to type that long command every time you want to know the branch and you are using Bash, give the command a short alias, for example alias &lt;code&gt;cb&lt;/code&gt;, like so.</source>
          <target state="translated">ブランチを知りたいときに毎回その長いコマンドを入力する必要がなく、Bashを使用している場合は、コマンドに短いエイリアス（エイリアス &lt;code&gt;cb&lt;/code&gt; など）を付けます。</target>
        </trans-unit>
        <trans-unit id="92bd46b225ed0f059bfd9df5e04c9d018d0bceff" translate="yes" xml:space="preserve">
          <source>While git branch will show you all branches and highlight the current one with an asterisk, it can be too cumbersome when working with lots of branches.</source>
          <target state="translated">git ブランチはすべてのブランチを表示し、現在のブランチをアスタリスクで強調表示しますが、たくさんのブランチを扱うときには面倒です。</target>
        </trans-unit>
        <trans-unit id="7bde276f394eb2ba500fe8e8ea497e95e7471b8f" translate="yes" xml:space="preserve">
          <source>While some of the other solutions are great, Here is what I do (simplified from Jacob's answer):</source>
          <target state="translated">他の解決策は素晴らしいものがありますが、ここでは私が何をしているかを紹介します(ヤコブの答えから簡略化しています)。</target>
        </trans-unit>
        <trans-unit id="5f481abbbd56d193451e712ff2180ecd753405e2" translate="yes" xml:space="preserve">
          <source>Why not use git-aware shell prompt, which would tell you name of current branch?  &lt;code&gt;git status&lt;/code&gt; also helps.</source>
          <target state="translated">現在のブランチの名前を伝えるgit-awareシェルプロンプトを使用しないのはなぜですか？ &lt;code&gt;git status&lt;/code&gt; も役立ちます。</target>
        </trans-unit>
        <trans-unit id="71a2a83c51aae333ea92e527bd5cfd612fa69812" translate="yes" xml:space="preserve">
          <source>You can just type in command line (console) on Linux, in the repository directory:</source>
          <target state="translated">Linuxでは、リポジトリのディレクトリにあるコマンドライン(コンソール)で入力するだけです。</target>
        </trans-unit>
        <trans-unit id="1117579416ac1554004f1ac0bdaed8e014b9c8df" translate="yes" xml:space="preserve">
          <source>You can permanently set up your bash output to show your git-branch name. It is very handy when you work with different branches, no need to type &lt;code&gt;$ git status&lt;/code&gt; all the time. 
Github repo &lt;a href=&quot;https://github.com/jimeh/git-aware-prompt&quot;&gt;git-aware-prompt
&lt;/a&gt;.</source>
          <target state="translated">git-branch名を表示するようにbash出力を永続的に設定できます。 さまざまなブランチで作業するときに非常に便利です。常に &lt;code&gt;$ git status&lt;/code&gt; と入力する必要はありません。 Github repo &lt;a href=&quot;https://github.com/jimeh/git-aware-prompt&quot;&gt;git-aware-prompt&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6135f99d97423e2da41f2756fe24331c30f6a95" translate="yes" xml:space="preserve">
          <source>You have also &lt;code&gt;git symbolic-ref HEAD&lt;/code&gt; which displays the full refspec.</source>
          <target state="translated">完全なrefspecを表示する &lt;code&gt;git symbolic-ref HEAD&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="af8282af0ec9873f986836254e678b40a2afc529" translate="yes" xml:space="preserve">
          <source>all other use cases: SHA of the corresponding commit</source>
          <target state="translated">他のすべてのユースケースに対応しています。対応するコミットの SHA</target>
        </trans-unit>
        <trans-unit id="ba14b23bc5b7cba858ea452a901cf283f299abe1" translate="yes" xml:space="preserve">
          <source>all the other use cases: &lt;code&gt;HEAD&lt;/code&gt;</source>
          <target state="translated">他のすべての使用例： &lt;code&gt;HEAD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08a2c9ab93d430fdc62c6c3ff1244c5a84edd808" translate="yes" xml:space="preserve">
          <source>all the other use cases: &lt;code&gt;fatal: ref HEAD is not a symbolic ref&lt;/code&gt;</source>
          <target state="translated">他のすべての使用例： &lt;code&gt;fatal: ref HEAD is not a symbolic ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="344f74bd4340bf79ccadc3ff81083ce34866af02" translate="yes" xml:space="preserve">
          <source>and you will see some text, among which something similar to:</source>
          <target state="translated">といくつかのテキストが表示されますが、その中に似たようなものがあります。</target>
        </trans-unit>
        <trans-unit id="49805e91290f49e4c63a1327b28ba3c6a8fc1d67" translate="yes" xml:space="preserve">
          <source>at the end of the same file you pasted the installation code into earlier. This will give you the colorized output:</source>
          <target state="translated">を、先ほどインストールコードを貼り付けたファイルの最後に追加してください。これで色付きの出力が得られます。</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="d07d70ee9e89bd0d6064b52534ce6330c39d8733" translate="yes" xml:space="preserve">
          <source>general detached head (none of the above)</source>
          <target state="translated">一般離頭</target>
        </trans-unit>
        <trans-unit id="067d8b7dda8e8aca8e17a9884ce61642c90f7348" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</source>
          <target state="translated">一般的なデタッチヘッド： &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e52c0f8100b5149909c39011c911c11db4dfc262" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;(detached from 285f294)&lt;/code&gt;</source>
          <target state="translated">一般的なデタッチヘッド： &lt;code&gt;(detached from 285f294)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a499d6ec493171e0fdf5c130cdafc39e572d6537" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;v1.0.6-5-g2393761&lt;/code&gt;</source>
          <target state="translated">一般的な分離ヘッド： &lt;code&gt;v1.0.6-5-g2393761&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7956ee34f5e6aa23b718e2a92bbddecf6a2bcc82" translate="yes" xml:space="preserve">
          <source>git status -&amp;gt; gets the working tree status</source>
          <target state="translated">git status-&amp;gt;作業ツリーのステータスを取得します</target>
        </trans-unit>
        <trans-unit id="6b168004ef1bb6f2f2f5f617c4c6b3fea18b70f0" translate="yes" xml:space="preserve">
          <source>it will tell you on which branch you are on 
there are many commands which are useful some of them are</source>
          <target state="translated">どのブランチにいるかを教えてくれます。</target>
        </trans-unit>
        <trans-unit id="cb02ce157d03189be64dbef02da45661fe872b8b" translate="yes" xml:space="preserve">
          <source>local branch (master)</source>
          <target state="translated">地方支部</target>
        </trans-unit>
        <trans-unit id="26d8333c8270c7c97e9d0051b98eb940f25bb538" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;# On branch master&lt;/code&gt;</source>
          <target state="translated">ローカルブランチ： &lt;code&gt;# On branch master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b898ed4c9aac56192ac55a5bafb347d7f3b58b4" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;heads/master&lt;/code&gt;</source>
          <target state="translated">ローカルブランチ： &lt;code&gt;heads/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c631acf519c874e1056faf794719c772fd1bcd93" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;master&lt;/code&gt;</source>
          <target state="translated">ローカルブランチ： &lt;code&gt;master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d41ea7e2885d8d7905f58b26be248b3b157f2bf" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;ref: refs/heads/master&lt;/code&gt;</source>
          <target state="translated">ローカルブランチ： &lt;code&gt;ref: refs/heads/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a38aad08d7af94802c0c3e895b9a45d7d05d936c" translate="yes" xml:space="preserve">
          <source>on a local branch: &lt;code&gt;feature/HS-0001&lt;/code&gt;</source>
          <target state="translated">ローカルブランチ： &lt;code&gt;feature/HS-0001&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0952ab473decb5b399db783ba89cca75521bed1c" translate="yes" xml:space="preserve">
          <source>on a remote branch (detached, not tagged): SHA1</source>
          <target state="translated">リモートブランチ上にある (タグ付けされていない、切り離された)SHA1</target>
        </trans-unit>
        <trans-unit id="026c0b96bf66660f8fe5a792bfff33e5bce349b3" translate="yes" xml:space="preserve">
          <source>on a tagged commit (detached): &lt;code&gt;v3.29.5&lt;/code&gt;</source>
          <target state="translated">タグ付きコミット（デタッチ）： &lt;code&gt;v3.29.5&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="712d02977420cb091a7544ec449eaa2c0d923694" translate="yes" xml:space="preserve">
          <source>on any other detached commit: SHA1</source>
          <target state="translated">を使用して、他の切り離されたコミットで SHA1</target>
        </trans-unit>
        <trans-unit id="6fc6097406636c7deae487f45b771f51b3d8496f" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;# HEAD detached at origin/master&lt;/code&gt;</source>
          <target state="translated">リモート追跡ブランチ（同期中）： &lt;code&gt;# HEAD detached at origin/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="961c8185d2ddb3ef10ee6894590037e7196fdad5" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;(detached from origin/master)&lt;/code&gt;</source>
          <target state="translated">リモート追跡ブランチ（同期）：（ &lt;code&gt;(detached from origin/master)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a14f05a3e2a7dc0660b5de035329f6c18f658ffe" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;heads/master&lt;/code&gt; (note: &lt;em&gt;not&lt;/em&gt;&lt;code&gt;remotes/origin/master&lt;/code&gt;)</source>
          <target state="translated">リモート追跡ブランチ（同期）： &lt;code&gt;heads/master&lt;/code&gt; （注：リモート &lt;code&gt;remotes/origin/master&lt;/code&gt; &lt;em&gt;はない&lt;/em&gt; ）</target>
        </trans-unit>
        <trans-unit id="a404ece2f345b188eee4d9deadbd464af625230f" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;# HEAD detached at origin/feature-foo&lt;/code&gt;</source>
          <target state="translated">リモート追跡ブランチ（非同期）： &lt;code&gt;# HEAD detached at origin/feature-foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aaf6c29b71813ed9522a3fb98d6aacf1618c72bb" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;(detached from origin/feature-foo)&lt;/code&gt;</source>
          <target state="translated">リモート追跡ブランチ（同期していない）：（ &lt;code&gt;(detached from origin/feature-foo)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d009af1a7cedf33214619fe45c26e561c33960ee" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;remotes/origin/feature-foo&lt;/code&gt;</source>
          <target state="translated">リモート追跡ブランチ（同期していない）： &lt;code&gt;remotes/origin/feature-foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4fc5a942988ef133603476b6a65e97800e2181c" translate="yes" xml:space="preserve">
          <source>remote tracking branch, in sync with local branch (origin/master at same commit as master)</source>
          <target state="translated">ローカルブランチと同期したリモートトラッキングブランチ (master と同じコミットで originmaster)</target>
        </trans-unit>
        <trans-unit id="aa8557dc1c3a5b8f2b14f93afb3a6f32234255c8" translate="yes" xml:space="preserve">
          <source>remote tracking branch, not in sync with a local branch (origin/feature-foo)</source>
          <target state="translated">リモートトラッキングブランチ、ローカルブランチと同期していない (originfeature-foo)</target>
        </trans-unit>
        <trans-unit id="4f7ff2af8e1de45728c969eed837b2a20cf27254" translate="yes" xml:space="preserve">
          <source>sed -n 1p -&amp;gt; gets the first line from the status body</source>
          <target state="translated">sed -n 1p-&amp;gt;ステータス本文から最初の行を取得します</target>
        </trans-unit>
        <trans-unit id="7228acdcd4725e692a7c731c21f1f7bbc81aa905" translate="yes" xml:space="preserve">
          <source>should show all the local branches of your repo. The starred branch is your current branch.</source>
          <target state="translated">は、あなたのレポのすべてのローカルブランチを表示します。星印のついたブランチはあなたの現在のブランチです。</target>
        </trans-unit>
        <trans-unit id="38a6300145d1e3bb20e7a0c156c7d9433ceb3909" translate="yes" xml:space="preserve">
          <source>submodule (run inside the submodule directory)</source>
          <target state="translated">サブモジュール (サブモジュールディレクトリ内で実行)</target>
        </trans-unit>
        <trans-unit id="887d5455557da0bb2373bdf3bcf2d84216714ca3" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</source>
          <target state="translated">サブモジュール： &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a55b6424035b862502a5da73eb80d5d0f93df24" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;(HEAD detached at 285f294)&lt;/code&gt;</source>
          <target state="translated">サブモジュール： &lt;code&gt;(HEAD detached at 285f294)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d49a44e99a8a9929d71a475a1ec04ef0dc95c984" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;cat: .git/HEAD: Not a directory&lt;/code&gt;</source>
          <target state="translated">サブモジュール： &lt;code&gt;cat: .git/HEAD: Not a directory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1889ffcd86e56da294aa8359286925721bf87cfc" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;remotes/origin/HEAD&lt;/code&gt;</source>
          <target state="translated">サブモジュール： &lt;code&gt;remotes/origin/HEAD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0d770ee7906300b4702e3a6b4665556dcdeb73" translate="yes" xml:space="preserve">
          <source>tag (v1.2.3)</source>
          <target state="translated">タグ (v1.2.3)</target>
        </trans-unit>
        <trans-unit id="300d753fbbf8557bdcec6b781be36d2bc9053b1d" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;# HEAD detached at v1.2.3&lt;/code&gt;</source>
          <target state="translated">タグ： &lt;code&gt;# HEAD detached at v1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85878fdb521bd297845662db6b503591ea08754d" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;(detached from v1.2.3)&lt;/code&gt;</source>
          <target state="translated">タグ： &lt;code&gt;(detached from v1.2.3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e01d0ccb3091af0d364bdf6c1390a113165bdc3" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;v1.2.3&lt;/code&gt;</source>
          <target state="translated">タグ： &lt;code&gt;v1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d7d9fcbb782e111ee7d01ecb8ab58b9e877c0f4" translate="yes" xml:space="preserve">
          <source>which means you are currently on &lt;code&gt;master&lt;/code&gt; branch. If you are editing any file at that moment and it is located in the same local repository (local directory containing the files that are under Git version control management), you are editing file in this branch.</source>
          <target state="translated">これは、現在 &lt;code&gt;master&lt;/code&gt; ブランチにいることを意味します。 その時点でファイルを編集していて、同じローカルリポジトリ（Gitバージョン管理下にあるファイルを含むローカルディレクトリ）にある場合、このブランチでファイルを編集しています。</target>
        </trans-unit>
        <trans-unit id="bc75c4c10755a31fae0d6434dd0d2a3e59fd7113" translate="yes" xml:space="preserve">
          <source>will also give the branch name along with changes.</source>
          <target state="translated">は、変更点と一緒にブランチ名も表示されます。</target>
        </trans-unit>
        <trans-unit id="48fbe719a13a81d89ed21570a514336aa89c4029" translate="yes" xml:space="preserve">
          <source>will show only the branch name</source>
          <target state="translated">はブランチ名のみを表示します。</target>
        </trans-unit>
        <trans-unit id="93c597c2307938133d9d5a821017db1d1c256c7e" translate="yes" xml:space="preserve">
          <source>works, but &lt;em&gt;only&lt;/em&gt; If there are any local changes</source>
          <target state="translated">機能しますが、ローカルの変更がある場合&lt;em&gt;のみ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f9a5955bf4f3b51c76efa8fabc361208cbb252e3" translate="yes" xml:space="preserve">
          <source>you  can use git bash on the working directory
command is as follow</source>
          <target state="translated">作業ディレクトリで git bash を使用することができます。</target>
        </trans-unit>
        <trans-unit id="30e5fe0314f136950eeb0ee2af3fe4238c07c1ca" translate="yes" xml:space="preserve">
          <source>you can also use GIT_BRANCH variable as appears here:
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&lt;/a&gt;</source>
          <target state="translated">ここに表示されるGIT_BRANCH変数を使用することもできます： &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;https&lt;/a&gt; ://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
