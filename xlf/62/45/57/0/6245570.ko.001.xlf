<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/6245570">
    <body>
      <group id="6245570">
        <trans-unit id="8133ceea4f3b1873ceba304f648ff04295782531" translate="yes" xml:space="preserve">
          <source>&amp;ndash;  &lt;em&gt;Darien 26. Mar 2014&lt;/em&gt;</source>
          <target state="translated">&amp;ndash; &lt;em&gt;Darien 26. 2014 년 3 월&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c96d5e8229460bb530f351849a826792c648d7d" translate="yes" xml:space="preserve">
          <source>(FYI this was done with git version 1.8.3.1)</source>
          <target state="translated">(참고로 이것은 git 버전 1.8.3.1로 수행되었습니다)</target>
        </trans-unit>
        <trans-unit id="eb76da96396586431c48171dd4d7d83850bcafff" translate="yes" xml:space="preserve">
          <source>(credit: Limited Atonement)</source>
          <target state="translated">(신용 : 속죄)</target>
        </trans-unit>
        <trans-unit id="d7a70fc8696406f7c322d51454d7ff4563f2c630" translate="yes" xml:space="preserve">
          <source>--long
Give the output in the long-format. This is the default.</source>
          <target state="translated">--long 출력을 긴 형식으로 제공합니다. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="53ff5f4e36374c62d7589c9da97b5b34beba1c97" translate="yes" xml:space="preserve">
          <source>--porcelain[=]
Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.</source>
          <target state="translated">--porcelain [=] 스크립트를 구문 분석하기 쉬운 형식으로 출력합니다. 이것은 짧은 출력과 비슷하지만 사용자 구성에 관계없이 Git 버전에서 안정적으로 유지됩니다. 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cc11b80ee95e7773de86f42b7a8390a82b0c5556" translate="yes" xml:space="preserve">
          <source>--short
Give the output in the short-format.</source>
          <target state="translated">--short 출력을 짧은 형식으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3ea869c3abac592aafdefc71fd30738598515c6e" translate="yes" xml:space="preserve">
          <source>-b
--branch
Show the branch and tracking info even in short-format.</source>
          <target state="translated">-b --branch 분기 및 추적 정보를 짧은 형식으로도 표시합니다.</target>
        </trans-unit>
        <trans-unit id="da94785153f25a7bba5318b0af327610f474c509" translate="yes" xml:space="preserve">
          <source>-v
--verbose
In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of git diff --cached). If -v is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of git diff).</source>
          <target state="translated">-v --verbose 변경된 파일 이름 외에도 커밋되기 위해 준비된 텍스트 변경 사항 (예 : git diff --cached 출력)도 표시합니다. -v를 두 번 지정하면 아직 준비되지 않은 작업 트리의 변경 사항도 표시됩니다 (예 : git diff 출력).</target>
        </trans-unit>
        <trans-unit id="f910ca918e78d6d5c4c84a00c09ba8801ecfde82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awk&lt;/code&gt; reads that as &quot;do the stuff in &lt;code&gt;{}&lt;/code&gt; on lines matching the regex&quot;. By default it assumes whitespace-delimited fields, so you print the second. If you can assume that only the line with your branch has the *, you can drop the ^.  Ah, bash golf!</source>
          <target state="translated">&lt;code&gt;awk&lt;/code&gt; 는 &quot;정규식과 일치하는 행에서 &lt;code&gt;{}&lt;/code&gt; 의 작업을 수행&quot;으로 읽습니다. 기본적으로 공백으로 구분 된 필드를 가정하므로 두 번째 필드를 인쇄합니다. 분기가있는 줄에만 *가 있다고 가정 할 수 있다면 ^를 삭제할 수 있습니다. 아, 배쉬 골프!</target>
        </trans-unit>
        <trans-unit id="6169663f32dce268e09ffd8c1f8dce43a0bd5d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cat .git/HEAD&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;cat .git/HEAD&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6b5cceeee7928ac50f1d3437f8e70932b2d2354b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git branch&lt;/code&gt; show current branch name only.</source>
          <target state="translated">&lt;code&gt;git branch&lt;/code&gt; 현재 분기 이름 만 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f3c5d1be174ef6bb481f0dca227ae92631f66d3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3f8322bb058992ff1c2b17d1b6a10fb0c3bcfa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update&lt;/strong&gt;
This is nicer if you have and aren't scared of awk.</source>
          <target state="translated">&lt;strong&gt;업데이트&lt;/strong&gt; awk가 있고 무서워하지 않으면 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="03e5e8712e4864cb60618e100898a2b73304336f" translate="yes" xml:space="preserve">
          <source>A less noisy version for git status would do the trick</source>
          <target state="translated">자식 상태에 대한 소음이 적은 버전은 트릭을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="42b604dda9377e915bb06c9f2ea6ab51b3da88e8" translate="yes" xml:space="preserve">
          <source>Add it to &lt;code&gt;PS1&lt;/code&gt; using Mac :</source>
          <target state="translated">Mac을 사용하여 &lt;code&gt;PS1&lt;/code&gt; 에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="f32cbba31e2762faa316ec9b380b20ced504064a" translate="yes" xml:space="preserve">
          <source>After running that command :</source>
          <target state="translated">해당 명령을 실행 한 후 :</target>
        </trans-unit>
        <trans-unit id="67594c5d46af809b0fcd12d70fecbd1c4ab97cd6" translate="yes" xml:space="preserve">
          <source>And while I am there, the one liner to get the remote tracking branch (if any)</source>
          <target state="translated">그리고 내가 거기있는 동안, 원격 추적 지점을 얻는 하나의 라이너 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="bbeb2683d9854477aa71e38e54e434fc51d8d075" translate="yes" xml:space="preserve">
          <source>As of version 2.22 of git you could just use:</source>
          <target state="translated">git 버전 2.22부터는 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a58e8469a81529fe2ebba444d66dec21fac1ae50" translate="yes" xml:space="preserve">
          <source>As per man page:</source>
          <target state="translated">매뉴얼 페이지에 따라 :</target>
        </trans-unit>
        <trans-unit id="605e334d21152dcfd245edad943fffec64e46e75" translate="yes" xml:space="preserve">
          <source>Before running the command above :</source>
          <target state="translated">위의 명령을 실행하기 전에 :</target>
        </trans-unit>
        <trans-unit id="13c7cbaf068750a9941ceea308e0b1ee9c03eabe" translate="yes" xml:space="preserve">
          <source>Both should give the same branch name if you're on a branch. If you're on a detached head answers differ.</source>
          <target state="translated">지점에있는 경우 둘 다 동일한 지점 이름을 지정해야합니다. 당신이 분리 된 머리에 있다면 답변이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="66e0e16d65c1d0ba586ca0dae4f213b79d0e1f3b" translate="yes" xml:space="preserve">
          <source>But with Git I'm not sure when I am editing a file in NetBeans or Notepad++, whether it's tied to the master or another branch.</source>
          <target state="translated">그러나 Git을 사용하면 NetBeans 또는 Notepad ++에서 파일을 마스터 또는 다른 브랜치에 묶었는지 여부를 편집 할 때 확실하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3dc80232de3d727f397efbb04c5d2fb0a0288dc7" translate="yes" xml:space="preserve">
          <source>Dont worry, if it is not GIT repository , it will not display error because of &lt;code&gt;[-d .git]&lt;/code&gt; which checks if &lt;code&gt;.git&lt;/code&gt; folder exists or not.</source>
          <target state="translated">GIT 저장소가 아닌 경우 걱정하지 마십시오. &lt;code&gt;.git&lt;/code&gt; 폴더가 있는지 확인하는 &lt;code&gt;[-d .git]&lt;/code&gt; 때문에 오류가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="60ee0f501d6609a7b80726ce97530442d7de5c3a" translate="yes" xml:space="preserve">
          <source>Edit your .bashrc with &lt;code&gt;sudo nano ~/.bashrc&lt;/code&gt; command (for Ubuntu) and add the following to the top:</source>
          <target state="translated">&lt;code&gt;sudo nano ~/.bashrc&lt;/code&gt; 명령으로 .bashrc를 편집하고 (Ubuntu의 경우) 다음을 맨 위에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="dc37b383da66a13ef33122d989bf602c6e0d7ba3" translate="yes" xml:space="preserve">
          <source>Else, it reads &lt;code&gt;.git/HEAD&lt;/code&gt; file. Next steps depends on its contents:</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;.git/HEAD&lt;/code&gt; 파일을 읽습니다. 다음 단계는 내용에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="844a18267f7570ccd804466117309648571134db" translate="yes" xml:space="preserve">
          <source>Explanation:</source>
          <target state="translated">Explanation:</target>
        </trans-unit>
        <trans-unit id="c669932973df71268e9fb7a787530e80ce9e57f0" translate="yes" xml:space="preserve">
          <source>First, there is special case if &lt;em&gt;rebase&lt;/em&gt; in progress is detected.  Git uses unnamed branch (detached HEAD) during the rebase process to make it atomic, and original branch is saved elsewhere.</source>
          <target state="translated">먼저 진행중인 &lt;em&gt;리베이스&lt;/em&gt; 가 감지되는 경우가 있습니다. Git은 rebase 프로세스 중에 unnamed branch (detached HEAD)를 사용하여 원자로 만들고 원래 branch는 다른 곳에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="6f84f275a5d07fac75784083a2c365df609e10c1" translate="yes" xml:space="preserve">
          <source>For my own reference (but it might be useful to others) I made an overview of most (basic command line) techniques mentioned in this thread, each applied to several use cases: HEAD is (pointing at):</source>
          <target state="translated">내 자신의 참조를 위해 (하지만 다른 사람들에게 유용 할 수 있음)이 스레드에서 언급 된 대부분의 (기본 명령 줄) 기술에 대한 개요를 만들었습니다. 각 기술은 여러 가지 사용 사례에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="9128965c45535416829f3ad378d18ae46e46c6ab" translate="yes" xml:space="preserve">
          <source>Found a command line solution of the same length as &lt;a href=&quot;https://stackoverflow.com/a/10014163/1260665&quot;&gt;Oliver Refalo's&lt;/a&gt;, using good ol' awk:</source>
          <target state="translated">좋은 ol 'awk를 사용하여 &lt;a href=&quot;https://stackoverflow.com/a/10014163/1260665&quot;&gt;Oliver Refalo&lt;/a&gt; 와 길이가 같은 명령 줄 솔루션을 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="b8abd50f9025396b3c625116e9ec5006f201c6a4" translate="yes" xml:space="preserve">
          <source>GIT_AUTHOR_EMAIL - Committer/Author Email</source>
          <target state="translated">GIT_AUTHOR_EMAIL-커미터 / 저자 이메일</target>
        </trans-unit>
        <trans-unit id="8426df6d43097326869d676f59343982c47f86fb" translate="yes" xml:space="preserve">
          <source>GIT_BRANCH - Name of the branch currently being used, e.g. &quot;master&quot; or &quot;origin/foo&quot;</source>
          <target state="translated">GIT_BRANCH-현재 사용중인 지점의 이름 (예 : &quot;master&quot;또는 &quot;origin / foo&quot;)</target>
        </trans-unit>
        <trans-unit id="da2682880180dac19b77cfa40d0c8ed095fd4cab" translate="yes" xml:space="preserve">
          <source>GIT_COMMIT - SHA of the current</source>
          <target state="translated">GIT_COMMIT-현재 SHA</target>
        </trans-unit>
        <trans-unit id="6f20f367661c10262d93d4f6777a3c7112b0a0e8" translate="yes" xml:space="preserve">
          <source>GIT_COMMITTER_EMAIL - Committer/Author Email</source>
          <target state="translated">GIT_COMMITTER_EMAIL-커미터 / 저자 이메일</target>
        </trans-unit>
        <trans-unit id="cf1676fc1333e4c56ffbe9da66f03f926fbdfac3" translate="yes" xml:space="preserve">
          <source>GIT_PREVIOUS_COMMIT - SHA of the previous built commit from the same branch (the current SHA on first build in branch)</source>
          <target state="translated">GIT_PREVIOUS_COMMIT-동일한 브랜치에서 이전 빌드 된 커밋의 SHA (브랜치에서 첫 번째 빌드의 현재 SHA)</target>
        </trans-unit>
        <trans-unit id="87dba9cf9923ac7f9160e07d088d9703f88614d6" translate="yes" xml:space="preserve">
          <source>GIT_URL - Repository remote URL</source>
          <target state="translated">GIT_URL-리포지토리 원격 URL</target>
        </trans-unit>
        <trans-unit id="b1a771c71f46483f30cdbf59105a1ef593f37887" translate="yes" xml:space="preserve">
          <source>GIT_URL_N - Repository remote URLs when there are more than 1 remotes, e.g. GIT_URL_1, GIT_URL_2</source>
          <target state="translated">GIT_URL_N-리모트가 둘 이상인 경우 리포지토리 리모트 URL (예 : GIT_URL_1, GIT_URL_2)</target>
        </trans-unit>
        <trans-unit id="87de3402fc5cce2316730d5405a39c96ef1a7ef4" translate="yes" xml:space="preserve">
          <source>How &lt;a href=&quot;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&quot;&gt;git-prompt.sh&lt;/a&gt; from &lt;code&gt;contrib/&lt;/code&gt; does it (git version 2.3.0), as defined in &lt;code&gt;__git_ps1&lt;/code&gt; helper function:</source>
          <target state="translated">&lt;code&gt;__git_ps1&lt;/code&gt; 도우미 함수에 정의 된대로 &lt;code&gt;contrib/&lt;/code&gt; &lt;a href=&quot;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&quot;&gt;git-prompt.sh&lt;/a&gt; 가 수행하는 방법 (git 버전 2.3.0) :</target>
        </trans-unit>
        <trans-unit id="bd2234cca283576ca75aee25f85b40b2e379bb36" translate="yes" xml:space="preserve">
          <source>How to get the current branch name in Git</source>
          <target state="translated">Git에서 현재 브랜치 이름을 얻는 방법</target>
        </trans-unit>
        <trans-unit id="b57d8cb51e4df48a58790f017b0d1a416a4fef99" translate="yes" xml:space="preserve">
          <source>I  know this is late but on a linux/mac ,from the terminal  you can use the following.</source>
          <target state="translated">나는 이것이 늦었지만 리눅스 / 맥에서는 터미널에서 다음을 사용할 수 있다는 것을 알고있다.</target>
        </trans-unit>
        <trans-unit id="02ecd9cb6350ae59f27577d90f2286642fe8a862" translate="yes" xml:space="preserve">
          <source>I have a simple script called &lt;code&gt;git-cbr&lt;/code&gt; (&lt;em&gt;current branch&lt;/em&gt;) which prints out the current branch name.</source>
          <target state="translated">현재 분기 이름을 인쇄하는 &lt;code&gt;git-cbr&lt;/code&gt; ( &lt;em&gt;current branch&lt;/em&gt; )이라는 간단한 스크립트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7453a339ec551688876d7cf172018998ade5f5e" translate="yes" xml:space="preserve">
          <source>I hope that helps.</source>
          <target state="translated">도움이 되길 바랍니다.</target>
        </trans-unit>
        <trans-unit id="7fcace9fc25d584358ba347617e4da0a40fc0a8f" translate="yes" xml:space="preserve">
          <source>I put this script in a custom folder (&lt;code&gt;~/.bin&lt;/code&gt;). The folder is in &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">이 스크립트를 사용자 정의 폴더 ( &lt;code&gt;~/.bin&lt;/code&gt; )에 넣었습니다. 폴더는 &lt;code&gt;$PATH&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="10310fa7b2e92c561df9c5771ec0237f52689c67" translate="yes" xml:space="preserve">
          <source>I recommend using any of these two commands.</source>
          <target state="translated">이 두 명령 중 하나를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="619e41c93dfe5ad3c57ff5c318f5a31358f6f774" translate="yes" xml:space="preserve">
          <source>I use this in scripts that need the current branch name. It will show you the current short symbolic reference to HEAD, which will be your current branch name.</source>
          <target state="translated">현재 분기 이름이 필요한 스크립트에서 이것을 사용합니다. 현재 분기 이름 인 HEAD에 대한 현재 짧은 기호 참조를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="07d367c6a7ef001d37906cd3fdc84ef98ad56b3d" translate="yes" xml:space="preserve">
          <source>I'm from a Subversion background and, when I had a branch, I knew what I was working on with &quot;These working files point to this branch&quot;.</source>
          <target state="translated">저는 Subversion 배경을 가지고 있으며 지점이있을 때 &quot;이 작업 파일이이 지점을 가리키고 있습니다.&quot;</target>
        </trans-unit>
        <trans-unit id="ddcba8f14fe4c553748caa288e7feb373ed4f292" translate="yes" xml:space="preserve">
          <source>If it doesn't start with &lt;code&gt;'ref: '&lt;/code&gt;, then it is detached HEAD (anonymous branch), pointing directly to some commit. Use &lt;code&gt;git describe ...&lt;/code&gt; to write the current commit in human-readable form.</source>
          <target state="translated">&lt;code&gt;'ref: '&lt;/code&gt; 시작하지 않으면 HEAD (익명 브랜치)로 분리되어 커밋을 직접 가리 킵니다. &lt;code&gt;git describe ...&lt;/code&gt; 를 사용하여 현재 커밋을 사람이 읽을 수있는 형식으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="3ed07c096f7118af313f4abdbfa4009664b092ff" translate="yes" xml:space="preserve">
          <source>If it starts with &lt;code&gt;'ref: '&lt;/code&gt; prefix, then &lt;code&gt;.git/HEAD&lt;/code&gt; is symref (symbolic reference), and we are on normal branch.  Strip this prefix to get full name, and strip &lt;code&gt;refs/heads/&lt;/code&gt; to get short name of the current branch:</source>
          <target state="translated">&lt;code&gt;'ref: '&lt;/code&gt; 접두어로 시작하면 &lt;code&gt;.git/HEAD&lt;/code&gt; 는 symref (기호 참조)이며 정상적인 분기에 있습니다. 이 접두사를 제거하여 전체 이름을 얻고 참조 &lt;code&gt;refs/heads/&lt;/code&gt; 를 제거하여 현재 분기의 짧은 이름을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="7e336b5b952c54875dc0f7c7b4c1070bc646a2c4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;.git/HEAD&lt;/code&gt; file is a symbolic link (a very rare case, from the ancient history of Git), it uses &lt;code&gt;git symbolic-ref HEAD 2&amp;gt;/dev/null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.git/HEAD&lt;/code&gt; 파일이 기호 링크 인 경우 (Git의 고대 역사에서 매우 드문 경우) &lt;code&gt;git symbolic-ref HEAD 2&amp;gt;/dev/null&lt;/code&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a34f73e21b8142cd02e3787a9f24b6c4e7f05b4c" translate="yes" xml:space="preserve">
          <source>If this file doesn't exist, then there is no current branch.  This usually happens if the repository is bare.</source>
          <target state="translated">이 파일이 존재하지 않으면 현재 분기가없는 것입니다. 일반적으로 리포지토리가없는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0d3b8966786f1472375b95e3f7b100bf846dad46" translate="yes" xml:space="preserve">
          <source>If you really want the last branch/tag checked out in detached HEAD state as well.</source>
          <target state="translated">마지막 분기 / 태그가 분리 된 HEAD 상태에서도 체크 아웃하려면.</target>
        </trans-unit>
        <trans-unit id="c9e2eebe139108d70c064f223c21bc37dbb0457e" translate="yes" xml:space="preserve">
          <source>If you want to retrieve only the name of the branch you are on, you can do:</source>
          <target state="translated">현재 지점의 이름 만 검색하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="1ddaf919eab835192af5ec00d5b247c1991055aa" translate="yes" xml:space="preserve">
          <source>In Netbeans, ensure that versioning annotations are enabled (View -&amp;gt; Show Versioning
Labels). You can then see the branch name next to project name.</source>
          <target state="translated">Netbeans에서 버전 관리 주석이 사용 가능한지 확인하십시오 (보기-&amp;gt; 버전 레이블 표시). 그런 다음 프로젝트 이름 옆에 지점 이름을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f66963cd193ffdbd511966280e92a2a14f971926" translate="yes" xml:space="preserve">
          <source>It prints out</source>
          <target state="translated">인쇄</target>
        </trans-unit>
        <trans-unit id="99261818f6547b5ed54374d3a2426ea44c25412d" translate="yes" xml:space="preserve">
          <source>Now,</source>
          <target state="translated">Now,</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="85a0e86891f08833d56bc27a54026fa6647589b1" translate="yes" xml:space="preserve">
          <source>OR (more verbose)</source>
          <target state="translated">또는 (더 자세한 정보)</target>
        </trans-unit>
        <trans-unit id="1463f9d236e80b3999b6c9fd3da40eb7615ec4c7" translate="yes" xml:space="preserve">
          <source>On Git v1.7+ you can also do:</source>
          <target state="translated">Git v1.7 +에서는 다음을 수행 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd221d3e942e9c5d6a5ab57fb1fa3a478f96948b" translate="yes" xml:space="preserve">
          <source>On an earlier client, this seems to work:</source>
          <target state="translated">이전 클라이언트에서는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f98636865293eb46c55167f19522d9f00339f265" translate="yes" xml:space="preserve">
          <source>One more alternative:</source>
          <target state="translated">하나 더 대안 :</target>
        </trans-unit>
        <trans-unit id="2d5001df4c420a27aeb8f1460a5e5f335f0443cc" translate="yes" xml:space="preserve">
          <source>Open your terminal (ctrl-alt-t) and enter the commands</source>
          <target state="translated">터미널을 열고 (ctrl-alt-t) 명령을 입력하십시오</target>
        </trans-unit>
        <trans-unit id="92505d253eed8422f020d662afdef1e2bb497077" translate="yes" xml:space="preserve">
          <source>Over time, we might have a really long list of branches.</source>
          <target state="translated">시간이 지남에 따라 우리는 정말 긴 지점 목록을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="390fcf6665394474a4208236397a723ae5bbd841" translate="yes" xml:space="preserve">
          <source>Print the name of the current branch. In detached HEAD state, nothing is printed.</source>
          <target state="translated">현재 지점의 이름을 인쇄하십시오. 분리 된 HEAD 상태에서는 아무 것도 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45c3dc1c7731c6185824876ed514e54f71bacb64" translate="yes" xml:space="preserve">
          <source>Reference:</source>
          <target state="translated">Reference:</target>
        </trans-unit>
        <trans-unit id="7219e206d564fb2b7dd369cb03d9b47b3c933b09" translate="yes" xml:space="preserve">
          <source>Response to the above command will look as follows:</source>
          <target state="translated">위 명령에 대한 응답은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fd19e6d6cb4b26b0ef86cb95d8b5872a311f4828" translate="yes" xml:space="preserve">
          <source>Results:</source>
          <target state="translated">Results:</target>
        </trans-unit>
        <trans-unit id="89d4908007e5d3cd39a8eb471738e7cff0167c6c" translate="yes" xml:space="preserve">
          <source>Returns either branch name or SHA1 when on detached head:</source>
          <target state="translated">분리 된 헤드에있을 때 분기 이름 또는 SHA1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f4d247abdde4a1ac9551ab9c7fdcced163f568be" translate="yes" xml:space="preserve">
          <source>Show just the current branch in Git (Sep 2009)</source>
          <target state="translated">Git의 현재 지점 만 표시 (2009 년 9 월)</target>
        </trans-unit>
        <trans-unit id="0e02c56b5a3c9e558f119f89eea7afd80f2321ac" translate="yes" xml:space="preserve">
          <source>So now when I'm in a git repo, I just simply type &lt;code&gt;git cbr&lt;/code&gt; to print out the current branch name.</source>
          <target state="translated">이제 git repo에있을 때 &lt;code&gt;git cbr&lt;/code&gt; 을 입력하여 현재 분기 이름을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="7331bb621ea97ca6a384f2f5c5900a671bb7a13b" translate="yes" xml:space="preserve">
          <source>Sorry this is another command-line answer, but that's what I was looking for when I found this question and many of these answers were helpful. My solution is the following bash shell function:</source>
          <target state="translated">죄송합니다. 이것은 또 다른 명령 줄 답변이지만,이 질문을 찾았을 때 제가 찾던 것입니다. 많은 답변이 도움이되었습니다. 내 솔루션은 다음 bash 쉘 함수입니다.</target>
        </trans-unit>
        <trans-unit id="d688e182d41fe098b1e0cac6d042ffa2e6f3b670" translate="yes" xml:space="preserve">
          <source>The following shell command tells you the branch that you are currently in.</source>
          <target state="translated">다음 쉘 명령은 현재있는 지점을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="52e0b6ffb6c0eace73206f823c72f7829763e773" translate="yes" xml:space="preserve">
          <source>The git plugin sets several environment variables you can use in your scripts:</source>
          <target state="translated">git 플러그인은 스크립트에서 사용할 수있는 몇 가지 환경 변수를 설정합니다 :</target>
        </trans-unit>
        <trans-unit id="64879d6216add4a11b0e4e0342d763da17c1eb15" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version v1 format.</source>
          <target state="translated">version 매개 변수는 형식 버전을 지정하는 데 사용됩니다. 이것은 선택 사항이며 기본값은 원래 버전 v1 형식입니다.</target>
        </trans-unit>
        <trans-unit id="e4698fd2770221138d40ad62b70b38e72fed3ab1" translate="yes" xml:space="preserve">
          <source>Then paste the code</source>
          <target state="translated">그런 다음 코드를 붙여</target>
        </trans-unit>
        <trans-unit id="10378fc15bb4cdd59537d7c94841a65bb996038b" translate="yes" xml:space="preserve">
          <source>There's no problem with &lt;code&gt;git&lt;/code&gt; in bash, it tells me what I'm doing.</source>
          <target state="translated">bash의 &lt;code&gt;git&lt;/code&gt; 에는 아무런 문제가 없으며 내가하고있는 일을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="59e1311da91c5c09aa2bc73654e368b11e1d32bd" translate="yes" xml:space="preserve">
          <source>This is a short version of @dmaestro12's answer and without tag support.</source>
          <target state="translated">이것은 @ dmaestro12의 답변의 짧은 버전이며 태그 지원이 없습니다.</target>
        </trans-unit>
        <trans-unit id="373e0b4920bf317f10262860fb12b612d4d407b5" translate="yes" xml:space="preserve">
          <source>This should always give me something both human-readable and directly usable as an argument to &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">이것은 항상 &lt;code&gt;git checkout&lt;/code&gt; 의 인수로 인간이 읽을 수 있고 직접 사용할 수있는 것을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="109843f163e4dc16ec4ecdab7595b1c59ef55429" translate="yes" xml:space="preserve">
          <source>This works because the &lt;code&gt;git&lt;/code&gt; command takes its first argument and tries to run a script that goes by the name of &lt;code&gt;git-arg1&lt;/code&gt;. For instance, &lt;code&gt;git branch&lt;/code&gt; tries to run a script called &lt;code&gt;git-branch&lt;/code&gt;, etc.</source>
          <target state="translated">이것은 &lt;code&gt;git&lt;/code&gt; 명령이 첫 번째 인수를 사용하고 &lt;code&gt;git-arg1&lt;/code&gt; 이라는 스크립트를 실행하려고하기 때문에 작동합니다. 예를 들어, &lt;code&gt;git branch&lt;/code&gt; 는 &lt;code&gt;git-branch&lt;/code&gt; 등의 스크립트를 실행하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="f3e4e63e660eb801a9739c483443901c4d25e19e" translate="yes" xml:space="preserve">
          <source>To display the current branch you're on, without the other branches listed, you can do the following:</source>
          <target state="translated">다른 분기를 나열하지 않고 현재 분기를 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3c7aa770bf76e0cc17ce474053f61f54f185eaa7" translate="yes" xml:space="preserve">
          <source>To show only the branch name in Git v1.8 and later (thank's to Greg for pointing that out):</source>
          <target state="translated">Git v1.8 이상에서 브랜치 이름 만 표시하려면 (Greg에게 지적 해 주셔서 감사합니다) :</target>
        </trans-unit>
        <trans-unit id="93fcd4a57152e0271d5779a68b63e49982f31e95" translate="yes" xml:space="preserve">
          <source>To show only the branch you are currently on, use:</source>
          <target state="translated">현재있는 지점 만 표시하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3291b6778588949335da75fbc8aa68d8b56233a2" translate="yes" xml:space="preserve">
          <source>Well simple enough, I got it in a one liner (bash)</source>
          <target state="translated">충분히 간단합니다, 나는 하나의 라이너로 얻었습니다 (bash)</target>
        </trans-unit>
        <trans-unit id="6e76d1f2ffabce1382bec289214bdedf37eb7c7d" translate="yes" xml:space="preserve">
          <source>What about this?</source>
          <target state="translated">이건 어때?</target>
        </trans-unit>
        <trans-unit id="0c3a32ed99ad638e132ab4baa53794cc845b581a" translate="yes" xml:space="preserve">
          <source>When you are in branch master and your prompt is &lt;code&gt;$&lt;/code&gt;, you will get &lt;code&gt;* master&lt;/code&gt; as follows.</source>
          <target state="translated">지점 마스터에 있고 프롬프트가 &lt;code&gt;$&lt;/code&gt; 인 경우 다음과 같이 &lt;code&gt;* master&lt;/code&gt; 가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9b46f7ac23c222b5aa87f171360254c0ea572e08" translate="yes" xml:space="preserve">
          <source>When you don't want to type that long command every time you want to know the branch and you are using Bash, give the command a short alias, for example alias &lt;code&gt;cb&lt;/code&gt;, like so.</source>
          <target state="translated">분기를 알고 싶을 때마다 Bash를 사용하고 Bash를 사용할 때마다 긴 명령을 입력하지 않으려면 명령에 짧은 별칭 (예 : alias &lt;code&gt;cb&lt;/code&gt; )을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="92bd46b225ed0f059bfd9df5e04c9d018d0bceff" translate="yes" xml:space="preserve">
          <source>While git branch will show you all branches and highlight the current one with an asterisk, it can be too cumbersome when working with lots of branches.</source>
          <target state="translated">자식 분기는 모든 분기를 표시하고 별표로 현재 분기를 강조 표시하지만 많은 분기를 사용할 때 너무 번거로울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bde276f394eb2ba500fe8e8ea497e95e7471b8f" translate="yes" xml:space="preserve">
          <source>While some of the other solutions are great, Here is what I do (simplified from Jacob's answer):</source>
          <target state="translated">다른 해결책 중 일부는 훌륭하지만 여기에 내가하는 일이 있습니다 (야곱의 대답에서 단순화 됨).</target>
        </trans-unit>
        <trans-unit id="5f481abbbd56d193451e712ff2180ecd753405e2" translate="yes" xml:space="preserve">
          <source>Why not use git-aware shell prompt, which would tell you name of current branch?  &lt;code&gt;git status&lt;/code&gt; also helps.</source>
          <target state="translated">현재 브랜치의 이름을 알려주는 git-aware shell prompt를 사용하지 않는 이유는 무엇입니까? &lt;code&gt;git status&lt;/code&gt; 도 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="71a2a83c51aae333ea92e527bd5cfd612fa69812" translate="yes" xml:space="preserve">
          <source>You can just type in command line (console) on Linux, in the repository directory:</source>
          <target state="translated">Linux의 저장소 디렉토리에서 명령 행 (콘솔)을 입력하면됩니다.</target>
        </trans-unit>
        <trans-unit id="1117579416ac1554004f1ac0bdaed8e014b9c8df" translate="yes" xml:space="preserve">
          <source>You can permanently set up your bash output to show your git-branch name. It is very handy when you work with different branches, no need to type &lt;code&gt;$ git status&lt;/code&gt; all the time. 
Github repo &lt;a href=&quot;https://github.com/jimeh/git-aware-prompt&quot;&gt;git-aware-prompt
&lt;/a&gt;.</source>
          <target state="translated">git-branch 이름을 표시하도록 bash 출력을 영구적으로 설정할 수 있습니다. 다른 분기로 작업 할 때 매우 편리하며 항상 &lt;code&gt;$ git status&lt;/code&gt; 를 입력 할 필요가 없습니다. 깃 허브 저장소 &lt;a href=&quot;https://github.com/jimeh/git-aware-prompt&quot;&gt;git-aware-prompt&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d6135f99d97423e2da41f2756fe24331c30f6a95" translate="yes" xml:space="preserve">
          <source>You have also &lt;code&gt;git symbolic-ref HEAD&lt;/code&gt; which displays the full refspec.</source>
          <target state="translated">전체 참조 스펙을 표시하는 &lt;code&gt;git symbolic-ref HEAD&lt;/code&gt; 도 있습니다.</target>
        </trans-unit>
        <trans-unit id="af8282af0ec9873f986836254e678b40a2afc529" translate="yes" xml:space="preserve">
          <source>all other use cases: SHA of the corresponding commit</source>
          <target state="translated">다른 모든 사용 사례 : 해당 커밋의 SHA</target>
        </trans-unit>
        <trans-unit id="ba14b23bc5b7cba858ea452a901cf283f299abe1" translate="yes" xml:space="preserve">
          <source>all the other use cases: &lt;code&gt;HEAD&lt;/code&gt;</source>
          <target state="translated">다른 모든 사용 사례 : &lt;code&gt;HEAD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08a2c9ab93d430fdc62c6c3ff1244c5a84edd808" translate="yes" xml:space="preserve">
          <source>all the other use cases: &lt;code&gt;fatal: ref HEAD is not a symbolic ref&lt;/code&gt;</source>
          <target state="translated">다른 모든 사용 사례 : &lt;code&gt;fatal: ref HEAD is not a symbolic ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="344f74bd4340bf79ccadc3ff81083ce34866af02" translate="yes" xml:space="preserve">
          <source>and you will see some text, among which something similar to:</source>
          <target state="translated">다음과 유사한 텍스트가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="49805e91290f49e4c63a1327b28ba3c6a8fc1d67" translate="yes" xml:space="preserve">
          <source>at the end of the same file you pasted the installation code into earlier. This will give you the colorized output:</source>
          <target state="translated">동일한 파일의 끝에서 설치 코드를 이전에 붙여 넣었습니다. 이것은 당신에게 컬러 출력을 줄 것입니다 :</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="d07d70ee9e89bd0d6064b52534ce6330c39d8733" translate="yes" xml:space="preserve">
          <source>general detached head (none of the above)</source>
          <target state="translated">일반 분리 헤드 (위의 어느 것도 아님)</target>
        </trans-unit>
        <trans-unit id="067d8b7dda8e8aca8e17a9884ce61642c90f7348" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</source>
          <target state="translated">일반 분리 헤드 : &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e52c0f8100b5149909c39011c911c11db4dfc262" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;(detached from 285f294)&lt;/code&gt;</source>
          <target state="translated">일반 분리 헤드 : &lt;code&gt;(detached from 285f294)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a499d6ec493171e0fdf5c130cdafc39e572d6537" translate="yes" xml:space="preserve">
          <source>general detached head: &lt;code&gt;v1.0.6-5-g2393761&lt;/code&gt;</source>
          <target state="translated">일반 분리 헤드 : &lt;code&gt;v1.0.6-5-g2393761&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7956ee34f5e6aa23b718e2a92bbddecf6a2bcc82" translate="yes" xml:space="preserve">
          <source>git status -&amp;gt; gets the working tree status</source>
          <target state="translated">자식 상태-&amp;gt; 작업 트리 상태를 가져옵니다</target>
        </trans-unit>
        <trans-unit id="6b168004ef1bb6f2f2f5f617c4c6b3fea18b70f0" translate="yes" xml:space="preserve">
          <source>it will tell you on which branch you are on 
there are many commands which are useful some of them are</source>
          <target state="translated">그것은 당신이 어느 브랜치에 있는지 알려줄 것입니다.</target>
        </trans-unit>
        <trans-unit id="cb02ce157d03189be64dbef02da45661fe872b8b" translate="yes" xml:space="preserve">
          <source>local branch (master)</source>
          <target state="translated">현지 지사 (마스터)</target>
        </trans-unit>
        <trans-unit id="26d8333c8270c7c97e9d0051b98eb940f25bb538" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;# On branch master&lt;/code&gt;</source>
          <target state="translated">현지 지점 : &lt;code&gt;# On branch master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b898ed4c9aac56192ac55a5bafb347d7f3b58b4" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;heads/master&lt;/code&gt;</source>
          <target state="translated">현지 지사 : &lt;code&gt;heads/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c631acf519c874e1056faf794719c772fd1bcd93" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;master&lt;/code&gt;</source>
          <target state="translated">현지 지사 : &lt;code&gt;master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d41ea7e2885d8d7905f58b26be248b3b157f2bf" translate="yes" xml:space="preserve">
          <source>local branch: &lt;code&gt;ref: refs/heads/master&lt;/code&gt;</source>
          <target state="translated">지역 지점 : &lt;code&gt;ref: refs/heads/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a38aad08d7af94802c0c3e895b9a45d7d05d936c" translate="yes" xml:space="preserve">
          <source>on a local branch: &lt;code&gt;feature/HS-0001&lt;/code&gt;</source>
          <target state="translated">현지 지사에서 : &lt;code&gt;feature/HS-0001&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0952ab473decb5b399db783ba89cca75521bed1c" translate="yes" xml:space="preserve">
          <source>on a remote branch (detached, not tagged): SHA1</source>
          <target state="translated">원격 브랜치 (분리, 태그 없음) : SHA1</target>
        </trans-unit>
        <trans-unit id="026c0b96bf66660f8fe5a792bfff33e5bce349b3" translate="yes" xml:space="preserve">
          <source>on a tagged commit (detached): &lt;code&gt;v3.29.5&lt;/code&gt;</source>
          <target state="translated">태그가 지정된 커밋 (분리) : &lt;code&gt;v3.29.5&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="712d02977420cb091a7544ec449eaa2c0d923694" translate="yes" xml:space="preserve">
          <source>on any other detached commit: SHA1</source>
          <target state="translated">다른 분리 커밋에서 : SHA1</target>
        </trans-unit>
        <trans-unit id="6fc6097406636c7deae487f45b771f51b3d8496f" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;# HEAD detached at origin/master&lt;/code&gt;</source>
          <target state="translated">원격 추적 분기 (동기화) : &lt;code&gt;# HEAD detached at origin/master&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="961c8185d2ddb3ef10ee6894590037e7196fdad5" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;(detached from origin/master)&lt;/code&gt;</source>
          <target state="translated">원격 추적 지점 (동기화) : &lt;code&gt;(detached from origin/master)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a14f05a3e2a7dc0660b5de035329f6c18f658ffe" translate="yes" xml:space="preserve">
          <source>remote tracking branch (in sync): &lt;code&gt;heads/master&lt;/code&gt; (note: &lt;em&gt;not&lt;/em&gt;&lt;code&gt;remotes/origin/master&lt;/code&gt;)</source>
          <target state="translated">원격 추적 분기 (동기화) : &lt;code&gt;heads/master&lt;/code&gt; (참고 : &lt;code&gt;remotes/origin/master&lt;/code&gt; 아님)</target>
        </trans-unit>
        <trans-unit id="a404ece2f345b188eee4d9deadbd464af625230f" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;# HEAD detached at origin/feature-foo&lt;/code&gt;</source>
          <target state="translated">원격 추적 분기 (동기화되지 않음) : &lt;code&gt;# HEAD detached at origin/feature-foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aaf6c29b71813ed9522a3fb98d6aacf1618c72bb" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;(detached from origin/feature-foo)&lt;/code&gt;</source>
          <target state="translated">원격 추적 분기 (동기화되지 않음) : &lt;code&gt;(detached from origin/feature-foo)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d009af1a7cedf33214619fe45c26e561c33960ee" translate="yes" xml:space="preserve">
          <source>remote tracking branch (not in sync): &lt;code&gt;remotes/origin/feature-foo&lt;/code&gt;</source>
          <target state="translated">원격 추적 분기 (동기화되지 않음) : &lt;code&gt;remotes/origin/feature-foo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4fc5a942988ef133603476b6a65e97800e2181c" translate="yes" xml:space="preserve">
          <source>remote tracking branch, in sync with local branch (origin/master at same commit as master)</source>
          <target state="translated">로컬 지점과 동기화 된 원격 추적 지점 (마스터와 동일한 커밋에서 출처 / 마스터)</target>
        </trans-unit>
        <trans-unit id="aa8557dc1c3a5b8f2b14f93afb3a6f32234255c8" translate="yes" xml:space="preserve">
          <source>remote tracking branch, not in sync with a local branch (origin/feature-foo)</source>
          <target state="translated">로컬 지점과 동기화되지 않은 원격 추적 지점 (원본 / 기능 -foo)</target>
        </trans-unit>
        <trans-unit id="4f7ff2af8e1de45728c969eed837b2a20cf27254" translate="yes" xml:space="preserve">
          <source>sed -n 1p -&amp;gt; gets the first line from the status body</source>
          <target state="translated">sed -n 1p-&amp;gt; 상태 본문에서 첫 번째 줄을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7228acdcd4725e692a7c731c21f1f7bbc81aa905" translate="yes" xml:space="preserve">
          <source>should show all the local branches of your repo. The starred branch is your current branch.</source>
          <target state="translated">리포지토리의 모든 지점을 표시해야합니다. 별표 표시된 지점은 현재 지점입니다.</target>
        </trans-unit>
        <trans-unit id="38a6300145d1e3bb20e7a0c156c7d9433ceb3909" translate="yes" xml:space="preserve">
          <source>submodule (run inside the submodule directory)</source>
          <target state="translated">서브 모듈 (서브 모듈 디렉토리 내에서 실행)</target>
        </trans-unit>
        <trans-unit id="887d5455557da0bb2373bdf3bcf2d84216714ca3" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</source>
          <target state="translated">하위 모듈 : &lt;code&gt;# HEAD detached at 285f294&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a55b6424035b862502a5da73eb80d5d0f93df24" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;(HEAD detached at 285f294)&lt;/code&gt;</source>
          <target state="translated">하위 모듈 : &lt;code&gt;(HEAD detached at 285f294)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d49a44e99a8a9929d71a475a1ec04ef0dc95c984" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;cat: .git/HEAD: Not a directory&lt;/code&gt;</source>
          <target state="translated">하위 모듈 : &lt;code&gt;cat: .git/HEAD: Not a directory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1889ffcd86e56da294aa8359286925721bf87cfc" translate="yes" xml:space="preserve">
          <source>submodule: &lt;code&gt;remotes/origin/HEAD&lt;/code&gt;</source>
          <target state="translated">하위 모듈 : &lt;code&gt;remotes/origin/HEAD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0d770ee7906300b4702e3a6b4665556dcdeb73" translate="yes" xml:space="preserve">
          <source>tag (v1.2.3)</source>
          <target state="translated">태그 (v1.2.3)</target>
        </trans-unit>
        <trans-unit id="300d753fbbf8557bdcec6b781be36d2bc9053b1d" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;# HEAD detached at v1.2.3&lt;/code&gt;</source>
          <target state="translated">태그 : &lt;code&gt;# HEAD detached at v1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85878fdb521bd297845662db6b503591ea08754d" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;(detached from v1.2.3)&lt;/code&gt;</source>
          <target state="translated">태그 : &lt;code&gt;(detached from v1.2.3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e01d0ccb3091af0d364bdf6c1390a113165bdc3" translate="yes" xml:space="preserve">
          <source>tag: &lt;code&gt;v1.2.3&lt;/code&gt;</source>
          <target state="translated">태그 : &lt;code&gt;v1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d7d9fcbb782e111ee7d01ecb8ab58b9e877c0f4" translate="yes" xml:space="preserve">
          <source>which means you are currently on &lt;code&gt;master&lt;/code&gt; branch. If you are editing any file at that moment and it is located in the same local repository (local directory containing the files that are under Git version control management), you are editing file in this branch.</source>
          <target state="translated">이는 현재 &lt;code&gt;master&lt;/code&gt; 지점에 있음을 의미합니다. 그 시점에서 파일을 편집하고 동일한 로컬 리포지토리 (Git 버전 제어 관리하에있는 파일을 포함하는 로컬 디렉토리)에있는 경우이 분기에서 파일을 편집하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bc75c4c10755a31fae0d6434dd0d2a3e59fd7113" translate="yes" xml:space="preserve">
          <source>will also give the branch name along with changes.</source>
          <target state="translated">또한 변경 사항과 함께 지점 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="48fbe719a13a81d89ed21570a514336aa89c4029" translate="yes" xml:space="preserve">
          <source>will show only the branch name</source>
          <target state="translated">지점 이름 만 표시합니다</target>
        </trans-unit>
        <trans-unit id="93c597c2307938133d9d5a821017db1d1c256c7e" translate="yes" xml:space="preserve">
          <source>works, but &lt;em&gt;only&lt;/em&gt; If there are any local changes</source>
          <target state="translated">작동하지만 로컬 변경이있는 경우 &lt;em&gt;에만&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f9a5955bf4f3b51c76efa8fabc361208cbb252e3" translate="yes" xml:space="preserve">
          <source>you  can use git bash on the working directory
command is as follow</source>
          <target state="translated">작업 디렉토리 명령에서 git bash를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30e5fe0314f136950eeb0ee2af3fe4238c07c1ca" translate="yes" xml:space="preserve">
          <source>you can also use GIT_BRANCH variable as appears here:
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&lt;/a&gt; 여기에 표시된대로 GIT_BRANCH 변수를 사용할 수도 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
