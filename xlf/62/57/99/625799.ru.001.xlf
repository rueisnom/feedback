<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/625799">
    <body>
      <group id="625799">
        <trans-unit id="6bb813c68e1859e65e92bca695625c23917445ae" translate="yes" xml:space="preserve">
          <source>...and doing the same in &lt;code&gt;B.h&lt;/code&gt;</source>
          <target state="translated">... и делать то же самое в &lt;code&gt;B.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ba2500b2f0258d476be0e35ff5c00fc8e5284cf" translate="yes" xml:space="preserve">
          <source>...then recompilation of the code for &quot;A&quot; will be triggered by the changes to the included &lt;code&gt;b.fwd.h&lt;/code&gt; and should complete cleanly.</source>
          <target state="translated">... тогда перекомпиляция кода для &quot;A&quot; будет вызвана изменениями во включенном &lt;code&gt;b.fwd.h&lt;/code&gt; и должна завершиться чисто.</target>
        </trans-unit>
        <trans-unit id="f3b65964bdf99cbe98067783c24d8ce3adf9f202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include&lt;/code&gt;, for all extents and purposes (if you take the preprocessor out) just copies the file into the &lt;strong&gt;.cc&lt;/strong&gt;. So really, the &lt;strong&gt;.cc&lt;/strong&gt; looks like:</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; , для всех экстентов и целей (если вы удалите препроцессор) просто копирует файл в &lt;strong&gt;.cc&lt;/strong&gt; . Так что на самом деле &lt;strong&gt;.cc&lt;/strong&gt; выглядит так:</target>
        </trans-unit>
        <trans-unit id="1298eafb968f0e641e677b8ee988ed2825e630ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I'm late answering this, but there's not one reasonable answer to date, despite being a popular question with highly upvoted answers....&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Я опаздываю с ответом на этот вопрос, но на сегодняшний день нет ни одного разумного ответа, несмотря на то, что он является популярным вопросом с высоко голосуемыми ответами&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d85779947a2f80f766ef45cabd10708de8749af" translate="yes" xml:space="preserve">
          <source>And in &lt;strong&gt;B.h&lt;/strong&gt;, at this point, you can just &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; directly.</source>
          <target state="translated">И в &lt;strong&gt;Bh&lt;/strong&gt; , в этот момент, вы можете просто &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; напрямую.</target>
        </trans-unit>
        <trans-unit id="7164b6a015a5b99b1726bcda20563641b04e1413" translate="yes" xml:space="preserve">
          <source>And then, A.h and B.h will contain this:</source>
          <target state="translated">И потом,А.Х.и Б.Х.будут содержать это:</target>
        </trans-unit>
        <trans-unit id="ac1184497beca27b3659c5091326446420c61bde" translate="yes" xml:space="preserve">
          <source>As illustrated by the Standard library's &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; header, the proper way to provide forward declarations for others is to have a &lt;strong&gt;&lt;em&gt;forward declaration header&lt;/em&gt;&lt;/strong&gt;.  For example:</source>
          <target state="translated">Как показано в заголовке &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; Стандартной библиотеки, правильным способом предоставления прямых объявлений для других является наличие &lt;strong&gt;&lt;em&gt;заголовка прямой декларации&lt;/em&gt;&lt;/strong&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="77683cf3abd005f165bb506342d65293c00de62e" translate="yes" xml:space="preserve">
          <source>Best practice: forward declaration headers</source>
          <target state="translated">Передовая практика:заголовки деклараций вперёд</target>
        </trans-unit>
        <trans-unit id="74deff191fda857d68d3bc15f5c93ee8ded3a54f" translate="yes" xml:space="preserve">
          <source>But his illustration is not really good. Because both classes (A and B) only need an incomplete type of each other (pointer fields / parameters).</source>
          <target state="translated">Но его иллюстрация не очень хороша.Потому что оба класса (A и B)нуждаются только в неполном типе друг друга (параметры полей указателей).</target>
        </trans-unit>
        <trans-unit id="75fc1aa2d190377184c20ea93fcb905a3f793550" translate="yes" xml:space="preserve">
          <source>Clearly a circular reference that you must break.</source>
          <target state="translated">Очевидно,круговая ссылка,которую вы должны нарушить.</target>
        </trans-unit>
        <trans-unit id="6040c18d82d48918fbc4d731c452e2e20e0d5ad9" translate="yes" xml:space="preserve">
          <source>Create two files, A_def.h, B_def.h. These will contain only &lt;code&gt;A&lt;/code&gt;'s and &lt;code&gt;B&lt;/code&gt;'s definition:</source>
          <target state="translated">Создайте два файла: A_def.h, B_def.h. Они будут содержать только определения &lt;code&gt;A&lt;/code&gt; и &lt;code&gt;B&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b16ab6892fe30ec91d4d7d0f6987f7846cab18b" translate="yes" xml:space="preserve">
          <source>Doing like this makes it possible to still have a bunch of inlines in both(or multiple) header files. But it's necessary to have &lt;em&gt;include guards&lt;/em&gt;.</source>
          <target state="translated">Поступая так, вы можете иметь несколько строк в обоих (или нескольких) заголовочных файлах. Но необходимо иметь &lt;em&gt;охранников&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="81c16b0b2bc90f7f91e5cf3ee2c0bac5abc351e9" translate="yes" xml:space="preserve">
          <source>File '''a.h''':</source>
          <target state="translated">Файл &quot;а.х.&quot;:</target>
        </trans-unit>
        <trans-unit id="de16fa2ea7929e19489f5e9846b72fe1b89c19c7" translate="yes" xml:space="preserve">
          <source>File '''b.h''':</source>
          <target state="translated">Файл ''b.h'':</target>
        </trans-unit>
        <trans-unit id="387c15524fe17924ad63c766cd614d16ea296e8e" translate="yes" xml:space="preserve">
          <source>File '''main.cpp''':</source>
          <target state="translated">Файл ''main.cpp''':</target>
        </trans-unit>
        <trans-unit id="0dc6dc624e5e946076ade7fdb218e4914345198b" translate="yes" xml:space="preserve">
          <source>Forward declaration is way to go.</source>
          <target state="translated">Форвардное заявление-это путь к успеху.</target>
        </trans-unit>
        <trans-unit id="4607da7704e13445b53226db5ba9a20543b4b49a" translate="yes" xml:space="preserve">
          <source>HTH.</source>
          <target state="translated">HTH.</target>
        </trans-unit>
        <trans-unit id="8c8ca565ab5aa7031937c4de83f510564059d503" translate="yes" xml:space="preserve">
          <source>He is not just saying &quot;put forward declarations into a separate header&quot;. He says that you have to spilt class definition headers and inline function definitions into different header files to allow &quot;defered dependencies&quot;.</source>
          <target state="translated">Он не просто говорит &quot;выдвигать декларации в отдельный заголовок&quot;.Он говорит,что нужно проливать заголовки определений классов и встроенные определения функций в различные заголовочные файлы,чтобы разрешить &quot;отложенные зависимости&quot;.</target>
        </trans-unit>
        <trans-unit id="13b338a7985effc7cabc1733321362ea88780210" translate="yes" xml:space="preserve">
          <source>Here is the solution for templates: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;How to handle circular dependencies with templates&lt;/a&gt;</source>
          <target state="translated">Вот решение для шаблонов: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;Как обрабатывать циклические зависимости с помощью шаблонов&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97511feb4f598817ee61734e3169117c515f2180" translate="yes" xml:space="preserve">
          <source>Here's how you can do this, exactly retaining all the details, and usability:</source>
          <target state="translated">Вот как это можно сделать,точно сохранив все детали и удобство использования:</target>
        </trans-unit>
        <trans-unit id="20f3c7e77b0608d75066808c459e2e9945b5daa9" translate="yes" xml:space="preserve">
          <source>How can I create two classes that both know about each other?</source>
          <target state="translated">Как создать два класса,которые оба знают друг о друге?</target>
        </trans-unit>
        <trans-unit id="c6d2a1cd051f34708d70b7656212532a2164b343" translate="yes" xml:space="preserve">
          <source>I often find myself in a situation where I am facing multiple compilation/linker errors in a C++ project due to some bad design decisions (made by someone else :) ) which lead to circular dependencies between C++ classes in different header files &lt;em&gt;(can happen also in the same file)&lt;/em&gt;. But fortunately(?) this doesn't happen often enough for me to remember the solution to this problem for the next time it happens again.</source>
          <target state="translated">Я часто нахожусь в ситуации, когда я сталкиваюсь с множественными ошибками компиляции / компоновки в проекте C ++ из-за некоторых неудачных проектных решений (принятых кем-то другим :)), которые приводят к циклическим зависимостям между классами C ++ в различных заголовочных файлах &lt;em&gt;(также может произойти в том же файле)&lt;/em&gt; . Но, к счастью (?), Это происходит не так часто, чтобы я мог вспомнить решение этой проблемы, когда в следующий раз это случится снова.</target>
        </trans-unit>
        <trans-unit id="b1a6b70bdc70c07e677f7773e517919114388c46" translate="yes" xml:space="preserve">
          <source>I once solved this kind of problem by moving all &lt;em&gt;inlines&lt;/em&gt; after the class definition and putting the &lt;code&gt;#include&lt;/code&gt; for the other classes just before the &lt;em&gt;inlines&lt;/em&gt; in the header file. This way one make sure all definitions+inlines are set prior the inlines are parsed.</source>
          <target state="translated">Однажды я решил эту проблему, переместив все &lt;em&gt;строки&lt;/em&gt; после определения класса и поместив &lt;code&gt;#include&lt;/code&gt; для других классов непосредственно перед &lt;em&gt;строками&lt;/em&gt; в заголовочном файле. Таким образом, убедитесь, что все определения + строки заданы до анализа строк.</target>
        </trans-unit>
        <trans-unit id="da2fc2402ebf6a219d39046e92bd6af32dfb31c9" translate="yes" xml:space="preserve">
          <source>I've written a post about this once: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Resolving circular dependencies in c++&lt;/a&gt;</source>
          <target state="translated">Я написал пост об этом однажды: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Разрешение циклических зависимостей в C ++&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cece9a731862164a65c9b4dce98bf7a4d58cb7da" translate="yes" xml:space="preserve">
          <source>If A's code has template specialisations / &quot;traits&quot; for the old &lt;code&gt;B&lt;/code&gt;, they won't take effect.</source>
          <target state="translated">Если код А имеет шаблонные специализации / &amp;laquo;черты&amp;raquo; для старого &lt;code&gt;B&lt;/code&gt; , они не вступят в силу.</target>
        </trans-unit>
        <trans-unit id="8c6b9b3d6a6df2e72dccf31147c614f0473001ee" translate="yes" xml:space="preserve">
          <source>If both classes call functions of the other, you have to move the definitions out.</source>
          <target state="translated">Если оба класса вызывают функции другого класса,необходимо вывести определения.</target>
        </trans-unit>
        <trans-unit id="95c4bb8d12a4563a8e0aaf52f1e8dff97f93cf47" translate="yes" xml:space="preserve">
          <source>Imagine you are writing a compiler. And you see code like this.</source>
          <target state="translated">Представьте,что вы пишете компилятор.И вы видите такой код.</target>
        </trans-unit>
        <trans-unit id="b6adf836b15b71e6d4a4faf8d4b7c043a030e6fa" translate="yes" xml:space="preserve">
          <source>In some cases it is possible to &lt;em&gt;define&lt;/em&gt; a method or a constructor of class B in the header file of class A to resolve circular dependencies involving definitions.
In this way you can avoid having to put definitions in &lt;code&gt;.cc&lt;/code&gt; files, for example if you want to implement a header only library.</source>
          <target state="translated">В некоторых случаях можно &lt;em&gt;определить&lt;/em&gt; метод или конструктор класса B в заголовочном файле класса A для разрешения циклических зависимостей, включающих определения. Таким образом, вы можете избежать необходимости помещать определения в файлы &lt;code&gt;.cc&lt;/code&gt; , например, если вы хотите реализовать библиотеку только с заголовками.</target>
        </trans-unit>
        <trans-unit id="74f6724118fdf9e8782645d9c398335943723329" translate="yes" xml:space="preserve">
          <source>It would result in the following code:</source>
          <target state="translated">Это приведет к следующему коду:</target>
        </trans-unit>
        <trans-unit id="99e48bd024350ae66199fb4bdc8f9ce56482b3cb" translate="yes" xml:space="preserve">
          <source>Like this</source>
          <target state="translated">Вот так</target>
        </trans-unit>
        <trans-unit id="06b204a42dd43a60a1edbdaff87caff360918ad7" translate="yes" xml:space="preserve">
          <source>Note that A_def.h and B_def.h are &quot;private&quot; headers, users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; should not use them. The public header is A.h and B.h.</source>
          <target state="translated">Обратите внимание, что A_def.h и B_def.h являются &amp;laquo;частными&amp;raquo; заголовками, пользователи &lt;code&gt;A&lt;/code&gt; и &lt;code&gt;B&lt;/code&gt; не должны их использовать. Публичный заголовок - А и Б</target>
        </trans-unit>
        <trans-unit id="421e787d5be309f635285a9fa87fc31b0c2c7573" translate="yes" xml:space="preserve">
          <source>Now things are better. Somewhat. &lt;code&gt;main()&lt;/code&gt; still says:</source>
          <target state="translated">Теперь все стало лучше. В некотором роде. &lt;code&gt;main()&lt;/code&gt; все еще говорит:</target>
        </trans-unit>
        <trans-unit id="5522389abcdcb2f44350da49c971b70e49fc26a7" translate="yes" xml:space="preserve">
          <source>Order of declaration matters (which is why you are moving out the definitions).</source>
          <target state="translated">Порядок декларирования имеет значение (именно поэтому вы убираете определения).</target>
        </trans-unit>
        <trans-unit id="772ed62a5348f7500932ae3d7afc2e74c082ead4" translate="yes" xml:space="preserve">
          <source>Poor but common practice: forward declare stuff in other libs</source>
          <target state="translated">Плохая,но распространенная практика:форвардные объявления в других либах.</target>
        </trans-unit>
        <trans-unit id="517081acc1bfe64dad04fd896e5e967ccd952c46" translate="yes" xml:space="preserve">
          <source>Read the FAQ:</source>
          <target state="translated">Читайте Часто задаваемые вопросы:</target>
        </trans-unit>
        <trans-unit id="2309355c3ea8f996a00fa38198819142da113849" translate="yes" xml:space="preserve">
          <source>Resolve build errors due to circular dependency amongst classes</source>
          <target state="translated">Решить ошибки сборки из-за круговой зависимости между классами</target>
        </trans-unit>
        <trans-unit id="dcd4d8fc79d1043fddd5ad14508f46729fb0455a" translate="yes" xml:space="preserve">
          <source>Say - instead of using a forward declaration header as explained above - code in &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; instead forward-declares &lt;code&gt;class B;&lt;/code&gt; itself:</source>
          <target state="translated">Скажем - вместо использования заголовка прямого объявления, как объяснено выше - код в &lt;code&gt;a.h&lt;/code&gt; или &lt;code&gt;a.cc&lt;/code&gt; вместо прямого объявления &lt;code&gt;class B;&lt;/code&gt; сам:</target>
        </trans-unit>
        <trans-unit id="621dd8cec0802a26dd1824800d7292b9666ba339" translate="yes" xml:space="preserve">
          <source>So for the purposes of easy recall in the future I am going to post a representative problem and a solution along with it. Better solutions are of-course welcome.</source>
          <target state="translated">Поэтому,чтобы в будущем легко было вспомнить,я поставлю репрезентативную проблему и решение вместе с ней.Лучшие решения,конечно же,приветствуются.</target>
        </trans-unit>
        <trans-unit id="918271f6bede6bfd0286c73dd240da7cc1429f01" translate="yes" xml:space="preserve">
          <source>So let's tell the compiler about &lt;code&gt;B&lt;/code&gt;. This is known as a &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;forward declaration&lt;/a&gt;, and is discussed further in &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">Итак, давайте расскажем компилятору о &lt;code&gt;B&lt;/code&gt; . Это известно как предварительная &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;декларация&lt;/a&gt; и обсуждается далее в &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;этом ответе&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f30ee659c9eb0d399d76133970197e5e7745d6b" translate="yes" xml:space="preserve">
          <source>The basic technique is to decouple the classes using interfaces. So in your case:</source>
          <target state="translated">Основная методика заключается в развязывании классов с помощью интерфейсов.Так что в вашем случае:</target>
        </trans-unit>
        <trans-unit id="76cb7d14f4106dab17b2a3411cce1aeb9af6d4c1" translate="yes" xml:space="preserve">
          <source>The clue to solving this problem is to declare both classes before providing the definitions (implementations). It&amp;rsquo;s not possible to split the declaration and definition into separate files, but you can structure them as if they were in separate files.</source>
          <target state="translated">Ключом к решению этой проблемы является объявление обоих классов перед предоставлением определений (реализаций). Невозможно разделить объявление и определение на отдельные файлы, но вы можете структурировать их, как если бы они были в отдельных файлах.</target>
        </trans-unit>
        <trans-unit id="964876ba5525b8da7c2b18a45e74b2efe3110bdf" translate="yes" xml:space="preserve">
          <source>The down side of the following solution is (assuming that you had placed the methods in the header file to inline them) that the methods are no longer inlined by the compiler and trying to use the inline keyword produces linker errors.</source>
          <target state="translated">Недостатком следующего решения является то (предполагая,что вы поместили методы в заголовочный файл для встраивания в него),что методы больше не встраиваются компилятором,и попытка использовать ключевое слово встраивания приводит к ошибкам компоновщика.</target>
        </trans-unit>
        <trans-unit id="3785912cdfe31e3ef7ee69bb9533f28f410f1984" translate="yes" xml:space="preserve">
          <source>The maintainers of the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; libraries should each be responsible for keeping their forward declaration headers in sync with their headers and implementation files, so - for example - if the maintainer of &quot;B&quot; comes along and rewrites the code to be...</source>
          <target state="translated">Каждый из сопровождающих библиотек &lt;code&gt;A&lt;/code&gt; и &lt;code&gt;B&lt;/code&gt; должен отвечать за синхронизацию заголовков прямого объявления со своими заголовками и файлами реализации, например, если сопровождающий &amp;laquo;B&amp;raquo; придет и переписает код, чтобы он был ...</target>
        </trans-unit>
        <trans-unit id="03de7e5e237e1dfc343937c7767442570b591bae" translate="yes" xml:space="preserve">
          <source>The reason this fix is bad is because the next person to &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; will have to declare &lt;code&gt;B&lt;/code&gt; before they can use it and will get a terrible &lt;code&gt;#include&lt;/code&gt; error. So let's move the declaration into &lt;strong&gt;A.h&lt;/strong&gt; itself.</source>
          <target state="translated">Причина, по которой это исправление плохое, заключается в том, что следующий человек, который &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; должен будет объявить &lt;code&gt;B&lt;/code&gt; , прежде чем сможет его использовать, и получит ужасную ошибку &lt;code&gt;#include&lt;/code&gt; . Итак, давайте перенесем декларацию в себя.</target>
        </trans-unit>
        <trans-unit id="9db328ea36a8dea61565be6561a6fa8ba17f27d1" translate="yes" xml:space="preserve">
          <source>The simple example presented on Wikipedia worked for me.
(you can read the complete description at &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</source>
          <target state="translated">Простой пример, представленный в Википедии, работал на меня. (вы можете прочитать полное описание на &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="726a148f2714a29f2b81e70df9012bf68874e4e1" translate="yes" xml:space="preserve">
          <source>The way to think about this is to &quot;think like a compiler&quot;.</source>
          <target state="translated">Думать об этом нужно &quot;думать как компилятор&quot;.</target>
        </trans-unit>
        <trans-unit id="d02efca86e66ddac497e623f13ad84f059c26ada" translate="yes" xml:space="preserve">
          <source>Things to remember:</source>
          <target state="translated">Вещи,которые нужно запомнить:</target>
        </trans-unit>
        <trans-unit id="677d178e50c7529e22802741eca44b5a4d630ea1" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;works&lt;/em&gt;. It is not &lt;em&gt;great&lt;/em&gt;. But at this point you should have an understanding of the circular reference problem and what we did to &quot;fix&quot; it, albeit the fix is bad.</source>
          <target state="translated">Это &lt;em&gt;работает&lt;/em&gt; Это не &lt;em&gt;здорово&lt;/em&gt; . Но в этот момент у вас должно быть понимание проблемы циклических ссылок и того, что мы сделали, чтобы &amp;laquo;исправить&amp;raquo; ее, хотя это и исправление плохо.</target>
        </trans-unit>
        <trans-unit id="0d05028a139bfbdc640ca995cdae5b0e9170344a" translate="yes" xml:space="preserve">
          <source>This code does not compile because B::Do needs a complete type of A which is defined later.</source>
          <target state="translated">Этот код не компилируется,потому что B::Do нужен полный тип A,который будет определен позже.</target>
        </trans-unit>
        <trans-unit id="e408199cdeea50714b0aa0fe985cbf1eb9e19850" translate="yes" xml:space="preserve">
          <source>This directive should defer the processing of the current file and complete all pending includes.</source>
          <target state="translated">Эта директива должна отложить обработку текущего файла и завершить все отложенные включения.</target>
        </trans-unit>
        <trans-unit id="889c7f1b4663e1318562106d30f679e883e3e711" translate="yes" xml:space="preserve">
          <source>This is exactly possible with these two header files for each class wich needs to define inline functions.
The only issue is that the circular classes can't just include the &quot;public header&quot;.</source>
          <target state="translated">Это точно возможно с этими двумя заголовочными файлами для каждого класса,которым необходимо определить inline функции.Единственная проблема заключается в том,что циклические классы не могут просто включать &quot;публичный заголовок&quot;.</target>
        </trans-unit>
        <trans-unit id="781b08e9652d1374708b49eb627b045b2e7a40fc" translate="yes" xml:space="preserve">
          <source>This simple code would not work:</source>
          <target state="translated">Этот простой код не сработает:</target>
        </trans-unit>
        <trans-unit id="88ffd7e2f24612377695e3d257fa460de5ac406c" translate="yes" xml:space="preserve">
          <source>This won't work if &lt;code&gt;class A&lt;/code&gt; has an object of &lt;code&gt;class B&lt;/code&gt; as a member or vice versa.</source>
          <target state="translated">Это не будет работать, если &lt;code&gt;class A&lt;/code&gt; имеет объект &lt;code&gt;class B&lt;/code&gt; в качестве члена или наоборот.</target>
        </trans-unit>
        <trans-unit id="b923ee0d714b0e4db9a18d6fae060d4f0c4c7f31" translate="yes" xml:space="preserve">
          <source>To make sure that it compiles the source code should look like this:</source>
          <target state="translated">Чтобы убедиться,что он компилирует исходный код должен выглядеть так:</target>
        </trans-unit>
        <trans-unit id="14a94b58b2296c47a62b7815c3f2cee32b940bb0" translate="yes" xml:space="preserve">
          <source>To solve this issue I would like to suggest a preprocessor extension: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</source>
          <target state="translated">Чтобы решить эту проблему, я хотел бы предложить расширение препроцессора: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5128f234d09a3ac6cd4efa0b4d8bca399c480210" translate="yes" xml:space="preserve">
          <source>To understand it better imagine that class A has a field of type B not B*. In addition class A and B want to define an inline function with parameters of the other type:</source>
          <target state="translated">Чтобы понять это,лучше представить себе,что класс A имеет поле типа B,а не B*.Кроме того,класс A и B хотят определить inline функцию с параметрами другого типа:</target>
        </trans-unit>
        <trans-unit id="c1c080399aaa5f1044d101f7c55fa5c28cfd080b" translate="yes" xml:space="preserve">
          <source>Unfortunately I can't comment the answer from geza.</source>
          <target state="translated">К сожалению,я не могу прокомментировать ответ Гезы.</target>
        </trans-unit>
        <trans-unit id="2cb3cf90eb4311dac6ef7e6db021df01a4e8510d" translate="yes" xml:space="preserve">
          <source>Unfortunately, all the previous answers are missing some details. The correct solution is a little bit cumbersome, but this is the only way to do it properly. And it scales easily, handles more complex dependencies as well.</source>
          <target state="translated">К сожалению,во всех предыдущих ответах не хватает некоторых деталей.Правильное решение немного громоздко,но это единственный способ сделать это правильно.И оно легко масштабируется,справляется и с более сложными зависимостями.</target>
        </trans-unit>
        <trans-unit id="1e45dba7c7024685dc4586b56849004ec847bda5" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with inline functions?</source>
          <target state="translated">Какие особые соображения необходимо учитывать при использовании прямых деклараций с встраиваемыми функциями?</target>
        </trans-unit>
        <trans-unit id="92b1bad012b996a0bc6851c2bfca4e5dbbb401a3" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with member objects?</source>
          <target state="translated">Какие особые соображения необходимо учитывать при использовании форвардных заявлений с объектами членов?</target>
        </trans-unit>
        <trans-unit id="e240359c6981a1b2612797039e784ab3a7e60fd6" translate="yes" xml:space="preserve">
          <source>When you are compiling the &lt;strong&gt;.cc&lt;/strong&gt; file (remember that the &lt;strong&gt;.cc&lt;/strong&gt; and not the &lt;strong&gt;.h&lt;/strong&gt; is the unit of compilation), you need to allocate space for object &lt;code&gt;A&lt;/code&gt;. So, well, how much space then? Enough to store &lt;code&gt;B&lt;/code&gt;! What's the size of &lt;code&gt;B&lt;/code&gt; then? Enough to store &lt;code&gt;A&lt;/code&gt;! Oops.</source>
          <target state="translated">Когда вы компилируете файл &lt;strong&gt;.cc&lt;/strong&gt; (помните, что &lt;strong&gt;.cc,&lt;/strong&gt; а не &lt;strong&gt;.h&lt;/strong&gt; - это единица компиляции), вам нужно выделить место для объекта &lt;code&gt;A&lt;/code&gt; . Итак, сколько же тогда места? Хватит хранить &lt;code&gt;B&lt;/code&gt; ! Каков размер &lt;code&gt;B&lt;/code&gt; тогда? Хватит хранить &lt;code&gt;A&lt;/code&gt; ! К сожалению.</target>
        </trans-unit>
        <trans-unit id="2e7cdfc5bd5d6d6eb4f7c32ffb09ee264781d06a" translate="yes" xml:space="preserve">
          <source>You can avoid compilation errors if you remove the method definitions from the header files and let the classes contain only the method declarations and variable declarations/definitions. The method definitions should be placed in a .cpp file (just like a best practice guideline says).</source>
          <target state="translated">Ошибок компиляции можно избежать,если удалить определения методов из заголовочных файлов и позволить классам содержать только объявления методов и определения переменных.Определения методов должны быть помещены в .cpp-файл (так же,как сказано в руководстве по лучшей практике).</target>
        </trans-unit>
        <trans-unit id="dd91a98542fc87ffc1090838a46ff06e65953c16" translate="yes" xml:space="preserve">
          <source>You can break it by allowing the compiler to instead reserve as much space as it knows about upfront - pointers and references, for example, will always be 32 or 64 bits (depending on the architecture) and so if you replaced (either one) by a pointer or reference, things would be great. Let's say we replace in &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">Вы можете сломать его, позволив компилятору зарезервировать столько места, сколько он знает о начальном этапе - например, указатели и ссылки всегда будут 32 или 64 битами (в зависимости от архитектуры), и поэтому, если вы заменили (любой из них) на указатель или ссылка, все было бы здорово. Допустим, мы заменим в &lt;code&gt;A&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58dd4fc03b3183d34495adb76c399fa4c23906e0" translate="yes" xml:space="preserve">
          <source>You can see why the compiler can't deal with this - it has no idea what &lt;code&gt;B&lt;/code&gt; is - it has never even seen the symbol before.</source>
          <target state="translated">Вы можете понять, почему компилятор не может справиться с этим - он понятия не имеет, что такое &lt;code&gt;B&lt;/code&gt; , - он никогда даже не видел символ раньше.</target>
        </trans-unit>
        <trans-unit id="334716d86bd9d03a9b1ca74f4acae1d373b51013" translate="yes" xml:space="preserve">
          <source>a.fwd.h:</source>
          <target state="translated">a.fwd.h:</target>
        </trans-unit>
        <trans-unit id="5cb1315d250ae93e604c5200c412e1ce59bd335a" translate="yes" xml:space="preserve">
          <source>a.h:</source>
          <target state="translated">a.h:</target>
        </trans-unit>
        <trans-unit id="9b217404d46524413c5e8204995ad0e799490a4b" translate="yes" xml:space="preserve">
          <source>b.fwd.h:</source>
          <target state="translated">b.fwd.h:</target>
        </trans-unit>
        <trans-unit id="7b01869b936c6f06b0b65bfbcc2eaf8a238f6400" translate="yes" xml:space="preserve">
          <source>b.h:</source>
          <target state="translated">b.h:</target>
        </trans-unit>
        <trans-unit id="64566382bb3e54d62d59cdd32e72baee64249f2e" translate="yes" xml:space="preserve">
          <source>build tools relying on &lt;code&gt;#include&lt;/code&gt; analysis and changed file timestamps won't rebuild &lt;code&gt;A&lt;/code&gt; (and its further-dependent code) after the change to B, causing errors at link time or run time.  If B is distributed as a runtime loaded DLL, code in &quot;A&quot; may fail to find the differently-mangled symbols at runtime, which may or may not be handled well enough to trigger orderly shutdown or acceptably reduced functionality.</source>
          <target state="translated">Инструменты сборки, основанные на анализе &lt;code&gt;#include&lt;/code&gt; и измененных временных метках файлов, не будут перестраивать &lt;code&gt;A&lt;/code&gt; (и его дополнительный зависимый код) после изменения на B, вызывая ошибки во время соединения или выполнения. Если B распространяется как библиотека, загруженная во время выполнения, код в &amp;laquo;A&amp;raquo; может не найти символы с различными искажениями во время выполнения, что может или не может быть обработано достаточно хорошо, чтобы вызвать упорядоченное завершение работы или приемлемо сниженную функциональность.</target>
        </trans-unit>
        <trans-unit id="d1ee4e91278afe33a3ee30ba9b7a04c3ef83a1f0" translate="yes" xml:space="preserve">
          <source>compilation of A will terminate with an error once it gets to the conflicting declaration/definition of &lt;code&gt;B&lt;/code&gt; (i.e. the above change to B broke A and any other clients abusing forward declarations, instead of working transparently).</source>
          <target state="translated">компиляция A завершится с ошибкой, как только она попадет в конфликтующее объявление / определение &lt;code&gt;B&lt;/code&gt; (то есть указанное выше изменение B сломало A и любые другие клиенты, злоупотребляющие предварительными объявлениями, вместо того, чтобы работать прозрачно).</target>
        </trans-unit>
        <trans-unit id="f9048fd12b1e61b10c0a533226d367f5f45f59ca" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; did include &lt;code&gt;b.h&lt;/code&gt; later:</source>
          <target state="translated">если &lt;code&gt;a.h&lt;/code&gt; или &lt;code&gt;a.cc&lt;/code&gt; включили чч позже:</target>
        </trans-unit>
        <trans-unit id="aa6f7b44888bbdbecec2dd011d394e881b515ef4" translate="yes" xml:space="preserve">
          <source>inline functions still inline</source>
          <target state="translated">встроенные функции</target>
        </trans-unit>
        <trans-unit id="99401692aa69fba656f0bcf654657ddc1f88b0cf" translate="yes" xml:space="preserve">
          <source>otherwise (if A didn't eventually include &lt;code&gt;b.h&lt;/code&gt; - possible if A just stores/passes around Bs by pointer and/or reference)</source>
          <target state="translated">в противном случае (если A в конечном итоге не включает &lt;code&gt;b.h&lt;/code&gt; - возможно, если A просто хранит / передает Bs по указателю и / или ссылке)</target>
        </trans-unit>
        <trans-unit id="63e287eac53f9dc1ae4fa91bc6f97afded9483ca" translate="yes" xml:space="preserve">
          <source>the solution is exactly the same as originally intended</source>
          <target state="translated">решение точно такое же,как и предполагалось изначально</target>
        </trans-unit>
        <trans-unit id="535f59137c60800ddc3e6bb55a5e87e93d4f248c" translate="yes" xml:space="preserve">
          <source>users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can include A.h and B.h in any order</source>
          <target state="translated">пользователи &lt;code&gt;A&lt;/code&gt; и &lt;code&gt;B&lt;/code&gt; могут включать Ah и Bh в любом порядке</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
