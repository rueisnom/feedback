<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/625799">
    <body>
      <group id="625799">
        <trans-unit id="6bb813c68e1859e65e92bca695625c23917445ae" translate="yes" xml:space="preserve">
          <source>...and doing the same in &lt;code&gt;B.h&lt;/code&gt;</source>
          <target state="translated">... 그리고 &lt;code&gt;B.h&lt;/code&gt; 에서 같은 일을</target>
        </trans-unit>
        <trans-unit id="7ba2500b2f0258d476be0e35ff5c00fc8e5284cf" translate="yes" xml:space="preserve">
          <source>...then recompilation of the code for &quot;A&quot; will be triggered by the changes to the included &lt;code&gt;b.fwd.h&lt;/code&gt; and should complete cleanly.</source>
          <target state="translated">... 그런 다음 포함 된 &lt;code&gt;b.fwd.h&lt;/code&gt; 에 대한 변경으로 &quot;A&quot;에 대한 코드 재 컴파일이 트리거되며 완전히 완료되어야합니다.</target>
        </trans-unit>
        <trans-unit id="f3b65964bdf99cbe98067783c24d8ce3adf9f202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include&lt;/code&gt;, for all extents and purposes (if you take the preprocessor out) just copies the file into the &lt;strong&gt;.cc&lt;/strong&gt;. So really, the &lt;strong&gt;.cc&lt;/strong&gt; looks like:</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; 는 모든 범위와 목적을 위해 (전처리기를 꺼내는 경우) 파일을 &lt;strong&gt;.cc에&lt;/strong&gt; 복사하기 만하면됩니다. 실제로 &lt;strong&gt;.cc&lt;/strong&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1298eafb968f0e641e677b8ee988ed2825e630ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I'm late answering this, but there's not one reasonable answer to date, despite being a popular question with highly upvoted answers....&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;나는 이것에 늦게 대답하고 있지만, 고도로 찬성 된 답변이있는 인기있는 질문 임에도 불구하고 현재까지 합리적인 대답은 하나도 없습니다 ....&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d85779947a2f80f766ef45cabd10708de8749af" translate="yes" xml:space="preserve">
          <source>And in &lt;strong&gt;B.h&lt;/strong&gt;, at this point, you can just &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; directly.</source>
          <target state="translated">그리고 &lt;strong&gt;Bh&lt;/strong&gt; 에서는이 시점에서 &lt;strong&gt;#Ah를&lt;/strong&gt; 직접 포함시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7164b6a015a5b99b1726bcda20563641b04e1413" translate="yes" xml:space="preserve">
          <source>And then, A.h and B.h will contain this:</source>
          <target state="translated">그리고 Ah와 Bh는 이것을 포함 할 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ac1184497beca27b3659c5091326446420c61bde" translate="yes" xml:space="preserve">
          <source>As illustrated by the Standard library's &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; header, the proper way to provide forward declarations for others is to have a &lt;strong&gt;&lt;em&gt;forward declaration header&lt;/em&gt;&lt;/strong&gt;.  For example:</source>
          <target state="translated">표준 라이브러리의 &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; 헤더에서 알 수 있듯이 다른 사람에게 전달 선언을 제공하는 올바른 방법은 &lt;strong&gt;&lt;em&gt;전달 선언 헤더를 사용하는 것&lt;/em&gt;&lt;/strong&gt; 입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="77683cf3abd005f165bb506342d65293c00de62e" translate="yes" xml:space="preserve">
          <source>Best practice: forward declaration headers</source>
          <target state="translated">모범 사례 : 전달 선언 헤더</target>
        </trans-unit>
        <trans-unit id="74deff191fda857d68d3bc15f5c93ee8ded3a54f" translate="yes" xml:space="preserve">
          <source>But his illustration is not really good. Because both classes (A and B) only need an incomplete type of each other (pointer fields / parameters).</source>
          <target state="translated">그러나 그의 예는 실제로 좋지 않습니다. 두 클래스 (A와 B)는 서로 불완전한 유형 (포인터 필드 / 매개 변수) 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="75fc1aa2d190377184c20ea93fcb905a3f793550" translate="yes" xml:space="preserve">
          <source>Clearly a circular reference that you must break.</source>
          <target state="translated">분명히 반드시 참조해야하는 순환 참조입니다.</target>
        </trans-unit>
        <trans-unit id="6040c18d82d48918fbc4d731c452e2e20e0d5ad9" translate="yes" xml:space="preserve">
          <source>Create two files, A_def.h, B_def.h. These will contain only &lt;code&gt;A&lt;/code&gt;'s and &lt;code&gt;B&lt;/code&gt;'s definition:</source>
          <target state="translated">A_def.h, B_def.h라는 두 파일을 작성하십시오. 여기에는 &lt;code&gt;A&lt;/code&gt; 와 &lt;code&gt;B&lt;/code&gt; 의 정의 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9b16ab6892fe30ec91d4d7d0f6987f7846cab18b" translate="yes" xml:space="preserve">
          <source>Doing like this makes it possible to still have a bunch of inlines in both(or multiple) header files. But it's necessary to have &lt;em&gt;include guards&lt;/em&gt;.</source>
          <target state="translated">이렇게하면 둘 다 (또는 여러 개의) 헤더 파일에 여전히 많은 인라인을 가질 수 있습니다. 그러나 &lt;em&gt;경비원&lt;/em&gt; 을 &lt;em&gt;포함&lt;/em&gt; 해야합니다.</target>
        </trans-unit>
        <trans-unit id="81c16b0b2bc90f7f91e5cf3ee2c0bac5abc351e9" translate="yes" xml:space="preserve">
          <source>File '''a.h''':</source>
          <target state="translated">파일 '' 'a.h' '':</target>
        </trans-unit>
        <trans-unit id="de16fa2ea7929e19489f5e9846b72fe1b89c19c7" translate="yes" xml:space="preserve">
          <source>File '''b.h''':</source>
          <target state="translated">파일 '' 'b.h' '':</target>
        </trans-unit>
        <trans-unit id="387c15524fe17924ad63c766cd614d16ea296e8e" translate="yes" xml:space="preserve">
          <source>File '''main.cpp''':</source>
          <target state="translated">파일 '' 'main.cpp' '':</target>
        </trans-unit>
        <trans-unit id="0dc6dc624e5e946076ade7fdb218e4914345198b" translate="yes" xml:space="preserve">
          <source>Forward declaration is way to go.</source>
          <target state="translated">앞으로 선언하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4607da7704e13445b53226db5ba9a20543b4b49a" translate="yes" xml:space="preserve">
          <source>HTH.</source>
          <target state="translated">HTH.</target>
        </trans-unit>
        <trans-unit id="8c8ca565ab5aa7031937c4de83f510564059d503" translate="yes" xml:space="preserve">
          <source>He is not just saying &quot;put forward declarations into a separate header&quot;. He says that you have to spilt class definition headers and inline function definitions into different header files to allow &quot;defered dependencies&quot;.</source>
          <target state="translated">그는 단순히 선언을 &quot;별도의 헤더에 넣습니다&quot;라고 말하는 것이 아닙니다. 그는 &quot;지연된 의존성&quot;을 허용하기 위해 클래스 정의 헤더와 인라인 함수 정의를 다른 헤더 파일에 쏟아야한다고 말했다.</target>
        </trans-unit>
        <trans-unit id="13b338a7985effc7cabc1733321362ea88780210" translate="yes" xml:space="preserve">
          <source>Here is the solution for templates: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;How to handle circular dependencies with templates&lt;/a&gt;</source>
          <target state="translated">템플릿 솔루션은 다음과 같습니다. 템플릿 &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;을 사용하여 순환 종속성을 처리하는 방법&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97511feb4f598817ee61734e3169117c515f2180" translate="yes" xml:space="preserve">
          <source>Here's how you can do this, exactly retaining all the details, and usability:</source>
          <target state="translated">모든 세부 사항과 유용성을 정확하게 유지 하면서이 작업을 수행하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="20f3c7e77b0608d75066808c459e2e9945b5daa9" translate="yes" xml:space="preserve">
          <source>How can I create two classes that both know about each other?</source>
          <target state="translated">서로에 대해 알고있는 두 개의 클래스를 어떻게 만들 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="c6d2a1cd051f34708d70b7656212532a2164b343" translate="yes" xml:space="preserve">
          <source>I often find myself in a situation where I am facing multiple compilation/linker errors in a C++ project due to some bad design decisions (made by someone else :) ) which lead to circular dependencies between C++ classes in different header files &lt;em&gt;(can happen also in the same file)&lt;/em&gt;. But fortunately(?) this doesn't happen often enough for me to remember the solution to this problem for the next time it happens again.</source>
          <target state="translated">다른 헤더 파일의 C ++ 클래스간에 순환 종속성을 유발하는 일부 잘못된 디자인 결정 (다른 사람이 만든)으로 인해 C ++ 프로젝트에서 여러 컴파일 / 링커 오류에 직면하는 상황에서 종종 나 자신을 발견합니다. &lt;em&gt;같은 파일에)&lt;/em&gt; . 그러나 다행히 (?) 이것은 다음에 다시 발생할 때이 문제에 대한 해결책을 기억하기에 충분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b1a6b70bdc70c07e677f7773e517919114388c46" translate="yes" xml:space="preserve">
          <source>I once solved this kind of problem by moving all &lt;em&gt;inlines&lt;/em&gt; after the class definition and putting the &lt;code&gt;#include&lt;/code&gt; for the other classes just before the &lt;em&gt;inlines&lt;/em&gt; in the header file. This way one make sure all definitions+inlines are set prior the inlines are parsed.</source>
          <target state="translated">클래스 정의 후 모든 &lt;em&gt;인라인&lt;/em&gt; 을 이동하고 헤더 파일의 &lt;em&gt;인라인&lt;/em&gt; 바로 앞에 다른 클래스의 &lt;code&gt;#include&lt;/code&gt; 를 넣어서 이런 종류의 문제를 해결했습니다. 이렇게하면 인라인을 구문 분석하기 전에 모든 정의 + 인라인을 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="da2fc2402ebf6a219d39046e92bd6af32dfb31c9" translate="yes" xml:space="preserve">
          <source>I've written a post about this once: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Resolving circular dependencies in c++&lt;/a&gt;</source>
          <target state="translated">나는 이것에 대해 한 번 글을 썼습니다 : &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;C ++에서 순환 종속성 해결&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cece9a731862164a65c9b4dce98bf7a4d58cb7da" translate="yes" xml:space="preserve">
          <source>If A's code has template specialisations / &quot;traits&quot; for the old &lt;code&gt;B&lt;/code&gt;, they won't take effect.</source>
          <target state="translated">A의 코드에 이전 &lt;code&gt;B&lt;/code&gt; 에 대한 템플릿 전문화 / &quot;특성&quot;이있는 경우 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c6b9b3d6a6df2e72dccf31147c614f0473001ee" translate="yes" xml:space="preserve">
          <source>If both classes call functions of the other, you have to move the definitions out.</source>
          <target state="translated">두 클래스가 다른 클래스의 함수를 호출하면 정의를 이동해야합니다.</target>
        </trans-unit>
        <trans-unit id="95c4bb8d12a4563a8e0aaf52f1e8dff97f93cf47" translate="yes" xml:space="preserve">
          <source>Imagine you are writing a compiler. And you see code like this.</source>
          <target state="translated">컴파일러를 작성한다고 가정하십시오. 그리고 당신은 이와 같은 코드를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6adf836b15b71e6d4a4faf8d4b7c043a030e6fa" translate="yes" xml:space="preserve">
          <source>In some cases it is possible to &lt;em&gt;define&lt;/em&gt; a method or a constructor of class B in the header file of class A to resolve circular dependencies involving definitions.
In this way you can avoid having to put definitions in &lt;code&gt;.cc&lt;/code&gt; files, for example if you want to implement a header only library.</source>
          <target state="translated">경우에 따라 정의와 관련된 순환 종속성을 해결하기 위해 클래스 A의 헤더 파일에 클래스 B의 메소드 또는 생성자를 정의 할 수 있습니다. 이런 식으로 헤더 전용 라이브러리를 구현하려는 경우와 같이 &lt;code&gt;.cc&lt;/code&gt; 파일에 정의를 넣지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="74f6724118fdf9e8782645d9c398335943723329" translate="yes" xml:space="preserve">
          <source>It would result in the following code:</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="99e48bd024350ae66199fb4bdc8f9ce56482b3cb" translate="yes" xml:space="preserve">
          <source>Like this</source>
          <target state="translated">이렇게</target>
        </trans-unit>
        <trans-unit id="06b204a42dd43a60a1edbdaff87caff360918ad7" translate="yes" xml:space="preserve">
          <source>Note that A_def.h and B_def.h are &quot;private&quot; headers, users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; should not use them. The public header is A.h and B.h.</source>
          <target state="translated">A_def.h 및 B_def.h는 &quot;개인&quot;헤더이므로 &lt;code&gt;A&lt;/code&gt; 및 &lt;code&gt;B&lt;/code&gt; 사용자는 사용하지 않아야합니다. 공개 헤더는 Ah와 Bh입니다.</target>
        </trans-unit>
        <trans-unit id="421e787d5be309f635285a9fa87fc31b0c2c7573" translate="yes" xml:space="preserve">
          <source>Now things are better. Somewhat. &lt;code&gt;main()&lt;/code&gt; still says:</source>
          <target state="translated">이제 상황이 더 좋습니다. 약간. &lt;code&gt;main()&lt;/code&gt; 여전히 말한다 :</target>
        </trans-unit>
        <trans-unit id="5522389abcdcb2f44350da49c971b70e49fc26a7" translate="yes" xml:space="preserve">
          <source>Order of declaration matters (which is why you are moving out the definitions).</source>
          <target state="translated">선언 순서가 중요합니다 (이것이 정의를 옮기는 이유입니다).</target>
        </trans-unit>
        <trans-unit id="772ed62a5348f7500932ae3d7afc2e74c082ead4" translate="yes" xml:space="preserve">
          <source>Poor but common practice: forward declare stuff in other libs</source>
          <target state="translated">열악하지만 일반적인 관행 : 다른 라이브러리에서 전달 선언</target>
        </trans-unit>
        <trans-unit id="517081acc1bfe64dad04fd896e5e967ccd952c46" translate="yes" xml:space="preserve">
          <source>Read the FAQ:</source>
          <target state="translated">FAQ를 읽으십시오 :</target>
        </trans-unit>
        <trans-unit id="2309355c3ea8f996a00fa38198819142da113849" translate="yes" xml:space="preserve">
          <source>Resolve build errors due to circular dependency amongst classes</source>
          <target state="translated">클래스 간의 순환 종속성으로 인한 빌드 오류 해결</target>
        </trans-unit>
        <trans-unit id="dcd4d8fc79d1043fddd5ad14508f46729fb0455a" translate="yes" xml:space="preserve">
          <source>Say - instead of using a forward declaration header as explained above - code in &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; instead forward-declares &lt;code&gt;class B;&lt;/code&gt; itself:</source>
          <target state="translated">위에서 설명한 것처럼 순방향 선언 헤더를 사용하는 대신 &lt;code&gt;a.h&lt;/code&gt; 또는 &lt;code&gt;a.cc&lt;/code&gt; 의 코드는 &lt;code&gt;class B;&lt;/code&gt; 대신 선언합니다 . 그 자체:</target>
        </trans-unit>
        <trans-unit id="621dd8cec0802a26dd1824800d7292b9666ba339" translate="yes" xml:space="preserve">
          <source>So for the purposes of easy recall in the future I am going to post a representative problem and a solution along with it. Better solutions are of-course welcome.</source>
          <target state="translated">앞으로 쉽게 리콜 할 수 있도록 대표적인 문제와 해결 방법을 함께 게시하겠습니다. 더 나은 솔루션은 물론 환영합니다.</target>
        </trans-unit>
        <trans-unit id="918271f6bede6bfd0286c73dd240da7cc1429f01" translate="yes" xml:space="preserve">
          <source>So let's tell the compiler about &lt;code&gt;B&lt;/code&gt;. This is known as a &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;forward declaration&lt;/a&gt;, and is discussed further in &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">컴파일러에게 &lt;code&gt;B&lt;/code&gt; 에 대해 이야기합시다. 이것을 &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;순방향 선언&lt;/a&gt; 이라고 하며이 &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;답변&lt;/a&gt; 에서 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9f30ee659c9eb0d399d76133970197e5e7745d6b" translate="yes" xml:space="preserve">
          <source>The basic technique is to decouple the classes using interfaces. So in your case:</source>
          <target state="translated">기본 기술은 인터페이스를 사용하여 클래스를 분리하는 것입니다. 따라서 귀하의 경우 :</target>
        </trans-unit>
        <trans-unit id="76cb7d14f4106dab17b2a3411cce1aeb9af6d4c1" translate="yes" xml:space="preserve">
          <source>The clue to solving this problem is to declare both classes before providing the definitions (implementations). It&amp;rsquo;s not possible to split the declaration and definition into separate files, but you can structure them as if they were in separate files.</source>
          <target state="translated">이 문제를 해결하는 단서는 정의 (구현)를 제공하기 전에 두 클래스를 모두 선언하는 것입니다. 선언과 정의를 별도의 파일로 분할 할 수는 없지만 마치 별도의 파일에있는 것처럼 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="964876ba5525b8da7c2b18a45e74b2efe3110bdf" translate="yes" xml:space="preserve">
          <source>The down side of the following solution is (assuming that you had placed the methods in the header file to inline them) that the methods are no longer inlined by the compiler and trying to use the inline keyword produces linker errors.</source>
          <target state="translated">다음 솔루션의 단점은 메소드가 더 이상 컴파일러에 의해 인라인되지 않고 인라인 키워드를 사용하려고하면 링커 오류가 발생한다는 것입니다 (헤더 파일에 메소드를 인라인하기 위해 가정 한 경우).</target>
        </trans-unit>
        <trans-unit id="3785912cdfe31e3ef7ee69bb9533f28f410f1984" translate="yes" xml:space="preserve">
          <source>The maintainers of the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; libraries should each be responsible for keeping their forward declaration headers in sync with their headers and implementation files, so - for example - if the maintainer of &quot;B&quot; comes along and rewrites the code to be...</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; 및 &lt;code&gt;B&lt;/code&gt; 라이브러리의 관리자는 각각 자신의 전달 선언 헤더를 헤더 및 구현 파일과 동기화하는 책임을 져야합니다. 예를 들어, &quot;B&quot;의 관리자가 와서 코드를 다시 작성하는 경우 ...</target>
        </trans-unit>
        <trans-unit id="03de7e5e237e1dfc343937c7767442570b591bae" translate="yes" xml:space="preserve">
          <source>The reason this fix is bad is because the next person to &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; will have to declare &lt;code&gt;B&lt;/code&gt; before they can use it and will get a terrible &lt;code&gt;#include&lt;/code&gt; error. So let's move the declaration into &lt;strong&gt;A.h&lt;/strong&gt; itself.</source>
          <target state="translated">이 수정이 잘못된 이유는 다음 &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; 가 &lt;code&gt;B&lt;/code&gt; 를 사용하기 전에 B 를 선언해야하므로 &lt;code&gt;#include&lt;/code&gt; 오류가 끔찍하기 때문입니다. 선언을 &lt;strong&gt;Ah&lt;/strong&gt; 자체로 옮깁니다.</target>
        </trans-unit>
        <trans-unit id="9db328ea36a8dea61565be6561a6fa8ba17f27d1" translate="yes" xml:space="preserve">
          <source>The simple example presented on Wikipedia worked for me.
(you can read the complete description at &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</source>
          <target state="translated">Wikipedia에 제시된 간단한 예가 저에게 효과적이었습니다. ( &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; 에서 전체 설명을 읽을 수 있습니다)</target>
        </trans-unit>
        <trans-unit id="726a148f2714a29f2b81e70df9012bf68874e4e1" translate="yes" xml:space="preserve">
          <source>The way to think about this is to &quot;think like a compiler&quot;.</source>
          <target state="translated">이것을 생각하는 방법은 &quot;컴파일러처럼 생각하는 것&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="d02efca86e66ddac497e623f13ad84f059c26ada" translate="yes" xml:space="preserve">
          <source>Things to remember:</source>
          <target state="translated">기억해야 할 것 :</target>
        </trans-unit>
        <trans-unit id="677d178e50c7529e22802741eca44b5a4d630ea1" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;works&lt;/em&gt;. It is not &lt;em&gt;great&lt;/em&gt;. But at this point you should have an understanding of the circular reference problem and what we did to &quot;fix&quot; it, albeit the fix is bad.</source>
          <target state="translated">이 &lt;em&gt;작동합니다&lt;/em&gt; . &lt;em&gt;대단&lt;/em&gt; 하지 않습니다. 그러나이 시점에서 순환 참조 문제와 문제를 &quot;수정&quot;하기 위해 수행 한 조치를 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d05028a139bfbdc640ca995cdae5b0e9170344a" translate="yes" xml:space="preserve">
          <source>This code does not compile because B::Do needs a complete type of A which is defined later.</source>
          <target state="translated">이 코드는 B :: Do에 나중에 정의 된 완전한 유형의 A가 필요하기 때문에 컴파일되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e408199cdeea50714b0aa0fe985cbf1eb9e19850" translate="yes" xml:space="preserve">
          <source>This directive should defer the processing of the current file and complete all pending includes.</source>
          <target state="translated">이 지시문은 현재 파일 처리를 지연시키고 보류중인 모든 포함을 완료해야합니다.</target>
        </trans-unit>
        <trans-unit id="889c7f1b4663e1318562106d30f679e883e3e711" translate="yes" xml:space="preserve">
          <source>This is exactly possible with these two header files for each class wich needs to define inline functions.
The only issue is that the circular classes can't just include the &quot;public header&quot;.</source>
          <target state="translated">각 클래스마다이 두 헤더 파일을 사용하면 인라인 함수를 정의해야합니다. 유일한 문제는 순환 클래스가 &quot;공개 헤더&quot;만 포함 할 수 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="781b08e9652d1374708b49eb627b045b2e7a40fc" translate="yes" xml:space="preserve">
          <source>This simple code would not work:</source>
          <target state="translated">이 간단한 코드는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="88ffd7e2f24612377695e3d257fa460de5ac406c" translate="yes" xml:space="preserve">
          <source>This won't work if &lt;code&gt;class A&lt;/code&gt; has an object of &lt;code&gt;class B&lt;/code&gt; as a member or vice versa.</source>
          <target state="translated">&lt;code&gt;class A&lt;/code&gt; 에 &lt;code&gt;class B&lt;/code&gt; 의 개체가 멤버이거나 그 반대의 경우에는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b923ee0d714b0e4db9a18d6fae060d4f0c4c7f31" translate="yes" xml:space="preserve">
          <source>To make sure that it compiles the source code should look like this:</source>
          <target state="translated">소스 코드를 컴파일했는지 확인하려면 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="14a94b58b2296c47a62b7815c3f2cee32b940bb0" translate="yes" xml:space="preserve">
          <source>To solve this issue I would like to suggest a preprocessor extension: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</source>
          <target state="translated">이 문제를 해결하려면 전 처리기 확장을 제안하고 싶습니다. &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5128f234d09a3ac6cd4efa0b4d8bca399c480210" translate="yes" xml:space="preserve">
          <source>To understand it better imagine that class A has a field of type B not B*. In addition class A and B want to define an inline function with parameters of the other type:</source>
          <target state="translated">클래스 A가 B가 아닌 B 유형의 필드를 가지고 있다고 더 잘 이해하려면. 또한 클래스 A와 B는 다른 유형의 매개 변수로 인라인 함수를 정의하려고합니다.</target>
        </trans-unit>
        <trans-unit id="c1c080399aaa5f1044d101f7c55fa5c28cfd080b" translate="yes" xml:space="preserve">
          <source>Unfortunately I can't comment the answer from geza.</source>
          <target state="translated">불행히도 나는 geza의 답변을 말할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2cb3cf90eb4311dac6ef7e6db021df01a4e8510d" translate="yes" xml:space="preserve">
          <source>Unfortunately, all the previous answers are missing some details. The correct solution is a little bit cumbersome, but this is the only way to do it properly. And it scales easily, handles more complex dependencies as well.</source>
          <target state="translated">불행히도, 이전의 모든 답변에 일부 세부 정보가 누락되었습니다. 올바른 해결책은 약간 성가 시지만 이것이 제대로하는 유일한 방법입니다. 또한 쉽게 확장되고 더 복잡한 종속성도 처리합니다.</target>
        </trans-unit>
        <trans-unit id="1e45dba7c7024685dc4586b56849004ec847bda5" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with inline functions?</source>
          <target state="translated">인라인 함수와 함께 전방 선언을 사용할 때 어떤 특별한 고려 사항이 필요합니까?</target>
        </trans-unit>
        <trans-unit id="92b1bad012b996a0bc6851c2bfca4e5dbbb401a3" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with member objects?</source>
          <target state="translated">멤버 선언에 순방향 선언을 사용할 때 어떤 특별한 고려 사항이 필요합니까?</target>
        </trans-unit>
        <trans-unit id="e240359c6981a1b2612797039e784ab3a7e60fd6" translate="yes" xml:space="preserve">
          <source>When you are compiling the &lt;strong&gt;.cc&lt;/strong&gt; file (remember that the &lt;strong&gt;.cc&lt;/strong&gt; and not the &lt;strong&gt;.h&lt;/strong&gt; is the unit of compilation), you need to allocate space for object &lt;code&gt;A&lt;/code&gt;. So, well, how much space then? Enough to store &lt;code&gt;B&lt;/code&gt;! What's the size of &lt;code&gt;B&lt;/code&gt; then? Enough to store &lt;code&gt;A&lt;/code&gt;! Oops.</source>
          <target state="translated">&lt;strong&gt;.cc&lt;/strong&gt; 파일을 컴파일 할 때 ( &lt;strong&gt;.h&lt;/strong&gt; 가 아닌 &lt;strong&gt;.cc&lt;/strong&gt; 는 컴파일 단위임을 기억하십시오) 오브젝트 &lt;code&gt;A&lt;/code&gt; 에 공간을 할당해야합니다. 그렇다면 공간이 얼마나됩니까? &lt;code&gt;B&lt;/code&gt; 를 저장하기에 충분합니다! 그렇다면 &lt;code&gt;B&lt;/code&gt; 의 크기는 얼마입니까? &lt;code&gt;A&lt;/code&gt; 를 저장하기에 충분합니다! 죄송합니다.</target>
        </trans-unit>
        <trans-unit id="2e7cdfc5bd5d6d6eb4f7c32ffb09ee264781d06a" translate="yes" xml:space="preserve">
          <source>You can avoid compilation errors if you remove the method definitions from the header files and let the classes contain only the method declarations and variable declarations/definitions. The method definitions should be placed in a .cpp file (just like a best practice guideline says).</source>
          <target state="translated">헤더 파일에서 메소드 정의를 제거하고 클래스에 메소드 선언 및 변수 선언 / 정의 만 포함 시키도록하면 컴파일 오류를 피할 수 있습니다. 분석법 정의는 모범 사례 지침과 같이 .cpp 파일에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd91a98542fc87ffc1090838a46ff06e65953c16" translate="yes" xml:space="preserve">
          <source>You can break it by allowing the compiler to instead reserve as much space as it knows about upfront - pointers and references, for example, will always be 32 or 64 bits (depending on the architecture) and so if you replaced (either one) by a pointer or reference, things would be great. Let's say we replace in &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 컴파일러는 선행 아키텍처에 대해 알고있는만큼 많은 공간을 예약하여이를 깨뜨릴 수 있습니다. 예를 들어, 아키텍처 및 아키텍처에 따라 포인터 및 참조는 항상 32 비트 또는 64 비트입니다. 포인터 나 참조, 일이 좋을 것입니다. &lt;code&gt;A&lt;/code&gt; 로 대체한다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="58dd4fc03b3183d34495adb76c399fa4c23906e0" translate="yes" xml:space="preserve">
          <source>You can see why the compiler can't deal with this - it has no idea what &lt;code&gt;B&lt;/code&gt; is - it has never even seen the symbol before.</source>
          <target state="translated">컴파일러가 이것을 처리 할 수없는 이유를 알 수 있습니다. &lt;code&gt;B&lt;/code&gt; 가 무엇인지 전혀 모릅니다. 이전에는이 ​​기호를 본 적이 없습니다.</target>
        </trans-unit>
        <trans-unit id="334716d86bd9d03a9b1ca74f4acae1d373b51013" translate="yes" xml:space="preserve">
          <source>a.fwd.h:</source>
          <target state="translated">a.fwd.h:</target>
        </trans-unit>
        <trans-unit id="5cb1315d250ae93e604c5200c412e1ce59bd335a" translate="yes" xml:space="preserve">
          <source>a.h:</source>
          <target state="translated">a.h:</target>
        </trans-unit>
        <trans-unit id="9b217404d46524413c5e8204995ad0e799490a4b" translate="yes" xml:space="preserve">
          <source>b.fwd.h:</source>
          <target state="translated">b.fwd.h:</target>
        </trans-unit>
        <trans-unit id="7b01869b936c6f06b0b65bfbcc2eaf8a238f6400" translate="yes" xml:space="preserve">
          <source>b.h:</source>
          <target state="translated">b.h:</target>
        </trans-unit>
        <trans-unit id="64566382bb3e54d62d59cdd32e72baee64249f2e" translate="yes" xml:space="preserve">
          <source>build tools relying on &lt;code&gt;#include&lt;/code&gt; analysis and changed file timestamps won't rebuild &lt;code&gt;A&lt;/code&gt; (and its further-dependent code) after the change to B, causing errors at link time or run time.  If B is distributed as a runtime loaded DLL, code in &quot;A&quot; may fail to find the differently-mangled symbols at runtime, which may or may not be handled well enough to trigger orderly shutdown or acceptably reduced functionality.</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; 분석 및 변경된 파일 타임 스탬프에 의존하는 빌드 도구는 B로 변경 한 후 &lt;code&gt;A&lt;/code&gt; (및 추가 종속 코드)를 다시 빌드하지 않으므로 링크 타임 또는 런타임시 오류가 발생합니다. B가 런타임로드 된 DLL로 배포 된 경우 &quot;A&quot;의 코드는 런타임에 다르게 얽힌 기호를 찾지 못할 수 있습니다.이 기호는 순서대로 종료되거나 기능이 상당히 저하 될 정도로 충분히 처리되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1ee4e91278afe33a3ee30ba9b7a04c3ef83a1f0" translate="yes" xml:space="preserve">
          <source>compilation of A will terminate with an error once it gets to the conflicting declaration/definition of &lt;code&gt;B&lt;/code&gt; (i.e. the above change to B broke A and any other clients abusing forward declarations, instead of working transparently).</source>
          <target state="translated">A의 컴파일은 충돌하는 &lt;code&gt;B&lt;/code&gt; 의 선언 / 정의에 도달하면 오류로 종료됩니다 (즉, 위의 B 변경으로 인해 A가 투명하게 작동하지 않고 선언을 남용하는 다른 클라이언트가 중단됨).</target>
        </trans-unit>
        <trans-unit id="f9048fd12b1e61b10c0a533226d367f5f45f59ca" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; did include &lt;code&gt;b.h&lt;/code&gt; later:</source>
          <target state="translated">&lt;code&gt;a.h&lt;/code&gt; 또는 &lt;code&gt;a.cc&lt;/code&gt; 에 나중에 &lt;code&gt;b.h&lt;/code&gt; 가 포함 된 경우 :</target>
        </trans-unit>
        <trans-unit id="aa6f7b44888bbdbecec2dd011d394e881b515ef4" translate="yes" xml:space="preserve">
          <source>inline functions still inline</source>
          <target state="translated">인라인 함수는 여전히 인라인</target>
        </trans-unit>
        <trans-unit id="99401692aa69fba656f0bcf654657ddc1f88b0cf" translate="yes" xml:space="preserve">
          <source>otherwise (if A didn't eventually include &lt;code&gt;b.h&lt;/code&gt; - possible if A just stores/passes around Bs by pointer and/or reference)</source>
          <target state="translated">그렇지 않으면 (A가 결국 &lt;code&gt;b.h&lt;/code&gt; 포함하지 않은 경우-A가 포인터 및 / 또는 참조로 B 주위에 저장 / 전달하는 경우 가능)</target>
        </trans-unit>
        <trans-unit id="63e287eac53f9dc1ae4fa91bc6f97afded9483ca" translate="yes" xml:space="preserve">
          <source>the solution is exactly the same as originally intended</source>
          <target state="translated">해결책은 원래 의도 한 것과 정확히 동일합니다.</target>
        </trans-unit>
        <trans-unit id="535f59137c60800ddc3e6bb55a5e87e93d4f248c" translate="yes" xml:space="preserve">
          <source>users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can include A.h and B.h in any order</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; 와 &lt;code&gt;B&lt;/code&gt; 의 사용자는 순서에 상관없이 Ah와 Bh를 포함 할 수 있습니다</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
