<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/625799">
    <body>
      <group id="625799">
        <trans-unit id="6bb813c68e1859e65e92bca695625c23917445ae" translate="yes" xml:space="preserve">
          <source>...and doing the same in &lt;code&gt;B.h&lt;/code&gt;</source>
          <target state="translated">... y haciendo lo mismo en &lt;code&gt;B.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ba2500b2f0258d476be0e35ff5c00fc8e5284cf" translate="yes" xml:space="preserve">
          <source>...then recompilation of the code for &quot;A&quot; will be triggered by the changes to the included &lt;code&gt;b.fwd.h&lt;/code&gt; and should complete cleanly.</source>
          <target state="translated">... luego la recompilaci&amp;oacute;n del c&amp;oacute;digo para &quot;A&quot; se activar&amp;aacute; por los cambios en el &lt;code&gt;b.fwd.h&lt;/code&gt; incluido y debe completarse limpiamente.</target>
        </trans-unit>
        <trans-unit id="f3b65964bdf99cbe98067783c24d8ce3adf9f202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include&lt;/code&gt;, for all extents and purposes (if you take the preprocessor out) just copies the file into the &lt;strong&gt;.cc&lt;/strong&gt;. So really, the &lt;strong&gt;.cc&lt;/strong&gt; looks like:</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; , para todos los fines y prop&amp;oacute;sitos (si saca el preprocesador) simplemente copia el archivo en &lt;strong&gt;.cc&lt;/strong&gt; . Entonces, realmente, el &lt;strong&gt;.cc se&lt;/strong&gt; ve as&amp;iacute;:</target>
        </trans-unit>
        <trans-unit id="1298eafb968f0e641e677b8ee988ed2825e630ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I'm late answering this, but there's not one reasonable answer to date, despite being a popular question with highly upvoted answers....&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Llego tarde a responder esto, pero no hay una respuesta razonable hasta la fecha, a pesar de ser una pregunta popular con respuestas altamente votadas ...&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d85779947a2f80f766ef45cabd10708de8749af" translate="yes" xml:space="preserve">
          <source>And in &lt;strong&gt;B.h&lt;/strong&gt;, at this point, you can just &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; directly.</source>
          <target state="translated">Y en &lt;strong&gt;Bh&lt;/strong&gt; , en este punto, puedes &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; directamente.</target>
        </trans-unit>
        <trans-unit id="7164b6a015a5b99b1726bcda20563641b04e1413" translate="yes" xml:space="preserve">
          <source>And then, A.h and B.h will contain this:</source>
          <target state="translated">Y entonces,A.h y B.h contendrán esto:</target>
        </trans-unit>
        <trans-unit id="ac1184497beca27b3659c5091326446420c61bde" translate="yes" xml:space="preserve">
          <source>As illustrated by the Standard library's &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; header, the proper way to provide forward declarations for others is to have a &lt;strong&gt;&lt;em&gt;forward declaration header&lt;/em&gt;&lt;/strong&gt;.  For example:</source>
          <target state="translated">Como se ilustra en el encabezado &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; de la biblioteca est&amp;aacute;ndar, la forma correcta de proporcionar declaraciones de reenv&amp;iacute;o para otros es tener un &lt;strong&gt;&lt;em&gt;encabezado de declaraci&amp;oacute;n de reenv&amp;iacute;o&lt;/em&gt;&lt;/strong&gt; . Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="77683cf3abd005f165bb506342d65293c00de62e" translate="yes" xml:space="preserve">
          <source>Best practice: forward declaration headers</source>
          <target state="translated">Práctica óptima:encabezamientos de la declaración de intenciones</target>
        </trans-unit>
        <trans-unit id="74deff191fda857d68d3bc15f5c93ee8ded3a54f" translate="yes" xml:space="preserve">
          <source>But his illustration is not really good. Because both classes (A and B) only need an incomplete type of each other (pointer fields / parameters).</source>
          <target state="translated">Pero su ilustración no es muy buena.Porque ambas clases (A y B)sólo necesitan un tipo incompleto de cada una (parámetros de los campos de puntero).</target>
        </trans-unit>
        <trans-unit id="75fc1aa2d190377184c20ea93fcb905a3f793550" translate="yes" xml:space="preserve">
          <source>Clearly a circular reference that you must break.</source>
          <target state="translated">Claramente una referencia circular que debes romper.</target>
        </trans-unit>
        <trans-unit id="6040c18d82d48918fbc4d731c452e2e20e0d5ad9" translate="yes" xml:space="preserve">
          <source>Create two files, A_def.h, B_def.h. These will contain only &lt;code&gt;A&lt;/code&gt;'s and &lt;code&gt;B&lt;/code&gt;'s definition:</source>
          <target state="translated">Cree dos archivos, A_def.h, B_def.h. Estos contendr&amp;aacute;n solo las definiciones de &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b16ab6892fe30ec91d4d7d0f6987f7846cab18b" translate="yes" xml:space="preserve">
          <source>Doing like this makes it possible to still have a bunch of inlines in both(or multiple) header files. But it's necessary to have &lt;em&gt;include guards&lt;/em&gt;.</source>
          <target state="translated">Hacer esto hace posible que todav&amp;iacute;a tenga un mont&amp;oacute;n de l&amp;iacute;neas en ambos (o m&amp;uacute;ltiples) archivos de encabezado. Pero es necesario &lt;em&gt;incluir guardias&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="81c16b0b2bc90f7f91e5cf3ee2c0bac5abc351e9" translate="yes" xml:space="preserve">
          <source>File '''a.h''':</source>
          <target state="translated">Archivo ''a.h'':</target>
        </trans-unit>
        <trans-unit id="de16fa2ea7929e19489f5e9846b72fe1b89c19c7" translate="yes" xml:space="preserve">
          <source>File '''b.h''':</source>
          <target state="translated">Archivo ''b.h'':</target>
        </trans-unit>
        <trans-unit id="387c15524fe17924ad63c766cd614d16ea296e8e" translate="yes" xml:space="preserve">
          <source>File '''main.cpp''':</source>
          <target state="translated">Archivo ''main.cpp'':</target>
        </trans-unit>
        <trans-unit id="0dc6dc624e5e946076ade7fdb218e4914345198b" translate="yes" xml:space="preserve">
          <source>Forward declaration is way to go.</source>
          <target state="translated">La declaración anticipada es el camino a seguir.</target>
        </trans-unit>
        <trans-unit id="4607da7704e13445b53226db5ba9a20543b4b49a" translate="yes" xml:space="preserve">
          <source>HTH.</source>
          <target state="translated">HTH.</target>
        </trans-unit>
        <trans-unit id="8c8ca565ab5aa7031937c4de83f510564059d503" translate="yes" xml:space="preserve">
          <source>He is not just saying &quot;put forward declarations into a separate header&quot;. He says that you have to spilt class definition headers and inline function definitions into different header files to allow &quot;defered dependencies&quot;.</source>
          <target state="translated">No sólo dice &quot;presentar las declaraciones en un encabezado separado&quot;.Dice que hay que verter los encabezados de definición de clase y las definiciones de funciones en línea en diferentes archivos de encabezado para permitir &quot;dependencias diferidas&quot;.</target>
        </trans-unit>
        <trans-unit id="13b338a7985effc7cabc1733321362ea88780210" translate="yes" xml:space="preserve">
          <source>Here is the solution for templates: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;How to handle circular dependencies with templates&lt;/a&gt;</source>
          <target state="translated">Aqu&amp;iacute; est&amp;aacute; la soluci&amp;oacute;n para las plantillas: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;C&amp;oacute;mo manejar dependencias circulares con plantillas&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97511feb4f598817ee61734e3169117c515f2180" translate="yes" xml:space="preserve">
          <source>Here's how you can do this, exactly retaining all the details, and usability:</source>
          <target state="translated">Así es como se puede hacer esto,conservando exactamente todos los detalles,y la usabilidad:</target>
        </trans-unit>
        <trans-unit id="20f3c7e77b0608d75066808c459e2e9945b5daa9" translate="yes" xml:space="preserve">
          <source>How can I create two classes that both know about each other?</source>
          <target state="translated">¿Cómo puedo crear dos clases que se conozcan entre sí?</target>
        </trans-unit>
        <trans-unit id="c6d2a1cd051f34708d70b7656212532a2164b343" translate="yes" xml:space="preserve">
          <source>I often find myself in a situation where I am facing multiple compilation/linker errors in a C++ project due to some bad design decisions (made by someone else :) ) which lead to circular dependencies between C++ classes in different header files &lt;em&gt;(can happen also in the same file)&lt;/em&gt;. But fortunately(?) this doesn't happen often enough for me to remember the solution to this problem for the next time it happens again.</source>
          <target state="translated">A menudo me encuentro en una situaci&amp;oacute;n en la que me enfrento a m&amp;uacute;ltiples errores de compilaci&amp;oacute;n / enlazador en un proyecto C ++ debido a algunas malas decisiones de dise&amp;ntilde;o (hechas por otra persona :)) que conducen a dependencias circulares entre las clases C ++ en diferentes archivos de encabezado &lt;em&gt;(tambi&amp;eacute;n puede ocurrir en el mismo archivo)&lt;/em&gt; . Pero afortunadamente (?) Esto no sucede con la frecuencia suficiente para recordar la soluci&amp;oacute;n de este problema la pr&amp;oacute;xima vez que vuelva a ocurrir.</target>
        </trans-unit>
        <trans-unit id="b1a6b70bdc70c07e677f7773e517919114388c46" translate="yes" xml:space="preserve">
          <source>I once solved this kind of problem by moving all &lt;em&gt;inlines&lt;/em&gt; after the class definition and putting the &lt;code&gt;#include&lt;/code&gt; for the other classes just before the &lt;em&gt;inlines&lt;/em&gt; in the header file. This way one make sure all definitions+inlines are set prior the inlines are parsed.</source>
          <target state="translated">Una vez resolv&amp;iacute; este tipo de problema moviendo todas las &lt;em&gt;l&amp;iacute;neas en l&amp;iacute;nea&lt;/em&gt; despu&amp;eacute;s de la definici&amp;oacute;n de la clase y colocando el &lt;code&gt;#include&lt;/code&gt; para las otras clases justo antes de las &lt;em&gt;l&amp;iacute;neas&lt;/em&gt; en el archivo de encabezado. De esta forma, aseg&amp;uacute;rese de que todas las definiciones + l&amp;iacute;neas est&amp;eacute;n establecidas antes de analizar las l&amp;iacute;neas.</target>
        </trans-unit>
        <trans-unit id="da2fc2402ebf6a219d39046e92bd6af32dfb31c9" translate="yes" xml:space="preserve">
          <source>I've written a post about this once: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Resolving circular dependencies in c++&lt;/a&gt;</source>
          <target state="translated">He escrito una publicaci&amp;oacute;n sobre esto una vez: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Resolver dependencias circulares en c ++&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cece9a731862164a65c9b4dce98bf7a4d58cb7da" translate="yes" xml:space="preserve">
          <source>If A's code has template specialisations / &quot;traits&quot; for the old &lt;code&gt;B&lt;/code&gt;, they won't take effect.</source>
          <target state="translated">Si el c&amp;oacute;digo de A tiene especializaciones de plantilla / &quot;rasgos&quot; para el viejo &lt;code&gt;B&lt;/code&gt; , no surtir&amp;aacute;n efecto.</target>
        </trans-unit>
        <trans-unit id="8c6b9b3d6a6df2e72dccf31147c614f0473001ee" translate="yes" xml:space="preserve">
          <source>If both classes call functions of the other, you have to move the definitions out.</source>
          <target state="translated">Si ambas clases llaman a las funciones de la otra,hay que sacar las definiciones.</target>
        </trans-unit>
        <trans-unit id="95c4bb8d12a4563a8e0aaf52f1e8dff97f93cf47" translate="yes" xml:space="preserve">
          <source>Imagine you are writing a compiler. And you see code like this.</source>
          <target state="translated">Imagina que estás escribiendo un compilador.Y ves un código como este.</target>
        </trans-unit>
        <trans-unit id="b6adf836b15b71e6d4a4faf8d4b7c043a030e6fa" translate="yes" xml:space="preserve">
          <source>In some cases it is possible to &lt;em&gt;define&lt;/em&gt; a method or a constructor of class B in the header file of class A to resolve circular dependencies involving definitions.
In this way you can avoid having to put definitions in &lt;code&gt;.cc&lt;/code&gt; files, for example if you want to implement a header only library.</source>
          <target state="translated">En algunos casos, es posible &lt;em&gt;definir&lt;/em&gt; un m&amp;eacute;todo o un constructor de clase B en el archivo de encabezado de clase A para resolver dependencias circulares que impliquen definiciones. De esta forma, puede evitar tener que poner definiciones en archivos &lt;code&gt;.cc&lt;/code&gt; , por ejemplo, si desea implementar una biblioteca de solo encabezado.</target>
        </trans-unit>
        <trans-unit id="74f6724118fdf9e8782645d9c398335943723329" translate="yes" xml:space="preserve">
          <source>It would result in the following code:</source>
          <target state="translated">Resultaría en el siguiente código:</target>
        </trans-unit>
        <trans-unit id="99e48bd024350ae66199fb4bdc8f9ce56482b3cb" translate="yes" xml:space="preserve">
          <source>Like this</source>
          <target state="translated">Así.</target>
        </trans-unit>
        <trans-unit id="06b204a42dd43a60a1edbdaff87caff360918ad7" translate="yes" xml:space="preserve">
          <source>Note that A_def.h and B_def.h are &quot;private&quot; headers, users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; should not use them. The public header is A.h and B.h.</source>
          <target state="translated">Tenga en cuenta que A_def.h y B_def.h son encabezados &quot;privados&quot;, los usuarios de &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; no deben usarlos. El encabezado p&amp;uacute;blico es Ah y Bh</target>
        </trans-unit>
        <trans-unit id="421e787d5be309f635285a9fa87fc31b0c2c7573" translate="yes" xml:space="preserve">
          <source>Now things are better. Somewhat. &lt;code&gt;main()&lt;/code&gt; still says:</source>
          <target state="translated">Ahora las cosas est&amp;aacute;n mejor. Algo. &lt;code&gt;main()&lt;/code&gt; todav&amp;iacute;a dice:</target>
        </trans-unit>
        <trans-unit id="5522389abcdcb2f44350da49c971b70e49fc26a7" translate="yes" xml:space="preserve">
          <source>Order of declaration matters (which is why you are moving out the definitions).</source>
          <target state="translated">El orden de la declaración es importante (por lo que se están moviendo las definiciones).</target>
        </trans-unit>
        <trans-unit id="772ed62a5348f7500932ae3d7afc2e74c082ead4" translate="yes" xml:space="preserve">
          <source>Poor but common practice: forward declare stuff in other libs</source>
          <target state="translated">Pobre pero común práctica:declarar cosas en otras liberaciones.</target>
        </trans-unit>
        <trans-unit id="517081acc1bfe64dad04fd896e5e967ccd952c46" translate="yes" xml:space="preserve">
          <source>Read the FAQ:</source>
          <target state="translated">Lea las preguntas frecuentes:</target>
        </trans-unit>
        <trans-unit id="2309355c3ea8f996a00fa38198819142da113849" translate="yes" xml:space="preserve">
          <source>Resolve build errors due to circular dependency amongst classes</source>
          <target state="translated">Resolver los errores de construcción debido a la dependencia circular entre las clases</target>
        </trans-unit>
        <trans-unit id="dcd4d8fc79d1043fddd5ad14508f46729fb0455a" translate="yes" xml:space="preserve">
          <source>Say - instead of using a forward declaration header as explained above - code in &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; instead forward-declares &lt;code&gt;class B;&lt;/code&gt; itself:</source>
          <target state="translated">Digamos, en lugar de usar un encabezado de declaraci&amp;oacute;n hacia adelante como se explic&amp;oacute; anteriormente, el c&amp;oacute;digo en &lt;code&gt;a.h&lt;/code&gt; o &lt;code&gt;a.cc&lt;/code&gt; en su lugar, declara hacia adelante la &lt;code&gt;class B;&lt;/code&gt; s&amp;iacute; mismo:</target>
        </trans-unit>
        <trans-unit id="621dd8cec0802a26dd1824800d7292b9666ba339" translate="yes" xml:space="preserve">
          <source>So for the purposes of easy recall in the future I am going to post a representative problem and a solution along with it. Better solutions are of-course welcome.</source>
          <target state="translated">Así que para facilitar la memoria en el futuro voy a publicar un problema representativo y una solución junto con él.Mejores soluciones son,por supuesto,bienvenidas.</target>
        </trans-unit>
        <trans-unit id="918271f6bede6bfd0286c73dd240da7cc1429f01" translate="yes" xml:space="preserve">
          <source>So let's tell the compiler about &lt;code&gt;B&lt;/code&gt;. This is known as a &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;forward declaration&lt;/a&gt;, and is discussed further in &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">Entonces, hablemos al compilador sobre &lt;code&gt;B&lt;/code&gt; . Esto se conoce como &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;declaraci&amp;oacute;n adelantada&lt;/a&gt; , y se trata m&amp;aacute;s adelante en &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;esta respuesta&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f30ee659c9eb0d399d76133970197e5e7745d6b" translate="yes" xml:space="preserve">
          <source>The basic technique is to decouple the classes using interfaces. So in your case:</source>
          <target state="translated">La técnica básica consiste en desacoplar las clases mediante interfaces.Así que en tu caso:</target>
        </trans-unit>
        <trans-unit id="76cb7d14f4106dab17b2a3411cce1aeb9af6d4c1" translate="yes" xml:space="preserve">
          <source>The clue to solving this problem is to declare both classes before providing the definitions (implementations). It&amp;rsquo;s not possible to split the declaration and definition into separate files, but you can structure them as if they were in separate files.</source>
          <target state="translated">La clave para resolver este problema es declarar ambas clases antes de proporcionar las definiciones (implementaciones). No es posible dividir la declaraci&amp;oacute;n y la definici&amp;oacute;n en archivos separados, pero puede estructurarlos como si estuvieran en archivos separados.</target>
        </trans-unit>
        <trans-unit id="964876ba5525b8da7c2b18a45e74b2efe3110bdf" translate="yes" xml:space="preserve">
          <source>The down side of the following solution is (assuming that you had placed the methods in the header file to inline them) that the methods are no longer inlined by the compiler and trying to use the inline keyword produces linker errors.</source>
          <target state="translated">El lado negativo de la siguiente solución es (suponiendo que se hubieran colocado los métodos en el archivo de cabecera para ponerlos en línea)que los métodos ya no están alineados por el compilador y tratar de utilizar la palabra clave en línea produce errores de enlazador.</target>
        </trans-unit>
        <trans-unit id="3785912cdfe31e3ef7ee69bb9533f28f410f1984" translate="yes" xml:space="preserve">
          <source>The maintainers of the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; libraries should each be responsible for keeping their forward declaration headers in sync with their headers and implementation files, so - for example - if the maintainer of &quot;B&quot; comes along and rewrites the code to be...</source>
          <target state="translated">Los mantenedores de las bibliotecas &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; deben ser responsables de mantener sincronizados sus encabezados de declaraci&amp;oacute;n hacia adelante con sus encabezados y archivos de implementaci&amp;oacute;n, por lo tanto, por ejemplo, si aparece el mantenedor de &quot;B&quot; y reescribe el c&amp;oacute;digo para ser ...</target>
        </trans-unit>
        <trans-unit id="03de7e5e237e1dfc343937c7767442570b591bae" translate="yes" xml:space="preserve">
          <source>The reason this fix is bad is because the next person to &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; will have to declare &lt;code&gt;B&lt;/code&gt; before they can use it and will get a terrible &lt;code&gt;#include&lt;/code&gt; error. So let's move the declaration into &lt;strong&gt;A.h&lt;/strong&gt; itself.</source>
          <target state="translated">La raz&amp;oacute;n por la que esta soluci&amp;oacute;n es mala es porque la siguiente persona que &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; tendr&amp;aacute; que declarar &lt;code&gt;B&lt;/code&gt; antes de que pueda usarla y obtendr&amp;aacute; un terrible &lt;code&gt;#include&lt;/code&gt; error de inclusi&amp;oacute;n . As&amp;iacute; que pasemos la declaraci&amp;oacute;n al &lt;strong&gt;Ah&lt;/strong&gt; mismo.</target>
        </trans-unit>
        <trans-unit id="9db328ea36a8dea61565be6561a6fa8ba17f27d1" translate="yes" xml:space="preserve">
          <source>The simple example presented on Wikipedia worked for me.
(you can read the complete description at &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</source>
          <target state="translated">El simple ejemplo presentado en Wikipedia funcion&amp;oacute; para m&amp;iacute;. (puede leer la descripci&amp;oacute;n completa en &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="726a148f2714a29f2b81e70df9012bf68874e4e1" translate="yes" xml:space="preserve">
          <source>The way to think about this is to &quot;think like a compiler&quot;.</source>
          <target state="translated">La forma de pensar en esto es &quot;pensar como un compilador&quot;.</target>
        </trans-unit>
        <trans-unit id="d02efca86e66ddac497e623f13ad84f059c26ada" translate="yes" xml:space="preserve">
          <source>Things to remember:</source>
          <target state="translated">Cosas para recordar:</target>
        </trans-unit>
        <trans-unit id="677d178e50c7529e22802741eca44b5a4d630ea1" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;works&lt;/em&gt;. It is not &lt;em&gt;great&lt;/em&gt;. But at this point you should have an understanding of the circular reference problem and what we did to &quot;fix&quot; it, albeit the fix is bad.</source>
          <target state="translated">Esto &lt;em&gt;funciona&lt;/em&gt; No es &lt;em&gt;genial&lt;/em&gt; Pero en este punto debe comprender el problema de referencia circular y lo que hicimos para &quot;solucionarlo&quot;, aunque la soluci&amp;oacute;n es mala.</target>
        </trans-unit>
        <trans-unit id="0d05028a139bfbdc640ca995cdae5b0e9170344a" translate="yes" xml:space="preserve">
          <source>This code does not compile because B::Do needs a complete type of A which is defined later.</source>
          <target state="translated">Este código no compila porque B::Do necesita un tipo completo de A que se define más tarde.</target>
        </trans-unit>
        <trans-unit id="e408199cdeea50714b0aa0fe985cbf1eb9e19850" translate="yes" xml:space="preserve">
          <source>This directive should defer the processing of the current file and complete all pending includes.</source>
          <target state="translated">Esta directiva debería aplazar la tramitación del expediente actual y completar todos los expedientes pendientes.</target>
        </trans-unit>
        <trans-unit id="889c7f1b4663e1318562106d30f679e883e3e711" translate="yes" xml:space="preserve">
          <source>This is exactly possible with these two header files for each class wich needs to define inline functions.
The only issue is that the circular classes can't just include the &quot;public header&quot;.</source>
          <target state="translated">Esto es exactamente posible con estos dos archivos de encabezamiento para cada clase que necesita definir funciones en línea.El único problema es que las clases circulares no pueden incluir sólo el &quot;encabezado público&quot;.</target>
        </trans-unit>
        <trans-unit id="781b08e9652d1374708b49eb627b045b2e7a40fc" translate="yes" xml:space="preserve">
          <source>This simple code would not work:</source>
          <target state="translated">Este simple código no funcionaría:</target>
        </trans-unit>
        <trans-unit id="88ffd7e2f24612377695e3d257fa460de5ac406c" translate="yes" xml:space="preserve">
          <source>This won't work if &lt;code&gt;class A&lt;/code&gt; has an object of &lt;code&gt;class B&lt;/code&gt; as a member or vice versa.</source>
          <target state="translated">Esto no funcionar&amp;aacute; si la &lt;code&gt;class A&lt;/code&gt; tiene un objeto de la &lt;code&gt;class B&lt;/code&gt; como miembro o viceversa.</target>
        </trans-unit>
        <trans-unit id="b923ee0d714b0e4db9a18d6fae060d4f0c4c7f31" translate="yes" xml:space="preserve">
          <source>To make sure that it compiles the source code should look like this:</source>
          <target state="translated">Para asegurarse de que compila el código fuente debería verse así:</target>
        </trans-unit>
        <trans-unit id="14a94b58b2296c47a62b7815c3f2cee32b940bb0" translate="yes" xml:space="preserve">
          <source>To solve this issue I would like to suggest a preprocessor extension: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</source>
          <target state="translated">Para resolver este problema, me gustar&amp;iacute;a sugerir una extensi&amp;oacute;n de preprocesador: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5128f234d09a3ac6cd4efa0b4d8bca399c480210" translate="yes" xml:space="preserve">
          <source>To understand it better imagine that class A has a field of type B not B*. In addition class A and B want to define an inline function with parameters of the other type:</source>
          <target state="translated">Para entenderlo mejor,imagina que la clase A tiene un campo de tipo B,no B*.Además la clase A y B quieren definir una función en línea con parámetros del otro tipo:</target>
        </trans-unit>
        <trans-unit id="c1c080399aaa5f1044d101f7c55fa5c28cfd080b" translate="yes" xml:space="preserve">
          <source>Unfortunately I can't comment the answer from geza.</source>
          <target state="translated">Desafortunadamente no puedo comentar la respuesta de Geza.</target>
        </trans-unit>
        <trans-unit id="2cb3cf90eb4311dac6ef7e6db021df01a4e8510d" translate="yes" xml:space="preserve">
          <source>Unfortunately, all the previous answers are missing some details. The correct solution is a little bit cumbersome, but this is the only way to do it properly. And it scales easily, handles more complex dependencies as well.</source>
          <target state="translated">Desafortunadamente,a todas las respuestas anteriores les faltan algunos detalles.La solución correcta es un poco engorrosa,pero es la única manera de hacerlo correctamente.Y se escala fácilmente,también maneja dependencias más complejas.</target>
        </trans-unit>
        <trans-unit id="1e45dba7c7024685dc4586b56849004ec847bda5" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with inline functions?</source>
          <target state="translated">¿Qué consideraciones especiales se necesitan cuando se utilizan declaraciones anticipadas con funciones en línea?</target>
        </trans-unit>
        <trans-unit id="92b1bad012b996a0bc6851c2bfca4e5dbbb401a3" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with member objects?</source>
          <target state="translated">¿Qué consideraciones especiales se necesitan cuando se utilizan declaraciones anticipadas con objetos de los miembros?</target>
        </trans-unit>
        <trans-unit id="e240359c6981a1b2612797039e784ab3a7e60fd6" translate="yes" xml:space="preserve">
          <source>When you are compiling the &lt;strong&gt;.cc&lt;/strong&gt; file (remember that the &lt;strong&gt;.cc&lt;/strong&gt; and not the &lt;strong&gt;.h&lt;/strong&gt; is the unit of compilation), you need to allocate space for object &lt;code&gt;A&lt;/code&gt;. So, well, how much space then? Enough to store &lt;code&gt;B&lt;/code&gt;! What's the size of &lt;code&gt;B&lt;/code&gt; then? Enough to store &lt;code&gt;A&lt;/code&gt;! Oops.</source>
          <target state="translated">Cuando est&amp;aacute; compilando el archivo &lt;strong&gt;.cc&lt;/strong&gt; (recuerde que el &lt;strong&gt;.cc&lt;/strong&gt; y no el &lt;strong&gt;.h&lt;/strong&gt; es la unidad de compilaci&amp;oacute;n), debe asignar espacio para el objeto &lt;code&gt;A&lt;/code&gt; . Entonces, &amp;iquest;cu&amp;aacute;nto espacio entonces? Suficiente para almacenar &lt;code&gt;B&lt;/code&gt; ! &amp;iquest;Cu&amp;aacute;l es el tama&amp;ntilde;o de &lt;code&gt;B&lt;/code&gt; entonces? Suficiente para almacenar &lt;code&gt;A&lt;/code&gt; ! Ups</target>
        </trans-unit>
        <trans-unit id="2e7cdfc5bd5d6d6eb4f7c32ffb09ee264781d06a" translate="yes" xml:space="preserve">
          <source>You can avoid compilation errors if you remove the method definitions from the header files and let the classes contain only the method declarations and variable declarations/definitions. The method definitions should be placed in a .cpp file (just like a best practice guideline says).</source>
          <target state="translated">Puede evitar errores de compilación si elimina las definiciones de los métodos de los archivos de cabecera y deja que las clases contengan sólo las declaraciones de los métodos y las definiciones de las declaraciones de las variables.Las definiciones de los métodos deben ser colocadas en un archivo .cpp (tal como dice una guía de buenas prácticas).</target>
        </trans-unit>
        <trans-unit id="dd91a98542fc87ffc1090838a46ff06e65953c16" translate="yes" xml:space="preserve">
          <source>You can break it by allowing the compiler to instead reserve as much space as it knows about upfront - pointers and references, for example, will always be 32 or 64 bits (depending on the architecture) and so if you replaced (either one) by a pointer or reference, things would be great. Let's say we replace in &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">Puede romperlo permitiendo que el compilador reserve en su lugar tanto espacio como sabe sobre el principio: los punteros y las referencias, por ejemplo, siempre ser&amp;aacute;n de 32 o 64 bits (dependiendo de la arquitectura) y, por lo tanto, si lo reemplaza (cualquiera de ellos) por un puntero o referencia, las cosas ser&amp;iacute;an geniales. Digamos que reemplazamos en &lt;code&gt;A&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58dd4fc03b3183d34495adb76c399fa4c23906e0" translate="yes" xml:space="preserve">
          <source>You can see why the compiler can't deal with this - it has no idea what &lt;code&gt;B&lt;/code&gt; is - it has never even seen the symbol before.</source>
          <target state="translated">Puede ver por qu&amp;eacute; el compilador no puede lidiar con esto, no tiene idea de qu&amp;eacute; es &lt;code&gt;B&lt;/code&gt; , nunca antes hab&amp;iacute;a visto el s&amp;iacute;mbolo.</target>
        </trans-unit>
        <trans-unit id="334716d86bd9d03a9b1ca74f4acae1d373b51013" translate="yes" xml:space="preserve">
          <source>a.fwd.h:</source>
          <target state="translated">a.fwd.h:</target>
        </trans-unit>
        <trans-unit id="5cb1315d250ae93e604c5200c412e1ce59bd335a" translate="yes" xml:space="preserve">
          <source>a.h:</source>
          <target state="translated">a.h:</target>
        </trans-unit>
        <trans-unit id="9b217404d46524413c5e8204995ad0e799490a4b" translate="yes" xml:space="preserve">
          <source>b.fwd.h:</source>
          <target state="translated">b.fwd.h:</target>
        </trans-unit>
        <trans-unit id="7b01869b936c6f06b0b65bfbcc2eaf8a238f6400" translate="yes" xml:space="preserve">
          <source>b.h:</source>
          <target state="translated">b.h:</target>
        </trans-unit>
        <trans-unit id="64566382bb3e54d62d59cdd32e72baee64249f2e" translate="yes" xml:space="preserve">
          <source>build tools relying on &lt;code&gt;#include&lt;/code&gt; analysis and changed file timestamps won't rebuild &lt;code&gt;A&lt;/code&gt; (and its further-dependent code) after the change to B, causing errors at link time or run time.  If B is distributed as a runtime loaded DLL, code in &quot;A&quot; may fail to find the differently-mangled symbols at runtime, which may or may not be handled well enough to trigger orderly shutdown or acceptably reduced functionality.</source>
          <target state="translated">las herramientas de compilaci&amp;oacute;n que se basan en el an&amp;aacute;lisis &lt;code&gt;#include&lt;/code&gt; y las marcas de tiempo modificadas del archivo no reconstruir&amp;aacute;n &lt;code&gt;A&lt;/code&gt; (y su c&amp;oacute;digo dependiente adicional) despu&amp;eacute;s del cambio a B, causando errores en el momento del enlace o en el tiempo de ejecuci&amp;oacute;n. Si B se distribuye como una DLL cargada en tiempo de ejecuci&amp;oacute;n, el c&amp;oacute;digo en &quot;A&quot; puede fallar al encontrar los s&amp;iacute;mbolos de diferente manera en tiempo de ejecuci&amp;oacute;n, que pueden o no manejarse lo suficientemente bien como para desencadenar el apagado ordenado o una funcionalidad aceptablemente reducida.</target>
        </trans-unit>
        <trans-unit id="d1ee4e91278afe33a3ee30ba9b7a04c3ef83a1f0" translate="yes" xml:space="preserve">
          <source>compilation of A will terminate with an error once it gets to the conflicting declaration/definition of &lt;code&gt;B&lt;/code&gt; (i.e. the above change to B broke A and any other clients abusing forward declarations, instead of working transparently).</source>
          <target state="translated">la compilaci&amp;oacute;n de A terminar&amp;aacute; con un error una vez que llegue a la declaraci&amp;oacute;n / definici&amp;oacute;n conflictiva de &lt;code&gt;B&lt;/code&gt; (es decir, el cambio anterior a B rompi&amp;oacute; A y cualquier otro cliente que abusa de las declaraciones hacia adelante, en lugar de trabajar de manera transparente).</target>
        </trans-unit>
        <trans-unit id="f9048fd12b1e61b10c0a533226d367f5f45f59ca" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; did include &lt;code&gt;b.h&lt;/code&gt; later:</source>
          <target state="translated">si &lt;code&gt;a.h&lt;/code&gt; o &lt;code&gt;a.cc&lt;/code&gt; incluyeron &lt;code&gt;b.h&lt;/code&gt; m&amp;aacute;s tarde:</target>
        </trans-unit>
        <trans-unit id="aa6f7b44888bbdbecec2dd011d394e881b515ef4" translate="yes" xml:space="preserve">
          <source>inline functions still inline</source>
          <target state="translated">funciones en línea todavía en línea</target>
        </trans-unit>
        <trans-unit id="99401692aa69fba656f0bcf654657ddc1f88b0cf" translate="yes" xml:space="preserve">
          <source>otherwise (if A didn't eventually include &lt;code&gt;b.h&lt;/code&gt; - possible if A just stores/passes around Bs by pointer and/or reference)</source>
          <target state="translated">de lo contrario (si A finalmente no incluy&amp;oacute; &lt;code&gt;b.h&lt;/code&gt; , posible si A solo almacena / pasa alrededor de Bs por puntero y / o referencia)</target>
        </trans-unit>
        <trans-unit id="63e287eac53f9dc1ae4fa91bc6f97afded9483ca" translate="yes" xml:space="preserve">
          <source>the solution is exactly the same as originally intended</source>
          <target state="translated">la solución es exactamente la misma que la prevista originalmente</target>
        </trans-unit>
        <trans-unit id="535f59137c60800ddc3e6bb55a5e87e93d4f248c" translate="yes" xml:space="preserve">
          <source>users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can include A.h and B.h in any order</source>
          <target state="translated">Los usuarios de &lt;code&gt;A&lt;/code&gt; y &lt;code&gt;B&lt;/code&gt; pueden incluir Ah y Bh en cualquier orden</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
