<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/625799">
    <body>
      <group id="625799">
        <trans-unit id="6bb813c68e1859e65e92bca695625c23917445ae" translate="yes" xml:space="preserve">
          <source>...and doing the same in &lt;code&gt;B.h&lt;/code&gt;</source>
          <target state="translated">...そして &lt;code&gt;B.h&lt;/code&gt; 同じことをする</target>
        </trans-unit>
        <trans-unit id="7ba2500b2f0258d476be0e35ff5c00fc8e5284cf" translate="yes" xml:space="preserve">
          <source>...then recompilation of the code for &quot;A&quot; will be triggered by the changes to the included &lt;code&gt;b.fwd.h&lt;/code&gt; and should complete cleanly.</source>
          <target state="translated">...「A」のコードの再コンパイルは、含まれている &lt;code&gt;b.fwd.h&lt;/code&gt; への変更によってトリガーされ、 正常に完了するはずです。</target>
        </trans-unit>
        <trans-unit id="f3b65964bdf99cbe98067783c24d8ce3adf9f202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include&lt;/code&gt;, for all extents and purposes (if you take the preprocessor out) just copies the file into the &lt;strong&gt;.cc&lt;/strong&gt;. So really, the &lt;strong&gt;.cc&lt;/strong&gt; looks like:</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; 、すべてのエクステントと目的（プリプロセッサーを削除する場合）については、ファイルを&lt;strong&gt;.ccに&lt;/strong&gt;コピーするだけです。 つまり、 &lt;strong&gt;.cc&lt;/strong&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1298eafb968f0e641e677b8ee988ed2825e630ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;I'm late answering this, but there's not one reasonable answer to date, despite being a popular question with highly upvoted answers....&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;私はこれに答えるのが遅いですが、非常に賛成された回答で人気のある質問であるにもかかわらず、これまでに1つの合理的な答えはありません...&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d85779947a2f80f766ef45cabd10708de8749af" translate="yes" xml:space="preserve">
          <source>And in &lt;strong&gt;B.h&lt;/strong&gt;, at this point, you can just &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; directly.</source>
          <target state="translated">そして&lt;strong&gt;Bh&lt;/strong&gt;では、この時点で &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; 直接入力するだけです。</target>
        </trans-unit>
        <trans-unit id="7164b6a015a5b99b1726bcda20563641b04e1413" translate="yes" xml:space="preserve">
          <source>And then, A.h and B.h will contain this:</source>
          <target state="translated">そして、A.hとB.hにはこれが含まれます。</target>
        </trans-unit>
        <trans-unit id="ac1184497beca27b3659c5091326446420c61bde" translate="yes" xml:space="preserve">
          <source>As illustrated by the Standard library's &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; header, the proper way to provide forward declarations for others is to have a &lt;strong&gt;&lt;em&gt;forward declaration header&lt;/em&gt;&lt;/strong&gt;.  For example:</source>
          <target state="translated">標準ライブラリの &lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt; ヘッダーに示されているように、他の人に前方宣言を提供する適切な方法は、 &lt;strong&gt;&lt;em&gt;前方宣言ヘッダー&lt;/em&gt;&lt;/strong&gt;を用意することです。 例えば：</target>
        </trans-unit>
        <trans-unit id="77683cf3abd005f165bb506342d65293c00de62e" translate="yes" xml:space="preserve">
          <source>Best practice: forward declaration headers</source>
          <target state="translated">ベストプラクティス:フォワード宣言ヘッダー</target>
        </trans-unit>
        <trans-unit id="74deff191fda857d68d3bc15f5c93ee8ded3a54f" translate="yes" xml:space="preserve">
          <source>But his illustration is not really good. Because both classes (A and B) only need an incomplete type of each other (pointer fields / parameters).</source>
          <target state="translated">しかし、彼のイラストは本当に良いものではありません。なぜなら、両方のクラス(AとB)は、お互いの不完全な型(ポインタ・フィールド・パラメータ)を必要としているだけだからです。</target>
        </trans-unit>
        <trans-unit id="75fc1aa2d190377184c20ea93fcb905a3f793550" translate="yes" xml:space="preserve">
          <source>Clearly a circular reference that you must break.</source>
          <target state="translated">明らかに折らなければならない回覧板の参照。</target>
        </trans-unit>
        <trans-unit id="6040c18d82d48918fbc4d731c452e2e20e0d5ad9" translate="yes" xml:space="preserve">
          <source>Create two files, A_def.h, B_def.h. These will contain only &lt;code&gt;A&lt;/code&gt;'s and &lt;code&gt;B&lt;/code&gt;'s definition:</source>
          <target state="translated">A_def.h、B_def.hの2つのファイルを作成します。 これらには &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の定義のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="9b16ab6892fe30ec91d4d7d0f6987f7846cab18b" translate="yes" xml:space="preserve">
          <source>Doing like this makes it possible to still have a bunch of inlines in both(or multiple) header files. But it's necessary to have &lt;em&gt;include guards&lt;/em&gt;.</source>
          <target state="translated">このようにすると、両方（または複数）のヘッダーファイルに多数のインラインを含めることができます。 ただし&lt;em&gt;、ガード&lt;/em&gt;を&lt;em&gt;含める&lt;/em&gt;必要があり&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="81c16b0b2bc90f7f91e5cf3ee2c0bac5abc351e9" translate="yes" xml:space="preserve">
          <source>File '''a.h''':</source>
          <target state="translated">ファイル '''a.h''。</target>
        </trans-unit>
        <trans-unit id="de16fa2ea7929e19489f5e9846b72fe1b89c19c7" translate="yes" xml:space="preserve">
          <source>File '''b.h''':</source>
          <target state="translated">ファイル '''b.h''。</target>
        </trans-unit>
        <trans-unit id="387c15524fe17924ad63c766cd614d16ea296e8e" translate="yes" xml:space="preserve">
          <source>File '''main.cpp''':</source>
          <target state="translated">ファイル'''main.cpp''。</target>
        </trans-unit>
        <trans-unit id="0dc6dc624e5e946076ade7fdb218e4914345198b" translate="yes" xml:space="preserve">
          <source>Forward declaration is way to go.</source>
          <target state="translated">前方宣言が道しるべになっている。</target>
        </trans-unit>
        <trans-unit id="4607da7704e13445b53226db5ba9a20543b4b49a" translate="yes" xml:space="preserve">
          <source>HTH.</source>
          <target state="translated">HTH.</target>
        </trans-unit>
        <trans-unit id="8c8ca565ab5aa7031937c4de83f510564059d503" translate="yes" xml:space="preserve">
          <source>He is not just saying &quot;put forward declarations into a separate header&quot;. He says that you have to spilt class definition headers and inline function definitions into different header files to allow &quot;defered dependencies&quot;.</source>
          <target state="translated">彼が言っているのは、単に「宣言を別のヘッダに入れろ」ということではありません。クラス定義ヘッダとインライン関数定義を別のヘッダファイルにスポイルして、「ディフェードされた依存関係」を可能にすると言っています。</target>
        </trans-unit>
        <trans-unit id="13b338a7985effc7cabc1733321362ea88780210" translate="yes" xml:space="preserve">
          <source>Here is the solution for templates: &lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;How to handle circular dependencies with templates&lt;/a&gt;</source>
          <target state="translated">テンプレートのソリューションは次のとおりです。テンプレート&lt;a href=&quot;https://studiofreya.com/cpp/how-to-handle-circular-dependencies-with-templates-in-c/&quot;&gt;を使用して循環依存関係を処理する方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97511feb4f598817ee61734e3169117c515f2180" translate="yes" xml:space="preserve">
          <source>Here's how you can do this, exactly retaining all the details, and usability:</source>
          <target state="translated">ここでは、正確にすべての詳細を保持し、使いやすさを実現する方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="20f3c7e77b0608d75066808c459e2e9945b5daa9" translate="yes" xml:space="preserve">
          <source>How can I create two classes that both know about each other?</source>
          <target state="translated">お互いに知っている2つのクラスを作るにはどうしたらいいですか?</target>
        </trans-unit>
        <trans-unit id="c6d2a1cd051f34708d70b7656212532a2164b343" translate="yes" xml:space="preserve">
          <source>I often find myself in a situation where I am facing multiple compilation/linker errors in a C++ project due to some bad design decisions (made by someone else :) ) which lead to circular dependencies between C++ classes in different header files &lt;em&gt;(can happen also in the same file)&lt;/em&gt;. But fortunately(?) this doesn't happen often enough for me to remember the solution to this problem for the next time it happens again.</source>
          <target state="translated">異なるヘッダーファイル内のC ++クラス間の循環依存関係につながる（他の誰かが行った）いくつかの悪い設計決定が原因で、C ++プロジェクトで複数のコンパイル/リンカーエラーに直面している状況にしばしば気づきます&lt;em&gt;（また、発生する可能性があります）同じファイル内）&lt;/em&gt; 。 しかし、幸いにも（？）この問題は頻繁に発生するわけではないので、次に問題が発生したときのために、この問題の解決策を思い出すことはできません。</target>
        </trans-unit>
        <trans-unit id="b1a6b70bdc70c07e677f7773e517919114388c46" translate="yes" xml:space="preserve">
          <source>I once solved this kind of problem by moving all &lt;em&gt;inlines&lt;/em&gt; after the class definition and putting the &lt;code&gt;#include&lt;/code&gt; for the other classes just before the &lt;em&gt;inlines&lt;/em&gt; in the header file. This way one make sure all definitions+inlines are set prior the inlines are parsed.</source>
          <target state="translated">私はかつてこの種の問題を、クラス定義の後にすべての&lt;em&gt;インラインを&lt;/em&gt;移動し、ヘッダーファイルの&lt;em&gt;インラインの&lt;/em&gt;直前に他のクラスの &lt;code&gt;#include&lt;/code&gt; を配置することで解決しました。 このようにして、インラインが解析される前に、すべての定義とインラインが設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="da2fc2402ebf6a219d39046e92bd6af32dfb31c9" translate="yes" xml:space="preserve">
          <source>I've written a post about this once: &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;Resolving circular dependencies in c++&lt;/a&gt;</source>
          <target state="translated">私はこれについて一度投稿しました： &lt;a href=&quot;https://ewirch.github.io/2013/12/resolving-circular-dependencies.html&quot;&gt;C ++での循環依存関係の解決&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cece9a731862164a65c9b4dce98bf7a4d58cb7da" translate="yes" xml:space="preserve">
          <source>If A's code has template specialisations / &quot;traits&quot; for the old &lt;code&gt;B&lt;/code&gt;, they won't take effect.</source>
          <target state="translated">Aのコードに古い &lt;code&gt;B&lt;/code&gt; のテンプレート特殊化/「特性」がある場合、それらは有効になりません。</target>
        </trans-unit>
        <trans-unit id="8c6b9b3d6a6df2e72dccf31147c614f0473001ee" translate="yes" xml:space="preserve">
          <source>If both classes call functions of the other, you have to move the definitions out.</source>
          <target state="translated">両方のクラスが他のクラスの関数を呼び出す場合は、定義を外に移動させなければなりません。</target>
        </trans-unit>
        <trans-unit id="95c4bb8d12a4563a8e0aaf52f1e8dff97f93cf47" translate="yes" xml:space="preserve">
          <source>Imagine you are writing a compiler. And you see code like this.</source>
          <target state="translated">あなたがコンパイラを書いていると想像してください。そして、このようなコードを見たとします。</target>
        </trans-unit>
        <trans-unit id="b6adf836b15b71e6d4a4faf8d4b7c043a030e6fa" translate="yes" xml:space="preserve">
          <source>In some cases it is possible to &lt;em&gt;define&lt;/em&gt; a method or a constructor of class B in the header file of class A to resolve circular dependencies involving definitions.
In this way you can avoid having to put definitions in &lt;code&gt;.cc&lt;/code&gt; files, for example if you want to implement a header only library.</source>
          <target state="translated">場合によっては、クラスAのヘッダーファイルでクラスBのメソッドまたはコンストラクターを定義して、定義に関係する循環依存関係を解決することができます。 このようにして、たとえばヘッダーのみのライブラリを実装したい場合などに、 &lt;code&gt;.cc&lt;/code&gt; ファイルに定義を置く必要を回避できます。</target>
        </trans-unit>
        <trans-unit id="74f6724118fdf9e8782645d9c398335943723329" translate="yes" xml:space="preserve">
          <source>It would result in the following code:</source>
          <target state="translated">その結果、以下のようなコードになります。</target>
        </trans-unit>
        <trans-unit id="99e48bd024350ae66199fb4bdc8f9ce56482b3cb" translate="yes" xml:space="preserve">
          <source>Like this</source>
          <target state="translated">このように</target>
        </trans-unit>
        <trans-unit id="06b204a42dd43a60a1edbdaff87caff360918ad7" translate="yes" xml:space="preserve">
          <source>Note that A_def.h and B_def.h are &quot;private&quot; headers, users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; should not use them. The public header is A.h and B.h.</source>
          <target state="translated">A_def.hとB_def.hは「プライベート」ヘッダーなので、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; のユーザーはそれらを使用しないでください。 パブリックヘッダーはAhおよびBhです。</target>
        </trans-unit>
        <trans-unit id="421e787d5be309f635285a9fa87fc31b0c2c7573" translate="yes" xml:space="preserve">
          <source>Now things are better. Somewhat. &lt;code&gt;main()&lt;/code&gt; still says:</source>
          <target state="translated">今、物事はより良いです。 幾分。 &lt;code&gt;main()&lt;/code&gt; はまだ言います：</target>
        </trans-unit>
        <trans-unit id="5522389abcdcb2f44350da49c971b70e49fc26a7" translate="yes" xml:space="preserve">
          <source>Order of declaration matters (which is why you are moving out the definitions).</source>
          <target state="translated">申告の順番が重要(だから定義を引っ越すのか</target>
        </trans-unit>
        <trans-unit id="772ed62a5348f7500932ae3d7afc2e74c082ead4" translate="yes" xml:space="preserve">
          <source>Poor but common practice: forward declare stuff in other libs</source>
          <target state="translated">貧しくても一般的な慣習:他の libs にあるものを前方に宣言する</target>
        </trans-unit>
        <trans-unit id="517081acc1bfe64dad04fd896e5e967ccd952c46" translate="yes" xml:space="preserve">
          <source>Read the FAQ:</source>
          <target state="translated">よくある質問を読む。</target>
        </trans-unit>
        <trans-unit id="2309355c3ea8f996a00fa38198819142da113849" translate="yes" xml:space="preserve">
          <source>Resolve build errors due to circular dependency amongst classes</source>
          <target state="translated">クラス間の循環的な依存関係によるビルドエラーの解決</target>
        </trans-unit>
        <trans-unit id="dcd4d8fc79d1043fddd5ad14508f46729fb0455a" translate="yes" xml:space="preserve">
          <source>Say - instead of using a forward declaration header as explained above - code in &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; instead forward-declares &lt;code&gt;class B;&lt;/code&gt; itself:</source>
          <target state="translated">&lt;code&gt;a.cc&lt;/code&gt; 、上記で説明したように転送宣言ヘッダーを使用する代わりに、代わりに &lt;code&gt;a.h&lt;/code&gt; またはa.ccのコードで &lt;code&gt;class B;&lt;/code&gt; 転送宣言します。 自体：</target>
        </trans-unit>
        <trans-unit id="621dd8cec0802a26dd1824800d7292b9666ba339" translate="yes" xml:space="preserve">
          <source>So for the purposes of easy recall in the future I am going to post a representative problem and a solution along with it. Better solutions are of-course welcome.</source>
          <target state="translated">そこで、今後は簡単に思い出すことができるように、代表的な問題とその解決策を掲載していきたいと思います。もちろん、より良い解決策があれば歓迎します。</target>
        </trans-unit>
        <trans-unit id="918271f6bede6bfd0286c73dd240da7cc1429f01" translate="yes" xml:space="preserve">
          <source>So let's tell the compiler about &lt;code&gt;B&lt;/code&gt;. This is known as a &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;forward declaration&lt;/a&gt;, and is discussed further in &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;this answer&lt;/a&gt;.</source>
          <target state="translated">それでは、コンパイラーに &lt;code&gt;B&lt;/code&gt; について伝えましょう。 これは&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/class&quot;&gt;前方宣言&lt;/a&gt;と呼ばれ、 &lt;a href=&quot;https://stackoverflow.com/a/4757718/391161&quot;&gt;この回答で&lt;/a&gt;さらに説明されています 。</target>
        </trans-unit>
        <trans-unit id="9f30ee659c9eb0d399d76133970197e5e7745d6b" translate="yes" xml:space="preserve">
          <source>The basic technique is to decouple the classes using interfaces. So in your case:</source>
          <target state="translated">基本的なテクニックは、インターフェースを使ってクラスを分離することです。だから、あなたの場合は</target>
        </trans-unit>
        <trans-unit id="76cb7d14f4106dab17b2a3411cce1aeb9af6d4c1" translate="yes" xml:space="preserve">
          <source>The clue to solving this problem is to declare both classes before providing the definitions (implementations). It&amp;rsquo;s not possible to split the declaration and definition into separate files, but you can structure them as if they were in separate files.</source>
          <target state="translated">この問題を解決する手がかりは、定義（実装）を提供する前に両方のクラスを宣言することです。 宣言と定義を別々のファイルに分割することはできませんが、それらを別々のファイルにあるかのように構成できます。</target>
        </trans-unit>
        <trans-unit id="964876ba5525b8da7c2b18a45e74b2efe3110bdf" translate="yes" xml:space="preserve">
          <source>The down side of the following solution is (assuming that you had placed the methods in the header file to inline them) that the methods are no longer inlined by the compiler and trying to use the inline keyword produces linker errors.</source>
          <target state="translated">以下の解決策の欠点は、(メソッドをインライン化するためにヘッダファイルにメソッドを配置したと仮定して)コンパイラによってメソッドがインライン化されなくなり、インラインキーワードを使用しようとするとリンカエラーが発生することです。</target>
        </trans-unit>
        <trans-unit id="3785912cdfe31e3ef7ee69bb9533f28f410f1984" translate="yes" xml:space="preserve">
          <source>The maintainers of the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; libraries should each be responsible for keeping their forward declaration headers in sync with their headers and implementation files, so - for example - if the maintainer of &quot;B&quot; comes along and rewrites the code to be...</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; ライブラリのメンテナーは、それぞれのフォワード宣言ヘッダーをヘッダーおよび実装ファイルと同期させる責任があります。たとえば、「B」のメンテナーがやって来て、コードを次のように書き換えた場合...</target>
        </trans-unit>
        <trans-unit id="03de7e5e237e1dfc343937c7767442570b591bae" translate="yes" xml:space="preserve">
          <source>The reason this fix is bad is because the next person to &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; will have to declare &lt;code&gt;B&lt;/code&gt; before they can use it and will get a terrible &lt;code&gt;#include&lt;/code&gt; error. So let's move the declaration into &lt;strong&gt;A.h&lt;/strong&gt; itself.</source>
          <target state="translated">この修正が悪い理由は、 &lt;code&gt;#include &quot;A.h&quot;&lt;/code&gt; 次の人が &lt;code&gt;B&lt;/code&gt; を使用する前にBを宣言する必要があり、ひどい &lt;code&gt;#include&lt;/code&gt; エラーが発生するためです。 それでは、宣言を&lt;strong&gt;Ah&lt;/strong&gt;自体に移しましょう。</target>
        </trans-unit>
        <trans-unit id="9db328ea36a8dea61565be6561a6fa8ba17f27d1" translate="yes" xml:space="preserve">
          <source>The simple example presented on Wikipedia worked for me.
(you can read the complete description at &lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt; )</source>
          <target state="translated">ウィキペディアで紹介されている簡単な例は私のために働いた。 （完全な説明は&lt;a href=&quot;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&quot;&gt;http://en.wikipedia.org/wiki/Circular_dependency#Example_of_circular_dependencies_in_C.2B.2B&lt;/a&gt;で読むことができます）</target>
        </trans-unit>
        <trans-unit id="726a148f2714a29f2b81e70df9012bf68874e4e1" translate="yes" xml:space="preserve">
          <source>The way to think about this is to &quot;think like a compiler&quot;.</source>
          <target state="translated">その考え方は、「コンパイラのように考える」ということです。</target>
        </trans-unit>
        <trans-unit id="d02efca86e66ddac497e623f13ad84f059c26ada" translate="yes" xml:space="preserve">
          <source>Things to remember:</source>
          <target state="translated">覚えておくべきこと</target>
        </trans-unit>
        <trans-unit id="677d178e50c7529e22802741eca44b5a4d630ea1" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;works&lt;/em&gt;. It is not &lt;em&gt;great&lt;/em&gt;. But at this point you should have an understanding of the circular reference problem and what we did to &quot;fix&quot; it, albeit the fix is bad.</source>
          <target state="translated">これで&lt;em&gt;うまくいき&lt;/em&gt;ます。 よくないです。 しかし、この時点で、循環参照の問題と、それが「修正」されたものの、修正が悪いにもかかわらず、それを理解したはずです。</target>
        </trans-unit>
        <trans-unit id="0d05028a139bfbdc640ca995cdae5b0e9170344a" translate="yes" xml:space="preserve">
          <source>This code does not compile because B::Do needs a complete type of A which is defined later.</source>
          <target state="translated">B::Do は後に定義される A の完全な型を必要とするため、このコードはコンパイルされません。</target>
        </trans-unit>
        <trans-unit id="e408199cdeea50714b0aa0fe985cbf1eb9e19850" translate="yes" xml:space="preserve">
          <source>This directive should defer the processing of the current file and complete all pending includes.</source>
          <target state="translated">このディレクティブは、現在のファイルの処理を延期して、 保留中のすべてのインクルードを完了させなければなりません。</target>
        </trans-unit>
        <trans-unit id="889c7f1b4663e1318562106d30f679e883e3e711" translate="yes" xml:space="preserve">
          <source>This is exactly possible with these two header files for each class wich needs to define inline functions.
The only issue is that the circular classes can't just include the &quot;public header&quot;.</source>
          <target state="translated">これは、インライン関数を定義する必要がある各クラスのためのこれら2つのヘッダファイルで正確に可能です。唯一の問題は、サーキュラー・クラスが単に &quot;パブリック・ヘッダー &quot;をインクルードできないことです。</target>
        </trans-unit>
        <trans-unit id="781b08e9652d1374708b49eb627b045b2e7a40fc" translate="yes" xml:space="preserve">
          <source>This simple code would not work:</source>
          <target state="translated">この単純なコードではうまくいきません。</target>
        </trans-unit>
        <trans-unit id="88ffd7e2f24612377695e3d257fa460de5ac406c" translate="yes" xml:space="preserve">
          <source>This won't work if &lt;code&gt;class A&lt;/code&gt; has an object of &lt;code&gt;class B&lt;/code&gt; as a member or vice versa.</source>
          <target state="translated">&lt;code&gt;class A&lt;/code&gt; が &lt;code&gt;class B&lt;/code&gt; オブジェクトをメンバーとして持っている場合、またはその逆の場合、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="b923ee0d714b0e4db9a18d6fae060d4f0c4c7f31" translate="yes" xml:space="preserve">
          <source>To make sure that it compiles the source code should look like this:</source>
          <target state="translated">ソースコードがコンパイルされていることを確認するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="14a94b58b2296c47a62b7815c3f2cee32b940bb0" translate="yes" xml:space="preserve">
          <source>To solve this issue I would like to suggest a preprocessor extension: &lt;code&gt;#pragma process_pending_includes&lt;/code&gt;</source>
          <target state="translated">この問題を解決するために、プリプロセッサ拡張機能を提案し &lt;code&gt;#pragma process_pending_includes&lt;/code&gt; 。 #pragma process_pending_includes</target>
        </trans-unit>
        <trans-unit id="5128f234d09a3ac6cd4efa0b4d8bca399c480210" translate="yes" xml:space="preserve">
          <source>To understand it better imagine that class A has a field of type B not B*. In addition class A and B want to define an inline function with parameters of the other type:</source>
          <target state="translated">これを理解するには、クラスAがB*ではなくB型のフィールドを持っていると想像してください。さらに、クラスAとBは、もう一方の型のパラメータを持つインライン関数を定義したいと考えています。</target>
        </trans-unit>
        <trans-unit id="c1c080399aaa5f1044d101f7c55fa5c28cfd080b" translate="yes" xml:space="preserve">
          <source>Unfortunately I can't comment the answer from geza.</source>
          <target state="translated">残念ながらゲザからの回答はコメントできません。</target>
        </trans-unit>
        <trans-unit id="2cb3cf90eb4311dac6ef7e6db021df01a4e8510d" translate="yes" xml:space="preserve">
          <source>Unfortunately, all the previous answers are missing some details. The correct solution is a little bit cumbersome, but this is the only way to do it properly. And it scales easily, handles more complex dependencies as well.</source>
          <target state="translated">残念ながら、これまでの解答はどれも細かい部分が欠けています。正解は少し面倒ですが、これが唯一の正しい方法です。そして、それは簡単にスケーリングし、より複雑な依存関係も同様に処理します。</target>
        </trans-unit>
        <trans-unit id="1e45dba7c7024685dc4586b56849004ec847bda5" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with inline functions?</source>
          <target state="translated">インライン関数でフォワード宣言を使用する場合、どのような特別な配慮が必要ですか?</target>
        </trans-unit>
        <trans-unit id="92b1bad012b996a0bc6851c2bfca4e5dbbb401a3" translate="yes" xml:space="preserve">
          <source>What special considerations are needed when forward declarations are used with member objects?</source>
          <target state="translated">メンバ・オブジェクトでフォワード宣言を使用する場合、どのような特別な配慮が必要ですか?</target>
        </trans-unit>
        <trans-unit id="e240359c6981a1b2612797039e784ab3a7e60fd6" translate="yes" xml:space="preserve">
          <source>When you are compiling the &lt;strong&gt;.cc&lt;/strong&gt; file (remember that the &lt;strong&gt;.cc&lt;/strong&gt; and not the &lt;strong&gt;.h&lt;/strong&gt; is the unit of compilation), you need to allocate space for object &lt;code&gt;A&lt;/code&gt;. So, well, how much space then? Enough to store &lt;code&gt;B&lt;/code&gt;! What's the size of &lt;code&gt;B&lt;/code&gt; then? Enough to store &lt;code&gt;A&lt;/code&gt;! Oops.</source>
          <target state="translated">&lt;strong&gt;.cc&lt;/strong&gt;ファイルをコンパイルするとき（ &lt;strong&gt;.h&lt;/strong&gt;ではなく&lt;strong&gt;.cc&lt;/strong&gt;がコンパイルの単位であることを忘れないでください）、オブジェクト &lt;code&gt;A&lt;/code&gt; にスペースを割り当てる必要があります。 それで、それでは、どのくらいのスペースがあるのでしょうか？ &lt;code&gt;B&lt;/code&gt; を格納するのに十分です！ では、 &lt;code&gt;B&lt;/code&gt; のサイズは？ &lt;code&gt;A&lt;/code&gt; を保存するのに十分です！ おっとっと。</target>
        </trans-unit>
        <trans-unit id="2e7cdfc5bd5d6d6eb4f7c32ffb09ee264781d06a" translate="yes" xml:space="preserve">
          <source>You can avoid compilation errors if you remove the method definitions from the header files and let the classes contain only the method declarations and variable declarations/definitions. The method definitions should be placed in a .cpp file (just like a best practice guideline says).</source>
          <target state="translated">ヘッダファイルからメソッドの定義を削除して、メソッド宣言と変数宣言の定義だけをクラスに含ませるとコンパイルエラーを避けることができます。メソッドの定義は .cpp ファイルに置くべきです (ベストプラクティスのガイドラインに書かれているように)。</target>
        </trans-unit>
        <trans-unit id="dd91a98542fc87ffc1090838a46ff06e65953c16" translate="yes" xml:space="preserve">
          <source>You can break it by allowing the compiler to instead reserve as much space as it knows about upfront - pointers and references, for example, will always be 32 or 64 bits (depending on the architecture) and so if you replaced (either one) by a pointer or reference, things would be great. Let's say we replace in &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">コンパイラが前もって知っている限り多くのスペースを代わりに予約することを許可することでそれを壊すことができます-たとえば、ポインタと参照は常に32または64ビット（アーキテクチャによって異なります）なので、（いずれか1つ）をポインタまたは参照、物事は素晴らしいでしょう。 &lt;code&gt;A&lt;/code&gt; で置き換えるとしましょう：</target>
        </trans-unit>
        <trans-unit id="58dd4fc03b3183d34495adb76c399fa4c23906e0" translate="yes" xml:space="preserve">
          <source>You can see why the compiler can't deal with this - it has no idea what &lt;code&gt;B&lt;/code&gt; is - it has never even seen the symbol before.</source>
          <target state="translated">コンパイラがこれを処理できない理由がわかります &lt;code&gt;B&lt;/code&gt; が何であるかはわかりません。以前にシンボルを見たこともありません。</target>
        </trans-unit>
        <trans-unit id="334716d86bd9d03a9b1ca74f4acae1d373b51013" translate="yes" xml:space="preserve">
          <source>a.fwd.h:</source>
          <target state="translated">a.fwd.h:</target>
        </trans-unit>
        <trans-unit id="5cb1315d250ae93e604c5200c412e1ce59bd335a" translate="yes" xml:space="preserve">
          <source>a.h:</source>
          <target state="translated">a.h:</target>
        </trans-unit>
        <trans-unit id="9b217404d46524413c5e8204995ad0e799490a4b" translate="yes" xml:space="preserve">
          <source>b.fwd.h:</source>
          <target state="translated">b.fwd.h:</target>
        </trans-unit>
        <trans-unit id="7b01869b936c6f06b0b65bfbcc2eaf8a238f6400" translate="yes" xml:space="preserve">
          <source>b.h:</source>
          <target state="translated">b.h:</target>
        </trans-unit>
        <trans-unit id="64566382bb3e54d62d59cdd32e72baee64249f2e" translate="yes" xml:space="preserve">
          <source>build tools relying on &lt;code&gt;#include&lt;/code&gt; analysis and changed file timestamps won't rebuild &lt;code&gt;A&lt;/code&gt; (and its further-dependent code) after the change to B, causing errors at link time or run time.  If B is distributed as a runtime loaded DLL, code in &quot;A&quot; may fail to find the differently-mangled symbols at runtime, which may or may not be handled well enough to trigger orderly shutdown or acceptably reduced functionality.</source>
          <target state="translated">&lt;code&gt;#include&lt;/code&gt; 分析と変更されたファイルのタイムスタンプに依存するビルドツールは、Bへの変更後に &lt;code&gt;A&lt;/code&gt; （およびその依存コード）を再ビルドしないため、リンク時または実行時にエラーが発生します。 BがランタイムロードされたDLLとして配布される場合、「A」のコードは実行時に異なるマングルされたシンボルを見つけられない可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1ee4e91278afe33a3ee30ba9b7a04c3ef83a1f0" translate="yes" xml:space="preserve">
          <source>compilation of A will terminate with an error once it gets to the conflicting declaration/definition of &lt;code&gt;B&lt;/code&gt; (i.e. the above change to B broke A and any other clients abusing forward declarations, instead of working transparently).</source>
          <target state="translated">Aのコンパイルは、 &lt;code&gt;B&lt;/code&gt; の競合する宣言/定義に到達すると、エラーで終了します（つまり、上記のBへの変更により、透過的に動作するのではなく、Aと他のクライアントが前方宣言を悪用しました。</target>
        </trans-unit>
        <trans-unit id="f9048fd12b1e61b10c0a533226d367f5f45f59ca" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;a.h&lt;/code&gt; or &lt;code&gt;a.cc&lt;/code&gt; did include &lt;code&gt;b.h&lt;/code&gt; later:</source>
          <target state="translated">&lt;code&gt;a.h&lt;/code&gt; または &lt;code&gt;a.cc&lt;/code&gt; に後で &lt;code&gt;b.h&lt;/code&gt; が含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="aa6f7b44888bbdbecec2dd011d394e881b515ef4" translate="yes" xml:space="preserve">
          <source>inline functions still inline</source>
          <target state="translated">インライン関数はインラインのまま</target>
        </trans-unit>
        <trans-unit id="99401692aa69fba656f0bcf654657ddc1f88b0cf" translate="yes" xml:space="preserve">
          <source>otherwise (if A didn't eventually include &lt;code&gt;b.h&lt;/code&gt; - possible if A just stores/passes around Bs by pointer and/or reference)</source>
          <target state="translated">それ以外の場合（Aが最終的に &lt;code&gt;b.h&lt;/code&gt; 含まなかった場合-Aがポインタまたは参照、あるいはその両方でBsを単に格納/渡す場合に可能）</target>
        </trans-unit>
        <trans-unit id="63e287eac53f9dc1ae4fa91bc6f97afded9483ca" translate="yes" xml:space="preserve">
          <source>the solution is exactly the same as originally intended</source>
          <target state="translated">案の定</target>
        </trans-unit>
        <trans-unit id="535f59137c60800ddc3e6bb55a5e87e93d4f248c" translate="yes" xml:space="preserve">
          <source>users of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can include A.h and B.h in any order</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; のユーザーは、AhとBhを任意の順序で含めることができます</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
