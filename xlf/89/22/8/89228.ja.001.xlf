<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/89228">
    <body>
      <group id="89228">
        <trans-unit id="2fa022bd967a52296e65e0e93e4983b8a1355086" translate="yes" xml:space="preserve">
          <source>(I find it interesting and slightly counterintuitive that the version info gets put to stderr instead of stdout.)</source>
          <target state="translated">(バージョン情報が標準出力ではなく標準エラーに出力されるのは面白いし、少し反感を買います)。</target>
        </trans-unit>
        <trans-unit id="d73ee7e04c378d99b234285f778f66d6d33d3f5e" translate="yes" xml:space="preserve">
          <source>...or for a very simple command:</source>
          <target state="translated">...または非常にシンプルなコマンドの場合。</target>
        </trans-unit>
        <trans-unit id="03e119785353bdbc85f2148afb573722fd371740" translate="yes" xml:space="preserve">
          <source>/* &lt;em&gt;UPD 2015.10.27&lt;/em&gt; @eryksun in a comment below notes, that the semantically correct flag is CREATE_NEW_CONSOLE (0x00000010) */</source>
          <target state="translated">/ * &lt;em&gt;UPD 2015.10.27&lt;/em&gt; @eryksunのコメントの下に、意味的に正しいフラグはCREATE_NEW_CONSOLE（0x00000010）であると記載されています* /</target>
        </trans-unit>
        <trans-unit id="a13e78e8e9e3bfa32930177509f879f3e0e23897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commands&lt;/code&gt; contains wrapper functions for &lt;code&gt;os.popen&lt;/code&gt;, but it has been removed from Python 3 since &lt;code&gt;subprocess&lt;/code&gt; is a better alternative.</source>
          <target state="translated">&lt;code&gt;commands&lt;/code&gt; は &lt;code&gt;os.popen&lt;/code&gt; のラッパー関数が含まれていますが、 &lt;code&gt;subprocess&lt;/code&gt; の方がより優れているため、Python 3から削除されました。</target>
        </trans-unit>
        <trans-unit id="4c8bf122b90b453d9cf47e82094c872bf30dbac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system(&quot;some_command with args&quot;)&lt;/code&gt; passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example:</source>
          <target state="translated">&lt;code&gt;os.system(&quot;some_command with args&quot;)&lt;/code&gt; は、コマンドと引数をシステムのシェルに渡します。 この方法で実際に一度に複数のコマンドを実行し、パイプと入出力リダイレクトを設定できるので、これは素晴らしいことです。 例えば：</target>
        </trans-unit>
        <trans-unit id="f933a6d1f532e7034395c9645f4d7b96a2af4e03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system&lt;/code&gt; does not allow you to store results, so if you want to store results in some list or something, a &lt;code&gt;subprocess.call&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;os.system&lt;/code&gt; では結果を保存できません 。そのため、結果を何らかのリストなどに保存したい場合は、 &lt;code&gt;subprocess.call&lt;/code&gt; が機能します。</target>
        </trans-unit>
        <trans-unit id="e0a4cc68bc86b75a6e42b06c428e42fa3f4d7cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system&lt;/code&gt; is OK, but kind of dated.  It's also not very secure.  Instead, try &lt;code&gt;subprocess&lt;/code&gt;.  &lt;code&gt;subprocess&lt;/code&gt; does not call sh directly and is therefore more secure than &lt;code&gt;os.system&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.system&lt;/code&gt; は問題ありませんが、 少し時代遅れです。 また、あまり安全ではありません。 代わりに、 &lt;code&gt;subprocess&lt;/code&gt; を試してください。 &lt;code&gt;subprocess&lt;/code&gt; はshを直接呼び出さないため、 &lt;code&gt;os.system&lt;/code&gt; よりも安全です。</target>
        </trans-unit>
        <trans-unit id="1be8c4f39fb826c1206cfeb8a2a8525188e3ba01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; waits for the command to successfully finish, then returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object. It may instead raise &lt;code&gt;TimeoutExpired&lt;/code&gt; (if you give it a &lt;code&gt;timeout=&lt;/code&gt; argument) or &lt;code&gt;CalledProcessError&lt;/code&gt; (if it fails and you pass &lt;code&gt;check=True&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; はコマンドが正常に終了するのを待ってから、 &lt;code&gt;CompletedProcess&lt;/code&gt; オブジェクトを返します。 代わりに、 &lt;code&gt;TimeoutExpired&lt;/code&gt; （ &lt;code&gt;timeout=&lt;/code&gt; 引数を指定した場合）または &lt;code&gt;CalledProcessError&lt;/code&gt; （失敗して &lt;code&gt;check=True&lt;/code&gt; を渡した場合）が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="37700740d479dac1f23a3d7e42187418def430b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream = os.popen(&quot;some_command with args&quot;)&lt;/code&gt; will do the same thing as &lt;code&gt;os.system&lt;/code&gt; except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.  See &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;stream = os.popen(&quot;some_command with args&quot;)&lt;/code&gt; は、そのプロセスの標準入出力にアクセスするために使用できるファイルのようなオブジェクトを提供することを除いて、 &lt;code&gt;os.system&lt;/code&gt; と同じことを行います。 popenには他にも3つのバリエーションがあり、すべてがI / Oをわずかに異なって処理します。 すべてを文字列として渡すと、コマンドはシェルに渡されます。 それらをリストとして渡すと、何かをエスケープすることを心配する必要はありません。 &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4416f3a6f2bce6eeb7854601cba76dadb8bf5bd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.Popen&lt;/code&gt; executes the &amp;lt;command&amp;gt; as a subprocess. In my case, I need to execute file &amp;lt;a&amp;gt; which needs to communicate with another program, &amp;lt;b&amp;gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.Popen&lt;/code&gt; は、&amp;lt;command&amp;gt;をサブプロセスとして実行します。 私の場合、別のプログラム&amp;lt;b&amp;gt;と通信する必要があるファイル&amp;lt;a&amp;gt;を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="33e4bd1cac6b8c03f49979ab4855183ec2d516b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.check_call&lt;/code&gt; is convenient if you don't want to test return values. It throws an exception on any error.</source>
          <target state="translated">戻り値をテストしたくない場合は、 &lt;code&gt;subprocess.check_call&lt;/code&gt; が便利です。 エラーが発生すると例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ff4a1b97ccf371c558c702bd25078a23e3ea92ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.run&lt;/code&gt; is the recommended approach &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess&quot;&gt;as of Python 3.5&lt;/a&gt; if your code does not need to maintain compatibility with earlier Python versions. It's more consistent and offers similar ease-of-use as Envoy. (Piping isn't as straightforward though. See &lt;a href=&quot;https://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes&quot;&gt;this question for how&lt;/a&gt;.)</source>
          <target state="translated">コードが以前のバージョンのPythonとの互換性を維持する必要がない場合、 &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess&quot;&gt;Python 3.5以降で&lt;/a&gt;は &lt;code&gt;subprocess.run&lt;/code&gt; が推奨されるアプローチです。 より一貫性があり、Envoyと同様の使いやすさを提供します。 （ただし、配管は簡単ではありません。 &lt;a href=&quot;https://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes&quot;&gt;方法&lt;/a&gt;については、 この質問を参照してください。）</target>
        </trans-unit>
        <trans-unit id="6c10957c993d4d3137d83cbbd9734cf58bddc749" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note on Python version: If you are still using Python 2, &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;subprocess.call&lt;/a&gt; works in a similar way.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Pythonバージョンに関する注意：Python 2をまだ使用している場合、 &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;subprocess.call&lt;/a&gt;は同様の方法で機能します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abdf1ab661fc1bb5d31823425f22c54b0fe0a4c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ProTip: &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot;&gt;shlex.split&lt;/a&gt; can help you to parse the command for &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, and other &lt;code&gt;subprocess&lt;/code&gt; functions in case you don't want (or you can't!) provide them in form of lists:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ProTip： &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot;&gt;shlex.split&lt;/a&gt;は、リストの形式で提供したくない場合（またはできない場合）に、 &lt;code&gt;run&lt;/code&gt; 、 &lt;code&gt;call&lt;/code&gt; 、およびその他の &lt;code&gt;subprocess&lt;/code&gt; 関数のコマンドを解析するのに役立ちます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fae92702cc843aed7b6f7742cd5bf98fb81d5390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;These are all the libraries:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これらはすべてのライブラリです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="122b554b12ec9d4243a60880464396676946c117" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;commands&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;commands&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="295a7b21b6132cb7af6f19ee9b55d3e68dccd713" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;envoy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;envoy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f149e4b6717c8ff1d7cb99cddbe344ab27b8f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fabric&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;fabric&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b5d2dd621b183cb3e77e4464994db536fc8f8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;os - This module provides a portable way of using operating system-dependent functionality.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;os-このモジュールは、オペレーティングシステムに依存する機能を使用するポータブルな方法を提供します。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce67685e9d0f0271929077ff3385b7f97cb94aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;os&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;os&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e109416858f9fd7878d662f569388a7e5ac5120e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pexpect&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;pexpect&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8ee21152a9f689364ff72189ea954186f6d2bea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;plumbum&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;plumbum&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe04888499cbb6a1a7308e216ab1b1883dd3550a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sh&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;sh&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a295458c00f4d8f888b9bb2e34b5e88b7961da8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subprocess&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;subprocess&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f4b0ef6809aac2c4cea3880f034fe3f8c0e1165" translate="yes" xml:space="preserve">
          <source>Also note the &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#frequently-used-arguments&quot;&gt;shell&lt;/a&gt; parameter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#frequently-used-arguments&quot;&gt;シェル&lt;/a&gt;パラメータにも注意してください。</target>
        </trans-unit>
        <trans-unit id="12fa2ebb13aa4c6f3737660d048e954b248d81c2" translate="yes" xml:space="preserve">
          <source>An example with task spooler:</source>
          <target state="translated">タスクスプーラを使用した例。</target>
        </trans-unit>
        <trans-unit id="783369e650b595352e4b203badb3f8950cfa6399" translate="yes" xml:space="preserve">
          <source>Another popular library is &lt;a href=&quot;https://pypi.python.org/pypi/sh&quot;&gt;sh&lt;/a&gt;:</source>
          <target state="translated">別の人気のあるライブラリは&lt;a href=&quot;https://pypi.python.org/pypi/sh&quot;&gt;sh&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d7810dfe6b8148f0e818246c5528184e5ee081bc" translate="yes" xml:space="preserve">
          <source>Anyone runs the kwrite not being a subprocess (i.e. in the system monitor it must appear at the leftmost edge of the tree).</source>
          <target state="translated">誰でもkwriteがサブプロセスにならないように実行します(つまり、システムモニタではツリーの左端に表示されなければなりません)。</target>
        </trans-unit>
        <trans-unit id="cb2a196ab266c2677a36a1ff39e9a77602d3e268" translate="yes" xml:space="preserve">
          <source>As of Python 3.5, the documentation recommends &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess.run&lt;/a&gt;:</source>
          <target state="translated">Python 3.5以降、ドキュメントでは&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess.runを&lt;/a&gt;推奨しています。</target>
        </trans-unit>
        <trans-unit id="e0a5626c26468b935b29b7609635694dc9b379ed" translate="yes" xml:space="preserve">
          <source>As you might infer from the above example, stdout and stderr both get piped to your own stdout and stderr by default.</source>
          <target state="translated">上記の例から推測できるように、標準出力と標準エラーは両方ともデフォルトであなた自身の標準出力と標準エラーにパイプされます。</target>
        </trans-unit>
        <trans-unit id="71e8fb399394db284421a62daa01522b012fe135" translate="yes" xml:space="preserve">
          <source>But more informative is &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt;the &lt;code&gt;Popen&lt;/code&gt; documentation&lt;/a&gt;:</source>
          <target state="translated">しかし、より有益なのは&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; のドキュメント&lt;/a&gt;です：</target>
        </trans-unit>
        <trans-unit id="42c3d980ac63ed21471d91749f0230e954125b26" translate="yes" xml:space="preserve">
          <source>But this seem to be a good tool: &lt;a href=&quot;https://github.com/amoffat/sh&quot;&gt;&lt;code&gt;sh&lt;/code&gt; (Python subprocess interface)&lt;/a&gt;.</source>
          <target state="translated">しかし、これは良いツールのようです： &lt;a href=&quot;https://github.com/amoffat/sh&quot;&gt; &lt;code&gt;sh&lt;/code&gt; （Pythonサブプロセスインターフェイス）&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="040353c1be3fc4d64bd7a04883d5de25a9889047" translate="yes" xml:space="preserve">
          <source>Calling an external command from Python</source>
          <target state="translated">Pythonから外部コマンドを呼び出す</target>
        </trans-unit>
        <trans-unit id="73d24b095f38cb410b90189e614453dd440a6a13" translate="yes" xml:space="preserve">
          <source>Calling an external command in Python</source>
          <target state="translated">Pythonで外部コマンドを呼び出す</target>
        </trans-unit>
        <trans-unit id="73c1ff3b1f2c79f4fb4b9eeeb7f9489bc652b2ed" translate="yes" xml:space="preserve">
          <source>Capture output:</source>
          <target state="translated">出力をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="821248556b70b1a5b77fcba34211dde7762c0d29" translate="yes" xml:space="preserve">
          <source>Capturing output</source>
          <target state="translated">出力のキャプチャ</target>
        </trans-unit>
        <trans-unit id="7b6e4384f3588ea08309a1d68b2c594a5a6ef91d" translate="yes" xml:space="preserve">
          <source>Check the &quot;pexpect&quot; Python library, too.</source>
          <target state="translated">pexpect」のPythonライブラリもチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="04c1ab878cc2981820a3c703c587e0b1e6d43b31" translate="yes" xml:space="preserve">
          <source>Example usage from &lt;a href=&quot;https://github.com/kennethreitz/envoy#readme&quot;&gt;the README&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kennethreitz/envoy#readme&quot;&gt;READMEの&lt;/a&gt;使用例：</target>
        </trans-unit>
        <trans-unit id="85d1e51f42bcdee83f1807c85ad03b44972f7625" translate="yes" xml:space="preserve">
          <source>Execute a child program in a new process. On POSIX, the class uses
  os.execvp()-like behavior to execute the child program. On Windows,
  the class uses the Windows CreateProcess() function. The arguments to
  Popen are as follows.</source>
          <target state="translated">新しいプロセスで子プログラムを実行します。POSIXでは、このクラスはos.execvp()のような動作で子プログラムを実行します。Windows上では、クラスはWindows CreateProcess()関数を使用します。Popenへの引数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8a714c705dea02d0d422508d397211ab5d0c556f" translate="yes" xml:space="preserve">
          <source>Expanded Signature</source>
          <target state="translated">拡張された署名</target>
        </trans-unit>
        <trans-unit id="4793ba5a9403e9efafa59c26d506241288256613" translate="yes" xml:space="preserve">
          <source>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. &lt;strong&gt;There are serious security implications&lt;/strong&gt; if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:</source>
          <target state="translated">最後に、シェルが文字列として実行する最後のコマンドを渡すすべてのメソッドについて、それをエスケープする責任があることに注意してください。 渡す文字列の一部が完全に信頼できない場合、 &lt;strong&gt;セキュリティに深刻な影響があり&lt;/strong&gt;ます。 たとえば、ユーザーが文字列の一部/任意の部分を入力している場合。 不明な場合は、これらのメソッドを定数でのみ使用してください。 影響のヒントを与えるために、次のコードを検討してください。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="fd628ede4dea14449c2bd6ce7ddc3a17d4be5bc0" translate="yes" xml:space="preserve">
          <source>For the more &lt;code&gt;os&lt;/code&gt; functions, &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;here&lt;/a&gt; is the documentation.</source>
          <target state="translated">その他の &lt;code&gt;os&lt;/code&gt; 関数については、 &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;ここ&lt;/a&gt;にドキュメントがあります。</target>
        </trans-unit>
        <trans-unit id="9c4ae2ec46821c328b164a9bd8097808acc3eb0e" translate="yes" xml:space="preserve">
          <source>For versions of Python before 3.5, use &lt;code&gt;call&lt;/code&gt;:</source>
          <target state="translated">3.5より前のバージョンのPythonでは、 &lt;code&gt;call&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="048b33f3180e834803e6dc87333de2eb9542760b" translate="yes" xml:space="preserve">
          <source>Full Signature</source>
          <target state="translated">フルサイン</target>
        </trans-unit>
        <trans-unit id="6d74b3bf384964ae40c82bc487f9ebeeff7b54bd" translate="yes" xml:space="preserve">
          <source>Get more information &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;こちらをご覧ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1ddee242c3c47b20fdebe1a8e42128b53fe1db7" translate="yes" xml:space="preserve">
          <source>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</source>
          <target state="translated">ここでは、外部番組の呼び方とそれぞれのメリット・デメリットをまとめてみました。</target>
        </trans-unit>
        <trans-unit id="69638c61ab5a206a75c4a4d3c5fd0660eeea0a49" translate="yes" xml:space="preserve">
          <source>Here's an example from the documentation:</source>
          <target state="translated">以下はドキュメントからの例です。</target>
        </trans-unit>
        <trans-unit id="89e73100a297543bdc607a0b518448335c8e3a66" translate="yes" xml:space="preserve">
          <source>Here's an example of the simplest possible usage - and it does exactly as asked:</source>
          <target state="translated">ここでは、可能な限りシンプルな使い方の例を示します。</target>
        </trans-unit>
        <trans-unit id="a57c3b7a9b591fcf528aa657d826d36e28aadd44" translate="yes" xml:space="preserve">
          <source>Here's an expanded signature, as given in the documentation:</source>
          <target state="translated">ここでは、ドキュメントに記載されているように、拡張された署名があります。</target>
        </trans-unit>
        <trans-unit id="8f8248ec43960110eab95fc9c88ecc8149428271" translate="yes" xml:space="preserve">
          <source>Here's some examples from &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.run&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.run&quot;&gt;ドキュメントの&lt;/a&gt;例をいくつか示します 。</target>
        </trans-unit>
        <trans-unit id="7df370006ffdbaaae32d6957ed8cd623e4cabd51" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;Popen&lt;/code&gt; signature as given in &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/subprocess.py#L587&quot;&gt;the source&lt;/a&gt;. I think this is the most precise encapsulation of the information (as opposed to &lt;code&gt;help(Popen)&lt;/code&gt;):</source>
          <target state="translated">これは&lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/subprocess.py#L587&quot;&gt;、ソースで&lt;/a&gt;指定されている &lt;code&gt;Popen&lt;/code&gt; の署名です 。 これは（ &lt;code&gt;help(Popen)&lt;/code&gt; とは対照的に）最も正確な情報のカプセル化だと思います：</target>
        </trans-unit>
        <trans-unit id="df51a7d6022c342aad00d00ab7ef7e5c14f28726" translate="yes" xml:space="preserve">
          <source>Here's the actual signature in the source and as shown by &lt;code&gt;help(run)&lt;/code&gt;:</source>
          <target state="translated">これがソースの実際の署名であり、 &lt;code&gt;help(run)&lt;/code&gt; で示されています 。</target>
        </trans-unit>
        <trans-unit id="2908129e81281b22c758cbb06b4955a1e130bec2" translate="yes" xml:space="preserve">
          <source>Hopefully this will help you make a decision on which library to use :)</source>
          <target state="translated">うまくいけば、どのライブラリを使うかの判断材料になるでしょう :)</target>
        </trans-unit>
        <trans-unit id="d51db9b97fe38ab99295964d3561093d6d5384a2" translate="yes" xml:space="preserve">
          <source>How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?</source>
          <target state="translated">Pythonスクリプト内から外部コマンド(UnixシェルやWindowsのコマンドプロンプトで入力したようなもの)を呼び出すにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="36fa38bf21838dc62f7e8cb9fd98dc8c0092ddac" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;sh&lt;/code&gt; dropped Windows support, so it's not as awesome as it used to be. Install by &lt;code&gt;pip install sh&lt;/code&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;sh&lt;/code&gt; はWindowsサポートを削除したため、以前ほど素晴らしいものではありません。 &lt;code&gt;pip install sh&lt;/code&gt; でインストールします。</target>
        </trans-unit>
        <trans-unit id="f015f510394548ba21928d02139f329649001561" translate="yes" xml:space="preserve">
          <source>However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.  See &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.system&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">ただし、これは便利ですが、スペースなどのシェル文字のエスケープを手動で処理する必要があります。一方、これにより、単にシェルコマンドであり、実際には外部プログラムではないコマンドを実行することもできます。 &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.system&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a8ff91da18889bd85a334ef54dcb4f539b84312b" translate="yes" xml:space="preserve">
          <source>I always use &lt;code&gt;fabric&lt;/code&gt; for this things like:</source>
          <target state="translated">私はこのようなもののために常に &lt;code&gt;fabric&lt;/code&gt; を使います ：</target>
        </trans-unit>
        <trans-unit id="a34e56daccbd52ec707831ca674c7a9f92aa8b9c" translate="yes" xml:space="preserve">
          <source>I have not checked the code on other platforms and do not know the reasons of the behaviour on FreeBSD. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.</source>
          <target state="translated">他のプラットフォームでのコードを確認していないので、FreeBSDでの挙動の理由がわかりません。もし知っている人がいたら、あなたのアイデアを教えてください。Pythonでバックグラウンドプロセスを起動する方法をググっても、まだ何もわかりません。</target>
        </trans-unit>
        <trans-unit id="89a3de001ed039e3c675db0ed8e17c1de62d6bb7" translate="yes" xml:space="preserve">
          <source>I quite like &lt;a href=&quot;http://shell-command.readthedocs.org/en/latest/index.html&quot;&gt;shell_command&lt;/a&gt; for its simplicity.  It's built on top of the subprocess module.</source>
          <target state="translated">私はその単純さのために&lt;a href=&quot;http://shell-command.readthedocs.org/en/latest/index.html&quot;&gt;shell_command&lt;/a&gt;がとても好きです 。 サブプロセスモジュールの上に構築されています。</target>
        </trans-unit>
        <trans-unit id="bc6c376176890b6c7f696d60143eb6f24c04e18b" translate="yes" xml:space="preserve">
          <source>I recommend trying &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;Envoy&lt;/a&gt;. It's a wrapper for subprocess, which in turn &lt;a href=&quot;http://docs.python.org/2/library/subprocess.html&quot;&gt;aims to replace&lt;/a&gt; the older modules and functions. Envoy is subprocess for humans.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;Envoyを&lt;/a&gt;試すことをお勧めします。 これはサブプロセスのラッパーであり、古いモジュールと関数&lt;a href=&quot;http://docs.python.org/2/library/subprocess.html&quot;&gt;を置き換えることを目的&lt;/a&gt;としています。 Envoyは人間のサブプロセスです。</target>
        </trans-unit>
        <trans-unit id="6f120f3c03a438bb08852a052c9519c10e97399d" translate="yes" xml:space="preserve">
          <source>I tend to use &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; together with &lt;a href=&quot;https://docs.python.org/2/library/shlex.html&quot;&gt;shlex&lt;/a&gt; (to handle escaping of quoted strings):</source>
          <target state="translated">私は&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;サブプロセス&lt;/a&gt;を&lt;a href=&quot;https://docs.python.org/2/library/shlex.html&quot;&gt;shlexと&lt;/a&gt;一緒に使用する傾向があります（引用符付き文字列のエスケープを処理するため）：</target>
        </trans-unit>
        <trans-unit id="a1fb0cafb2ff5f705a7913c2243d7361a24e9395" translate="yes" xml:space="preserve">
          <source>I tried subprocess, and execution was successful. However &amp;lt;b&amp;gt; could not communicate with &amp;lt;a&amp;gt;.
Everything is normal when I run both from the terminal.</source>
          <target state="translated">サブプロセスを試してみましたが、実行に成功しました。 ただし、&amp;lt;b&amp;gt;は&amp;lt;a&amp;gt;と通信できませんでした。 ターミナルから両方を実行すると、すべてが正常です。</target>
        </trans-unit>
        <trans-unit id="20d0bdd77f0317c3ad96c6df5b327ec89ea4e117" translate="yes" xml:space="preserve">
          <source>I'd recommend using the &lt;a href=&quot;http://docs.python.org/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; module instead of os.system because it does shell escaping for you and is therefore much safer.</source>
          <target state="translated">os.systemの代わりに&lt;a href=&quot;http://docs.python.org/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt;モジュールを使用することをお勧めします。これは、シェルのエスケープが行われるため、はるかに安全だからです。</target>
        </trans-unit>
        <trans-unit id="3306f6b4f57a8e60469dc14d026d29435c7937c1" translate="yes" xml:space="preserve">
          <source>If check is true, and the process exits with a non-zero exit code, a
  CalledProcessError exception will be raised. Attributes of that
  exception hold the arguments, the exit code, and stdout and stderr if
  they were captured.</source>
          <target state="translated">チェックが真で、終了コードが 0 以外の場合、CalledProcessError 例外が発生します。この例外の属性は、引数、終了コード、標準出力と標準エラーがキャプチャされた場合の標準出力と標準エラーを保持します。</target>
        </trans-unit>
        <trans-unit id="7513b2e3638518f8194dc11be855a41d965d8024" translate="yes" xml:space="preserve">
          <source>If shell is &lt;code&gt;True&lt;/code&gt;, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user&amp;rsquo;s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;fnmatch&lt;/code&gt;, &lt;code&gt;os.walk()&lt;/code&gt;, &lt;code&gt;os.path.expandvars()&lt;/code&gt;, &lt;code&gt;os.path.expanduser()&lt;/code&gt;, and &lt;code&gt;shutil&lt;/code&gt;).</source>
          <target state="translated">shellが &lt;code&gt;True&lt;/code&gt; の場合、指定されたコマンドはシェルを介して実行されます。 これは、主にPythonを使用して、ほとんどのシステムシェルで提供される拡張制御フローでありながら、シェルパイプ、ファイル名のワイルドカード、環境変数の展開、ユーザーの家への〜の展開など、他のシェル機能への便利なアクセスが必要な場合に役立ちます。ディレクトリ。 ただし、Python自体がシェルのような多くの機能の実装を提供していることに注意してください（特に、 &lt;code&gt;glob&lt;/code&gt; 、 &lt;code&gt;fnmatch&lt;/code&gt; 、 &lt;code&gt;os.walk()&lt;/code&gt; 、 &lt;code&gt;os.path.expandvars()&lt;/code&gt; 、 &lt;code&gt;os.path.expanduser()&lt;/code&gt; 、および &lt;code&gt;shutil&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c64a88fb4da9b7b730048f1a8dd5918c6a117af0" translate="yes" xml:space="preserve">
          <source>If you do not mind external dependencies, use &lt;a href=&quot;https://pypi.python.org/pypi/plumbum&quot;&gt;plumbum&lt;/a&gt;:</source>
          <target state="translated">外部の依存関係を気にしない場合は、 &lt;a href=&quot;https://pypi.python.org/pypi/plumbum&quot;&gt;plumbumを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7363228fcdaba9c20bf56aae3fc8e7f106d140e2" translate="yes" xml:space="preserve">
          <source>If you need the output from the command you are calling,
then you can use &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.check_output&quot;&gt;subprocess.check_output&lt;/a&gt; (Python 2.7+).</source>
          <target state="translated">呼び出すコマンドからの出力が必要な場合は、 &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.check_output&quot;&gt;subprocess.check_output&lt;/a&gt; （Python 2.7+）を使用できます。</target>
        </trans-unit>
        <trans-unit id="8f4e9f7315aeec38a6e52736117eab1064d48ef4" translate="yes" xml:space="preserve">
          <source>If you try &lt;code&gt;os.system(&quot;kwrite&quot;)&lt;/code&gt;, program flow freezes until the user closes kwrite. To overcome that I tried instead &lt;code&gt;os.system(konsole -e kwrite)&lt;/code&gt;. This time program continued to flow, but kwrite became the subprocess of the console.</source>
          <target state="translated">&lt;code&gt;os.system(&quot;kwrite&quot;)&lt;/code&gt; を試すと、ユーザーがkwriteを閉じるまでプログラムフローがフリーズします。 それを克服するために、代わりに &lt;code&gt;os.system(konsole -e kwrite)&lt;/code&gt; を試しました 。 今回はプログラムは流れ続けましたが、kwriteはコンソールのサブプロセスになりました。</target>
        </trans-unit>
        <trans-unit id="e7dd6dd4afa9c4d20e2b859c4c05c2f008a37f97" translate="yes" xml:space="preserve">
          <source>If you want to capture the output, you can pass &lt;code&gt;subprocess.PIPE&lt;/code&gt; to the appropriate &lt;code&gt;stderr&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;:</source>
          <target state="translated">出力をキャプチャする場合は、 &lt;code&gt;subprocess.PIPE&lt;/code&gt; を適切な &lt;code&gt;stderr&lt;/code&gt; または &lt;code&gt;stdout&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="92362498e29cfb081397f0c34ab9249f9720243e" translate="yes" xml:space="preserve">
          <source>If you want to return the results of the command, you can use &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;&lt;code&gt;os.popen&lt;/code&gt;&lt;/a&gt;. However, this is deprecated since version 2.6 in favor of the &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#module-subprocess&quot;&gt;subprocess module&lt;/a&gt;, which other answers have covered well.</source>
          <target state="translated">コマンドの結果を返したい場合は、 &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt; &lt;code&gt;os.popen&lt;/code&gt; &lt;/a&gt;を使用できます。 ただし、バージョン2.6以降、 &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#module-subprocess&quot;&gt;サブプロセスモジュール&lt;/a&gt;が推奨されるため、これは非推奨です。他の回答でも十分にカバーされています。</target>
        </trans-unit>
        <trans-unit id="af2adabd4a25ba82a40a7045bc7d52e5e486b80a" translate="yes" xml:space="preserve">
          <source>If you're on Python 3.5 or later, you can use the new &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.run&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt; function, which is a lot like the above but even more flexible and returns a &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess&quot;&gt;&lt;code&gt;CompletedProcess&lt;/code&gt;&lt;/a&gt; object when the command finishes executing.</source>
          <target state="translated">Python 3.5以降を使用している場合は、新しい&lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.run&quot;&gt; &lt;code&gt;subprocess.run&lt;/code&gt; &lt;/a&gt;関数を使用できます。これは、上記とよく似ていますが、さらに柔軟性が高く、コマンドの実行が&lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess&quot;&gt; &lt;code&gt;CompletedProcess&lt;/code&gt; &lt;/a&gt;するとCompletedProcessオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a8c86e3653f19cdf348b2172a4bbdb83232ae1aa" translate="yes" xml:space="preserve">
          <source>In Windows you can just import the &lt;code&gt;subprocess&lt;/code&gt; module and run external commands by calling &lt;code&gt;subprocess.Popen()&lt;/code&gt;, &lt;code&gt;subprocess.Popen().communicate()&lt;/code&gt; and &lt;code&gt;subprocess.Popen().wait()&lt;/code&gt; as below:</source>
          <target state="translated">Windowsでは、以下のように &lt;code&gt;subprocess.Popen()&lt;/code&gt; 、 &lt;code&gt;subprocess.Popen().communicate()&lt;/code&gt; 、および &lt;code&gt;subprocess.Popen().wait()&lt;/code&gt; を呼び出すことにより、 &lt;code&gt;subprocess&lt;/code&gt; モジュールをインポートして外部コマンドを実行することができます。</target>
        </trans-unit>
        <trans-unit id="6098bdcea6354241592eea73912efde1afabb629" translate="yes" xml:space="preserve">
          <source>Installing &lt;code&gt;ts&lt;/code&gt; doesn't requires admin privileges. You can download and compile it from source with a simple &lt;code&gt;make&lt;/code&gt;, add it to your path and you're done.</source>
          <target state="translated">&lt;code&gt;ts&lt;/code&gt; のインストールには管理者権限は必要ありません。 単純な &lt;code&gt;make&lt;/code&gt; でソースからダウンロードしてコンパイルし、パスに追加すれば完了です。</target>
        </trans-unit>
        <trans-unit id="e98b09203f0328a90cfc78f75d841debdd5b9276" translate="yes" xml:space="preserve">
          <source>It allows for interactive controlling of external programs/commands, even ssh, ftp, telnet, etc. You can just type something like:</source>
          <target state="translated">ssh、ftp、telnet などの外部プログラムコマンドを対話的に制御することができます。以下のようなものを入力するだけです。</target>
        </trans-unit>
        <trans-unit id="2b17b931e5cc7a41baf907fc20f514914e06f75b" translate="yes" xml:space="preserve">
          <source>It can be this simple:</source>
          <target state="translated">こんな簡単なこともあります。</target>
        </trans-unit>
        <trans-unit id="1876f45c1a10b475e3da4f444793d729e158467c" translate="yes" xml:space="preserve">
          <source>It is the best &lt;code&gt;subprocess&lt;/code&gt; wrapper. It's cross-platform, i.e. it works on both Windows and Unix-like systems. Install by &lt;code&gt;pip install plumbum&lt;/code&gt;.</source>
          <target state="translated">これは最高の &lt;code&gt;subprocess&lt;/code&gt; ラッパーです。 これはクロスプラットフォームです。つまり、WindowsとUnixライクなシステムの両方で動作します。 &lt;code&gt;pip install plumbum&lt;/code&gt; でインストールします。</target>
        </trans-unit>
        <trans-unit id="aaa07cbf594cc966ace34cd19c136a6ec2b63b2b" translate="yes" xml:space="preserve">
          <source>It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.</source>
          <target state="translated">標準的な方法として推奨されています。しかし、より複雑な作業(パイプ、出力、入力など)は、構築して書くのが面倒になることがあります。</target>
        </trans-unit>
        <trans-unit id="0950087da2cd9f6a22ccabfcf26acb05ebf55d6c" translate="yes" xml:space="preserve">
          <source>It's basically a wrapper for popen and shlex for now. It also supports piping commands so you can chain commands easier in Python. So you can do things like:</source>
          <target state="translated">基本的には今のところ popen と shlex のラッパーです。また、パイピングコマンドもサポートしているので、Pythonでより簡単にコマンドを連鎖させることができます。つまり、以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="684e4264c8db3e123a99d38088e818bc7f171eb5" translate="yes" xml:space="preserve">
          <source>Look at an example:</source>
          <target state="translated">例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1204c37bac4cb816da4fb8a8d0bc2c80ab7bd8aa" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; module in the standard library:</source>
          <target state="translated">標準ライブラリの&lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;サブプロセス&lt;/a&gt;モジュールを見てください。</target>
        </trans-unit>
        <trans-unit id="9233d608f7c0dc4bbdf19142923c6ea55bddb4ae" translate="yes" xml:space="preserve">
          <source>My target platform was FreeBSD, but the development was on Windows, so I faced the problem on Windows first.</source>
          <target state="translated">私のターゲットプラットフォームはFreeBSDでしたが、開発はWindows上で行われていたので、まずWindows上で問題に直面しました。</target>
        </trans-unit>
        <trans-unit id="3e19a10fe630c4891bdeeed97635e547e260c810" translate="yes" xml:space="preserve">
          <source>Note that this indicates that only the args list should be passed positionally. So pass the remaining arguments as keyword arguments.</source>
          <target state="translated">これは、引数リストだけを位置的に渡すべきであることを示していることに注意してください。ですから、残りの引数はキーワード引数として渡してください。</target>
        </trans-unit>
        <trans-unit id="a24dc5dfdb8a300a722b06eb63d191c14fe3e25a" translate="yes" xml:space="preserve">
          <source>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant documentation on the 'os' and 'sys' modules. There are a bunch of functions (exec* and spawn*) that will do similar things.</source>
          <target state="translated">コマンドがクリーンアップされていないので、これは危険であることに注意してください。私は 'os' と 'sys' モジュールの関連するドキュメントをググってみてください。似たようなことをする多くの関数 (exec*と spawn*)があります。</target>
        </trans-unit>
        <trans-unit id="6d935935cd721060cd471db94f9ef7b7e4d625f4" translate="yes" xml:space="preserve">
          <source>Note, only &lt;code&gt;args&lt;/code&gt; should be passed positionally.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; だけが位置的に渡されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="13e1383053d018a118f339a408b60348fa0c10df" translate="yes" xml:space="preserve">
          <source>Notes about task spooler (&lt;code&gt;ts&lt;/code&gt;):</source>
          <target state="translated">タスクスプーラ（ &lt;code&gt;ts&lt;/code&gt; ）に関する注意：</target>
        </trans-unit>
        <trans-unit id="17f85f0219883423eaae3030acbe2e8068839e11" translate="yes" xml:space="preserve">
          <source>On FreeBSD we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in a CGI script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:</source>
          <target state="translated">FreeBSD では別の問題があります:親プロセスが終了すると、子プロセスも終了します。そして、これは CGI スクリプトにも望むものではありません。いくつかの実験では、問題は sys.stdout を共有することにあるようです。そして、動作する解決策は以下のようになりました。</target>
        </trans-unit>
        <trans-unit id="d77fda016063bfb5e284fb2828725f67f1e0abcd" translate="yes" xml:space="preserve">
          <source>On Windows (Windows&amp;nbsp;XP), the parent process will not finish until the longtask.py has finished its work. It is not what you want in a CGI script. The problem is not specific to Python; in the PHP community the problems are the same.</source>
          <target state="translated">Windows（Windows XP）では、longtask.pyが作業を完了するまで、親プロセスは完了しません。 これは、CGIスクリプトに必要なものではありません。 この問題はPythonに固有のものではありません。 PHPコミュニティでも問題は同じです。</target>
        </trans-unit>
        <trans-unit id="73cc2ccf316b575a875f3123af48e3e1bc8b7676" translate="yes" xml:space="preserve">
          <source>One might easily move from manually providing a command string (like the question suggests) to providing a string built programmatically. &lt;strong&gt;Don't build strings programmatically.&lt;/strong&gt; This is a potential security issue. It's better to assume you don't trust the input.</source>
          <target state="translated">手動でコマンド文字列を提供すること（質問が示唆するように）から、プログラムで構築された文字列を提供することへと簡単に移行できます。 &lt;strong&gt;プログラムで文字列を構築しないでください。&lt;/strong&gt; これは潜在的なセキュリティ問題です。 入力を信頼していないと想定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="41a57f8f481028cebaba1e0f5469024183974d84" translate="yes" xml:space="preserve">
          <source>One more: 
(NOTE: kwrite behaves different from other applications. If you try the below with Firefox, the results will not be the same.)</source>
          <target state="translated">もう一つ:(注意:kwrite は他のアプリケーションとは動作が異なります。以下をFirefoxで試してみても、結果は同じではありません。)</target>
        </trans-unit>
        <trans-unit id="e25727ac8c89aabb607297c433808248a7a0e1e1" translate="yes" xml:space="preserve">
          <source>Original answer:</source>
          <target state="translated">オリジナルの答えです。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="9eb209cce757a602d7f2f0ca560ec376bddc2235" translate="yes" xml:space="preserve">
          <source>Pass a command list</source>
          <target state="translated">コマンドリストを渡す</target>
        </trans-unit>
        <trans-unit id="8cab791770584f20f8736085e6f06ba110e4d582" translate="yes" xml:space="preserve">
          <source>Pipe stuff around too:</source>
          <target state="translated">周りのパイプも。</target>
        </trans-unit>
        <trans-unit id="ebb071acd0b348557933898f1183ca1a9ebf2a6b" translate="yes" xml:space="preserve">
          <source>Popen</source>
          <target state="translated">Popen</target>
        </trans-unit>
        <trans-unit id="2bbaa21688c027b406e5f4b12b6e7be1b87ff580" translate="yes" xml:space="preserve">
          <source>Raise on failed run:</source>
          <target state="translated">失敗したランでレイズ。</target>
        </trans-unit>
        <trans-unit id="bf8cfc7ba5a5f5bee4c9521c60f879e6686ff1dc" translate="yes" xml:space="preserve">
          <source>Run a process:</source>
          <target state="translated">プロセスを実行します。</target>
        </trans-unit>
        <trans-unit id="770bbd7c071f378133b5752a9ea61c937cf5ce7e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2f169459d9aa145196151308de045b7515b46ab1" translate="yes" xml:space="preserve">
          <source>Shameless plug, I wrote a library for this :P
&lt;a href=&quot;https://github.com/houqp/shell.py&quot;&gt;https://github.com/houqp/shell.py&lt;/a&gt;</source>
          <target state="translated">恥知らずなプラグ、私はこれのためのライブラリを書いた：P &lt;a href=&quot;https://github.com/houqp/shell.py&quot;&gt;https://github.com/houqp/shell.py&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="253723ab412e01a3b5346e6c5bead7538a06547e" translate="yes" xml:space="preserve">
          <source>Simple, use &lt;code&gt;subprocess.run&lt;/code&gt;, which returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object:</source>
          <target state="translated">簡単なのは、 &lt;code&gt;CompletedProcess&lt;/code&gt; オブジェクトを返す &lt;code&gt;subprocess.run&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="96916a7d5b2c00cca0f4d8225cd04dfa73ef6174" translate="yes" xml:space="preserve">
          <source>Some hints on detaching the child process from the calling one (starting the child process in background).</source>
          <target state="translated">呼び出し側から子プロセスを切り離す(バックグラウンドで子プロセスを開始する)ためのいくつかのヒント。</target>
        </trans-unit>
        <trans-unit id="0ff80ac32b33346bf44e846d95580df486157012" translate="yes" xml:space="preserve">
          <source>Subprocess allows you to call external commands and connect them to their input/output/error pipes (stdin, stdout, and stderr). Subprocess is the default choice for running commands, but sometimes other modules are better.</source>
          <target state="translated">Subprocess を使うと、外部コマンドを呼び出し、それらを inputoutputerror パイプ (stdin,stdout,stderr)に接続することができます。Subprocess はコマンドを実行するためのデフォルトの選択ですが、他のモジュールの方が良い場合もあります。</target>
        </trans-unit>
        <trans-unit id="02d03c537f5a1c1351c07e93fd9b4e1c806b46a3" translate="yes" xml:space="preserve">
          <source>Suppose you want to start a long task from a CGI script. That is, the child process should live longer than the CGI script execution process.</source>
          <target state="translated">CGI スクリプトから長いタスクを起動したいとします。つまり、子プロセスはCGIスクリプトの実行プロセスよりも長生きしなければなりません。</target>
        </trans-unit>
        <trans-unit id="4bf5eed33409a9d4cce95fee5d4f206f094bd0c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;official documentation&lt;/a&gt; recommends the &lt;code&gt;subprocess&lt;/code&gt; module over the alternative &lt;code&gt;os.system()&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;公式ドキュメント&lt;/a&gt;は、代替の &lt;code&gt;os.system()&lt;/code&gt; よりも &lt;code&gt;subprocess&lt;/code&gt; モジュールを推奨しています。</target>
        </trans-unit>
        <trans-unit id="afab629b263a23850b4a4c4fab6559124e8a2b16" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module&quot;&gt;Replacing Older Functions with the subprocess Module&lt;/a&gt; section in the &lt;code&gt;subprocess&lt;/code&gt; documentation may have some helpful recipes.</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; ドキュメントの&lt;a href=&quot;https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module&quot;&gt;古いプロセスをサブプロセスモジュール&lt;/a&gt;セクションで置き換えるには、いくつかの役立つレシピがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3d3e9d8c82b51530830672b08d0ef35fbab40e8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Popen&lt;/code&gt; class of the &lt;code&gt;subprocess&lt;/code&gt; module.  This is intended as a replacement for &lt;code&gt;os.popen&lt;/code&gt; but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say:</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; モジュールの &lt;code&gt;Popen&lt;/code&gt; クラス。 これは &lt;code&gt;os.popen&lt;/code&gt; の代替として意図されていますが、非常に包括的であるために少し複雑になるという欠点があります。 たとえば、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dc4253a08585d55cf4522486cf9b6b0fd47078e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call&lt;/code&gt; function from the &lt;code&gt;subprocess&lt;/code&gt; module.  This is basically just like the &lt;code&gt;Popen&lt;/code&gt; class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; モジュールからの &lt;code&gt;call&lt;/code&gt; 関数。 これは基本的には &lt;code&gt;Popen&lt;/code&gt; クラスと同様であり、すべて同じ引数を取りますが、コマンドが完了して戻りコードが返されるまで待機するだけです。 例えば：</target>
        </trans-unit>
        <trans-unit id="0f65b9b491329c7dcc455e3c2ab564bc130ce4f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;popenargs&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; are given to the &lt;code&gt;Popen&lt;/code&gt; constructor. &lt;code&gt;input&lt;/code&gt; can be a string of bytes (or unicode, if specify encoding or &lt;code&gt;universal_newlines=True&lt;/code&gt;) that will be piped to the subprocess's stdin.</source>
          <target state="translated">&lt;code&gt;popenargs&lt;/code&gt; と &lt;code&gt;kwargs&lt;/code&gt; は &lt;code&gt;Popen&lt;/code&gt; コンストラクターに渡されます。 &lt;code&gt;input&lt;/code&gt; は、サブプロセスのstdinにパイプされるバイトの文字列（または、encodingまたは &lt;code&gt;universal_newlines=True&lt;/code&gt; 指定する場合はUnicode）にすることができます。</target>
        </trans-unit>
        <trans-unit id="597f463d6181383c2aa9eec8291dee90c9093b6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess&lt;/code&gt; module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [&lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;].</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; モジュールは、新しいプロセスを生成してその結果を取得するためのより強力な機能を提供します。 このモジュールを使用することは、この関数を使用するよりも好ましいです[ &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt; ]。</target>
        </trans-unit>
        <trans-unit id="67d0649a95bbe6d8f66c8ce42cbc0bbe2015de0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess&lt;/code&gt; module should probably be what you use.</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; モジュールはおそらく使用するものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="4bcefe52191489f5553bf306d97423d4d878396f" translate="yes" xml:space="preserve">
          <source>The advantage of &lt;code&gt;subprocess&lt;/code&gt; vs. &lt;code&gt;system&lt;/code&gt; is that it is more flexible (you can get the &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, the &quot;real&quot; status code, better error handling, etc...).</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; と &lt;code&gt;system&lt;/code&gt; の利点は、より柔軟であることです（ &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; 、「実際の」ステータスコード、より優れたエラー処理などを取得できます）。</target>
        </trans-unit>
        <trans-unit id="7f6b131d63315089780cb79a3bbe13a68d7390e4" translate="yes" xml:space="preserve">
          <source>The classical example from the subprocess module documentation is:</source>
          <target state="translated">サブプロセスモジュールのドキュメントにある古典的な例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d9e6b82421ed6a6933bae7646b83fa3f410deae4" translate="yes" xml:space="preserve">
          <source>The documentation describes &lt;code&gt;timeout=&lt;/code&gt; and &lt;code&gt;check=True&lt;/code&gt; better than I could:</source>
          <target state="translated">ドキュメントでは、 &lt;code&gt;timeout=&lt;/code&gt; と &lt;code&gt;check=True&lt;/code&gt; について、私が考えているよりも優れています。</target>
        </trans-unit>
        <trans-unit id="2599271d58968cf1345f8ce1dcef378e8bb253f8" translate="yes" xml:space="preserve">
          <source>The edit was based on J.F. Sebastian's comment.</source>
          <target state="translated">編集はJ.F.セバスチャンさんのコメントを参考にしました。</target>
        </trans-unit>
        <trans-unit id="9375ec9cf1e1a48088ebd84b5d61ce8b4d2113fd" translate="yes" xml:space="preserve">
          <source>The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished. But it is not clear what happens after the line 'some more code here' from the example.</source>
          <target state="translated">ここでの考え方は、longtask.pyが終了するまで'call subprocess'という行で待ちたくないということです。しかし、例の'some more code here'という行の後に何が起こるのかはよくわかりません。</target>
        </trans-unit>
        <trans-unit id="0362ab403486d100b39df78902a34185bb350a53" translate="yes" xml:space="preserve">
          <source>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</source>
          <target state="translated">os モジュールには、C プログラムにあるような forkexecspawn 関数もすべて搭載されていますが、それらを直接使うことはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="d17b17fb1061b744b6a11011160bfee60f824a44" translate="yes" xml:space="preserve">
          <source>The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle. For more advanced use cases, the underlying Popen interface can be used directly.</source>
          <target state="translated">サブプロセスを呼び出すための推奨されるアプローチは、それが扱うことができるすべてのユースケースに対して run()関数を使用することです。より高度なユースケースでは、基礎となる Popen インターフェースを直接使用することができます。</target>
        </trans-unit>
        <trans-unit id="797610109e8cd0a523dfb35244a626e04eef5841" translate="yes" xml:space="preserve">
          <source>The solution is to pass DETACHED_PROCESS &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;Process Creation Flag&lt;/a&gt; to the underlying CreateProcess function in Windows API.
If you happen to have installed pywin32, you can import the flag from the win32process module, otherwise you should define it yourself:</source>
          <target state="translated">解決策は、DETACHED_PROCESS &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;プロセス作成フラグ&lt;/a&gt;をWindows APIの基になるCreateProcess関数に渡すことです。 pywin32をインストールした場合は、win32processモジュールからフラグをインポートできます。それ以外の場合は、自分で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="852fa7991bff81d637c1d755f860b4928e883903" translate="yes" xml:space="preserve">
          <source>The timeout argument is passed to Popen.communicate(). If the timeout
  expires, the child process will be killed and waited for. The
  TimeoutExpired exception will be re-raised after the child process has
  terminated.</source>
          <target state="translated">タイムアウト引数は Popen.communicate()に渡されます。タイムアウトが切れた場合、子プロセスは終了して待機します。タイムアウト期限切れの例外は、子プロセスが終了した後に再び発生します。</target>
        </trans-unit>
        <trans-unit id="74e1ee39ecbbaf46f408aa59d7805c5b18bc39a2" translate="yes" xml:space="preserve">
          <source>There are lots of different libraries which allow you to call external commands with Python. For each library I've given a description and shown an example of calling an external command. The command I used as the example is &lt;code&gt;ls -l&lt;/code&gt; (list all files). If you want to find out more about any of the libraries I've listed and linked the documentation for each of them.</source>
          <target state="translated">Pythonで外部コマンドを呼び出すことができるさまざまなライブラリがたくさんあります。 各ライブラリーについて説明し、外部コマンドを呼び出す例を示しました。 例として使用したコマンドは &lt;code&gt;ls -l&lt;/code&gt; （すべてのファイルを一覧表示）です。 ライブラリの詳細を知りたい場合は、各ライブラリのドキュメントをリストしてリンクしました。</target>
        </trans-unit>
        <trans-unit id="3faf13f8df1bc7e3959874fdea7e123c8931bbc5" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://plumbum.readthedocs.org/en/latest/&quot;&gt;Plumbum&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://plumbum.readthedocs.org/en/latest/&quot;&gt;Plumbum&lt;/a&gt;もあります</target>
        </trans-unit>
        <trans-unit id="523e816fff3d635b4b57a3c72de2f42570b0fc48" translate="yes" xml:space="preserve">
          <source>There is another difference here which is not mentioned previously.</source>
          <target state="translated">ここにも以前には触れられていない違いがあります。</target>
        </trans-unit>
        <trans-unit id="dff6fe0f782361a67af3bcde93ee7b9df92bd107" translate="yes" xml:space="preserve">
          <source>This is how I run my commands. This code has everything you need pretty much</source>
          <target state="translated">これが私のコマンドの実行方法です。このコードには必要なものがすべて揃っています</target>
        </trans-unit>
        <trans-unit id="c7245e51bd7139e445469159ab77eaaaf30497c0" translate="yes" xml:space="preserve">
          <source>Typical implementation:</source>
          <target state="translated">典型的な実装。</target>
        </trans-unit>
        <trans-unit id="31ff876228262ef5e8f98bb8df82ae987194c0be" translate="yes" xml:space="preserve">
          <source>Under Linux, in case you would like to call an external command that will execute independently (will keep running after the python script terminates), you can use a simple queue as &lt;a href=&quot;http://vicerveza.homeunix.net/~viric/soft/ts/&quot;&gt;task spooler&lt;/a&gt; or the &lt;a href=&quot;https://linux.die.net/man/1/at&quot;&gt;at&lt;/a&gt; command</source>
          <target state="translated">Linuxでは、独立して実行する（Pythonスクリプトの終了後も実行を継続する）外部コマンドを呼び出す場合、 &lt;a href=&quot;http://vicerveza.homeunix.net/~viric/soft/ts/&quot;&gt;タスクスプーラー&lt;/a&gt;または&lt;a href=&quot;https://linux.die.net/man/1/at&quot;&gt;at&lt;/a&gt;コマンドとして単純なキューを使用できます。</target>
        </trans-unit>
        <trans-unit id="bdf5a0a4c93fff1b17f183c226012273c1d43069" translate="yes" xml:space="preserve">
          <source>Understanding the remaining documentation on &lt;code&gt;Popen&lt;/code&gt; will be left as an exercise for the reader.</source>
          <target state="translated">&lt;code&gt;Popen&lt;/code&gt; の残りのドキュメントを理解することは、読者のための演習として残します。</target>
        </trans-unit>
        <trans-unit id="acf72ff8536cb7c07913f02c5d05cbe20402fc3e" translate="yes" xml:space="preserve">
          <source>Update:</source>
          <target state="translated">Update:</target>
        </trans-unit>
        <trans-unit id="a724e226efd328d314410553d9d0a6c3eb761723" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;サブプロセスを&lt;/a&gt;&lt;/em&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="edd176fcbe63d71b143043c47f74083e7b9d9787" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;os module&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;osモジュールを&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="19a090ab4bedfbcf29e7da7a4077073280a686e2" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess module&lt;/a&gt; (Python 3):</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;サブプロセスモジュール&lt;/a&gt; （Python 3）を使用します 。</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="448cfe5db01084af3e9371ab7cf08e61c69bb1c3" translate="yes" xml:space="preserve">
          <source>We can inspect the returned object and see the command that was given and the returncode:</source>
          <target state="translated">返されたオブジェクトを検査して、与えられたコマンドとreturnncodeを見ることができます。</target>
        </trans-unit>
        <trans-unit id="3bb310ac00cac6fcd37979db1016551743aa642b" translate="yes" xml:space="preserve">
          <source>When use &lt;code&gt;Popen&lt;/code&gt; instead? I would struggle to find use-case based on the arguments alone. Direct usage of &lt;code&gt;Popen&lt;/code&gt; would, however, give you access to its methods, including &lt;code&gt;poll&lt;/code&gt;, 'send_signal', 'terminate', and 'wait'.</source>
          <target state="translated">代わりに &lt;code&gt;Popen&lt;/code&gt; を使用する場合？ 私は議論だけに基づいてユースケースを見つけるのに苦労します。 ただし、 &lt;code&gt;Popen&lt;/code&gt; を直接使用すると、 &lt;code&gt;poll&lt;/code&gt; 、「send_signal」、「terminate」、「wait」などのメソッドにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="18f27c9ee823db5e4c0a614a16980da6367604a3" translate="yes" xml:space="preserve">
          <source>With external dependencies</source>
          <target state="translated">外部依存性を持つ</target>
        </trans-unit>
        <trans-unit id="d14ab858678072f32ca74ab1b82e081dfcfc055d" translate="yes" xml:space="preserve">
          <source>With output of the result:</source>
          <target state="translated">結果の出力付き。</target>
        </trans-unit>
        <trans-unit id="aaaa9eb5d49bd41216be4aab4c1d7019aec73518" translate="yes" xml:space="preserve">
          <source>With the standard library</source>
          <target state="translated">標準ライブラリで</target>
        </trans-unit>
        <trans-unit id="a163f8072d2582ac0b08270fa37f04b08c90ff97" translate="yes" xml:space="preserve">
          <source>Without the output of the result:</source>
          <target state="translated">結果の出力がなければ</target>
        </trans-unit>
        <trans-unit id="e7cdf9aef9dcc1e68939ec2e3584bf7ad40cff4d" translate="yes" xml:space="preserve">
          <source>You are free to do what you want with the &lt;code&gt;stdout&lt;/code&gt; data in the pipe.  In fact, you can simply omit those parameters (&lt;code&gt;stdout=&lt;/code&gt; and &lt;code&gt;stderr=&lt;/code&gt;) and it'll behave like &lt;code&gt;os.system()&lt;/code&gt;.</source>
          <target state="translated">パイプ内の &lt;code&gt;stdout&lt;/code&gt; データを使用して自由に操作できます。 実際、これらのパラメーター（ &lt;code&gt;stdout=&lt;/code&gt; および &lt;code&gt;stderr=&lt;/code&gt; ）を省略するだけで、 &lt;code&gt;os.system()&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="c122bf1eaa4c6177c760488496e22187b9c197dc" translate="yes" xml:space="preserve">
          <source>You could set the number of concurrent processes to be run (&quot;slots&quot;) with:</source>
          <target state="translated">で同時実行するプロセスの数(「スロット」)を設定することができます。</target>
        </trans-unit>
        <trans-unit id="e9dbd017d634c57685e9ea83e3ab03bb5edef87f" translate="yes" xml:space="preserve">
          <source>and imagine that the user enters something &quot;my mama didnt love me &amp;amp;&amp;amp; rm -rf /&quot; which could erase the whole filesystem.</source>
          <target state="translated">そして、ユーザーが「私のママは私を愛していなかった&amp;amp;&amp;amp; rm -rf /」と入力すると、ファイルシステム全体が消去される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f17ada58f79678c2c2c55e53fc4e2f5df1f34d13" translate="yes" xml:space="preserve">
          <source>and this example for &lt;code&gt;check=True&lt;/code&gt; is better than one I could come up with:</source>
          <target state="translated">そして、 &lt;code&gt;check=True&lt;/code&gt; のこの例は、私が思いつくものよりも優れています：</target>
        </trans-unit>
        <trans-unit id="70d923d5b13c8294ffdbf19c5dbe40d59fe15cbf" translate="yes" xml:space="preserve">
          <source>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.  See &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#popen-constructor&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">ただし、4つの異なるpopen関数ではなく、1つの統合クラスにすべてのオプションを含めると便利です。 &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#popen-constructor&quot;&gt;ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b904e73103fc2e4e766606e93e37406669eeba11" translate="yes" xml:space="preserve">
          <source>commands: &lt;a href=&quot;https://docs.python.org/2/library/commands.html&quot;&gt;https://docs.python.org/2/library/commands.html&lt;/a&gt;</source>
          <target state="translated">コマンド： &lt;a href=&quot;https://docs.python.org/2/library/commands.html&quot;&gt;https&lt;/a&gt; : //docs.python.org/2/library/commands.html</target>
        </trans-unit>
        <trans-unit id="52d303eda30df68defd302e06660eb6bb684fbb9" translate="yes" xml:space="preserve">
          <source>envoy is known as &quot;subprocess for humans&quot;. It is used as a convenience wrapper around the &lt;code&gt;subprocess&lt;/code&gt; module.</source>
          <target state="translated">特使は「人間のためのサブプロセス」として知られています。 これは、 &lt;code&gt;subprocess&lt;/code&gt; モジュールの便利なラッパーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="da9733bfafc172eabc90b2758bfeab6b4cb34a4f" translate="yes" xml:space="preserve">
          <source>envoy: &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;https://github.com/kennethreitz/envoy&lt;/a&gt;</source>
          <target state="translated">envoy： &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;https&lt;/a&gt; : //github.com/kennethreitz/envoy</target>
        </trans-unit>
        <trans-unit id="d7f621f19f6af467ef23fb98f8ee0c656389c12a" translate="yes" xml:space="preserve">
          <source>fabric is a Python 2.5 and 2.7 library. It allows you to execute local and remote shell commands. Fabric is simple alternative for running commands in a secure shell (SSH)</source>
          <target state="translated">fabricはPython 2.5と2.7のライブラリです。これにより、ローカルおよびリモートのシェルコマンドを実行することができます。Fabric は、セキュアシェル (SSH)でコマンドを実行するためのシンプルな代替手段です。</target>
        </trans-unit>
        <trans-unit id="b1a08d055b8bb30483bf0ea122392e6d37082e73" translate="yes" xml:space="preserve">
          <source>fabric: &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;http://www.fabfile.org/&lt;/a&gt;</source>
          <target state="translated">ファブリック： &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;http&lt;/a&gt; : //www.fabfile.org/</target>
        </trans-unit>
        <trans-unit id="6c8457cd65849bf5a9285f8b862e990e1a44ac09" translate="yes" xml:space="preserve">
          <source>instead of:</source>
          <target state="translated">の代わりに</target>
        </trans-unit>
        <trans-unit id="5957da8d14d5f58f81aefab1967a97dba4f1d41b" translate="yes" xml:space="preserve">
          <source>os is used for &quot;operating system dependent functionality&quot;. It can also be used to call external commands with &lt;code&gt;os.system&lt;/code&gt; and &lt;code&gt;os.popen&lt;/code&gt; (Note: There is also a subprocess.popen). os will always run the shell and is a simple alternative for people who don't need to, or don't know how to use &lt;code&gt;subprocess.run&lt;/code&gt;.</source>
          <target state="translated">osは「オペレーティングシステムに依存する機能」に使用されます。 また、 &lt;code&gt;os.system&lt;/code&gt; および &lt;code&gt;os.popen&lt;/code&gt; で外部コマンドを呼び出すためにも使用できます（注：subprocess.popenもあります）。 osは常にシェルを実行し、必要がないか、 &lt;code&gt;subprocess.run&lt;/code&gt; の使用方法を知らない人のための単純な代替手段です。</target>
        </trans-unit>
        <trans-unit id="cbcca4febe8f373e15156fec6a4033260e13e466" translate="yes" xml:space="preserve">
          <source>os: &lt;a href=&quot;https://docs.python.org/3.5/library/os.html&quot;&gt;https://docs.python.org/3.5/library/os.html&lt;/a&gt;</source>
          <target state="translated">os： &lt;a href=&quot;https://docs.python.org/3.5/library/os.html&quot;&gt;https&lt;/a&gt; : //docs.python.org/3.5/library/os.html</target>
        </trans-unit>
        <trans-unit id="a8d9686cb58c073c2456d6dd10a62bd7b4149915" translate="yes" xml:space="preserve">
          <source>pexpect lets you spawn child applications, control them and find patterns in their output. This is a better alternative to subprocess for commands that expect a tty on Unix.</source>
          <target state="translated">pexpect を使うと、子アプリケーションを起動して制御し、その出力からパターンを見つけることができます。これは、Unix で tty を期待するコマンドのためのサブプロセスのより良い代替手段です。</target>
        </trans-unit>
        <trans-unit id="42668b41f9ed9ad1246add137130a19892d12138" translate="yes" xml:space="preserve">
          <source>pexpect: &lt;a href=&quot;https://pexpect.readthedocs.io/en/stable/&quot;&gt;https://pexpect.readthedocs.io/en/stable/&lt;/a&gt;</source>
          <target state="translated">pexpect： &lt;a href=&quot;https://pexpect.readthedocs.io/en/stable/&quot;&gt;https&lt;/a&gt; ://pexpect.readthedocs.io/en/stable/</target>
        </trans-unit>
        <trans-unit id="af8ce099c02940f7dae91a34a3b1ac9f97531070" translate="yes" xml:space="preserve">
          <source>plumbum is a library for &quot;script-like&quot; Python programs. You can call programs like functions as in &lt;code&gt;sh&lt;/code&gt;. Plumbum is useful if you want to run a pipeline without the shell.</source>
          <target state="translated">plumbumは、「スクリプトのような」Pythonプログラム用のライブラリです。 &lt;code&gt;sh&lt;/code&gt; などの関数のようなプログラムを呼び出すことができます。 Plumbumは、シェルなしでパイプラインを実行する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1e6a45273361198ccb9f4fb2ba60008d603a5712" translate="yes" xml:space="preserve">
          <source>plumbum: &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot;&gt;https://plumbum.readthedocs.io/en/latest/&lt;/a&gt;</source>
          <target state="translated">plumbum： &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot;&gt;https&lt;/a&gt; : //plumbum.readthedocs.io/en/latest/</target>
        </trans-unit>
        <trans-unit id="24560916a5b723031ab61aae18088346943f299c" translate="yes" xml:space="preserve">
          <source>sh is a subprocess interface which lets you call programs as if they were functions. This is useful if you want to run a command multiple times.</source>
          <target state="translated">sh は、あたかも関数であるかのようにプログラムを呼び出すことができるサブプロセスインターフェイスです。これは、コマンドを複数回実行したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="08f15a5c418f54cf27af2fee84fb94963fd9c7be" translate="yes" xml:space="preserve">
          <source>sh: &lt;a href=&quot;https://amoffat.github.io/sh/&quot;&gt;https://amoffat.github.io/sh/&lt;/a&gt;</source>
          <target state="translated">sh： &lt;a href=&quot;https://amoffat.github.io/sh/&quot;&gt;https&lt;/a&gt; : //amoffat.github.io/sh/</target>
        </trans-unit>
        <trans-unit id="b2f1ab3fa95d766a02a1042a18e5de4b6ce04e69" translate="yes" xml:space="preserve">
          <source>shlex: &lt;a href=&quot;https://docs.python.org/3/library/shlex.html&quot;&gt;https://docs.python.org/3/library/shlex.html&lt;/a&gt;</source>
          <target state="translated">shlex： &lt;a href=&quot;https://docs.python.org/3/library/shlex.html&quot;&gt;https&lt;/a&gt; ://docs.python.org/3/library/shlex.html</target>
        </trans-unit>
        <trans-unit id="215f1313cfe29ed2c9cd0789a6c38b916645aedc" translate="yes" xml:space="preserve">
          <source>subprocess: &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html&quot;&gt;https://docs.python.org/3.5/library/subprocess.html&lt;/a&gt;</source>
          <target state="translated">サブプロセス： &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html&quot;&gt;https&lt;/a&gt; : //docs.python.org/3.5/library/subprocess.html</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
