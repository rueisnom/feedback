<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://stackoverflow.com/questions/89228">
    <body>
      <group id="89228">
        <trans-unit id="2fa022bd967a52296e65e0e93e4983b8a1355086" translate="yes" xml:space="preserve">
          <source>(I find it interesting and slightly counterintuitive that the version info gets put to stderr instead of stdout.)</source>
          <target state="translated">(Мне кажется интересным и слегка контринтуитивным,что информация о версии попадает в stderr,а не в stdout).</target>
        </trans-unit>
        <trans-unit id="d73ee7e04c378d99b234285f778f66d6d33d3f5e" translate="yes" xml:space="preserve">
          <source>...or for a very simple command:</source>
          <target state="translated">...или за очень простую команду:</target>
        </trans-unit>
        <trans-unit id="03e119785353bdbc85f2148afb573722fd371740" translate="yes" xml:space="preserve">
          <source>/* &lt;em&gt;UPD 2015.10.27&lt;/em&gt; @eryksun in a comment below notes, that the semantically correct flag is CREATE_NEW_CONSOLE (0x00000010) */</source>
          <target state="translated">/ * &lt;em&gt;UPD 2015.10.27&lt;/em&gt; @eryksun в комментарии ниже отмечает, что семантически правильный флаг - CREATE_NEW_CONSOLE (0x00000010) * /</target>
        </trans-unit>
        <trans-unit id="a13e78e8e9e3bfa32930177509f879f3e0e23897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commands&lt;/code&gt; contains wrapper functions for &lt;code&gt;os.popen&lt;/code&gt;, but it has been removed from Python 3 since &lt;code&gt;subprocess&lt;/code&gt; is a better alternative.</source>
          <target state="translated">&lt;code&gt;commands&lt;/code&gt; содержат функции-оболочки для &lt;code&gt;os.popen&lt;/code&gt; , но они были удалены из Python 3, так как &lt;code&gt;subprocess&lt;/code&gt; является лучшей альтернативой.</target>
        </trans-unit>
        <trans-unit id="4c8bf122b90b453d9cf47e82094c872bf30dbac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system(&quot;some_command with args&quot;)&lt;/code&gt; passes the command and arguments to your system's shell.  This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection.  For example:</source>
          <target state="translated">&lt;code&gt;os.system(&quot;some_command with args&quot;)&lt;/code&gt; передает команду и аргументы в оболочку вашей системы. Это хорошо, потому что вы можете таким образом запускать несколько команд одновременно и настраивать каналы и перенаправление ввода / вывода. Например:</target>
        </trans-unit>
        <trans-unit id="f933a6d1f532e7034395c9645f4d7b96a2af4e03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system&lt;/code&gt; does not allow you to store results, so if you want to store results in some list or something, a &lt;code&gt;subprocess.call&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;os.system&lt;/code&gt; не позволяет вам сохранять результаты, поэтому, если вы хотите сохранить результаты в каком-либо списке или чем-то &lt;code&gt;subprocess.call&lt;/code&gt; работает subprocess.call .</target>
        </trans-unit>
        <trans-unit id="e0a4cc68bc86b75a6e42b06c428e42fa3f4d7cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os.system&lt;/code&gt; is OK, but kind of dated.  It's also not very secure.  Instead, try &lt;code&gt;subprocess&lt;/code&gt;.  &lt;code&gt;subprocess&lt;/code&gt; does not call sh directly and is therefore more secure than &lt;code&gt;os.system&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.system&lt;/code&gt; в порядке, но отчасти устарела . Это также не очень безопасно. Вместо этого попробуйте &lt;code&gt;subprocess&lt;/code&gt; . &lt;code&gt;subprocess&lt;/code&gt; не вызывает sh напрямую и поэтому более безопасен, чем &lt;code&gt;os.system&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1be8c4f39fb826c1206cfeb8a2a8525188e3ba01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; waits for the command to successfully finish, then returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object. It may instead raise &lt;code&gt;TimeoutExpired&lt;/code&gt; (if you give it a &lt;code&gt;timeout=&lt;/code&gt; argument) or &lt;code&gt;CalledProcessError&lt;/code&gt; (if it fails and you pass &lt;code&gt;check=True&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; ожидает успешного завершения команды, а затем возвращает объект &lt;code&gt;CompletedProcess&lt;/code&gt; . Вместо этого он может вызвать &lt;code&gt;TimeoutExpired&lt;/code&gt; (если вы дадите ему аргумент &lt;code&gt;timeout=&lt;/code&gt; ) или &lt;code&gt;CalledProcessError&lt;/code&gt; (если произойдет сбой и вы передадите &lt;code&gt;check=True&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="37700740d479dac1f23a3d7e42187418def430b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream = os.popen(&quot;some_command with args&quot;)&lt;/code&gt; will do the same thing as &lt;code&gt;os.system&lt;/code&gt; except that it gives you a file-like object that you can use to access standard input/output for that process.  There are 3 other variants of popen that all handle the i/o slightly differently.  If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything.  See &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;stream = os.popen(&quot;some_command with args&quot;)&lt;/code&gt; будет делать то же самое, что и &lt;code&gt;os.system&lt;/code&gt; , за исключением того, что он дает вам файлоподобный объект, который вы можете использовать для доступа к стандартному вводу / выводу для этого процесса. Есть 3 других варианта popen, которые все обрабатывают ввод / вывод немного по-другому. Если вы передаете все как строку, то ваша команда передается в оболочку; если вы передаете их в виде списка, вам не нужно беспокоиться о том, чтобы избежать чего-либо. Смотрите &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;документацию&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4416f3a6f2bce6eeb7854601cba76dadb8bf5bd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.Popen&lt;/code&gt; executes the &amp;lt;command&amp;gt; as a subprocess. In my case, I need to execute file &amp;lt;a&amp;gt; which needs to communicate with another program, &amp;lt;b&amp;gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.Popen&lt;/code&gt; выполняет &amp;lt;команду&amp;gt; как подпроцесс. В моем случае мне нужно выполнить файл &amp;lt;a&amp;gt;, который должен взаимодействовать с другой программой, &amp;lt;b&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="33e4bd1cac6b8c03f49979ab4855183ec2d516b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.check_call&lt;/code&gt; is convenient if you don't want to test return values. It throws an exception on any error.</source>
          <target state="translated">&lt;code&gt;subprocess.check_call&lt;/code&gt; удобен, если вы не хотите проверять возвращаемые значения. Выдает исключение при любой ошибке.</target>
        </trans-unit>
        <trans-unit id="ff4a1b97ccf371c558c702bd25078a23e3ea92ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subprocess.run&lt;/code&gt; is the recommended approach &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess&quot;&gt;as of Python 3.5&lt;/a&gt; if your code does not need to maintain compatibility with earlier Python versions. It's more consistent and offers similar ease-of-use as Envoy. (Piping isn't as straightforward though. See &lt;a href=&quot;https://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes&quot;&gt;this question for how&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;subprocess.run&lt;/code&gt; с &lt;a href=&quot;https://docs.python.org/3.6/whatsnew/3.5.html#whatsnew-subprocess&quot;&gt;Python 3.5,&lt;/a&gt; рекомендуется использовать subprocess.run, если ваш код не должен поддерживать совместимость с более ранними версиями Python. Он более последовательный и предлагает аналогичную простоту использования, как Envoy. (Трубопровод не так прост, хотя. См. &lt;a href=&quot;https://stackoverflow.com/questions/7389662/link-several-popen-commands-with-pipes&quot;&gt;Этот вопрос, как&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="6c10957c993d4d3137d83cbbd9734cf58bddc749" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note on Python version: If you are still using Python 2, &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;subprocess.call&lt;/a&gt; works in a similar way.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Примечание по версии Python: если вы все еще используете Python 2, &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;subprocess.call&lt;/a&gt; работает аналогичным образом.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abdf1ab661fc1bb5d31823425f22c54b0fe0a4c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ProTip: &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot;&gt;shlex.split&lt;/a&gt; can help you to parse the command for &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, and other &lt;code&gt;subprocess&lt;/code&gt; functions in case you don't want (or you can't!) provide them in form of lists:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ProTip: &lt;a href=&quot;https://docs.python.org/2/library/shlex.html#shlex.split&quot;&gt;shlex.split&lt;/a&gt; может помочь вам разобрать команду для &lt;code&gt;run&lt;/code&gt; , &lt;code&gt;call&lt;/code&gt; и других функций &lt;code&gt;subprocess&lt;/code&gt; если вы не хотите (или не можете!) Предоставить их в виде списков:&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f2beb69e6e367fef69658c1d696a2a07e072fa71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sources:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sources:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fae92702cc843aed7b6f7742cd5bf98fb81d5390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;These are all the libraries:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Это все библиотеки:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="122b554b12ec9d4243a60880464396676946c117" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;commands&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;commands&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="295a7b21b6132cb7af6f19ee9b55d3e68dccd713" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;envoy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;envoy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0f149e4b6717c8ff1d7cb99cddbe344ab27b8f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fabric&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;fabric&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57b5d2dd621b183cb3e77e4464994db536fc8f8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;os - This module provides a portable way of using operating system-dependent functionality.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;OS - этот модуль предоставляет портативный способ использования функциональных возможностей, зависящих от операционной системы.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce67685e9d0f0271929077ff3385b7f97cb94aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;os&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;os&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e109416858f9fd7878d662f569388a7e5ac5120e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pexpect&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;pexpect&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d8ee21152a9f689364ff72189ea954186f6d2bea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;plumbum&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;plumbum&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe04888499cbb6a1a7308e216ab1b1883dd3550a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sh&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;sh&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a295458c00f4d8f888b9bb2e34b5e88b7961da8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subprocess&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;subprocess&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f4b0ef6809aac2c4cea3880f034fe3f8c0e1165" translate="yes" xml:space="preserve">
          <source>Also note the &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#frequently-used-arguments&quot;&gt;shell&lt;/a&gt; parameter.</source>
          <target state="translated">Также обратите внимание на параметр &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#frequently-used-arguments&quot;&gt;оболочки&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="12fa2ebb13aa4c6f3737660d048e954b248d81c2" translate="yes" xml:space="preserve">
          <source>An example with task spooler:</source>
          <target state="translated">Пример со спулером задач:</target>
        </trans-unit>
        <trans-unit id="783369e650b595352e4b203badb3f8950cfa6399" translate="yes" xml:space="preserve">
          <source>Another popular library is &lt;a href=&quot;https://pypi.python.org/pypi/sh&quot;&gt;sh&lt;/a&gt;:</source>
          <target state="translated">Другая популярная библиотека - это &lt;a href=&quot;https://pypi.python.org/pypi/sh&quot;&gt;sh&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d7810dfe6b8148f0e818246c5528184e5ee081bc" translate="yes" xml:space="preserve">
          <source>Anyone runs the kwrite not being a subprocess (i.e. in the system monitor it must appear at the leftmost edge of the tree).</source>
          <target state="translated">Любой запускает kwrite,не являясь подпроцессом (т.е.в системном мониторе он должен появиться на крайнем левом краю дерева).</target>
        </trans-unit>
        <trans-unit id="cb2a196ab266c2677a36a1ff39e9a77602d3e268" translate="yes" xml:space="preserve">
          <source>As of Python 3.5, the documentation recommends &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess.run&lt;/a&gt;:</source>
          <target state="translated">Начиная с Python 3.5, документация рекомендует &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess.run&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e0a5626c26468b935b29b7609635694dc9b379ed" translate="yes" xml:space="preserve">
          <source>As you might infer from the above example, stdout and stderr both get piped to your own stdout and stderr by default.</source>
          <target state="translated">Как вы можете заключить из приведенного выше примера,stdout и stderr по умолчанию подключаются к вашему собственному stdout и stderr.</target>
        </trans-unit>
        <trans-unit id="71e8fb399394db284421a62daa01522b012fe135" translate="yes" xml:space="preserve">
          <source>But more informative is &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt;the &lt;code&gt;Popen&lt;/code&gt; documentation&lt;/a&gt;:</source>
          <target state="translated">Но более информативной является &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt;документация &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="42c3d980ac63ed21471d91749f0230e954125b26" translate="yes" xml:space="preserve">
          <source>But this seem to be a good tool: &lt;a href=&quot;https://github.com/amoffat/sh&quot;&gt;&lt;code&gt;sh&lt;/code&gt; (Python subprocess interface)&lt;/a&gt;.</source>
          <target state="translated">Но это хороший инструмент: &lt;a href=&quot;https://github.com/amoffat/sh&quot;&gt; &lt;code&gt;sh&lt;/code&gt; (интерфейс подпроцесса Python)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="040353c1be3fc4d64bd7a04883d5de25a9889047" translate="yes" xml:space="preserve">
          <source>Calling an external command from Python</source>
          <target state="translated">Вызов внешней команды с Питона</target>
        </trans-unit>
        <trans-unit id="73d24b095f38cb410b90189e614453dd440a6a13" translate="yes" xml:space="preserve">
          <source>Calling an external command in Python</source>
          <target state="translated">Вызов внешней команды на Питоне</target>
        </trans-unit>
        <trans-unit id="73c1ff3b1f2c79f4fb4b9eeeb7f9489bc652b2ed" translate="yes" xml:space="preserve">
          <source>Capture output:</source>
          <target state="translated">Вывод захвата:</target>
        </trans-unit>
        <trans-unit id="821248556b70b1a5b77fcba34211dde7762c0d29" translate="yes" xml:space="preserve">
          <source>Capturing output</source>
          <target state="translated">Захват выходного сигнала</target>
        </trans-unit>
        <trans-unit id="7b6e4384f3588ea08309a1d68b2c594a5a6ef91d" translate="yes" xml:space="preserve">
          <source>Check the &quot;pexpect&quot; Python library, too.</source>
          <target state="translated">Проверьте и библиотеку &quot;Pexpect&quot; Python.</target>
        </trans-unit>
        <trans-unit id="04c1ab878cc2981820a3c703c587e0b1e6d43b31" translate="yes" xml:space="preserve">
          <source>Example usage from &lt;a href=&quot;https://github.com/kennethreitz/envoy#readme&quot;&gt;the README&lt;/a&gt;:</source>
          <target state="translated">Пример использования из &lt;a href=&quot;https://github.com/kennethreitz/envoy#readme&quot;&gt;README&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="85d1e51f42bcdee83f1807c85ad03b44972f7625" translate="yes" xml:space="preserve">
          <source>Execute a child program in a new process. On POSIX, the class uses
  os.execvp()-like behavior to execute the child program. On Windows,
  the class uses the Windows CreateProcess() function. The arguments to
  Popen are as follows.</source>
          <target state="translated">Выполнить детскую программу в новом процессе.В POSIX класс использует os.execvp()-подобное поведение для выполнения дочерней программы.На Windows класс использует функцию Windows CreateProcess().Аргументы для Popen следующие.</target>
        </trans-unit>
        <trans-unit id="8a714c705dea02d0d422508d397211ab5d0c556f" translate="yes" xml:space="preserve">
          <source>Expanded Signature</source>
          <target state="translated">Расширенная подпись</target>
        </trans-unit>
        <trans-unit id="4793ba5a9403e9efafa59c26d506241288256613" translate="yes" xml:space="preserve">
          <source>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. &lt;strong&gt;There are serious security implications&lt;/strong&gt; if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:</source>
          <target state="translated">Наконец, имейте в виду, что для всех методов, в которых вы передаете последнюю команду, которая будет выполняться оболочкой в ​​виде строки, вы несете ответственность за ее исключение. &lt;strong&gt;Существуют серьезные последствия для безопасности,&lt;/strong&gt; если любой части передаваемой вами строки нельзя полностью доверять. Например, если пользователь вводит некоторую / любую часть строки. Если вы не уверены, используйте эти методы только с константами. Чтобы дать вам подсказку о последствиях, рассмотрите этот код:</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Например,</target>
        </trans-unit>
        <trans-unit id="fd628ede4dea14449c2bd6ce7ddc3a17d4be5bc0" translate="yes" xml:space="preserve">
          <source>For the more &lt;code&gt;os&lt;/code&gt; functions, &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;here&lt;/a&gt; is the documentation.</source>
          <target state="translated">Для большего количества функций &lt;code&gt;os&lt;/code&gt; , &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;здесь&lt;/a&gt; документация.</target>
        </trans-unit>
        <trans-unit id="9c4ae2ec46821c328b164a9bd8097808acc3eb0e" translate="yes" xml:space="preserve">
          <source>For versions of Python before 3.5, use &lt;code&gt;call&lt;/code&gt;:</source>
          <target state="translated">Для версий Python до 3.5 используйте &lt;code&gt;call&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="048b33f3180e834803e6dc87333de2eb9542760b" translate="yes" xml:space="preserve">
          <source>Full Signature</source>
          <target state="translated">Полная подпись</target>
        </trans-unit>
        <trans-unit id="6d74b3bf384964ae40c82bc487f9ebeeff7b54bd" translate="yes" xml:space="preserve">
          <source>Get more information &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Получите больше информации &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a1ddee242c3c47b20fdebe1a8e42128b53fe1db7" translate="yes" xml:space="preserve">
          <source>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</source>
          <target state="translated">Вот краткое описание способов вызова внешних программ,а также преимущества и недостатки каждой из них:</target>
        </trans-unit>
        <trans-unit id="69638c61ab5a206a75c4a4d3c5fd0660eeea0a49" translate="yes" xml:space="preserve">
          <source>Here's an example from the documentation:</source>
          <target state="translated">Вот пример из документации:</target>
        </trans-unit>
        <trans-unit id="89e73100a297543bdc607a0b518448335c8e3a66" translate="yes" xml:space="preserve">
          <source>Here's an example of the simplest possible usage - and it does exactly as asked:</source>
          <target state="translated">Приведем пример максимально простого использования-и он делает именно так,как просили:</target>
        </trans-unit>
        <trans-unit id="a57c3b7a9b591fcf528aa657d826d36e28aadd44" translate="yes" xml:space="preserve">
          <source>Here's an expanded signature, as given in the documentation:</source>
          <target state="translated">Вот расширенная подпись,как указано в документации:</target>
        </trans-unit>
        <trans-unit id="8f8248ec43960110eab95fc9c88ecc8149428271" translate="yes" xml:space="preserve">
          <source>Here's some examples from &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.run&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">Вот несколько примеров из &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.run&quot;&gt;документации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7df370006ffdbaaae32d6957ed8cd623e4cabd51" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;Popen&lt;/code&gt; signature as given in &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/subprocess.py#L587&quot;&gt;the source&lt;/a&gt;. I think this is the most precise encapsulation of the information (as opposed to &lt;code&gt;help(Popen)&lt;/code&gt;):</source>
          <target state="translated">Вот подпись &lt;code&gt;Popen&lt;/code&gt; как дано в &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/subprocess.py#L587&quot;&gt;источнике&lt;/a&gt; . Я думаю, что это наиболее точная инкапсуляция информации (в отличие от &lt;code&gt;help(Popen)&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="df51a7d6022c342aad00d00ab7ef7e5c14f28726" translate="yes" xml:space="preserve">
          <source>Here's the actual signature in the source and as shown by &lt;code&gt;help(run)&lt;/code&gt;:</source>
          <target state="translated">Вот фактическая подпись в источнике и как показано в &lt;code&gt;help(run)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2908129e81281b22c758cbb06b4955a1e130bec2" translate="yes" xml:space="preserve">
          <source>Hopefully this will help you make a decision on which library to use :)</source>
          <target state="translated">Надеемся,это поможет вам принять решение о том,какую библиотеку использовать :)</target>
        </trans-unit>
        <trans-unit id="d51db9b97fe38ab99295964d3561093d6d5384a2" translate="yes" xml:space="preserve">
          <source>How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?</source>
          <target state="translated">Как вызвать внешнюю команду (как если бы я набрал ее в оболочке Unix или командной строке Windows)из скрипта Python?</target>
        </trans-unit>
        <trans-unit id="36fa38bf21838dc62f7e8cb9fd98dc8c0092ddac" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;sh&lt;/code&gt; dropped Windows support, so it's not as awesome as it used to be. Install by &lt;code&gt;pip install sh&lt;/code&gt;.</source>
          <target state="translated">Однако &lt;code&gt;sh&lt;/code&gt; отказался от поддержки Windows, так что это не так круто, как раньше. Установить по &lt;code&gt;pip install sh&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f015f510394548ba21928d02139f329649001561" translate="yes" xml:space="preserve">
          <source>However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc.  On the other hand, this also lets you run commands which are simply shell commands and not actually external programs.  See &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.system&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">Однако, хотя это удобно, вам нужно вручную обрабатывать экранирование символов оболочки, таких как пробелы и т. Д. С другой стороны, это также позволяет запускать команды, которые являются просто командами оболочки, а не внешними программами. Смотрите &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.system&quot;&gt;документацию&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a8ff91da18889bd85a334ef54dcb4f539b84312b" translate="yes" xml:space="preserve">
          <source>I always use &lt;code&gt;fabric&lt;/code&gt; for this things like:</source>
          <target state="translated">Я всегда использую &lt;code&gt;fabric&lt;/code&gt; для таких вещей, как:</target>
        </trans-unit>
        <trans-unit id="a34e56daccbd52ec707831ca674c7a9f92aa8b9c" translate="yes" xml:space="preserve">
          <source>I have not checked the code on other platforms and do not know the reasons of the behaviour on FreeBSD. If anyone knows, please share your ideas. Googling on starting background processes in Python does not shed any light yet.</source>
          <target state="translated">Я не проверял код на других платформах и не знаю причин поведения на FreeBSD.Если кто-то знает,пожалуйста,поделитесь своими идеями.Гуглинг по началу фоновых процессов на Python ещё не пролил свет.</target>
        </trans-unit>
        <trans-unit id="89a3de001ed039e3c675db0ed8e17c1de62d6bb7" translate="yes" xml:space="preserve">
          <source>I quite like &lt;a href=&quot;http://shell-command.readthedocs.org/en/latest/index.html&quot;&gt;shell_command&lt;/a&gt; for its simplicity.  It's built on top of the subprocess module.</source>
          <target state="translated">Мне очень нравится &lt;a href=&quot;http://shell-command.readthedocs.org/en/latest/index.html&quot;&gt;shell_command&lt;/a&gt; за его простоту. Он построен поверх модуля подпроцесса.</target>
        </trans-unit>
        <trans-unit id="bc6c376176890b6c7f696d60143eb6f24c04e18b" translate="yes" xml:space="preserve">
          <source>I recommend trying &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;Envoy&lt;/a&gt;. It's a wrapper for subprocess, which in turn &lt;a href=&quot;http://docs.python.org/2/library/subprocess.html&quot;&gt;aims to replace&lt;/a&gt; the older modules and functions. Envoy is subprocess for humans.</source>
          <target state="translated">Я рекомендую попробовать &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;посланника&lt;/a&gt; . Это оболочка для подпроцесса, который, в свою очередь, &lt;a href=&quot;http://docs.python.org/2/library/subprocess.html&quot;&gt;призван заменить&lt;/a&gt; старые модули и функции. Посланник - это подпроцесс для людей.</target>
        </trans-unit>
        <trans-unit id="6f120f3c03a438bb08852a052c9519c10e97399d" translate="yes" xml:space="preserve">
          <source>I tend to use &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; together with &lt;a href=&quot;https://docs.python.org/2/library/shlex.html&quot;&gt;shlex&lt;/a&gt; (to handle escaping of quoted strings):</source>
          <target state="translated">Я склонен использовать &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;подпроцесс&lt;/a&gt; вместе с &lt;a href=&quot;https://docs.python.org/2/library/shlex.html&quot;&gt;shlex&lt;/a&gt; (для обработки экранирования строк в кавычках):</target>
        </trans-unit>
        <trans-unit id="a1fb0cafb2ff5f705a7913c2243d7361a24e9395" translate="yes" xml:space="preserve">
          <source>I tried subprocess, and execution was successful. However &amp;lt;b&amp;gt; could not communicate with &amp;lt;a&amp;gt;.
Everything is normal when I run both from the terminal.</source>
          <target state="translated">Я попробовал подпроцесс, и выполнение прошло успешно. Однако &amp;lt;b&amp;gt; не удалось связаться с &amp;lt;a&amp;gt;. Все нормально, когда я запускаю оба из терминала.</target>
        </trans-unit>
        <trans-unit id="20d0bdd77f0317c3ad96c6df5b327ec89ea4e117" translate="yes" xml:space="preserve">
          <source>I'd recommend using the &lt;a href=&quot;http://docs.python.org/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; module instead of os.system because it does shell escaping for you and is therefore much safer.</source>
          <target state="translated">Я бы порекомендовал использовать модуль &lt;a href=&quot;http://docs.python.org/library/subprocess.html&quot;&gt;подпроцесса&lt;/a&gt; вместо os.system, потому что он делает экранирование оболочки и поэтому намного безопаснее.</target>
        </trans-unit>
        <trans-unit id="3306f6b4f57a8e60469dc14d026d29435c7937c1" translate="yes" xml:space="preserve">
          <source>If check is true, and the process exits with a non-zero exit code, a
  CalledProcessError exception will be raised. Attributes of that
  exception hold the arguments, the exit code, and stdout and stderr if
  they were captured.</source>
          <target state="translated">Если проверка верна и процесс завершается с ненулевым кодом выхода,то будет поднято исключение CalledProcessError.Атрибуты этого исключения содержат аргументы,код выхода,а также stdout и stderr,если они были перехвачены.</target>
        </trans-unit>
        <trans-unit id="7513b2e3638518f8194dc11be855a41d965d8024" translate="yes" xml:space="preserve">
          <source>If shell is &lt;code&gt;True&lt;/code&gt;, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user&amp;rsquo;s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;fnmatch&lt;/code&gt;, &lt;code&gt;os.walk()&lt;/code&gt;, &lt;code&gt;os.path.expandvars()&lt;/code&gt;, &lt;code&gt;os.path.expanduser()&lt;/code&gt;, and &lt;code&gt;shutil&lt;/code&gt;).</source>
          <target state="translated">Если shell равен &lt;code&gt;True&lt;/code&gt; , указанная команда будет выполнена через оболочку. Это может быть полезно, если вы используете Python в первую очередь для расширенного потока управления, который он предлагает для большинства системных оболочек, и все еще хотите удобный доступ к другим функциям оболочки, таким как каналы оболочки, подстановочные знаки имени файла, расширение переменных среды и расширение ~ до дома пользователя. каталог. Однако обратите внимание, что сам Python предлагает реализации многих подобных оболочке функций (в частности, &lt;code&gt;glob&lt;/code&gt; , &lt;code&gt;fnmatch&lt;/code&gt; , &lt;code&gt;os.walk()&lt;/code&gt; , &lt;code&gt;os.path.expandvars()&lt;/code&gt; , &lt;code&gt;os.path.expanduser()&lt;/code&gt; и &lt;code&gt;shutil&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c64a88fb4da9b7b730048f1a8dd5918c6a117af0" translate="yes" xml:space="preserve">
          <source>If you do not mind external dependencies, use &lt;a href=&quot;https://pypi.python.org/pypi/plumbum&quot;&gt;plumbum&lt;/a&gt;:</source>
          <target state="translated">Если вы не против внешних зависимостей, используйте &lt;a href=&quot;https://pypi.python.org/pypi/plumbum&quot;&gt;plumbum&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="7363228fcdaba9c20bf56aae3fc8e7f106d140e2" translate="yes" xml:space="preserve">
          <source>If you need the output from the command you are calling,
then you can use &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.check_output&quot;&gt;subprocess.check_output&lt;/a&gt; (Python 2.7+).</source>
          <target state="translated">Если вам нужен вывод команды, которую вы вызываете, вы можете использовать &lt;a href=&quot;https://docs.python.org/3.6/library/subprocess.html#subprocess.check_output&quot;&gt;subprocess.check_output&lt;/a&gt; (Python 2.7+).</target>
        </trans-unit>
        <trans-unit id="8f4e9f7315aeec38a6e52736117eab1064d48ef4" translate="yes" xml:space="preserve">
          <source>If you try &lt;code&gt;os.system(&quot;kwrite&quot;)&lt;/code&gt;, program flow freezes until the user closes kwrite. To overcome that I tried instead &lt;code&gt;os.system(konsole -e kwrite)&lt;/code&gt;. This time program continued to flow, but kwrite became the subprocess of the console.</source>
          <target state="translated">Если вы попробуете &lt;code&gt;os.system(&quot;kwrite&quot;)&lt;/code&gt; , поток программы остановится , пока пользователь не закроет kwrite. Чтобы преодолеть это, я попытался вместо &lt;code&gt;os.system(konsole -e kwrite)&lt;/code&gt; . На этот раз программа продолжала работать, но kwrite стал подпроцессом консоли.</target>
        </trans-unit>
        <trans-unit id="e7dd6dd4afa9c4d20e2b859c4c05c2f008a37f97" translate="yes" xml:space="preserve">
          <source>If you want to capture the output, you can pass &lt;code&gt;subprocess.PIPE&lt;/code&gt; to the appropriate &lt;code&gt;stderr&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;:</source>
          <target state="translated">Если вы хотите захватить вывод, вы можете передать &lt;code&gt;subprocess.PIPE&lt;/code&gt; соответствующему &lt;code&gt;stderr&lt;/code&gt; или &lt;code&gt;stdout&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="92362498e29cfb081397f0c34ab9249f9720243e" translate="yes" xml:space="preserve">
          <source>If you want to return the results of the command, you can use &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt;&lt;code&gt;os.popen&lt;/code&gt;&lt;/a&gt;. However, this is deprecated since version 2.6 in favor of the &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#module-subprocess&quot;&gt;subprocess module&lt;/a&gt;, which other answers have covered well.</source>
          <target state="translated">Если вы хотите вернуть результаты команды, вы можете использовать &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.popen&quot;&gt; &lt;code&gt;os.popen&lt;/code&gt; &lt;/a&gt; . Однако, начиная с версии 2.6, это не рекомендуется в пользу &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#module-subprocess&quot;&gt;модуля подпроцесса&lt;/a&gt; , который хорошо освещен в других ответах.</target>
        </trans-unit>
        <trans-unit id="af2adabd4a25ba82a40a7045bc7d52e5e486b80a" translate="yes" xml:space="preserve">
          <source>If you're on Python 3.5 or later, you can use the new &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.run&quot;&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt; function, which is a lot like the above but even more flexible and returns a &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess&quot;&gt;&lt;code&gt;CompletedProcess&lt;/code&gt;&lt;/a&gt; object when the command finishes executing.</source>
          <target state="translated">Если вы используете Python 3.5 или более поздней версии, вы можете использовать новую функцию &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.run&quot;&gt; &lt;code&gt;subprocess.run&lt;/code&gt; &lt;/a&gt; , которая очень похожа на вышеприведенную, но еще более гибкая и возвращает объект &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess&quot;&gt; &lt;code&gt;CompletedProcess&lt;/code&gt; &lt;/a&gt; после завершения выполнения команды.</target>
        </trans-unit>
        <trans-unit id="a8c86e3653f19cdf348b2172a4bbdb83232ae1aa" translate="yes" xml:space="preserve">
          <source>In Windows you can just import the &lt;code&gt;subprocess&lt;/code&gt; module and run external commands by calling &lt;code&gt;subprocess.Popen()&lt;/code&gt;, &lt;code&gt;subprocess.Popen().communicate()&lt;/code&gt; and &lt;code&gt;subprocess.Popen().wait()&lt;/code&gt; as below:</source>
          <target state="translated">В Windows вы можете просто импортировать модуль &lt;code&gt;subprocess&lt;/code&gt; и запускать внешние команды, вызывая &lt;code&gt;subprocess.Popen()&lt;/code&gt; , &lt;code&gt;subprocess.Popen().communicate()&lt;/code&gt; и &lt;code&gt;subprocess.Popen().wait()&lt;/code&gt; как показано ниже:</target>
        </trans-unit>
        <trans-unit id="6098bdcea6354241592eea73912efde1afabb629" translate="yes" xml:space="preserve">
          <source>Installing &lt;code&gt;ts&lt;/code&gt; doesn't requires admin privileges. You can download and compile it from source with a simple &lt;code&gt;make&lt;/code&gt;, add it to your path and you're done.</source>
          <target state="translated">Установка &lt;code&gt;ts&lt;/code&gt; не требует прав администратора. Вы можете скачать и скомпилировать его из исходного кода с помощью простого &lt;code&gt;make&lt;/code&gt; , добавить его к своему пути и все готово.</target>
        </trans-unit>
        <trans-unit id="e98b09203f0328a90cfc78f75d841debdd5b9276" translate="yes" xml:space="preserve">
          <source>It allows for interactive controlling of external programs/commands, even ssh, ftp, telnet, etc. You can just type something like:</source>
          <target state="translated">Он позволяет интерактивно управлять внешними программными командами,даже ssh,ftp,telnet и др.Вы можете просто набрать что-то вроде:</target>
        </trans-unit>
        <trans-unit id="2b17b931e5cc7a41baf907fc20f514914e06f75b" translate="yes" xml:space="preserve">
          <source>It can be this simple:</source>
          <target state="translated">Всё может быть так просто:</target>
        </trans-unit>
        <trans-unit id="1876f45c1a10b475e3da4f444793d729e158467c" translate="yes" xml:space="preserve">
          <source>It is the best &lt;code&gt;subprocess&lt;/code&gt; wrapper. It's cross-platform, i.e. it works on both Windows and Unix-like systems. Install by &lt;code&gt;pip install plumbum&lt;/code&gt;.</source>
          <target state="translated">Это лучшая оболочка &lt;code&gt;subprocess&lt;/code&gt; . Он кроссплатформенный, то есть работает как в Windows, так и в Unix-подобных системах. Установить с помощью &lt;code&gt;pip install plumbum&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aaa07cbf594cc966ace34cd19c136a6ec2b63b2b" translate="yes" xml:space="preserve">
          <source>It is the recommended standard way. However, more complicated tasks (pipes, output, input, etc.) can be tedious to construct and write.</source>
          <target state="translated">Это рекомендуемый стандартный способ.Однако,более сложные задачи (трубы,вывод,ввод и т.д.)могут быть утомительными в построении и написании.</target>
        </trans-unit>
        <trans-unit id="0950087da2cd9f6a22ccabfcf26acb05ebf55d6c" translate="yes" xml:space="preserve">
          <source>It's basically a wrapper for popen and shlex for now. It also supports piping commands so you can chain commands easier in Python. So you can do things like:</source>
          <target state="translated">Пока это,по сути,обертка для попена и шлексов.Он также поддерживает команды соединения трубопроводов,так что вы можете легче связывать команды цепочками на Python.Так что вы можете делать такие вещи,как:</target>
        </trans-unit>
        <trans-unit id="684e4264c8db3e123a99d38088e818bc7f171eb5" translate="yes" xml:space="preserve">
          <source>Look at an example:</source>
          <target state="translated">Посмотри на пример:</target>
        </trans-unit>
        <trans-unit id="1204c37bac4cb816da4fb8a8d0bc2c80ab7bd8aa" translate="yes" xml:space="preserve">
          <source>Look at the &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; module in the standard library:</source>
          <target state="translated">Посмотрите на модуль &lt;a href=&quot;https://docs.python.org/library/subprocess.html&quot;&gt;подпроцесса&lt;/a&gt; в стандартной библиотеке:</target>
        </trans-unit>
        <trans-unit id="9233d608f7c0dc4bbdf19142923c6ea55bddb4ae" translate="yes" xml:space="preserve">
          <source>My target platform was FreeBSD, but the development was on Windows, so I faced the problem on Windows first.</source>
          <target state="translated">Моей целевой платформой была FreeBSD,но разработка велась на Windows,поэтому я сначала столкнулся с проблемой на Windows.</target>
        </trans-unit>
        <trans-unit id="3e19a10fe630c4891bdeeed97635e547e260c810" translate="yes" xml:space="preserve">
          <source>Note that this indicates that only the args list should be passed positionally. So pass the remaining arguments as keyword arguments.</source>
          <target state="translated">Обратите внимание,что это указывает на то,что только список аргументов должен передаваться позиционно.Поэтому передайте остальные аргументы в качестве аргументов по ключевым словам.</target>
        </trans-unit>
        <trans-unit id="a24dc5dfdb8a300a722b06eb63d191c14fe3e25a" translate="yes" xml:space="preserve">
          <source>Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant documentation on the 'os' and 'sys' modules. There are a bunch of functions (exec* and spawn*) that will do similar things.</source>
          <target state="translated">Обратите внимание,что это опасно,так как команда не очищена.Я оставляю на усмотрение Google соответствующую документацию по модулям 'os' и 'sys'.Есть куча функций (exec*и spawn*),которые будут делать похожие вещи.</target>
        </trans-unit>
        <trans-unit id="6d935935cd721060cd471db94f9ef7b7e4d625f4" translate="yes" xml:space="preserve">
          <source>Note, only &lt;code&gt;args&lt;/code&gt; should be passed positionally.</source>
          <target state="translated">Обратите внимание, только &lt;code&gt;args&lt;/code&gt; должны быть переданы позиционно.</target>
        </trans-unit>
        <trans-unit id="13e1383053d018a118f339a408b60348fa0c10df" translate="yes" xml:space="preserve">
          <source>Notes about task spooler (&lt;code&gt;ts&lt;/code&gt;):</source>
          <target state="translated">Примечания о диспетчере задач ( &lt;code&gt;ts&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="17f85f0219883423eaae3030acbe2e8068839e11" translate="yes" xml:space="preserve">
          <source>On FreeBSD we have another problem: when the parent process is finished, it finishes the child processes as well. And that is not what you want in a CGI script either. Some experiments showed that the problem seemed to be in sharing sys.stdout. And the working solution was the following:</source>
          <target state="translated">Во FreeBSD у нас есть еще одна проблема:когда родительский процесс завершен,он завершает и дочерние процессы.И это тоже не то,что вам нужно в CGI-скрипте.Некоторые эксперименты показали,что проблема,похоже,заключается в совместном использовании sys.stdout.И рабочее решение было следующим:</target>
        </trans-unit>
        <trans-unit id="d77fda016063bfb5e284fb2828725f67f1e0abcd" translate="yes" xml:space="preserve">
          <source>On Windows (Windows&amp;nbsp;XP), the parent process will not finish until the longtask.py has finished its work. It is not what you want in a CGI script. The problem is not specific to Python; in the PHP community the problems are the same.</source>
          <target state="translated">В Windows (Windows XP) родительский процесс не завершится, пока longtask.py не завершит свою работу. Это не то, что вы хотите в CGI-скрипте. Проблема не является специфичной для Python; в сообществе PHP проблемы одинаковы.</target>
        </trans-unit>
        <trans-unit id="73cc2ccf316b575a875f3123af48e3e1bc8b7676" translate="yes" xml:space="preserve">
          <source>One might easily move from manually providing a command string (like the question suggests) to providing a string built programmatically. &lt;strong&gt;Don't build strings programmatically.&lt;/strong&gt; This is a potential security issue. It's better to assume you don't trust the input.</source>
          <target state="translated">Можно легко перейти от предоставления командной строки вручную (как предлагает вопрос) к предоставлению строки, созданной программно. &lt;strong&gt;Не создавайте строки программно.&lt;/strong&gt; Это потенциальная проблема безопасности. Лучше предположить, что вы не доверяете вводу.</target>
        </trans-unit>
        <trans-unit id="41a57f8f481028cebaba1e0f5469024183974d84" translate="yes" xml:space="preserve">
          <source>One more: 
(NOTE: kwrite behaves different from other applications. If you try the below with Firefox, the results will not be the same.)</source>
          <target state="translated">Еще один:(ПРИМЕЧАНИЕ:kwrite ведет себя не так,как другие приложения.Если вы попробуете использовать Firefox ниже,результаты будут не такими же).</target>
        </trans-unit>
        <trans-unit id="e25727ac8c89aabb607297c433808248a7a0e1e1" translate="yes" xml:space="preserve">
          <source>Original answer:</source>
          <target state="translated">Оригинальный ответ:</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="9eb209cce757a602d7f2f0ca560ec376bddc2235" translate="yes" xml:space="preserve">
          <source>Pass a command list</source>
          <target state="translated">Передать список команд</target>
        </trans-unit>
        <trans-unit id="8cab791770584f20f8736085e6f06ba110e4d582" translate="yes" xml:space="preserve">
          <source>Pipe stuff around too:</source>
          <target state="translated">Трубные штучки тоже вокруг:</target>
        </trans-unit>
        <trans-unit id="ebb071acd0b348557933898f1183ca1a9ebf2a6b" translate="yes" xml:space="preserve">
          <source>Popen</source>
          <target state="translated">Popen</target>
        </trans-unit>
        <trans-unit id="2bbaa21688c027b406e5f4b12b6e7be1b87ff580" translate="yes" xml:space="preserve">
          <source>Raise on failed run:</source>
          <target state="translated">Поднимитесь на неудачной пробежке:</target>
        </trans-unit>
        <trans-unit id="bf8cfc7ba5a5f5bee4c9521c60f879e6686ff1dc" translate="yes" xml:space="preserve">
          <source>Run a process:</source>
          <target state="translated">Запустите процесс:</target>
        </trans-unit>
        <trans-unit id="770bbd7c071f378133b5752a9ea61c937cf5ce7e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">Смотрите &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#subprocess.call&quot;&gt;документацию&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2f169459d9aa145196151308de045b7515b46ab1" translate="yes" xml:space="preserve">
          <source>Shameless plug, I wrote a library for this :P
&lt;a href=&quot;https://github.com/houqp/shell.py&quot;&gt;https://github.com/houqp/shell.py&lt;/a&gt;</source>
          <target state="translated">Бесстыдный плагин, я для этого написал библиотеку: P &lt;a href=&quot;https://github.com/houqp/shell.py&quot;&gt;https://github.com/houqp/shell.py&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="253723ab412e01a3b5346e6c5bead7538a06547e" translate="yes" xml:space="preserve">
          <source>Simple, use &lt;code&gt;subprocess.run&lt;/code&gt;, which returns a &lt;code&gt;CompletedProcess&lt;/code&gt; object:</source>
          <target state="translated">Просто используйте &lt;code&gt;subprocess.run&lt;/code&gt; , который возвращает объект &lt;code&gt;CompletedProcess&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="96916a7d5b2c00cca0f4d8225cd04dfa73ef6174" translate="yes" xml:space="preserve">
          <source>Some hints on detaching the child process from the calling one (starting the child process in background).</source>
          <target state="translated">Некоторые советы по отсоединению процесса ребенка от вызывающего (запуск процесса ребенка в фоновом режиме).</target>
        </trans-unit>
        <trans-unit id="0ff80ac32b33346bf44e846d95580df486157012" translate="yes" xml:space="preserve">
          <source>Subprocess allows you to call external commands and connect them to their input/output/error pipes (stdin, stdout, and stderr). Subprocess is the default choice for running commands, but sometimes other modules are better.</source>
          <target state="translated">Подпроцесс позволяет вызывать внешние команды и подключать их к своим каналам ввода-вывода (stdin,stdout и stderr).Подпроцесс-это выбор по умолчанию для выполнения команд,но иногда другие модули лучше.</target>
        </trans-unit>
        <trans-unit id="02d03c537f5a1c1351c07e93fd9b4e1c806b46a3" translate="yes" xml:space="preserve">
          <source>Suppose you want to start a long task from a CGI script. That is, the child process should live longer than the CGI script execution process.</source>
          <target state="translated">Предположим,вы хотите запустить длинную задачу из CGI-скрипта.То есть,дочерний процесс должен жить дольше,чем процесс выполнения CGI-скрипта.</target>
        </trans-unit>
        <trans-unit id="4bf5eed33409a9d4cce95fee5d4f206f094bd0c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;official documentation&lt;/a&gt; recommends the &lt;code&gt;subprocess&lt;/code&gt; module over the alternative &lt;code&gt;os.system()&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;Официальная документация&lt;/a&gt; рекомендует модуль &lt;code&gt;subprocess&lt;/code&gt; &lt;code&gt;os.system()&lt;/code&gt; альтернативной os.system () :</target>
        </trans-unit>
        <trans-unit id="afab629b263a23850b4a4c4fab6559124e8a2b16" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module&quot;&gt;Replacing Older Functions with the subprocess Module&lt;/a&gt; section in the &lt;code&gt;subprocess&lt;/code&gt; documentation may have some helpful recipes.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module&quot;&gt;Замена старых функций на&lt;/a&gt; раздел &amp;laquo; Модуль подпроцесса &amp;raquo; в документации по &lt;code&gt;subprocess&lt;/code&gt; может иметь несколько полезных рецептов.</target>
        </trans-unit>
        <trans-unit id="3d3e9d8c82b51530830672b08d0ef35fbab40e8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Popen&lt;/code&gt; class of the &lt;code&gt;subprocess&lt;/code&gt; module.  This is intended as a replacement for &lt;code&gt;os.popen&lt;/code&gt; but has the downside of being slightly more complicated by virtue of being so comprehensive.  For example, you'd say:</source>
          <target state="translated">Класс &lt;code&gt;subprocess&lt;/code&gt; модуля подпроцесса . Это задумано как замена &lt;code&gt;os.popen&lt;/code&gt; , но имеет недостаток в том, чтобы быть немного более сложным из-за того, что он настолько всеобъемлющий. Например, вы бы сказали:</target>
        </trans-unit>
        <trans-unit id="dc4253a08585d55cf4522486cf9b6b0fd47078e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call&lt;/code&gt; function from the &lt;code&gt;subprocess&lt;/code&gt; module.  This is basically just like the &lt;code&gt;Popen&lt;/code&gt; class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code.  For example:</source>
          <target state="translated">Функция &lt;code&gt;call&lt;/code&gt; из модуля &lt;code&gt;subprocess&lt;/code&gt; . Это в основном так же, как класс &lt;code&gt;Popen&lt;/code&gt; и принимает все те же аргументы, но он просто ждет завершения команды и выдает код возврата. Например:</target>
        </trans-unit>
        <trans-unit id="0f65b9b491329c7dcc455e3c2ab564bc130ce4f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;popenargs&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; are given to the &lt;code&gt;Popen&lt;/code&gt; constructor. &lt;code&gt;input&lt;/code&gt; can be a string of bytes (or unicode, if specify encoding or &lt;code&gt;universal_newlines=True&lt;/code&gt;) that will be piped to the subprocess's stdin.</source>
          <target state="translated">&lt;code&gt;popenargs&lt;/code&gt; и &lt;code&gt;kwargs&lt;/code&gt; передаются конструктору &lt;code&gt;Popen&lt;/code&gt; . &lt;code&gt;input&lt;/code&gt; может быть строкой байтов (или unicode, если задано encoding или &lt;code&gt;universal_newlines=True&lt;/code&gt; ), которая будет передана в стандартный поток подпроцесса.</target>
        </trans-unit>
        <trans-unit id="597f463d6181383c2aa9eec8291dee90c9093b6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess&lt;/code&gt; module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [&lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;].</source>
          <target state="translated">Модуль &lt;code&gt;subprocess&lt;/code&gt; предоставляет более мощные средства для порождения новых процессов и получения их результатов; использование этого модуля предпочтительнее, чем использование этой функции [ &lt;a href=&quot;https://docs.python.org/library/os.html#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt; ].</target>
        </trans-unit>
        <trans-unit id="67d0649a95bbe6d8f66c8ce42cbc0bbe2015de0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess&lt;/code&gt; module should probably be what you use.</source>
          <target state="translated">Модуль &lt;code&gt;subprocess&lt;/code&gt; вероятно, должен быть тем, что вы используете.</target>
        </trans-unit>
        <trans-unit id="4bcefe52191489f5553bf306d97423d4d878396f" translate="yes" xml:space="preserve">
          <source>The advantage of &lt;code&gt;subprocess&lt;/code&gt; vs. &lt;code&gt;system&lt;/code&gt; is that it is more flexible (you can get the &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, the &quot;real&quot; status code, better error handling, etc...).</source>
          <target state="translated">Преимущество &lt;code&gt;subprocess&lt;/code&gt; перед &lt;code&gt;system&lt;/code&gt; заключается в том, что он более гибкий (вы можете получить &lt;code&gt;stdout&lt;/code&gt; , &lt;code&gt;stderr&lt;/code&gt; , &amp;laquo;реальный&amp;raquo; код состояния, лучшую обработку ошибок и т. Д.).</target>
        </trans-unit>
        <trans-unit id="7f6b131d63315089780cb79a3bbe13a68d7390e4" translate="yes" xml:space="preserve">
          <source>The classical example from the subprocess module documentation is:</source>
          <target state="translated">Классический пример из документации по модулю подпроцесса:</target>
        </trans-unit>
        <trans-unit id="d9e6b82421ed6a6933bae7646b83fa3f410deae4" translate="yes" xml:space="preserve">
          <source>The documentation describes &lt;code&gt;timeout=&lt;/code&gt; and &lt;code&gt;check=True&lt;/code&gt; better than I could:</source>
          <target state="translated">Документация описывает &lt;code&gt;timeout=&lt;/code&gt; и &lt;code&gt;check=True&lt;/code&gt; лучше, чем я мог:</target>
        </trans-unit>
        <trans-unit id="2599271d58968cf1345f8ce1dcef378e8bb253f8" translate="yes" xml:space="preserve">
          <source>The edit was based on J.F. Sebastian's comment.</source>
          <target state="translated">Правка была основана на комментарии Дж.Ф.Себастьяна.</target>
        </trans-unit>
        <trans-unit id="9375ec9cf1e1a48088ebd84b5d61ce8b4d2113fd" translate="yes" xml:space="preserve">
          <source>The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished. But it is not clear what happens after the line 'some more code here' from the example.</source>
          <target state="translated">Идея здесь в том,что вы не хотите ждать в строке &quot;вызывать подпроцесс&quot; до тех пор,пока не закончится longtask.py.Но непонятно,что произойдет после строки 'еще немного кода здесь' из примера.</target>
        </trans-unit>
        <trans-unit id="0362ab403486d100b39df78902a34185bb350a53" translate="yes" xml:space="preserve">
          <source>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</source>
          <target state="translated">В модуле os также есть все функции forkexecspawn,которые есть в программе на Си,но я не рекомендую использовать их напрямую.</target>
        </trans-unit>
        <trans-unit id="d17b17fb1061b744b6a11011160bfee60f824a44" translate="yes" xml:space="preserve">
          <source>The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle. For more advanced use cases, the underlying Popen interface can be used directly.</source>
          <target state="translated">Рекомендуемый подход к вызову подпроцессов заключается в использовании функции run()для всех случаев использования,с которыми она может справиться.Для более продвинутых случаев использования можно напрямую использовать основной интерфейс Popen.</target>
        </trans-unit>
        <trans-unit id="797610109e8cd0a523dfb35244a626e04eef5841" translate="yes" xml:space="preserve">
          <source>The solution is to pass DETACHED_PROCESS &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;Process Creation Flag&lt;/a&gt; to the underlying CreateProcess function in Windows API.
If you happen to have installed pywin32, you can import the flag from the win32process module, otherwise you should define it yourself:</source>
          <target state="translated">Решением является передача &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx&quot;&gt;флага создания процесса&lt;/a&gt; DETACHED_PROCESS в базовую функцию CreateProcess в Windows API. Если вы установили pywin32, вы можете импортировать флаг из модуля win32process, в противном случае вы должны определить его самостоятельно:</target>
        </trans-unit>
        <trans-unit id="852fa7991bff81d637c1d755f860b4928e883903" translate="yes" xml:space="preserve">
          <source>The timeout argument is passed to Popen.communicate(). If the timeout
  expires, the child process will be killed and waited for. The
  TimeoutExpired exception will be re-raised after the child process has
  terminated.</source>
          <target state="translated">Аргумент таймаута передается в функцию Popen.communicate().По истечении таймаута дочерний процесс будет убит и будет ждать.Исключение из таймаута будет восстановлено после завершения дочернего процесса.</target>
        </trans-unit>
        <trans-unit id="74e1ee39ecbbaf46f408aa59d7805c5b18bc39a2" translate="yes" xml:space="preserve">
          <source>There are lots of different libraries which allow you to call external commands with Python. For each library I've given a description and shown an example of calling an external command. The command I used as the example is &lt;code&gt;ls -l&lt;/code&gt; (list all files). If you want to find out more about any of the libraries I've listed and linked the documentation for each of them.</source>
          <target state="translated">Есть много разных библиотек, которые позволяют вам вызывать внешние команды с Python. Для каждой библиотеки я дал описание и показал пример вызова внешней команды. В качестве примера я использовал команду &lt;code&gt;ls -l&lt;/code&gt; (перечислить все файлы). Если вы хотите узнать больше о любой из библиотек, которые я перечислил и связал документацию для каждой из них.</target>
        </trans-unit>
        <trans-unit id="3faf13f8df1bc7e3959874fdea7e123c8931bbc5" translate="yes" xml:space="preserve">
          <source>There is also &lt;a href=&quot;http://plumbum.readthedocs.org/en/latest/&quot;&gt;Plumbum&lt;/a&gt;</source>
          <target state="translated">Есть также &lt;a href=&quot;http://plumbum.readthedocs.org/en/latest/&quot;&gt;Пламбум&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="523e816fff3d635b4b57a3c72de2f42570b0fc48" translate="yes" xml:space="preserve">
          <source>There is another difference here which is not mentioned previously.</source>
          <target state="translated">Здесь есть еще одно отличие,которое ранее не упоминалось.</target>
        </trans-unit>
        <trans-unit id="dff6fe0f782361a67af3bcde93ee7b9df92bd107" translate="yes" xml:space="preserve">
          <source>This is how I run my commands. This code has everything you need pretty much</source>
          <target state="translated">Вот как я выполняю свои команды.В этом коде есть все,что тебе нужно.</target>
        </trans-unit>
        <trans-unit id="c7245e51bd7139e445469159ab77eaaaf30497c0" translate="yes" xml:space="preserve">
          <source>Typical implementation:</source>
          <target state="translated">Типичная реализация:</target>
        </trans-unit>
        <trans-unit id="31ff876228262ef5e8f98bb8df82ae987194c0be" translate="yes" xml:space="preserve">
          <source>Under Linux, in case you would like to call an external command that will execute independently (will keep running after the python script terminates), you can use a simple queue as &lt;a href=&quot;http://vicerveza.homeunix.net/~viric/soft/ts/&quot;&gt;task spooler&lt;/a&gt; or the &lt;a href=&quot;https://linux.die.net/man/1/at&quot;&gt;at&lt;/a&gt; command</source>
          <target state="translated">В Linux, если вы хотите вызвать внешнюю команду, которая будет выполняться независимо (будет продолжаться после завершения сценария python), вы можете использовать простую очередь в качестве &lt;a href=&quot;http://vicerveza.homeunix.net/~viric/soft/ts/&quot;&gt;диспетчера очереди&lt;/a&gt; или команду &lt;a href=&quot;https://linux.die.net/man/1/at&quot;&gt;at&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bdf5a0a4c93fff1b17f183c226012273c1d43069" translate="yes" xml:space="preserve">
          <source>Understanding the remaining documentation on &lt;code&gt;Popen&lt;/code&gt; will be left as an exercise for the reader.</source>
          <target state="translated">Понимание оставшейся документации по &lt;code&gt;Popen&lt;/code&gt; останется в качестве упражнения для читателя.</target>
        </trans-unit>
        <trans-unit id="acf72ff8536cb7c07913f02c5d05cbe20402fc3e" translate="yes" xml:space="preserve">
          <source>Update:</source>
          <target state="translated">Update:</target>
        </trans-unit>
        <trans-unit id="a724e226efd328d314410553d9d0a6c3eb761723" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Используйте &lt;em&gt;&lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;подпроцесс&lt;/a&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="edd176fcbe63d71b143043c47f74083e7b9d9787" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;os module&lt;/a&gt;:</source>
          <target state="translated">Используйте &lt;a href=&quot;https://docs.python.org/2/library/os.html&quot;&gt;модуль os&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="19a090ab4bedfbcf29e7da7a4077073280a686e2" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;subprocess module&lt;/a&gt; (Python 3):</source>
          <target state="translated">Используйте &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#subprocess.run&quot;&gt;модуль подпроцесса&lt;/a&gt; (Python 3):</target>
        </trans-unit>
        <trans-unit id="bc0e34154d952ed72b15f5d9618112640d548177" translate="yes" xml:space="preserve">
          <source>Use:</source>
          <target state="translated">Use:</target>
        </trans-unit>
        <trans-unit id="448cfe5db01084af3e9371ab7cf08e61c69bb1c3" translate="yes" xml:space="preserve">
          <source>We can inspect the returned object and see the command that was given and the returncode:</source>
          <target state="translated">Мы можем осмотреть возвращенный объект и увидеть данную команду и код возврата:</target>
        </trans-unit>
        <trans-unit id="3bb310ac00cac6fcd37979db1016551743aa642b" translate="yes" xml:space="preserve">
          <source>When use &lt;code&gt;Popen&lt;/code&gt; instead? I would struggle to find use-case based on the arguments alone. Direct usage of &lt;code&gt;Popen&lt;/code&gt; would, however, give you access to its methods, including &lt;code&gt;poll&lt;/code&gt;, 'send_signal', 'terminate', and 'wait'.</source>
          <target state="translated">Когда вместо этого использовать &lt;code&gt;Popen&lt;/code&gt; ? Я бы изо всех сил пытался найти вариант использования, основанный только на аргументах. Однако прямое использование &lt;code&gt;Popen&lt;/code&gt; даст вам доступ к его методам, включая &lt;code&gt;poll&lt;/code&gt; , send_signal, terminate и wait.</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="18f27c9ee823db5e4c0a614a16980da6367604a3" translate="yes" xml:space="preserve">
          <source>With external dependencies</source>
          <target state="translated">С внешними зависимостями</target>
        </trans-unit>
        <trans-unit id="d14ab858678072f32ca74ab1b82e081dfcfc055d" translate="yes" xml:space="preserve">
          <source>With output of the result:</source>
          <target state="translated">С выводом результата:</target>
        </trans-unit>
        <trans-unit id="aaaa9eb5d49bd41216be4aab4c1d7019aec73518" translate="yes" xml:space="preserve">
          <source>With the standard library</source>
          <target state="translated">Со стандартной библиотекой</target>
        </trans-unit>
        <trans-unit id="a163f8072d2582ac0b08270fa37f04b08c90ff97" translate="yes" xml:space="preserve">
          <source>Without the output of the result:</source>
          <target state="translated">Без вывода результата:</target>
        </trans-unit>
        <trans-unit id="e7cdf9aef9dcc1e68939ec2e3584bf7ad40cff4d" translate="yes" xml:space="preserve">
          <source>You are free to do what you want with the &lt;code&gt;stdout&lt;/code&gt; data in the pipe.  In fact, you can simply omit those parameters (&lt;code&gt;stdout=&lt;/code&gt; and &lt;code&gt;stderr=&lt;/code&gt;) and it'll behave like &lt;code&gt;os.system()&lt;/code&gt;.</source>
          <target state="translated">Вы можете делать то, что хотите, с данными &lt;code&gt;stdout&lt;/code&gt; в канале. Фактически, вы можете просто пропустить эти параметры ( &lt;code&gt;stdout=&lt;/code&gt; и &lt;code&gt;stderr=&lt;/code&gt; ), и они будут вести себя как &lt;code&gt;os.system()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c122bf1eaa4c6177c760488496e22187b9c197dc" translate="yes" xml:space="preserve">
          <source>You could set the number of concurrent processes to be run (&quot;slots&quot;) with:</source>
          <target state="translated">Вы можете задать количество одновременно выполняемых процессов (&quot;слотов&quot;)с помощью:</target>
        </trans-unit>
        <trans-unit id="e9dbd017d634c57685e9ea83e3ab03bb5edef87f" translate="yes" xml:space="preserve">
          <source>and imagine that the user enters something &quot;my mama didnt love me &amp;amp;&amp;amp; rm -rf /&quot; which could erase the whole filesystem.</source>
          <target state="translated">и представьте, что пользователь вводит что-то &quot;моя мама не любит меня &amp;amp;&amp;amp; rm -rf /&quot;, что может стереть всю файловую систему.</target>
        </trans-unit>
        <trans-unit id="f17ada58f79678c2c2c55e53fc4e2f5df1f34d13" translate="yes" xml:space="preserve">
          <source>and this example for &lt;code&gt;check=True&lt;/code&gt; is better than one I could come up with:</source>
          <target state="translated">и этот пример для &lt;code&gt;check=True&lt;/code&gt; лучше, чем тот, который я мог придумать:</target>
        </trans-unit>
        <trans-unit id="70d923d5b13c8294ffdbf19c5dbe40d59fe15cbf" translate="yes" xml:space="preserve">
          <source>but it is nice to have all of the options there in one unified class instead of 4 different popen functions.  See &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#popen-constructor&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="translated">но хорошо иметь все опции в одном унифицированном классе вместо 4 разных функций popen. Смотрите &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html#popen-constructor&quot;&gt;документацию&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b904e73103fc2e4e766606e93e37406669eeba11" translate="yes" xml:space="preserve">
          <source>commands: &lt;a href=&quot;https://docs.python.org/2/library/commands.html&quot;&gt;https://docs.python.org/2/library/commands.html&lt;/a&gt;</source>
          <target state="translated">команды: &lt;a href=&quot;https://docs.python.org/2/library/commands.html&quot;&gt;https://docs.python.org/2/library/commands.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52d303eda30df68defd302e06660eb6bb684fbb9" translate="yes" xml:space="preserve">
          <source>envoy is known as &quot;subprocess for humans&quot;. It is used as a convenience wrapper around the &lt;code&gt;subprocess&lt;/code&gt; module.</source>
          <target state="translated">Посланник известен как &amp;laquo;подпроцесс для людей&amp;raquo;. Он используется как вспомогательная оболочка для модуля &lt;code&gt;subprocess&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da9733bfafc172eabc90b2758bfeab6b4cb34a4f" translate="yes" xml:space="preserve">
          <source>envoy: &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;https://github.com/kennethreitz/envoy&lt;/a&gt;</source>
          <target state="translated">посланник: &lt;a href=&quot;https://github.com/kennethreitz/envoy&quot;&gt;https://github.com/kennethreitz/envoy&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7f621f19f6af467ef23fb98f8ee0c656389c12a" translate="yes" xml:space="preserve">
          <source>fabric is a Python 2.5 and 2.7 library. It allows you to execute local and remote shell commands. Fabric is simple alternative for running commands in a secure shell (SSH)</source>
          <target state="translated">Ткань-это библиотека Python 2.5 и 2.7.Она позволяет выполнять локальные и удалённые команды оболочки.Fabric является простой альтернативой для выполнения команд в защищённой оболочке (SSH).</target>
        </trans-unit>
        <trans-unit id="b1a08d055b8bb30483bf0ea122392e6d37082e73" translate="yes" xml:space="preserve">
          <source>fabric: &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;http://www.fabfile.org/&lt;/a&gt;</source>
          <target state="translated">ткань: &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;http://www.fabfile.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6c8457cd65849bf5a9285f8b862e990e1a44ac09" translate="yes" xml:space="preserve">
          <source>instead of:</source>
          <target state="translated">а не..:</target>
        </trans-unit>
        <trans-unit id="5957da8d14d5f58f81aefab1967a97dba4f1d41b" translate="yes" xml:space="preserve">
          <source>os is used for &quot;operating system dependent functionality&quot;. It can also be used to call external commands with &lt;code&gt;os.system&lt;/code&gt; and &lt;code&gt;os.popen&lt;/code&gt; (Note: There is also a subprocess.popen). os will always run the shell and is a simple alternative for people who don't need to, or don't know how to use &lt;code&gt;subprocess.run&lt;/code&gt;.</source>
          <target state="translated">ОС используется для &amp;laquo;функциональной зависимости операционной системы&amp;raquo;. Его также можно использовать для вызова внешних команд с помощью &lt;code&gt;os.system&lt;/code&gt; и &lt;code&gt;os.popen&lt;/code&gt; (Примечание. Существует также subprocess.popen). os всегда запускает оболочку и является простой альтернативой для людей, которые не нуждаются или не знают, как использовать &lt;code&gt;subprocess.run&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cbcca4febe8f373e15156fec6a4033260e13e466" translate="yes" xml:space="preserve">
          <source>os: &lt;a href=&quot;https://docs.python.org/3.5/library/os.html&quot;&gt;https://docs.python.org/3.5/library/os.html&lt;/a&gt;</source>
          <target state="translated">os: &lt;a href=&quot;https://docs.python.org/3.5/library/os.html&quot;&gt;https://docs.python.org/3.5/library/os.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a8d9686cb58c073c2456d6dd10a62bd7b4149915" translate="yes" xml:space="preserve">
          <source>pexpect lets you spawn child applications, control them and find patterns in their output. This is a better alternative to subprocess for commands that expect a tty on Unix.</source>
          <target state="translated">pexpect позволяет создавать приложения для детей,управлять ими и находить закономерности в их выходе.Это лучшая альтернатива подпроцессу для команд,которые ожидают tty на Unix.</target>
        </trans-unit>
        <trans-unit id="42668b41f9ed9ad1246add137130a19892d12138" translate="yes" xml:space="preserve">
          <source>pexpect: &lt;a href=&quot;https://pexpect.readthedocs.io/en/stable/&quot;&gt;https://pexpect.readthedocs.io/en/stable/&lt;/a&gt;</source>
          <target state="translated">pexpect: &lt;a href=&quot;https://pexpect.readthedocs.io/en/stable/&quot;&gt;https://pexpect.readthedocs.io/en/stable/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af8ce099c02940f7dae91a34a3b1ac9f97531070" translate="yes" xml:space="preserve">
          <source>plumbum is a library for &quot;script-like&quot; Python programs. You can call programs like functions as in &lt;code&gt;sh&lt;/code&gt;. Plumbum is useful if you want to run a pipeline without the shell.</source>
          <target state="translated">plumbum - это библиотека для скриптовых программ на Python. Вы можете вызывать такие программы, как функции, как в &lt;code&gt;sh&lt;/code&gt; . Plumbum полезен, если вы хотите запустить конвейер без оболочки.</target>
        </trans-unit>
        <trans-unit id="1e6a45273361198ccb9f4fb2ba60008d603a5712" translate="yes" xml:space="preserve">
          <source>plumbum: &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot;&gt;https://plumbum.readthedocs.io/en/latest/&lt;/a&gt;</source>
          <target state="translated">plumbum: &lt;a href=&quot;https://plumbum.readthedocs.io/en/latest/&quot;&gt;https://plumbum.readthedocs.io/en/latest/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="24560916a5b723031ab61aae18088346943f299c" translate="yes" xml:space="preserve">
          <source>sh is a subprocess interface which lets you call programs as if they were functions. This is useful if you want to run a command multiple times.</source>
          <target state="translated">sh-это интерфейс подпроцесса,позволяющий вызывать программы так,как будто они являются функциями.Это полезно,если вы хотите выполнить команду несколько раз.</target>
        </trans-unit>
        <trans-unit id="08f15a5c418f54cf27af2fee84fb94963fd9c7be" translate="yes" xml:space="preserve">
          <source>sh: &lt;a href=&quot;https://amoffat.github.io/sh/&quot;&gt;https://amoffat.github.io/sh/&lt;/a&gt;</source>
          <target state="translated">sh: &lt;a href=&quot;https://amoffat.github.io/sh/&quot;&gt;https://amoffat.github.io/sh/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b2f1ab3fa95d766a02a1042a18e5de4b6ce04e69" translate="yes" xml:space="preserve">
          <source>shlex: &lt;a href=&quot;https://docs.python.org/3/library/shlex.html&quot;&gt;https://docs.python.org/3/library/shlex.html&lt;/a&gt;</source>
          <target state="translated">шлекс: &lt;a href=&quot;https://docs.python.org/3/library/shlex.html&quot;&gt;https://docs.python.org/3/library/shlex.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="215f1313cfe29ed2c9cd0789a6c38b916645aedc" translate="yes" xml:space="preserve">
          <source>subprocess: &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html&quot;&gt;https://docs.python.org/3.5/library/subprocess.html&lt;/a&gt;</source>
          <target state="translated">подпроцесс: &lt;a href=&quot;https://docs.python.org/3.5/library/subprocess.html&quot;&gt;https://docs.python.org/3.5/library/subprocess.html&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
