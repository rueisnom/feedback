<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://stackoverflow.com/questions/500504">
    <body>
      <group id="500504">
        <trans-unit id="4bd6398b6ec50d16e0ba8b718869fa0726943b47" translate="yes" xml:space="preserve">
          <source>(Emphasis mine.)</source>
          <target state="translated">(Énfasis mío.)</target>
        </trans-unit>
        <trans-unit id="d8063be2dd09276b0e12dbda5c629337424e931e" translate="yes" xml:space="preserve">
          <source>1.) There is already a higher order function, or method, that has that purpose for an array, but has more functionality and leaner syntax, called 'forEach': &lt;code&gt;Array.prototype.forEach(function(element, index, array) {} );&lt;/code&gt;</source>
          <target state="translated">1.) Ya existe una funci&amp;oacute;n o m&amp;eacute;todo de orden superior que tiene ese prop&amp;oacute;sito para una matriz, pero tiene m&amp;aacute;s funcionalidad y una sintaxis m&amp;aacute;s &amp;aacute;gil, llamada 'forEach': &lt;code&gt;Array.prototype.forEach(function(element, index, array) {} );&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f5212d015eaea70f541c879dc9a1ee3ee6ea4e6" translate="yes" xml:space="preserve">
          <source>2.) Arrays always have a length, but &lt;code&gt;for...in&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt; do not execute a function for any value that is &lt;code&gt;'undefined'&lt;/code&gt;, only for the indexes that have a value defined. So if you only assign one value, these loops will only execute a function once, but since an array is enumerated, it will always have a length up to the highest index that has a defined value, but that length could go unnoticed when using these loops.</source>
          <target state="translated">2.) Las matrices siempre tienen una longitud, pero &lt;code&gt;for...in&lt;/code&gt; y &lt;code&gt;forEach&lt;/code&gt; no ejecutan una funci&amp;oacute;n para ning&amp;uacute;n valor &lt;code&gt;'undefined'&lt;/code&gt; , solo para los &amp;iacute;ndices que tienen un valor definido. Entonces, si solo asigna un valor, estos bucles solo ejecutar&amp;aacute;n una funci&amp;oacute;n una vez, pero dado que se enumera una matriz, siempre tendr&amp;aacute; una longitud hasta el &amp;iacute;ndice m&amp;aacute;s alto que tenga un valor definido, pero esa longitud podr&amp;iacute;a pasar desapercibida cuando se usan estos bucles</target>
        </trans-unit>
        <trans-unit id="1a000b47a2784ab5959eeb6bb68516347e56d65f" translate="yes" xml:space="preserve">
          <source>3.) The standard for loop will execute a function as many times as you define in the parameters, and since an array is numbered, it makes more sense to define how many times you want to execute a function. Unlike the other loops, the for loop can then execute a function for every index in the array, whether the value is defined or not.</source>
          <target state="translated">3.)El estándar para el bucle ejecutará una función tantas veces como defina en los parámetros,y como un array está numerado,tiene más sentido definir cuántas veces quiere ejecutar una función.A diferencia de los otros bucles,el bucle for puede entonces ejecutar una función para cada índice del array,tanto si el valor está definido como si no.</target>
        </trans-unit>
        <trans-unit id="85146881dc047a08449a004a02b095cacd0cb609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for (... in ...)&lt;/code&gt; is not guaranteed to return the object properties in sequential order, as one might expect.</source>
          <target state="translated">no se garantiza que &lt;code&gt;for (... in ...)&lt;/code&gt; devuelva las propiedades del objeto en orden secuencial, como cabr&amp;iacute;a esperar.</target>
        </trans-unit>
        <trans-unit id="f7fb489c373f09f65363d8fdde0d33f885cc248d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for...in&lt;/code&gt; lists only the &lt;code&gt;5&lt;/code&gt;, ignoring undefined array indexes, but adding &lt;code&gt;foo&lt;/code&gt;. It shows array &lt;strong&gt;property names&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; listas solo los &lt;code&gt;5&lt;/code&gt; , ignorando los &amp;iacute;ndices de matriz indefinidos, pero agregando &lt;code&gt;foo&lt;/code&gt; . Muestra &lt;strong&gt;los nombres de propiedades de la&lt;/strong&gt; matriz.</target>
        </trans-unit>
        <trans-unit id="7c070578b97dc889d040320474709963bba8ff11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for...in&lt;/code&gt; loops &lt;strong&gt;do not guarantee a specific iteration order&lt;/strong&gt;. Although is order is usually seen in most modern browsers these days, there is still no 100% guarantee.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; loops &lt;strong&gt;no garantiza un orden de iteraci&amp;oacute;n espec&amp;iacute;fico&lt;/strong&gt; . Aunque este orden generalmente se ve en la mayor&amp;iacute;a de los navegadores modernos en estos d&amp;iacute;as, todav&amp;iacute;a no hay una garant&amp;iacute;a del 100%.</target>
        </trans-unit>
        <trans-unit id="75add2a4d0fc3dfc08d7b2e03792fa72128dc96e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for...in&lt;/code&gt; loops ignore &lt;code&gt;undefined&lt;/code&gt; array elements, i.e. array elements which not have been assigned yet.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; loops ignora elementos de matriz &lt;code&gt;undefined&lt;/code&gt; , es decir, elementos de matriz que a&amp;uacute;n no se han asignado.</target>
        </trans-unit>
        <trans-unit id="e02c78b83b9baae453efbdb0e530f06924f7cb8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for...in&lt;/code&gt; loops iterate over all their own enumerable properties &lt;strong&gt;and&lt;/strong&gt; the enumerable properties of their prototype(s). Usually in an array iteration we only want to iterate over the array itself. And even though you yourself may not add anything to the array, your libraries or framework might add something.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; loops itera sobre todas sus propias propiedades enumerables &lt;strong&gt;y&lt;/strong&gt; las propiedades enumerables de sus prototipos. Por lo general, en una iteraci&amp;oacute;n de matriz solo queremos iterar sobre la matriz misma. Y aunque usted mismo no pueda agregar nada a la matriz, sus bibliotecas o marco pueden agregar algo.</target>
        </trans-unit>
        <trans-unit id="5b510d520668177a37ca1233fffcce16d554bed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for...of&lt;/code&gt; counts from 0 to 5, and also ignores &lt;code&gt;Array.prototype.foo&lt;/code&gt;. It shows array &lt;strong&gt;values&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; recuentos de 0 a 5, y tambi&amp;eacute;n ignora &lt;code&gt;Array.prototype.foo&lt;/code&gt; . Muestra los &lt;strong&gt;valores de la&lt;/strong&gt; matriz.</target>
        </trans-unit>
        <trans-unit id="de8d59ac496d49a3cc2830db61e5080ba7b3ed4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for..in&lt;/code&gt; isn't guaranteed to preserve element ordering</source>
          <target state="translated">&lt;code&gt;for..in&lt;/code&gt; no garantiza garantizar el orden de los elementos</target>
        </trans-unit>
        <trans-unit id="57c504b07cbe053e6d9258c6e6ce9dab71001517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for..in&lt;/code&gt; will loop over all own and inherited properties of the array object which aren't &lt;code&gt;DontEnum&lt;/code&gt;; that means if someone adds properties to the specific array object (there are valid reasons for this - I've done so myself) or changed &lt;code&gt;Array.prototype&lt;/code&gt; (which is considered bad practice in code which is supposed to work well with other scripts), these properties will be iterated over as well; inherited properties can be excluded by checking &lt;code&gt;hasOwnProperty()&lt;/code&gt;, but that won't help you with properties set in the array object itself</source>
          <target state="translated">&lt;code&gt;for..in&lt;/code&gt; recorrer&amp;aacute; todas las propiedades propias y heredadas del objeto de matriz que no sean &lt;code&gt;DontEnum&lt;/code&gt; ; eso significa que si alguien agrega propiedades al objeto de matriz espec&amp;iacute;fico (hay razones v&amp;aacute;lidas para esto, lo hice yo mismo) o cambi&amp;oacute; &lt;code&gt;Array.prototype&lt;/code&gt; (que se considera una mala pr&amp;aacute;ctica en el c&amp;oacute;digo que se supone que funciona bien con otros scripts), estas propiedades tambi&amp;eacute;n se repetir&amp;aacute;n; las propiedades heredadas se pueden excluir marcando &lt;code&gt;hasOwnProperty()&lt;/code&gt; , pero eso no lo ayudar&amp;aacute; con las propiedades establecidas en el objeto de matriz en s&amp;iacute;</target>
        </trans-unit>
        <trans-unit id="5c924ba7b90dce15af127843f7697ca7dc50c687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="b0a4e9b74e35d5bb4223b2cc511f2cfc42e49e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="ed70972dc116b90558966dcf0dc7a880652a1079" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It loops through inherited properties as well:&lt;/strong&gt; First of all any extensions to the &lt;code&gt;Array.prototype&lt;/code&gt; should have been done by using &lt;a href=&quot;https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; and their &lt;code&gt;enumerable&lt;/code&gt; descriptor should be set to &lt;code&gt;false&lt;/code&gt;. Any library not doing so should not be used at all.</source>
          <target state="translated">&lt;strong&gt;Tambi&amp;eacute;n recorre las propiedades heredadas: en&lt;/strong&gt; primer lugar, cualquier extensi&amp;oacute;n del &lt;a href=&quot;https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; deber&amp;iacute;a haberse realizado utilizando Object.defineProperty () y su descriptor &lt;code&gt;enumerable&lt;/code&gt; deber&amp;iacute;a establecerse en &lt;code&gt;false&lt;/code&gt; . Cualquier biblioteca que no lo haga no debe usarse en absoluto.</target>
        </trans-unit>
        <trans-unit id="864471cf89b4825cee0c68d43263743a49b07aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;One&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2930f375e598c4c0cda99ef5ee5ced807b11895f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Properties those you add to the inheritance chain later get counted:&lt;/strong&gt; When doing array sub-classing by &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; or by Class &lt;code&gt;extend&lt;/code&gt;. You should again use &lt;code&gt;Object.defineProperty()&lt;/code&gt; which by default sets the &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;enumerable&lt;/code&gt; and &lt;code&gt;configurable&lt;/code&gt; property descriptors to &lt;code&gt;false&lt;/code&gt;. Lets see an array sub-classing example here...</source>
          <target state="translated">&lt;strong&gt;Las propiedades que agrega a la cadena de herencia m&amp;aacute;s tarde se cuentan:&lt;/strong&gt; al hacer una &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; de matrices por Object.setPrototypeOf o por Class &lt;code&gt;extend&lt;/code&gt; . Deber&amp;iacute;a volver a utilizar &lt;code&gt;Object.defineProperty()&lt;/code&gt; que, de forma predeterminada, establece los descriptores de propiedad &lt;code&gt;writable&lt;/code&gt; , &lt;code&gt;enumerable&lt;/code&gt; s y &lt;code&gt;configurable&lt;/code&gt; s en &lt;code&gt;false&lt;/code&gt; . Veamos un ejemplo de subclasificaci&amp;oacute;n de matriz aqu&amp;iacute; ...</target>
        </trans-unit>
        <trans-unit id="1d17c64273e3caf29ac784b4ed9036aa7703f21e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TL&amp;amp;DR:&lt;/strong&gt; Using the &lt;code&gt;for in&lt;/code&gt; loop in arrays is not evil, in fact quite the opposite.</source>
          <target state="translated">&lt;strong&gt;TL&amp;amp;DR:&lt;/strong&gt; Usar el bucle &lt;code&gt;for in&lt;/code&gt; en matrices no es malo, de hecho, todo lo contrario.</target>
        </trans-unit>
        <trans-unit id="f4a90667800dfac206439640fe039e0a8ec77ce8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;for in&lt;/code&gt; loop is slow:&lt;/strong&gt; Hell no. It's by far the fastest method of iteration if you are looping over sparse arrays which are needed time to time. This is one of the most important performance tricks that one should know. Let's see an example. We will loop over a sparse array.</source>
          <target state="translated">&lt;strong&gt;El &lt;code&gt;for in&lt;/code&gt; loop es lento:&lt;/strong&gt; infierno no. Es, con mucho, el m&amp;eacute;todo m&amp;aacute;s r&amp;aacute;pido de iteraci&amp;oacute;n si est&amp;aacute; haciendo un bucle sobre matrices dispersas que se necesitan de vez en cuando. Este es uno de los trucos de rendimiento m&amp;aacute;s importantes que uno debe saber. Veamos un ejemplo. Vamos a recorrer un conjunto disperso.</target>
        </trans-unit>
        <trans-unit id="7e70c28d46516e16a285932547326e3516ac248f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Two&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aa55c4c1ec6fa0600a16d8a1df0ed62aebb5a00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;for...in&lt;/strong&gt; is useful when working on an object in JavaScript, but not for an Array, but still we can not say it's a wrong way, but it's not recommended, look at this example below using &lt;strong&gt;for...in&lt;/strong&gt; loop:</source>
          <target state="translated">&lt;strong&gt;for ... in&lt;/strong&gt; es &amp;uacute;til cuando se trabaja en un objeto en JavaScript, pero no para un Array, pero a&amp;uacute;n as&amp;iacute; no podemos decir que sea una forma incorrecta, pero no se recomienda, mira este ejemplo a continuaci&amp;oacute;n usando &lt;strong&gt;for ... in&lt;/strong&gt; loop:</target>
        </trans-unit>
        <trans-unit id="723137f7795e3401755b70d4616c338ef4c6b6e9" translate="yes" xml:space="preserve">
          <source>A for...in loop always enumerates the keys.
Objects properties keys are always String, even the indexed properties of an array :</source>
          <target state="translated">Una de...en bucle siempre enumera las claves.Las claves de las propiedades de los objetos son siempre String,incluso las propiedades indexadas de un array :</target>
        </trans-unit>
        <trans-unit id="e380bf6c22148b057e16f813b7f95eb85c229ee9" translate="yes" xml:space="preserve">
          <source>A real answer for this will depend on how the browser parsers/interpret the JavaScript code. It can change between browsers.</source>
          <target state="translated">Una verdadera respuesta a esto dependerá de cómo el navegador interprete el código JavaScript.Puede cambiar entre navegadores.</target>
        </trans-unit>
        <trans-unit id="3f8ee733770af90d6a036b73e38df85ea12e55c2" translate="yes" xml:space="preserve">
          <source>Also consider that &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; libraries might do things like this, which will affect any array you create:</source>
          <target state="translated">Tambi&amp;eacute;n tenga en cuenta que las bibliotecas de &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot;&gt;JavaScript&lt;/a&gt; pueden hacer cosas como esta, lo que afectar&amp;aacute; cualquier matriz que cree:</target>
        </trans-unit>
        <trans-unit id="81a354e95f9aef67cb843763fd3927258da5fdda" translate="yes" xml:space="preserve">
          <source>Also, due to semantics, the way &lt;code&gt;for, in&lt;/code&gt; treats arrays (i.e. the same as any other JavaScript object) is not aligned with other popular languages.</source>
          <target state="translated">Adem&amp;aacute;s, debido a la sem&amp;aacute;ntica, la forma &lt;code&gt;for, in&lt;/code&gt; matrices de convites (es decir, lo mismo que cualquier otro objeto JavaScript) no est&amp;aacute; alineada con otros lenguajes populares.</target>
        </trans-unit>
        <trans-unit id="56813a034610fd55b9667a342f05765d16c2560a" translate="yes" xml:space="preserve">
          <source>Also, it may be considered a better practice to use the &lt;code&gt;forEach&lt;/code&gt; method than the &lt;code&gt;for...in&lt;/code&gt; loop in general, because it is easier to write and has more functionality, so you may want to get in the habit of only using this method and standard for, but your call.</source>
          <target state="translated">Adem&amp;aacute;s, puede considerarse una mejor pr&amp;aacute;ctica usar el m&amp;eacute;todo &lt;code&gt;forEach&lt;/code&gt; que el &lt;code&gt;for...in&lt;/code&gt; loop en general, porque es m&amp;aacute;s f&amp;aacute;cil de escribir y tiene m&amp;aacute;s funcionalidad, por lo que es posible que desee acostumbrarse a usar solo este m&amp;eacute;todo y est&amp;aacute;ndar para, pero su llamada.</target>
        </trans-unit>
        <trans-unit id="8e9ef6ce457a097e6cbaa9a5cee537865b67b8ae" translate="yes" xml:space="preserve">
          <source>Also, speaking about inherited properties, if you, for example, extend the &lt;code&gt;Array.prototype&lt;/code&gt; object (like some libraries as MooTools do), that properties will be also enumerated:</source>
          <target state="translated">Adem&amp;aacute;s, hablando de propiedades heredadas, si, por ejemplo, extiende el objeto &lt;code&gt;Array.prototype&lt;/code&gt; (como algunas bibliotecas como lo hacen MooTools), esas propiedades tambi&amp;eacute;n se enumerar&amp;aacute;n:</target>
        </trans-unit>
        <trans-unit id="77e8cec41cc494061a090fc5862a2f2e51506df4" translate="yes" xml:space="preserve">
          <source>Also, the order of iteration is not guaranteed by the spec., meaning that if you want to &quot;iterate&quot; an array object, with this statement you cannot be sure that the properties (array indexes) will be visited in the numeric order.</source>
          <target state="translated">Además,el orden de iteración no está garantizado por la especificación,lo que significa que si se quiere &quot;iterar&quot; un objeto de matriz,con esta afirmación no se puede estar seguro de que las propiedades (índices de matriz)serán visitadas en el orden numérico.</target>
        </trans-unit>
        <trans-unit id="4caa9f9af0086837955f928c936648d78e3cf12c" translate="yes" xml:space="preserve">
          <source>An alternative way of iterating through an array is using a for-loop:</source>
          <target state="translated">Una forma alternativa de iterar a través de una matriz es usar un bucle de retorno:</target>
        </trans-unit>
        <trans-unit id="4330d9777faffc1aebc6faa887599a7ad547c366" translate="yes" xml:space="preserve">
          <source>An important aspect is that &lt;code&gt;for...in&lt;/code&gt; only iterates over properties contained in an object which have their &lt;strong&gt;enumerable&lt;/strong&gt;&lt;em&gt;property attribute&lt;/em&gt; set to true. So if one attempts to iterate over an object using &lt;code&gt;for...in&lt;/code&gt; then arbitrary properties may be missed if their enumerable property attribute is false. It is quite possible to alter the enumerable property attribute for normal Array objects so that certain elements are not enumerated. Though in general the property attributes tend to apply to function properties within an object.</source>
          <target state="translated">Un aspecto importante es que &lt;code&gt;for...in&lt;/code&gt; solo itera sobre las propiedades contenidas en un objeto que tienen su &lt;em&gt;atributo de propiedad&lt;/em&gt; &lt;strong&gt;enumerable&lt;/strong&gt; establecido en true. Entonces, si uno intenta iterar sobre un objeto usando &lt;code&gt;for...in&lt;/code&gt; entonces se pueden perder propiedades arbitrarias si su atributo de propiedad enumerable es falso. Es muy posible alterar el atributo de propiedad enumerable para los objetos Array normales para que ciertos elementos no se enumeren. Aunque en general los atributos de propiedad tienden a aplicarse a las propiedades de funci&amp;oacute;n dentro de un objeto.</target>
        </trans-unit>
        <trans-unit id="bdc123fed57544f574b847785e448b373aff2349" translate="yes" xml:space="preserve">
          <source>And since you can never be sure that nothing will be added to the prototype chain just use a for loop to enumerate the array:</source>
          <target state="translated">Y como nunca se puede estar seguro de que no se añadirá nada a la cadena del prototipo,sólo hay que usar un bucle de &quot;for&quot; para enumerar el conjunto:</target>
        </trans-unit>
        <trans-unit id="ad0c718b13ffaf815489fe18ec085881a6be06e3" translate="yes" xml:space="preserve">
          <source>And some people even recommend calling the method directly from &lt;code&gt;Object.prototype&lt;/code&gt; to avoid having problems if somebody adds a property named &lt;code&gt;hasOwnProperty&lt;/code&gt; to our object:</source>
          <target state="translated">Y algunas personas incluso recomiendan llamar al m&amp;eacute;todo directamente desde &lt;code&gt;Object.prototype&lt;/code&gt; para evitar tener problemas si alguien agrega una propiedad llamada &lt;code&gt;hasOwnProperty&lt;/code&gt; a nuestro objeto:</target>
        </trans-unit>
        <trans-unit id="35888521210af7f9dd1e0af389345f2c1f605553" translate="yes" xml:space="preserve">
          <source>Any object can have arbitrary properties associated with it. There would be nothing terrible about loading additional properties onto an array instance, in particular. Code that wants to see &lt;em&gt;only&lt;/em&gt; indexed array-like properties therefore &lt;em&gt;must&lt;/em&gt; stick to an integer index. Code that is fully aware of what &lt;code&gt;for ... in&lt;/code&gt; does and really &lt;em&gt;need&lt;/em&gt; to see all properties, well then that's ok too.</source>
          <target state="translated">Cualquier objeto puede tener propiedades arbitrarias asociadas a &amp;eacute;l. No habr&amp;iacute;a nada terrible en cargar propiedades adicionales en una instancia de matriz, en particular. Por lo tanto, el c&amp;oacute;digo que desea ver &lt;em&gt;solo&lt;/em&gt; propiedades indexadas de tipo matriz &lt;em&gt;debe&lt;/em&gt; adherirse a un &amp;iacute;ndice entero. El c&amp;oacute;digo que es completamente consciente de &lt;code&gt;for ... in&lt;/code&gt; qu&amp;eacute; sirve ... y realmente &lt;em&gt;necesita&lt;/em&gt; ver todas las propiedades, bueno, eso tambi&amp;eacute;n est&amp;aacute; bien.</target>
        </trans-unit>
        <trans-unit id="8ae256cf5a988279dae9f08c26581718bda89b9c" translate="yes" xml:space="preserve">
          <source>As I said before to &lt;em&gt;iterate&lt;/em&gt; over arrays or array-like objects, the best thing is to use a &lt;em&gt;sequential loop&lt;/em&gt;, such as a plain-old &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; loop.</source>
          <target state="translated">Como dije antes para &lt;em&gt;iterar&lt;/em&gt; sobre matrices u objetos similares a las matrices, lo mejor es usar un &lt;em&gt;bucle secuencial&lt;/em&gt; , como un bucle &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;while&lt;/code&gt; simple.</target>
        </trans-unit>
        <trans-unit id="6223893ff2388e165f873960bac2ba5392b49cb2" translate="yes" xml:space="preserve">
          <source>As of 2016 (ES6) we may use &lt;code&gt;for&amp;hellip;of&lt;/code&gt; for array iteration, as John Slegers already noticed.</source>
          <target state="translated">A partir de 2016 (ES6) podemos usar &lt;code&gt;for&amp;hellip;of&lt;/code&gt; para la iteraci&amp;oacute;n de matriz, como John Slegers ya lo not&amp;oacute;.</target>
        </trans-unit>
        <trans-unit id="b9ffc247af1b8ed568d6b5c1b3a27e66e602fc7e" translate="yes" xml:space="preserve">
          <source>As you see the result the same...</source>
          <target state="translated">Como ves el resultado es el mismo...</target>
        </trans-unit>
        <trans-unit id="894f0d6f0a5dc7e6d9477fd432341a08cc075bbf" translate="yes" xml:space="preserve">
          <source>Aside from the fact that &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; loops over all enumerable properties (which is &lt;em&gt;not&lt;/em&gt; the same as &quot;all array elements&quot;!), see &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&lt;/a&gt;, section 12.6.4 (5th edition) or 13.7.5.15 (7th edition):</source>
          <target state="translated">Adem&amp;aacute;s del hecho de que &lt;code&gt;for&lt;/code&gt; ... &lt;code&gt;in&lt;/code&gt; bucles sobre todas las propiedades enumerables (que &lt;em&gt;no&lt;/em&gt; es &lt;em&gt;lo&lt;/em&gt; mismo que &quot;todos los elementos de la matriz&quot;), consulte &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot;&gt;http://www.ecma-international.org/publications/files/ECMA-ST /Ecma-262.pdf&lt;/a&gt; , secci&amp;oacute;n 12.6.4 (5a edici&amp;oacute;n) o 13.7.5.15 (7a edici&amp;oacute;n):</target>
        </trans-unit>
        <trans-unit id="eb7d92e5a3d183746be4cc4443582416eca4294e" translate="yes" xml:space="preserve">
          <source>Because for...in enumerates through the object that holds the array, not the array itself. If I add a function to the arrays prototype chain, that will also be included. I.e.</source>
          <target state="translated">Porque para...en enumera a través del objeto que sostiene la matriz,no la matriz en sí misma.Si añado una función a la cadena de prototipos de matrices,eso también se incluirá.Es decir.</target>
        </trans-unit>
        <trans-unit id="b96448a2e10a4868599ab0a74179eb46b603e8f6" translate="yes" xml:space="preserve">
          <source>Because it enumerates through object fields, not indexes. You can get value with index &quot;length&quot; and I doubt you want this.</source>
          <target state="translated">Porque enumera a través de campos de objetos,no de índices.Puedes obtener valor con el índice &quot;longitud&quot; y dudo que quieras esto.</target>
        </trans-unit>
        <trans-unit id="8992d96aafc9f0ab11805a540be31b57da2de068" translate="yes" xml:space="preserve">
          <source>Because it will iterate over properties belonging to objects up the prototype chain if you're not careful.</source>
          <target state="translated">Porque se iterará sobre las propiedades de los objetos de la cadena de prototipos si no se tiene cuidado.</target>
        </trans-unit>
        <trans-unit id="ee90f63ccf1f6222ef3e10f7c081882454ec920d" translate="yes" xml:space="preserve">
          <source>But in my opinion, it's better to use &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;in&lt;/code&gt;, the process required for that auto-detection is very small.</source>
          <target state="translated">Pero en mi opini&amp;oacute;n, es mejor usar &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;in&lt;/code&gt; , el proceso requerido para esa autodetecci&amp;oacute;n es muy peque&amp;ntilde;o.</target>
        </trans-unit>
        <trans-unit id="12279b51e8d023c0ad5031c9a0b1e701ef3132e1" translate="yes" xml:space="preserve">
          <source>But let's try something, let's prototype something to &lt;strong&gt;Array&lt;/strong&gt;...</source>
          <target state="translated">Pero intentemos algo, prototip&amp;eacute;monos algo para &lt;strong&gt;Array&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="43740775866432b484bee9f9cd495c479fdafbb1" translate="yes" xml:space="preserve">
          <source>Either way, &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; carries with it no connotation of order.  If you care about order, be explicit about it and use a regular &lt;code&gt;for&lt;/code&gt; loop with an index.</source>
          <target state="translated">De cualquier manera, &lt;code&gt;for&lt;/code&gt; ... no conlleva ninguna connotaci&amp;oacute;n de orden. Si le importa el orden, sea expl&amp;iacute;cito al respecto y use un ciclo &lt;code&gt;for&lt;/code&gt; regular con un &amp;iacute;ndice.</target>
        </trans-unit>
        <trans-unit id="49c2bd6aa6f23d62660e81e7508644de0747ce48" translate="yes" xml:space="preserve">
          <source>Expand snippet</source>
          <target state="translated">Ampliar fragmento</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">Por ejemplo,</target>
        </trans-unit>
        <trans-unit id="0f0d139be39da72d26c2fc44d8e9127747d60e99" translate="yes" xml:space="preserve">
          <source>For example, in JScript (IE &amp;lt;= 8), the order of enumeration even on Array objects is defined as the properties were created:</source>
          <target state="translated">Por ejemplo, en JScript (IE &amp;lt;= 8), el orden de enumeraci&amp;oacute;n incluso en los objetos Array se define como se crearon las propiedades:</target>
        </trans-unit>
        <trans-unit id="2428f10d15c193c4c3f102bd0050a7d4e2a6f520" translate="yes" xml:space="preserve">
          <source>For these reasons an acceptable trade-off between performance and convenience doesn't even exist.  There's really no benefit unless the intent is to handle the array as an &lt;em&gt;object&lt;/em&gt; and perform operations on the object properties of the array.</source>
          <target state="translated">Por estas razones, ni siquiera existe una compensaci&amp;oacute;n aceptable entre rendimiento y conveniencia. Realmente no hay ning&amp;uacute;n beneficio a menos que la intenci&amp;oacute;n sea manejar la matriz como un &lt;em&gt;objeto&lt;/em&gt; y realizar operaciones en las propiedades del objeto de la matriz.</target>
        </trans-unit>
        <trans-unit id="32b5cb0e39239e899eede9d898b826f9b8871c75" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections&lt;/a&gt;</source>
          <target state="translated">De &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68c380cf4529191d6c4d7cbc7090efd3852b6892" translate="yes" xml:space="preserve">
          <source>Here are the reasons why this is (usually) a bad practice:</source>
          <target state="translated">Aquí están las razones por las que esto es (normalmente)una mala práctica:</target>
        </trans-unit>
        <trans-unit id="8800cd23cee45b4bed05921ce5f6db9ef6fde066" translate="yes" xml:space="preserve">
          <source>However, if your code (or the framework you are using) add custom properties to arrays or to the array prototype, then these properties will be included in the iteration, which is probably not what you want.</source>
          <target state="translated">Sin embargo,si tu código (o el marco de trabajo que estás usando)añade propiedades personalizadas a los arrays o al prototipo de array,entonces estas propiedades se incluirán en la iteración,que probablemente no es lo que quieres.</target>
        </trans-unit>
        <trans-unit id="3f41c8e3bf1d0164c41613e45d4575733160cd11" translate="yes" xml:space="preserve">
          <source>However, this have a different issue. The issue is that a JavaScript array can have &quot;holes&quot;. If you define &lt;code&gt;arr&lt;/code&gt; as:</source>
          <target state="translated">Sin embargo, esto tiene un problema diferente. El problema es que una matriz de JavaScript puede tener &quot;agujeros&quot;. Si define &lt;code&gt;arr&lt;/code&gt; como:</target>
        </trans-unit>
        <trans-unit id="4609f4613ee2485b87e9ea3693f15a345fdc5bff" translate="yes" xml:space="preserve">
          <source>I can't think of other purposes to not using &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;in&lt;/code&gt;;</source>
          <target state="translated">No puedo pensar en otros prop&amp;oacute;sitos para no usar &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;in&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="c84398cbe7864ec7d29debf086fe632c20a743ee" translate="yes" xml:space="preserve">
          <source>I do, however, would like to add that &lt;strong&gt;in modern browsers&lt;/strong&gt; there is an alternative to &lt;code&gt;for...in&lt;/code&gt; that can be used in those cases where &lt;code&gt;for...in&lt;/code&gt; can't be used. That alternative is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; :</source>
          <target state="translated">Sin embargo, me gustar&amp;iacute;a agregar que &lt;strong&gt;en los navegadores modernos&lt;/strong&gt; hay una alternativa a &lt;code&gt;for...in&lt;/code&gt; que se puede usar en aquellos casos en los que &lt;code&gt;for...in&lt;/code&gt; no se puede usar. Esa alternativa es &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e3b3a26ba9647b9bce83a99b6dd6343035cd56ae" translate="yes" xml:space="preserve">
          <source>I don't think I have much to add to eg. &lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/500531#500531&quot;&gt;Triptych's answer&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/4261096#4261096&quot;&gt;CMS's answer&lt;/a&gt; on why using &lt;code&gt;for...in&lt;/code&gt; should be avoided in some cases.</source>
          <target state="translated">No creo que tenga mucho que agregar, por ejemplo. &lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/500531#500531&quot;&gt;La respuesta del tr&amp;iacute;ptico&lt;/a&gt; o &lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/4261096#4261096&quot;&gt;la respuesta del CMS&lt;/a&gt; sobre por qu&amp;eacute; usar &lt;code&gt;for...in&lt;/code&gt; debe evitarse en algunos casos.</target>
        </trans-unit>
        <trans-unit id="cd3028b86fe1e48337d81eff923a6ece9b04e2b8" translate="yes" xml:space="preserve">
          <source>I think the &lt;code&gt;for in&lt;/code&gt; loop is a gem of JS if used &lt;em&gt;correctly&lt;/em&gt; in arrays. You are expected to have full control over your software and know what you are doing. Let's see the mentioned drawbacks and disprove them one by one.</source>
          <target state="translated">Creo que el bucle &lt;code&gt;for in&lt;/code&gt; es una joya de JS si se usa &lt;em&gt;correctamente&lt;/em&gt; en matrices. Se espera que tenga control total sobre su software y sepa lo que est&amp;aacute; haciendo. Veamos los inconvenientes mencionados y los refutamos uno por uno.</target>
        </trans-unit>
        <trans-unit id="3c5457f2a9b947636475a19d3f1132040b65b1d3" translate="yes" xml:space="preserve">
          <source>I would just like to add this simple demonstration code, to make things clearer:</source>
          <target state="translated">Sólo me gustaría añadir este simple código de demostración,para hacer las cosas más claras:</target>
        </trans-unit>
        <trans-unit id="64e3da07990d73da0857766c8c4119fdfa3d8581" translate="yes" xml:space="preserve">
          <source>I've been told not to use &lt;code&gt;for...in&lt;/code&gt; with arrays in JavaScript. Why not?</source>
          <target state="translated">Me han dicho que no lo use &lt;code&gt;for...in&lt;/code&gt; con matrices en JavaScript. Por qu&amp;eacute; no?</target>
        </trans-unit>
        <trans-unit id="97e955c989e786a9c59188ad385759593bc273f9" translate="yes" xml:space="preserve">
          <source>If a function called &lt;code&gt;helpfulUtilityMethod&lt;/code&gt; has been added to &lt;code&gt;Array&lt;/code&gt;'s &lt;code&gt;prototype&lt;/code&gt;, then your loop would end up running four times: &lt;code&gt;key&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;helpfulUtilityMethod&lt;/code&gt;.  If you were only expecting integers, oops.</source>
          <target state="translated">Si se ha agregado una funci&amp;oacute;n llamada &lt;code&gt;helpfulUtilityMethod&lt;/code&gt; al &lt;code&gt;prototype&lt;/code&gt; &lt;code&gt;Array&lt;/code&gt; , entonces su ciclo terminar&amp;iacute;a ejecut&amp;aacute;ndose cuatro veces: la &lt;code&gt;key&lt;/code&gt; ser&amp;iacute;a &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; y &lt;code&gt;helpfulUtilityMethod&lt;/code&gt; . Si solo esperabas n&amp;uacute;meros enteros, &amp;iexcl;ay!</target>
        </trans-unit>
        <trans-unit id="36c04e2865843e125432c9e852edd02d54e879a0" translate="yes" xml:space="preserve">
          <source>If you are in doubt, you probably shouldn't use for-in.</source>
          <target state="translated">Si tienes dudas,probablemente no deberías usar for-in.</target>
        </trans-unit>
        <trans-unit id="3f9cf51b07160b61873b4313b13e4209e40cf8d3" translate="yes" xml:space="preserve">
          <source>In addition to the other problems, the &quot;for..in&quot; syntax is probably slower, because the index is a string, not an integer.</source>
          <target state="translated">Además de los otros problemas,la sintaxis &quot;para...en&quot; es probablemente más lenta,porque el índice es una cadena,no un entero.</target>
        </trans-unit>
        <trans-unit id="5d7f89f56c3c8e5432b67de63d59ca4ec8daee20" translate="yes" xml:space="preserve">
          <source>In addition to the reasons given in other answers, you may not want to use the &quot;for...in&quot; structure if you need to do math with the counter variable because the loop iterates through the names of the object's properties and so the variable is a string.</source>
          <target state="translated">Además de las razones dadas en otras respuestas,puede que no quieras usar la estructura &quot;para...en&quot; si necesitas hacer matemáticas con la variable contador porque el bucle itera a través de los nombres de las propiedades del objeto y por lo tanto la variable es una cadena.</target>
        </trans-unit>
        <trans-unit id="987fa132a1fc4549a83c1787f42d94ea85f4d2a2" translate="yes" xml:space="preserve">
          <source>In essence, you can use any loop, but you should remember exactly how they work. Understand the conditions upon which the different loops reiterate, their separate functionalities, and realize they will be more or less appropriate for differing scenarios.</source>
          <target state="translated">En esencia,puedes usar cualquier bucle,pero debes recordar exactamente cómo funcionan.Comprender las condiciones en las que los diferentes bucles se reiteran,sus funcionalidades separadas,y darse cuenta de que serán más o menos apropiados para diferentes escenarios.</target>
        </trans-unit>
        <trans-unit id="aec6fa3400776b4a7fb59542b27ba833e3407a93" translate="yes" xml:space="preserve">
          <source>In isolation, there is nothing wrong with using for-in on arrays. For-in iterates over the property names of an object, and in the case of an &quot;out-of-the-box&quot; array, the properties corresponds to the array indexes. (The built-in propertes like &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; and so on are not included in the iteration.)</source>
          <target state="translated">En forma aislada, no hay nada de malo en usar for-in en matrices. For-in itera sobre los nombres de propiedad de un objeto, y en el caso de una matriz &quot;lista para usar&quot;, las propiedades corresponden a los &amp;iacute;ndices de la matriz. (Las propiedades integradas como &lt;code&gt;length&lt;/code&gt; , &lt;code&gt;toString&lt;/code&gt; , etc. no se incluyen en la iteraci&amp;oacute;n).</target>
        </trans-unit>
        <trans-unit id="e8d6c41a56de39aca9e7a91aac78285a5e2f3f02" translate="yes" xml:space="preserve">
          <source>In other words:</source>
          <target state="translated">En otras palabras:</target>
        </trans-unit>
        <trans-unit id="734568a26e2da175e7b2711963a36f6889e16233" translate="yes" xml:space="preserve">
          <source>In practice, most browsers currently like to iterate in roughly the same order.  But there's nothing saying they have to.  That's implementation specific, and could change at any time if another way was found to be far more efficient.</source>
          <target state="translated">En la práctica,a la mayoría de los navegadores les gusta iterar más o menos en el mismo orden.Pero no hay nada que diga que tienen que hacerlo.Es una implementación específica,y podría cambiar en cualquier momento si se encontrara otra forma mucho más eficiente.</target>
        </trans-unit>
        <trans-unit id="63b585b5d4653967345fb2a5acb868a3bc4a2b69" translate="yes" xml:space="preserve">
          <source>It's not &lt;em&gt;necessarily&lt;/em&gt; bad (based on what you're doing), but in the case of arrays, if something has been added to &lt;code&gt;Array.prototype&lt;/code&gt;, then you're going to get strange results.  Where you'd expect this loop to run three times:</source>
          <target state="translated">No es &lt;em&gt;necesariamente&lt;/em&gt; malo (en funci&amp;oacute;n de lo que est&amp;aacute; haciendo), pero en el caso de las matrices, si se ha agregado algo a &lt;code&gt;Array.prototype&lt;/code&gt; , obtendr&amp;aacute; resultados extra&amp;ntilde;os. Donde esperar&amp;iacute;as que este ciclo se ejecute tres veces:</target>
        </trans-unit>
        <trans-unit id="48512dd4b3a3c1f7350ccbc046b3e86d288aef9a" translate="yes" xml:space="preserve">
          <source>JavaScript will automatically determine the way its passes through the items. So if you know that your array is really non-associative you can use &lt;code&gt;for (var i=0; i&amp;lt;=arrayLen; i++)&lt;/code&gt;, and skip the auto-detection iteration.</source>
          <target state="translated">JavaScript determinar&amp;aacute; autom&amp;aacute;ticamente la forma en que pasa a trav&amp;eacute;s de los elementos. Entonces, si sabe que su matriz es realmente no asociativa, puede usar &lt;code&gt;for (var i=0; i&amp;lt;=arrayLen; i++)&lt;/code&gt; y omitir la iteraci&amp;oacute;n de detecci&amp;oacute;n autom&amp;aacute;tica.</target>
        </trans-unit>
        <trans-unit id="2f7f0686684ed446fc32930174e01f5395bb10e0" translate="yes" xml:space="preserve">
          <source>Like others have said, You might get keys which aren't in your array or that are inherited from the prototype. So if, let's say, a library adds a property to the Array or Object prototypes:</source>
          <target state="translated">Como otros han dicho,puede que recibas llaves que no están en tu matriz o que son heredadas del prototipo.Así que si,digamos,una biblioteca añade una propiedad a los prototipos de la matriz o del objeto:</target>
        </trans-unit>
        <trans-unit id="f45b5193da0aaa7c52cb48f0bc144438c2dff04a" translate="yes" xml:space="preserve">
          <source>Long answer: It's just not worth it...</source>
          <target state="translated">Respuesta larga:No vale la pena...</target>
        </trans-unit>
        <trans-unit id="5585fccb2ae308d5040fc4d2fff80a5c0290f3a8" translate="yes" xml:space="preserve">
          <source>Longer answer: It's just not worth it, even if sequential element order and optimal performance aren't required.</source>
          <target state="translated">Respuesta más larga:No vale la pena,aunque no se requiera un orden de elementos secuenciales y un rendimiento óptimo.</target>
        </trans-unit>
        <trans-unit id="2b171ef9d258336524bc78a30c41d1586e22ad24" translate="yes" xml:space="preserve">
          <source>Mainly two reasons:</source>
          <target state="translated">Principalmente por dos razones:</target>
        </trans-unit>
        <trans-unit id="82155128d69281609acce32458fe028999ca1517" translate="yes" xml:space="preserve">
          <source>Note :</source>
          <target state="translated">Nota:</target>
        </trans-unit>
        <trans-unit id="af88e59767f8ff55e7690c17ad58d65f053bf1a9" translate="yes" xml:space="preserve">
          <source>Now we create a new Array();</source>
          <target state="translated">Ahora creamos un nuevo Array();</target>
        </trans-unit>
        <trans-unit id="6e27c94a861aeaf1d0ac22ebe6d7a6026d13e8c7" translate="yes" xml:space="preserve">
          <source>OK, let's do it with &lt;strong&gt;Array&lt;/strong&gt; now:</source>
          <target state="translated">OK, hag&amp;aacute;moslo con &lt;strong&gt;Array&lt;/strong&gt; ahora:</target>
        </trans-unit>
        <trans-unit id="56bdfee68984425cbf940d97eb5ac6566ed73d68" translate="yes" xml:space="preserve">
          <source>Of course, this can easily be overcome by including</source>
          <target state="translated">Por supuesto,esto puede superarse fácilmente incluyendo</target>
        </trans-unit>
        <trans-unit id="861d60bb59642c4abc4400719fd6c6e81961b6fa" translate="yes" xml:space="preserve">
          <source>One can check the value of a properties' enumerable property attribute by:</source>
          <target state="translated">Uno puede comprobar el valor de un atributo de propiedad enumerable de una propiedad por:</target>
        </trans-unit>
        <trans-unit id="ee3c6cf9a9fbe4ea8fa522f3b09dbeb432226060" translate="yes" xml:space="preserve">
          <source>Or to obtain all four property attributes:</source>
          <target state="translated">O para obtener los cuatro atributos de la propiedad:</target>
        </trans-unit>
        <trans-unit id="6b7fb34e41e8a58c247a862c50d777d11e97a216" translate="yes" xml:space="preserve">
          <source>See below that the first two loops only execute the console.log statements once, while the standard for loop executes the function as many times as specified, in this case, array.length = 6.</source>
          <target state="translated">Vea más abajo que los dos primeros bucles sólo ejecutan las sentencias console.log una vez,mientras que el estándar para el bucle ejecuta la función tantas veces como se especifique,en este caso,array.length=6.</target>
        </trans-unit>
        <trans-unit id="d916bf343fb39f0ba6d742b44d8afd005717534b" translate="yes" xml:space="preserve">
          <source>Short answer: It's just not worth it.</source>
          <target state="translated">Respuesta corta:No vale la pena.</target>
        </trans-unit>
        <trans-unit id="28d26e832aa07432925257b320c040f95173eadb" translate="yes" xml:space="preserve">
          <source>Since JavaScript elements are saved as standard object properties, it
  is not advisable to iterate through JavaScript arrays using for...in
  loops because normal elements and all enumerable properties will be
  listed.</source>
          <target state="translated">Dado que los elementos de JavaScript se guardan como propiedades de objeto estándar,no es aconsejable iterar a través de las matrices de JavaScript usando para...en bucles porque los elementos normales y todas las propiedades enumerables serán listados.</target>
        </trans-unit>
        <trans-unit id="4a9c0e2640786d86947354f29810a2bec59ff248" translate="yes" xml:space="preserve">
          <source>So that's one of the reasons why we need to use &lt;strong&gt;for..in&lt;/strong&gt; carefully, but it's not always the case...</source>
          <target state="translated">&lt;strong&gt;Esa&lt;/strong&gt; es una de las razones por las que debemos usar &lt;strong&gt;... con&lt;/strong&gt; cuidado, pero no siempre es as&amp;iacute; ...</target>
        </trans-unit>
        <trans-unit id="43ccb63fe244a71ca951301d73d2ae606c309d0c" translate="yes" xml:space="preserve">
          <source>So you see.. &lt;code&gt;for in&lt;/code&gt; loop is now safe since you cared about your code.</source>
          <target state="translated">As&amp;iacute; que ya ves ... &lt;code&gt;for in&lt;/code&gt; loop ahora es seguro ya que te importaba tu c&amp;oacute;digo.</target>
        </trans-unit>
        <trans-unit id="a856eaad5930fc3c1ad42c0a1072da1e9a71aa22" translate="yes" xml:space="preserve">
          <source>Some  JS frameworks, like Prototype modifies the Array prototype. Other frameworks like JQuery doesn't, so with JQuery you can safely use for-in.</source>
          <target state="translated">Algunos marcos JS,como el Prototipo,modifican el prototipo de la matriz.Otros marcos como JQuery no lo hace,así que con JQuery puedes usar for-in con seguridad.</target>
        </trans-unit>
        <trans-unit id="241cc38f95d86d00578498c6cd6e9d8e3e40f7b1" translate="yes" xml:space="preserve">
          <source>That means if a browser wanted to, it could go through the properties in the order in which they were inserted.  Or in numerical order.  Or in lexical order (where &quot;30&quot; comes before &quot;4&quot;!  Keep in mind all object keys -- and thus, all array indexes -- are actually strings, so that makes total sense).  It could go through them by bucket, if it implemented objects as hash tables.  Or take any of that and add &quot;backwards&quot;.  A browser could even iterate &lt;em&gt;randomly&lt;/em&gt; and be ECMA-262 compliant, as long as it visited each property exactly once.</source>
          <target state="translated">Eso significa que si un navegador quisiera, podr&amp;iacute;a pasar por las propiedades en el orden en que se insertaron. O en orden num&amp;eacute;rico. O en orden l&amp;eacute;xico (&amp;iexcl;donde &quot;30&quot; viene antes que &quot;4&quot;! Tenga en cuenta que todas las claves de objeto, y por lo tanto, todos los &amp;iacute;ndices de matriz, en realidad son cadenas, por lo que tiene mucho sentido). Podr&amp;iacute;a atravesarlos por cubo si implementara objetos como tablas hash. O tome algo de eso y agregue &quot;al rev&amp;eacute;s&quot;. Un navegador podr&amp;iacute;a incluso iterar &lt;em&gt;al azar&lt;/em&gt; y ser compatible con ECMA-262, siempre que visite cada propiedad exactamente una vez.</target>
        </trans-unit>
        <trans-unit id="4925097cf7b88e57feb64e9ce18adcce8750efa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for-in&lt;/code&gt; statement by itself is not a &quot;bad practice&quot;, however it can be &lt;em&gt;mis-used&lt;/em&gt;, for example, to &lt;em&gt;iterate&lt;/em&gt; over arrays or array-like objects.</source>
          <target state="translated">La declaraci&amp;oacute;n &lt;code&gt;for-in&lt;/code&gt; en s&amp;iacute; misma no es una &quot;mala pr&amp;aacute;ctica&quot;, sin embargo, puede ser &lt;em&gt;mal utilizada&lt;/em&gt; , por ejemplo, para &lt;em&gt;iterar&lt;/em&gt; sobre matrices u objetos similares a matrices.</target>
        </trans-unit>
        <trans-unit id="62abc57f4ad07e973cfe4762c0071680716cdbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;in&lt;/code&gt; works with two types of variables: hashtables (associative arrays) and array (non-associative).</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; / &lt;code&gt;in&lt;/code&gt; funciona con dos tipos de variables: tablas hash (matrices asociativas) y matrices (no asociativas).</target>
        </trans-unit>
        <trans-unit id="a4e5b7446e20249c9f271cc6a796ffd24079b6d5" translate="yes" xml:space="preserve">
          <source>The console shows:</source>
          <target state="translated">La consola muestra:</target>
        </trans-unit>
        <trans-unit id="c373dd9dcd853eabd38b0b011d5e2e23c21a3f2d" translate="yes" xml:space="preserve">
          <source>The mechanics and &lt;strong&gt;order&lt;/strong&gt; of enumerating the properties ... &lt;strong&gt;is not specified&lt;/strong&gt;...</source>
          <target state="translated">La mec&amp;aacute;nica y el &lt;strong&gt;orden&lt;/strong&gt; de enumerar las propiedades ... &lt;strong&gt;no se especifica&lt;/strong&gt; ...</target>
        </trans-unit>
        <trans-unit id="288b516678cca5f53f82af2e6b9622249813364e" translate="yes" xml:space="preserve">
          <source>The problem with &lt;code&gt;for ... in ...&lt;/code&gt; &amp;mdash; and this only becomes a problem when a programmer doesn't really understand the language; it's not really a bug or anything &amp;mdash; is that it iterates over &lt;em&gt;all&lt;/em&gt; members of an object (well, all &lt;em&gt;enumerable&lt;/em&gt; members, but that's a detail for now).  When you want to iterate over &lt;em&gt;just&lt;/em&gt; the indexed properties of an array, the only guaranteed way to keep things semantically consistent is to use an integer index (that is, a &lt;code&gt;for (var i = 0; i &amp;lt; array.length; ++i)&lt;/code&gt; style loop).</source>
          <target state="translated">El problema con &lt;code&gt;for ... in ...&lt;/code&gt; - y esto solo se convierte en un problema cuando un programador realmente no entiende el lenguaje; en realidad no es un error ni nada, es que itera sobre &lt;em&gt;todos los&lt;/em&gt; miembros de un objeto (bueno, todos los miembros &lt;em&gt;enumerables&lt;/em&gt; , pero eso es un detalle por ahora). Cuando desee iterar &lt;em&gt;solo&lt;/em&gt; sobre las propiedades indexadas de una matriz, la &amp;uacute;nica forma garantizada de mantener las cosas sem&amp;aacute;nticamente consistentes es usar un &amp;iacute;ndice entero (es decir, un &lt;code&gt;for (var i = 0; i &amp;lt; array.length; ++i)&lt;/code&gt; bucle de estilo).</target>
        </trans-unit>
        <trans-unit id="f366257c93fa147fea297156a165fc8f6425c44c" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;for-in&lt;/code&gt; statement is to &lt;em&gt;enumerate&lt;/em&gt; over object properties. This statement will go up in the prototype chain, also enumerating over &lt;em&gt;inherited&lt;/em&gt; properties, a thing that &lt;em&gt;sometimes&lt;/em&gt; is not desired.</source>
          <target state="translated">El prop&amp;oacute;sito de la declaraci&amp;oacute;n &lt;code&gt;for-in&lt;/code&gt; es &lt;em&gt;enumerar las&lt;/em&gt; propiedades de los objetos. Esta declaraci&amp;oacute;n subir&amp;aacute; en la cadena del prototipo, enumerando tambi&amp;eacute;n las propiedades &lt;em&gt;heredadas&lt;/em&gt; , algo que a &lt;em&gt;veces&lt;/em&gt; no se desea.</target>
        </trans-unit>
        <trans-unit id="89a42ff68b32c1edc7f8b93e5041095c61ebc5a0" translate="yes" xml:space="preserve">
          <source>The reason is that one construct:</source>
          <target state="translated">La razón es que una construcción:</target>
        </trans-unit>
        <trans-unit id="5da49b7ae2a0921436ddcfd460a1e53611ffa346" translate="yes" xml:space="preserve">
          <source>Then the array have two items, but a length of 101. Using for-in will yield two indexes, while the for-loop will yield 101 indexes, where the 99 has a value of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Entonces la matriz tiene dos elementos, pero una longitud de 101. El uso de for-in producir&amp;aacute; dos &amp;iacute;ndices, mientras que el for-loop producir&amp;aacute; 101 &amp;iacute;ndices, donde el 99 tiene un valor de &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19e517ee8dfd19dc33ba7657aca3b885dc791954" translate="yes" xml:space="preserve">
          <source>There are three reasons why you shouldn't use &lt;code&gt;for..in&lt;/code&gt; to iterate over array elements:</source>
          <target state="translated">Hay tres razones por las que no debe usar &lt;code&gt;for..in&lt;/code&gt; para iterar sobre los elementos de la matriz:</target>
        </trans-unit>
        <trans-unit id="0e72dc9f7dbd7a51c36c0e6a445eeb0e565c1d45" translate="yes" xml:space="preserve">
          <source>This is a feature available in ECMAScript 5 - in earlier versions it was not possible to alter the value of the enumerable property attribute (it was always set to true).</source>
          <target state="translated">Esta es una característica disponible en ECMAScript 5-en versiones anteriores no era posible alterar el valor del atributo de propiedad enumerable (siempre se establecía como verdadero).</target>
        </trans-unit>
        <trans-unit id="c340939eba6baf47234d9046c52b928e6cf080c5" translate="yes" xml:space="preserve">
          <source>This will write:</source>
          <target state="translated">Esto escribirá:</target>
        </trans-unit>
        <trans-unit id="5926b3627ee73db27b2bc9423c0585f3650b0163" translate="yes" xml:space="preserve">
          <source>Unfortunately, no version of Internet Explorer supports &lt;code&gt;for...of&lt;/code&gt; (&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;Edge 12+&lt;/a&gt; does), so you'll have to wait a bit longer until you can use it in your client side production code. However, it should be safe to use in your server side JS code (if you use &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;).</source>
          <target state="translated">Desafortunadamente, ninguna versi&amp;oacute;n de Internet Explorer admite &lt;code&gt;for...of&lt;/code&gt; ( &lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot;&gt;Edge 12+ lo&lt;/a&gt; hace), por lo que tendr&amp;aacute; que esperar un poco m&amp;aacute;s hasta que pueda usarlo en el c&amp;oacute;digo de producci&amp;oacute;n del lado del cliente. Sin embargo, deber&amp;iacute;a ser seguro usarlo en el c&amp;oacute;digo JS del lado del servidor (si usa &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="00554097d82380cea803eeb8bfd41d05a2d514a3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for (var property in array)&lt;/code&gt; will cause &lt;code&gt;array&lt;/code&gt; to be iterated over as an &lt;em&gt;object&lt;/em&gt;, traversing the object prototype chain and ultimately performing slower than an index-based &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">El uso de &lt;code&gt;for (var property in array)&lt;/code&gt; har&amp;aacute; que la &lt;code&gt;array&lt;/code&gt; se repita como un &lt;em&gt;objeto&lt;/em&gt; , atravesando la cadena prototipo del objeto y, en &amp;uacute;ltima instancia, funcionando m&amp;aacute;s lentamente que un bucle &lt;code&gt;for&lt;/code&gt; basado en &amp;iacute;ndice.</target>
        </trans-unit>
        <trans-unit id="9c96a1056df973395a0c429bef208a88ee62a434" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;hasOwnProperty()&lt;/code&gt; and &lt;code&gt;!isNaN()&lt;/code&gt; checks to filter the object properties is an additional overhead causing it to perform even slower and negates the key reason for using it in the first place, i.e. because of the more concise format.</source>
          <target state="translated">El uso de las &lt;code&gt;hasOwnProperty()&lt;/code&gt; y &lt;code&gt;!isNaN()&lt;/code&gt; para filtrar las propiedades del objeto es una sobrecarga adicional que hace que funcione a&amp;uacute;n m&amp;aacute;s lentamente y niega la raz&amp;oacute;n clave para usarlo en primer lugar, es decir, debido al formato m&amp;aacute;s conciso.</target>
        </trans-unit>
        <trans-unit id="918fbcebd19b214ca6c6ed8e07393e70c7d695f3" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;for...in&lt;/code&gt; loop for an array is not wrong, although I can guess why someone told you that:</source>
          <target state="translated">Usar el bucle &lt;code&gt;for...in&lt;/code&gt; para una matriz no est&amp;aacute; mal, aunque puedo adivinar por qu&amp;eacute; alguien te dijo eso:</target>
        </trans-unit>
        <trans-unit id="bc913488828c3bcac109d7fea4f36a8fb9fb9d46" translate="yes" xml:space="preserve">
          <source>Usually the order of the items in an array is important, but the for-in loop won't necessarily iterate in the right order, that's because it treats the array as an object, which is the way it is implemented in JS, and not as an array.
This seems like a small thing, but it can really screw up applications and is hard to debug.</source>
          <target state="translated">Normalmente el orden de los elementos de una matriz es importante,pero el bucle for-in no necesariamente itera en el orden correcto,eso es porque trata la matriz como un objeto,que es la forma en que se implementa en JS,y no como una matriz.Esto parece una cosa pequeña,pero realmente puede fastidiar las aplicaciones y es difícil de depurar.</target>
        </trans-unit>
        <trans-unit id="149c70146186d5720fac2f29bfd0ada94cf61c04" translate="yes" xml:space="preserve">
          <source>When you want to enumerate only the &lt;em&gt;own properties&lt;/em&gt; of an object (the ones that aren't inherited), you can use the &lt;code&gt;hasOwnProperty&lt;/code&gt; method:</source>
          <target state="translated">Cuando desee enumerar solo las &lt;em&gt;propiedades propias&lt;/em&gt; de un objeto (las que no se heredan), puede usar el m&amp;eacute;todo &lt;code&gt;hasOwnProperty&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b64e58a83fb02454b1c9859d3d2932e652511b06" translate="yes" xml:space="preserve">
          <source>Why is using “for…in” with array iteration a bad idea</source>
          <target state="translated">¿Por qué es una mala idea usar &quot;para...en&quot; con la iteración de la matriz</target>
        </trans-unit>
        <trans-unit id="0577fbc195c6a54c24c161142179133a755af8f0" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;for.. in&lt;/code&gt;, just be sure to check each property with &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;hasOwnProperty&lt;/a&gt;.</source>
          <target state="translated">Puede usar &lt;code&gt;for.. in&lt;/code&gt; , solo aseg&amp;uacute;rese de verificar cada propiedad con &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;hasOwnProperty&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5dd7c262d3b63fe2406be4d0a3f7de7d6d43d204" translate="yes" xml:space="preserve">
          <source>You see the &lt;strong&gt;someoneelse&lt;/strong&gt;!!!... We actually looping through new Array object in this case!</source>
          <target state="translated">&amp;iexcl;Ves a &lt;strong&gt;alguien m&amp;aacute;s&lt;/strong&gt; ! ... En realidad, &amp;iexcl;estamos recorriendo un nuevo objeto Array en este caso!</target>
        </trans-unit>
        <trans-unit id="9c8ef39926fd73e765f1eb8ee4fa6bd53c3ec533" translate="yes" xml:space="preserve">
          <source>You should use the &lt;code&gt;for(var x in y)&lt;/code&gt; only on property lists, not on objects (as explained above).</source>
          <target state="translated">Debe usar &lt;code&gt;for(var x in y)&lt;/code&gt; solo en listas de propiedades, no en objetos (como se explic&amp;oacute; anteriormente).</target>
        </trans-unit>
        <trans-unit id="a96bcd7cc3ea125e82ec1633c0c044086ec4d453" translate="yes" xml:space="preserve">
          <source>You'll get it as part of every array:</source>
          <target state="translated">Lo tendrás como parte de cada conjunto:</target>
        </trans-unit>
        <trans-unit id="451738ae11c58dea638bd4da33b99df9b1367655" translate="yes" xml:space="preserve">
          <source>although not specifically addressed by this question, I would add that there's a very good reason not to ever use for...in with a &lt;code&gt;NodeList&lt;/code&gt; (as one would obtain from a &lt;code&gt;querySelectorAll&lt;/code&gt; call, as it doesn't see the returned elements at all, instead iterating only over the NodeList properties.</source>
          <target state="translated">aunque no se aborda espec&amp;iacute;ficamente en esta pregunta, agregar&amp;iacute;a que hay una muy buena raz&amp;oacute;n para no usar para ... con una &lt;code&gt;NodeList&lt;/code&gt; (como se obtendr&amp;iacute;a de una llamada &lt;code&gt;querySelectorAll&lt;/code&gt; , ya que no ve los elementos devueltos en absoluto , en cambio, solo itera sobre las propiedades NodeList</target>
        </trans-unit>
        <trans-unit id="b01218ba4e2077e27d32f94c86b9d176de94e14e" translate="yes" xml:space="preserve">
          <source>but this is true for iterating over any object with a for-in loop.</source>
          <target state="translated">pero esto es cierto para la iteración sobre cualquier objeto con un bucle de entrada.</target>
        </trans-unit>
        <trans-unit id="409e3dd82374e4e55f29d3a98652e2ae85e1e66f" translate="yes" xml:space="preserve">
          <source>can sometimes be totally different from the other:</source>
          <target state="translated">a veces puede ser totalmente diferente de la otra:</target>
        </trans-unit>
        <trans-unit id="d26272a8e99b364a53d8375d2aaf9e58565fdc59" translate="yes" xml:space="preserve">
          <source>in the case of a single result, I got:</source>
          <target state="translated">en el caso de un solo resultado,lo tengo:</target>
        </trans-unit>
        <trans-unit id="da1ab8a35220f16c304ed232b0ce34d0d22e60c1" translate="yes" xml:space="preserve">
          <source>in the loop, but the first structure is more direct.</source>
          <target state="translated">en el bucle,pero la primera estructura es más directa.</target>
        </trans-unit>
        <trans-unit id="38d998cc7ed3a4c5ac9f65bf863b7c90ce1fc902" translate="yes" xml:space="preserve">
          <source>it's slow because you have to walk all properties of the array object and its whole prototype chain and will still only get the property's name, ie to get the value, an additional lookup will be required</source>
          <target state="translated">es lento porque tienes que recorrer todas las propiedades del objeto de la matriz y toda su cadena de prototipos y sólo obtendrás el nombre de la propiedad,es decir,para obtener el valor,se requerirá una búsqueda adicional</target>
        </trans-unit>
        <trans-unit id="f34c97c6342dac87f71ff8d0ba7b7f737b6be403" translate="yes" xml:space="preserve">
          <source>whereas,</source>
          <target state="translated">whereas,</target>
        </trans-unit>
        <trans-unit id="7c5e58bccc2148f04b16afa5d9963af3bc3acc1b" translate="yes" xml:space="preserve">
          <source>which explained why my &lt;code&gt;for (node in nodes) node.href = newLink;&lt;/code&gt; was failing.</source>
          <target state="translated">lo que explicaba por qu&amp;eacute; my &lt;code&gt;for (node in nodes) node.href = newLink;&lt;/code&gt; estaba fallando</target>
        </trans-unit>
        <trans-unit id="7c400da46a809de9bf574c312d350ee791784418" translate="yes" xml:space="preserve">
          <source>will write</source>
          <target state="translated">escribirá</target>
        </trans-unit>
        <trans-unit id="5c923b1cf4e840a71705024b687048a1b3731fba" translate="yes" xml:space="preserve">
          <source>you could solve this with the hasOwnProperty method:</source>
          <target state="translated">podrías resolver esto con el método de hasOwnProperty:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
