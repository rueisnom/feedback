<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/6470428">
    <body>
      <group id="6470428">
        <trans-unit id="4c5bf79f3c7090acea7b512de0735d716d9b5855" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTES:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTES:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab51a5a95212edc93655cc24b28a5f914b05fe4b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;try&lt;/code&gt; statement may have more than one except clause, to specify
  handlers for different exceptions. At most one handler will be
  executed. Handlers only handle exceptions that occur in the
  corresponding try clause, not in other handlers of the same try
  statement. An except clause may name multiple exceptions as a
  parenthesized tuple, for example:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; ステートメントには、さまざまな例外のハンドラーを指定するために、複数のexcept節を含めることができます。 最大で1つのハンドラが実行されます。 ハンドラーは、対応するtry句で発生する例外のみを処理し、同じtryステートメントの他のハンドラーでは処理しません。 except節は、括弧で囲まれたタプルとして複数の例外を指定するかもしれません、例えば：</target>
        </trans-unit>
        <trans-unit id="b049d4d6cc89ce4c077b28174e43420d6a4bc2cc" translate="yes" xml:space="preserve">
          <source>An except clause may name multiple exceptions as a parenthesized tuple, for example</source>
          <target state="translated">except句は、複数の例外を括弧で括ったタプルとして指定することができます。</target>
        </trans-unit>
        <trans-unit id="d8cb09e158212bf209b199530d94686ab9de6f8c" translate="yes" xml:space="preserve">
          <source>Best Practice</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="817b3c16209f1354c4647f0853f13398696d0d2f" translate="yes" xml:space="preserve">
          <source>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</source>
          <target state="translated">しかし、2つの異なる例外の中で同じことをしたい場合、今考えられる最善の方法はこれです。</target>
        </trans-unit>
        <trans-unit id="7b2b69a15733371ac46b79803f3cc36eaf3ee9be" translate="yes" xml:space="preserve">
          <source>Catch multiple exceptions in one line (except block)</source>
          <target state="translated">1行で複数の例外をキャッチ(ブロックを除く)</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="a09d8fe71d819660f00ffa7e97f5581804bd696d" translate="yes" xml:space="preserve">
          <source>Do this:</source>
          <target state="translated">これをやってくれ</target>
        </trans-unit>
        <trans-unit id="13affbde8a1ea802fe72700ad8c2898507c9259c" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.python.org/2/tutorial/errors.html#handling-exceptions&quot;&gt;Python documentation -&amp;gt; 8.3 Handling Exceptions&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/tutorial/errors.html#handling-exceptions&quot;&gt;Pythonのドキュメント&lt;/a&gt;から-&amp;gt; 8.3例外の処理 ：</target>
        </trans-unit>
        <trans-unit id="2c6825f23083c7c1e94708a167000ee7ab04e1cf" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt;Python Documentation&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/tutorial/errors.html#handling-exceptions&quot;&gt;Pythonのドキュメント&lt;/a&gt;から：</target>
        </trans-unit>
        <trans-unit id="ded2ede429f8a9ed8ea8ab4b5cf15fba93ff8c57" translate="yes" xml:space="preserve">
          <source>Here's an example of simple usage:</source>
          <target state="translated">簡単な使い方の例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="25401e6d560f2365c3f86f0125c7ffa7a861662a" translate="yes" xml:space="preserve">
          <source>How do I catch multiple exceptions in one line (except block)</source>
          <target state="translated">1行(ブロックを除く)で複数の例外をキャッチする方法</target>
        </trans-unit>
        <trans-unit id="41760b6f3ebb7baac4ad211d7c27b7499d6d4e88" translate="yes" xml:space="preserve">
          <source>I can also do this:</source>
          <target state="translated">こんなこともできます。</target>
        </trans-unit>
        <trans-unit id="0690b8cb888193df03438257609795252e5473af" translate="yes" xml:space="preserve">
          <source>I know that I can do:</source>
          <target state="translated">できることを知っています。</target>
        </trans-unit>
        <trans-unit id="e1483e7b14daed222d2c8aef506327181c1b3c4a" translate="yes" xml:space="preserve">
          <source>I know that second one is not the best way to do this, but i'm just showing number of ways to do this thing.</source>
          <target state="translated">2つ目の方法が最良の方法ではないことは分かっていますが、私はこのことを行うための方法の数を示しているだけです。</target>
        </trans-unit>
        <trans-unit id="b902bf544387ba5c38f871fc0f6304eab8182ec2" translate="yes" xml:space="preserve">
          <source>I'm specifying only these exceptions to avoid hiding bugs, which if I encounter I expect the full stack trace from.</source>
          <target state="translated">私はバグを隠すことを避けるために、これらの例外のみを指定しています。</target>
        </trans-unit>
        <trans-unit id="a3befa5d5bde2dd45b6cb9e5cfdd8e2e675fb897" translate="yes" xml:space="preserve">
          <source>If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times.</source>
          <target state="translated">頻繁に大量の例外を使う場合は、タプルを事前に定義しておくと、何度もタイプし直す必要がありません。</target>
        </trans-unit>
        <trans-unit id="b7a540cdc02a3c56ceec5c00c10a8ed90a3556b7" translate="yes" xml:space="preserve">
          <source>If you just cannot tolerate a global variable, define it in main()
and pass it around where needed...</source>
          <target state="translated">どうしてもグローバル変数を許容できない場合は、main()で定義して必要なところに渡してください。</target>
        </trans-unit>
        <trans-unit id="a9fb9bd20ca250fed19a43594b2578230ac37e6b" translate="yes" xml:space="preserve">
          <source>If you see the comma name assignment in your codebase, and you're using Python 2.5 or higher, switch to the new way of doing it so your code remains compatible when you upgrade.</source>
          <target state="translated">もしあなたのコードベースにカンマ名の割り当てが表示されていて、Python 2.5以上を使用している場合は、新しい方法に切り替えて、アップグレード時にコードが互換性を維持できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="d53e02618e344d52ef01c720b0e4a1aeade3ace3" translate="yes" xml:space="preserve">
          <source>If you, also, need to catch other exceptions than those in the
pre-defined tuple, you will need to define another except block.</source>
          <target state="translated">また、あらかじめ定義されたタプル以外の例外をキャッチする必要がある場合は、別の例外ブロックを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="de1a6de2f465c2cd7ad7368000b40688a92f698b" translate="yes" xml:space="preserve">
          <source>Is there a way to do this?</source>
          <target state="translated">何か方法はないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="c7465ca741faacdaacf8fc289a406e2b80c58c6f" translate="yes" xml:space="preserve">
          <source>Is there any way that I can do something like this (since the action to take in both exceptions is to &lt;code&gt;say please&lt;/code&gt;):</source>
          <target state="translated">私がこのようなことをすることができる方法はありますか（両方の例外で取るアクションは &lt;code&gt;say please&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="0ddc7de3efedfca6bfa1df90007e94bbdec68263" translate="yes" xml:space="preserve">
          <source>Note that in Python 3, the &lt;code&gt;err&lt;/code&gt; object falls out of scope when the &lt;code&gt;except&lt;/code&gt; block is concluded.</source>
          <target state="translated">Python 3では、 &lt;code&gt;except&lt;/code&gt; ブロックが終了すると、 &lt;code&gt;err&lt;/code&gt; オブジェクトはスコープ外になります。</target>
        </trans-unit>
        <trans-unit id="bc004f867fab3134998b742d32b99375aa58bc59" translate="yes" xml:space="preserve">
          <source>Note that the parentheses around this tuple are required, because
  except &lt;code&gt;ValueError, e:&lt;/code&gt; was the syntax used for what is normally
  written as &lt;code&gt;except ValueError as e:&lt;/code&gt; in modern Python (described
  below). The old syntax is still supported for backwards compatibility.
  This means &lt;code&gt;except RuntimeError, TypeError&lt;/code&gt; is not equivalent to
  &lt;code&gt;except (RuntimeError, TypeError):&lt;/code&gt; but to &lt;code&gt;except RuntimeError as&lt;/code&gt;&lt;code&gt;TypeError:&lt;/code&gt; which is not what you want.</source>
          <target state="translated">&lt;code&gt;ValueError, e:&lt;/code&gt; を &lt;code&gt;except ValueError as e:&lt;/code&gt; は最近のPythonでValueErrorを除いてe：として通常記述される構文に使用されるため、このタプルを括弧で囲む必要があることに注意してください（以下で説明）。 古い構文は、下位互換性のために引き続きサポートされています。 つまり &lt;code&gt;except RuntimeError, TypeError&lt;/code&gt; を除いて、TypeErrorは &lt;code&gt;except (RuntimeError, TypeError):&lt;/code&gt; と同等ではありませんが、 &lt;code&gt;except RuntimeError as&lt;/code&gt; &lt;code&gt;TypeError:&lt;/code&gt; として除いています。</target>
        </trans-unit>
        <trans-unit id="d723b6ca1c9901f40ffa8c7cb73cf071dc6f9e0d" translate="yes" xml:space="preserve">
          <source>Now this really won't work, as it matches the syntax for:</source>
          <target state="translated">の構文と一致しているので、これでは本当にうまくいきません。</target>
        </trans-unit>
        <trans-unit id="79e92850cf7ab3458ee0c35ad48771f18d731aef" translate="yes" xml:space="preserve">
          <source>One of the way to do this is..</source>
          <target state="translated">その方法の一つが</target>
        </trans-unit>
        <trans-unit id="ab8be1efd6dc3c435478dd3a62ea08cc4d4c06e3" translate="yes" xml:space="preserve">
          <source>Or, for Python 2 only:</source>
          <target state="translated">もしくは、Python2のみの場合。</target>
        </trans-unit>
        <trans-unit id="888126aced4a34b1e616dbdc24b23e92f8571666" translate="yes" xml:space="preserve">
          <source>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using &lt;code&gt;as&lt;/code&gt;.</source>
          <target state="translated">例外と変数をコンマで区切ることは、Python 2.6および2.7では引き続き機能しますが、現在は非推奨であり、Python 3では機能しません。 今、あなたはとして使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="530c6bc48355a2f0b526302e96aa22689f3a413c" translate="yes" xml:space="preserve">
          <source>So when you want to &lt;code&gt;pass&lt;/code&gt; on certain exceptions, use &lt;code&gt;suppress&lt;/code&gt;.</source>
          <target state="translated">したがって、特定の例外を &lt;code&gt;pass&lt;/code&gt; 場合は、 &lt;code&gt;suppress&lt;/code&gt; を使用してください 。</target>
        </trans-unit>
        <trans-unit id="5fd8ccd2dd96cfb9e086072e85ef976d09bafe09" translate="yes" xml:space="preserve">
          <source>So, my effort to catch the two distinct exceptions doesn't exactly come through.</source>
          <target state="translated">だから、2つの明確な例外を捕らえようとする私の努力は、正確には伝わらない。</target>
        </trans-unit>
        <trans-unit id="e8d29ca877f0b675404f6ad99cc97ea5416ba17d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;suppress&lt;/code&gt; context manager</source>
          <target state="translated">&lt;code&gt;suppress&lt;/code&gt; コンテキストマネージャー</target>
        </trans-unit>
        <trans-unit id="8f5ee26bfbcdad01c21831aaa32acdbdab6870f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;except&lt;/code&gt;, &lt;code&gt;pass&lt;/code&gt; lines can be handled in a single line with the &lt;a href=&quot;https://docs.python.org/3/library/contextlib.html#contextlib.suppress&quot;&gt;suppress context manager, available in Python 3.4&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;except&lt;/code&gt; 、 &lt;code&gt;pass&lt;/code&gt; 行は&lt;a href=&quot;https://docs.python.org/3/library/contextlib.html#contextlib.suppress&quot;&gt;、Python 3.4で使用可能な抑制コンテキストマネージャを使用し&lt;/a&gt;て1行で処理できます。</target>
        </trans-unit>
        <trans-unit id="bee6793736696d15c86e9418c392cb160b334c24" translate="yes" xml:space="preserve">
          <source>The accepted answer is really 4 lines of code, minimum:</source>
          <target state="translated">受け入れられた答えは、本当に最低でも4行のコードです。</target>
        </trans-unit>
        <trans-unit id="ded8725c303b5da6585a80fa99b9320cabc80649" translate="yes" xml:space="preserve">
          <source>The parentheses are required due to older syntax that used the commas to assign the error object to a name. The &lt;code&gt;as&lt;/code&gt; keyword is used for the assignment. You can use any name for the error object, I prefer &lt;code&gt;error&lt;/code&gt; personally.</source>
          <target state="translated">括弧は、コンマを使用してエラーオブジェクトを名前に割り当てる古い構文のために必要です。 &lt;code&gt;as&lt;/code&gt; キーワードは割り当てに使用されます。 エラーオブジェクトには任意の名前を使用できますが、個人的にはエラーを使用します。</target>
        </trans-unit>
        <trans-unit id="256437836b7943e4e7fdd752b20caa8596495bbe" translate="yes" xml:space="preserve">
          <source>This is documented here: &lt;a href=&quot;https://docs.python.org/tutorial/errors.html&quot;&gt;https://docs.python.org/tutorial/errors.html&lt;/a&gt;</source>
          <target state="translated">これはここに文書化されています： &lt;a href=&quot;https://docs.python.org/tutorial/errors.html&quot;&gt;https&lt;/a&gt; : //docs.python.org/tutorial/errors.html</target>
        </trans-unit>
        <trans-unit id="7f29c057864f2263b1ab7362d208202bd2da70e6" translate="yes" xml:space="preserve">
          <source>To do this in a manner currently and forward compatible with Python, you need to separate the Exceptions with commas and wrap them with parentheses to differentiate from earlier syntax that assigned the exception instance to a variable name by following the Exception type to be caught with a comma.</source>
          <target state="translated">Pythonとの現在および前方互換性のある方法でこれを行うためには、例外をカンマで区切って括弧で括ることで、カンマで捕まる例外の型に続いて例外のインスタンスを変数名に代入していた以前の構文と区別する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ba5618acc6b4058c1e35f3d6a2c3cef5ea10a96" translate="yes" xml:space="preserve">
          <source>You can assign the exception to a variable, (&lt;code&gt;e&lt;/code&gt; is common, but you might prefer a more verbose variable if you have long exception handling or your IDE only highlights selections larger than that, as mine does.) The instance has an args attribute. Here is an example:</source>
          <target state="translated">例外を変数に割り当てることができます（ &lt;code&gt;e&lt;/code&gt; は一般的ですが、長い例外処理がある場合、またはIDEが私のようにそれよりも大きい選択のみをハイライトする場合は、より詳細な変数を好むかもしれません。）インスタンスにはargs属性があります。 次に例を示します。</target>
        </trans-unit>
        <trans-unit id="9e6e4be46f2b9460466e983a0c36c398eceb540a" translate="yes" xml:space="preserve">
          <source>You may see code that assigns the error with a comma. This usage, the only form available in Python 2.5 and earlier, is deprecated, and if you wish your code to be forward compatible in Python 3, you should update the syntax to use the new form:</source>
          <target state="translated">エラーをカンマで代入するコードを目にすることがあるかもしれません。Python 2.5 以前のバージョンで利用可能な唯一の形式であるこの使用法は非推奨となっています。</target>
        </trans-unit>
        <trans-unit id="ab0ff4075328dcf9cd0d73abe51697d044af9e1c" translate="yes" xml:space="preserve">
          <source>and another way is to create method which performs task executed by &lt;code&gt;except&lt;/code&gt; block and call it through all of the &lt;code&gt;except&lt;/code&gt; block that you write..</source>
          <target state="translated">もう1つの方法は、 &lt;code&gt;except&lt;/code&gt; ブロックによって実行されるタスクを実行するメソッドを作成し、書き込むすべての &lt;code&gt;except&lt;/code&gt; ブロックを介してそれを呼び出すことです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
