<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/29140402">
    <body>
      <group id="29140402">
        <trans-unit id="2441528a1b27e87040ce340944dac5b0b2dd77bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/ToStringBuilder.html&quot;&gt;&lt;code&gt;ToStringBuilder&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache Commons Lang&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache Commons Langの&lt;/a&gt; &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/ToStringBuilder.html&quot;&gt; &lt;code&gt;ToStringBuilder&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f851b771224195cd3ce10c4352cf960c33c1c3eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://projectlombok.org/features/ToString.html&quot;&gt;&lt;code&gt;@ToString&lt;/code&gt;&lt;/a&gt; annotation from &lt;a href=&quot;http://projectlombok.org/&quot;&gt;Project Lombok&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://projectlombok.org/&quot;&gt;Project Lombokの&lt;/a&gt; &lt;a href=&quot;http://projectlombok.org/features/ToString.html&quot;&gt; &lt;code&gt;@ToString&lt;/code&gt; &lt;/a&gt;アノテーション</target>
        </trans-unit>
        <trans-unit id="9b8a5106753b238f7d8ac576fe27f554ca5a9f13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://google.github.io/guava/releases/19.0/api/docs/com/google/common/base/MoreObjects.ToStringHelper.html&quot;&gt;&lt;code&gt;MoreObjects.ToStringHelper&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Google Guava&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/guava&quot;&gt;Google Guavaの&lt;/a&gt; &lt;a href=&quot;https://google.github.io/guava/releases/19.0/api/docs/com/google/common/base/MoreObjects.ToStringHelper.html&quot;&gt; &lt;code&gt;MoreObjects.ToStringHelper&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70dc92f77ec608e9e4151c2aa8352d2597cbac08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;2f92e0f4&lt;/code&gt; the hashcode of the object.</source>
          <target state="translated">&lt;code&gt;2f92e0f4&lt;/code&gt; オブジェクトのハッシュコード。</target>
        </trans-unit>
        <trans-unit id="0400003eb41a1b3090511c53cf3421565e153bff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@&lt;/code&gt; - joins the string together</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; -文字列を結合します</target>
        </trans-unit>
        <trans-unit id="a40ceae9c81ffb13e36e1a265829fbd32c90cb2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&lt;/code&gt; - the array contains a class or interface</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; -配列にはクラスまたはインターフェースが含まれます</target>
        </trans-unit>
        <trans-unit id="a696f7e7a7ece36a534221e2b8f4239ff8fb822c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[&lt;/code&gt; - an single-dimensional array (as opposed to &lt;code&gt;[[&lt;/code&gt; or &lt;code&gt;[[[&lt;/code&gt; etc.)</source>
          <target state="translated">&lt;code&gt;[&lt;/code&gt; -1次元配列（ &lt;code&gt;[[&lt;/code&gt; または &lt;code&gt;[[[&lt;/code&gt; などとは対照的に）</target>
        </trans-unit>
        <trans-unit id="55b03d114f4fb5370dc0cf64ca8bacd3ca01ed6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;com.foo.MyType&lt;/code&gt;  - the name of the class, i.e. the class is &lt;code&gt;MyType&lt;/code&gt; in the package &lt;code&gt;com.foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;com.foo.MyType&lt;/code&gt; -クラスの名前。つまり、クラスはパッケージ &lt;code&gt;com.foo&lt;/code&gt; のMyTypeです。</target>
        </trans-unit>
        <trans-unit id="5be0c08d354bd447a6fa62f9482ae7a4a09440cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;java.lang.String&lt;/code&gt; - the type of objects in the array</source>
          <target state="translated">&lt;code&gt;java.lang.String&lt;/code&gt; -配列内のオブジェクトのタイプ</target>
        </trans-unit>
        <trans-unit id="40990b79f9ecb4a9c5dc0ff9ad9baf2ed41ef678" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;strong&gt;Note&lt;/strong&gt;: this is intended as a canonical Q&amp;amp;A about this subject.&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;strong&gt;注&lt;/strong&gt; ：これは、この主題に関する正規のQ＆Aとして意図されています。&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="ff1a24e07b8ba0d43389838552d3884901f3f7b7" translate="yes" xml:space="preserve">
          <source>A result such as &lt;code&gt;com.foo.MyType@2f92e0f4&lt;/code&gt; can therefore be explained as:</source>
          <target state="translated">したがって、 &lt;code&gt;com.foo.MyType@2f92e0f4&lt;/code&gt; などの結果は、次のように説明できます。</target>
        </trans-unit>
        <trans-unit id="961f0cc9cd1ab708ddd7770183d497225d0c2449" translate="yes" xml:space="preserve">
          <source>A similar thing happened when I tried to print an array of &lt;code&gt;Person&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; オブジェクトの配列を出力しようとしたときにも、同様のことが起こりました。</target>
        </trans-unit>
        <trans-unit id="bcceb009ad155bf0683ec256cd9360f5b35ebdef" translate="yes" xml:space="preserve">
          <source>All Java objects have a &lt;code&gt;toString()&lt;/code&gt; method, which is invoked when you try and print the object.</source>
          <target state="translated">すべてのJavaオブジェクトには &lt;code&gt;toString()&lt;/code&gt; メソッドがあり、オブジェクトを印刷しようとすると呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="c06887acda5b3d043c4fd201e926e1841b366ef3" translate="yes" xml:space="preserve">
          <source>As you can see, it generates a String by concatenating, several attributes of the class, for primitives it will print their values and for reference types it will use their class type (in this case to string method of Test2).</source>
          <target state="translated">ご覧のように、クラスのいくつかの属性を連結して文字列を生成し、プリミティブにはその値を表示し、参照型にはそのクラスの型を使用します(この場合はTest2のstringメソッドになります)。</target>
        </trans-unit>
        <trans-unit id="1e64d12cd48728897acd000de39440069d632ec9" translate="yes" xml:space="preserve">
          <source>Auto-generating the Output</source>
          <target state="translated">出力の自動生成</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="38f2c9c75ee52d49a612b8740b3e34e8e9806231" translate="yes" xml:space="preserve">
          <source>Bear in mind that &lt;code&gt;toString()&lt;/code&gt; is just &lt;em&gt;one&lt;/em&gt; way for an object to be converted to a string. Typically this output should fully describe your object in a clear and concise manner. A better &lt;code&gt;toString()&lt;/code&gt; for our &lt;code&gt;Person&lt;/code&gt; class might be:</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; は、オブジェクトを文字列に変換するための&lt;em&gt;1つの&lt;/em&gt;方法にすぎないことに注意してください。 通常、この出力では、オブジェクトを明確かつ簡潔に完全に説明する必要があります。 &lt;code&gt;Person&lt;/code&gt; クラスのより優れた &lt;code&gt;toString()&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6e7c91666600e1c4c0df6faf3644bc3b05f5525e" translate="yes" xml:space="preserve">
          <source>By default, every Object in Java has the &lt;code&gt;toString()&lt;/code&gt; method which outputs the ObjectType@HashCode.</source>
          <target state="translated">デフォルトでは、Javaのすべてのオブジェクトには、ObjectType @ HashCodeを出力する &lt;code&gt;toString()&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="eac42dbab0425b24df9f855c74c2e10cda91a486" translate="yes" xml:space="preserve">
          <source>Customizing the Output</source>
          <target state="translated">出力のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="56d4ba2d9b94237dfea8ea43c1bddbd48a7f8dc5" translate="yes" xml:space="preserve">
          <source>Every class in Java has the &lt;code&gt;toString()&lt;/code&gt; method in it by default, which is called if you pass some object of that class to &lt;code&gt;System.out.println()&lt;/code&gt;. By default, this call returns the className@hashcode of that object.</source>
          <target state="translated">Javaのすべてのクラスには、デフォルトで &lt;code&gt;toString()&lt;/code&gt; メソッドが含まれています。これは、そのクラスのオブジェクトを &lt;code&gt;System.out.println()&lt;/code&gt; に渡すと呼び出されます。 デフォルトでは、この呼び出しはそのオブジェクトのclassName @ hashcodeを返します。</target>
        </trans-unit>
        <trans-unit id="c9625b67f340e003d76be2098d533885ab1ac656" translate="yes" xml:space="preserve">
          <source>How do I print my Java object without getting “SomeType@2f92e0f4”</source>
          <target state="translated">どうすれば &quot;SomeType@2f92e0f4 &quot;を取得せずにJavaオブジェクトを印刷することができますか?</target>
        </trans-unit>
        <trans-unit id="9bcfab57f0f7e4547c12d0192ce1abc7333fd3c3" translate="yes" xml:space="preserve">
          <source>I got the output: &lt;code&gt;[Lcom.foo.Person;@28a418fc&lt;/code&gt;</source>
          <target state="translated">私は出力を得ました： &lt;code&gt;[Lcom.foo.Person;@28a418fc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c122ff602ee618db89dbf99d5a3d76e78aed6c8f" translate="yes" xml:space="preserve">
          <source>I have a class defined as follows:</source>
          <target state="translated">私は以下のようにクラスを定義しています。</target>
        </trans-unit>
        <trans-unit id="349eb94ac5303a55657e0f09823036db73c725cd" translate="yes" xml:space="preserve">
          <source>I prefer to use a utility function which uses &lt;a href=&quot;https://github.com/google/gson&quot;&gt;GSON&lt;/a&gt; to de-serialize the Java object into JSON string.</source>
          <target state="translated">私は、 &lt;a href=&quot;https://github.com/google/gson&quot;&gt;GSON&lt;/a&gt;を使用してJavaオブジェクトをJSON文字列に逆シリアル化するユーティリティ関数を使用することを好みます。</target>
        </trans-unit>
        <trans-unit id="8f8fbc80400d94814acfd8e834e39490909fe54e" translate="yes" xml:space="preserve">
          <source>I think apache provides a better util class which provides a function to get the string</source>
          <target state="translated">文字列を取得するための関数を提供する、より良いutilクラスを提供していると思います。</target>
        </trans-unit>
        <trans-unit id="6751204fa7e4710a7e9f0540accdd1109d5b35a0" translate="yes" xml:space="preserve">
          <source>I tried to print an instance of my class:</source>
          <target state="translated">クラスのインスタンスを印刷しようとしました。</target>
        </trans-unit>
        <trans-unit id="b39f77448deac32b7d7be9a4a408f5a5c9aad413" translate="yes" xml:space="preserve">
          <source>If you Directly print any object of Person It will the &lt;code&gt;ClassName@HashCode&lt;/code&gt; to the Code.</source>
          <target state="translated">Personのオブジェクトを直接印刷すると、 &lt;code&gt;ClassName@HashCode&lt;/code&gt; がコードに出力されます。</target>
        </trans-unit>
        <trans-unit id="cc95249658e22bd0c538adeb1b116b5bca6a1c74" translate="yes" xml:space="preserve">
          <source>If you have a &lt;strong&gt;multi-dimensional array&lt;/strong&gt;, you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt;&lt;code&gt;Arrays.deepToString()&lt;/code&gt;&lt;/a&gt; to achieve the same sort of output.</source>
          <target state="translated">&lt;strong&gt;多次元配列&lt;/strong&gt;がある場合は、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot;&gt; &lt;code&gt;Arrays.deepToString()&lt;/code&gt; &lt;/a&gt;を使用して同じ種類の出力を実現できます。</target>
        </trans-unit>
        <trans-unit id="523625eb37d92a2a4109cd2bd165cf7346dbe5fc" translate="yes" xml:space="preserve">
          <source>If you have an array of objects, you can call &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#toString-java.lang.Object:A-&quot;&gt;&lt;code&gt;Arrays.toString()&lt;/code&gt;&lt;/a&gt; to produce a simple representation of the contents of the array. For instance, consider this array of &lt;code&gt;Person&lt;/code&gt; objects:</source>
          <target state="translated">オブジェクトの配列がある場合は、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#toString-java.lang.Object:A-&quot;&gt; &lt;code&gt;Arrays.toString()&lt;/code&gt; &lt;/a&gt;を呼び出して、配列の内容の単純な表現を生成できます。 たとえば、次の &lt;code&gt;Person&lt;/code&gt; オブジェクトの配列を考えてみます。</target>
        </trans-unit>
        <trans-unit id="5300a0c7dd21324aa29907fcfadd05117fdecf9e" translate="yes" xml:space="preserve">
          <source>If you look at the Object class (Parent class of all classes in Java) the toString() method implementation is</source>
          <target state="translated">Object クラス (Java のすべてのクラスの親クラス)を見ると、toString()メソッドの実装は次のようになっています。</target>
        </trans-unit>
        <trans-unit id="7cf31643edecc64cc05a804ec120ae5be96e13ca" translate="yes" xml:space="preserve">
          <source>If you want more meaningfull information then you need to override the &lt;code&gt;toString()&lt;/code&gt; method in your class.</source>
          <target state="translated">より意味のある情報が必要な場合は、クラスの &lt;code&gt;toString()&lt;/code&gt; メソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="2edd517b0efe3c803b2b7cd5cda0d7d7a29f722f" translate="yes" xml:space="preserve">
          <source>If you want to focus on just one aspect of your object or include a lot of jazzy formatting, you might be better to define a separate method instead, e.g. &lt;code&gt;String toElegantReport() {...}&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの1つの側面のみに焦点を当てる場合、または多くのジャジーなフォーマットを含める場合は、代わりに別のメソッドを定義することをお勧めします &lt;code&gt;String toElegantReport() {...}&lt;/code&gt; 例： String toElegantReport（）{...}） 。</target>
        </trans-unit>
        <trans-unit id="e1550fea3e31d1fa041989c117990a7a1aec538f" translate="yes" xml:space="preserve">
          <source>If you want to print the person names, there are many ways.</source>
          <target state="translated">人名を印刷したい場合は、いろいろな方法があると思いますが、その中でも「人名を印刷したい」という場合は、「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」「人名を印刷したい」などの方法があります。</target>
        </trans-unit>
        <trans-unit id="f5822655423e7e94bad3bddd90570190f717c8bf" translate="yes" xml:space="preserve">
          <source>In Eclipse,
Go to your class,
Right click-&amp;gt;source-&amp;gt;Generate &lt;code&gt;toString()&lt;/code&gt;;</source>
          <target state="translated">Eclipseで、クラスに移動し、右クリック-&amp;gt; source-&amp;gt; Generate &lt;code&gt;toString()&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="7d0cc1fcc5471488084af379f3a23491fe0ddc8c" translate="yes" xml:space="preserve">
          <source>In intellij you can auto generate toString method by  pressing alt+inset and then selecting toString() here is an out put for a test class:</source>
          <target state="translated">intellijでは、alt+insetを押してからtoString()を選択することで、toStringメソッドを自動生成することができます。</target>
        </trans-unit>
        <trans-unit id="6708cc2a1a46569feb572babb1941e2a174a3cd8" translate="yes" xml:space="preserve">
          <source>In your second case when you are trying to print the array, it prints &lt;code&gt;[Lcom.foo.Person;@28a418fc&lt;/code&gt; the Array type and it's hashcode.</source>
          <target state="translated">2番目のケースでは、配列を印刷しようとすると、 &lt;code&gt;[Lcom.foo.Person;@28a418fc&lt;/code&gt; 配列タイプとそのハッシュコードが出力されます。</target>
        </trans-unit>
        <trans-unit id="37c8b67991a23a86aad651a7e8150c508f5fe097" translate="yes" xml:space="preserve">
          <source>It will override the &lt;code&gt;toString()&lt;/code&gt; method and will print the object of that class.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; メソッドをオーバーライドし、そのクラスのオブジェクトを出力します。</target>
        </trans-unit>
        <trans-unit id="fda04ccfe818e1db90eb94eb7c9e096c0df982e7" translate="yes" xml:space="preserve">
          <source>Many &lt;a href=&quot;http://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;IDEs&lt;/a&gt; offer support for auto-generating a &lt;code&gt;toString()&lt;/code&gt; method, based on the fields in the class. See docs for &lt;a href=&quot;http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-dialog-tostring.htm&quot;&gt;Eclipse&lt;/a&gt; and &lt;a href=&quot;https://plugins.jetbrains.com/plugin/182?pr=idea&quot;&gt;IntelliJ&lt;/a&gt;, for example.</source>
          <target state="translated">多くの&lt;a href=&quot;http://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;IDE&lt;/a&gt;は、クラスのフィールドに基づいて、 &lt;code&gt;toString()&lt;/code&gt; メソッドの自動生成をサポートしています。 たとえば、 &lt;a href=&quot;http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-dialog-tostring.htm&quot;&gt;Eclipse&lt;/a&gt;および&lt;a href=&quot;https://plugins.jetbrains.com/plugin/182?pr=idea&quot;&gt;IntelliJの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="67fb4c150939982e1b08294b54fa43e323339ad7" translate="yes" xml:space="preserve">
          <source>Most collections will produce a pretty output based on calling &lt;code&gt;.toString()&lt;/code&gt; on every element.</source>
          <target state="translated">ほとんどのコレクションは、すべての要素で &lt;code&gt;.toString()&lt;/code&gt; を呼び出すことに基づいて、きれいな出力を生成します。</target>
        </trans-unit>
        <trans-unit id="e0c605cbea18409b2a3068fb6102291b5cb9f972" translate="yes" xml:space="preserve">
          <source>Note:  this is a call to a &lt;em&gt;static&lt;/em&gt; method called &lt;code&gt;toString()&lt;/code&gt; in the Arrays class, which is different to what we've been discussing above.</source>
          <target state="translated">注：これは、Arraysクラスの &lt;code&gt;toString()&lt;/code&gt; という&lt;em&gt;静的&lt;/em&gt;メソッドの呼び出しです。これは、これまでに説明してきたものとは異なります。</target>
        </trans-unit>
        <trans-unit id="1df4d233ae27b162a392e95c4bd8084b28b9c8c7" translate="yes" xml:space="preserve">
          <source>Now if we print a &lt;code&gt;Person&lt;/code&gt;, we see their name rather than &lt;code&gt;com.foo.Person@12345678&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;Person&lt;/code&gt; を印刷すると、 &lt;code&gt;com.foo.Person@12345678&lt;/code&gt; ではなく、名前が表示されます。</target>
        </trans-unit>
        <trans-unit id="b99222aa0ad104d9ab76a494b0e802494730aafb" translate="yes" xml:space="preserve">
          <source>Now if you try to Use the object of &lt;code&gt;Person&lt;/code&gt; then it will print the name</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; オブジェクトを使用しようとすると、名前が出力されます</target>
        </trans-unit>
        <trans-unit id="6dd87d8dd5f4eb64b162464c9ba5889ddcf4de7e" translate="yes" xml:space="preserve">
          <source>Now when you print the person object using &lt;code&gt;System.out.prtinln(personObj);&lt;/code&gt; it will print the name of the person instead of the classname and hashcode.</source>
          <target state="translated">ここで、 &lt;code&gt;System.out.prtinln(personObj);&lt;/code&gt; を使用して人物オブジェクトを印刷します。 クラス名とハッシュコードの代わりに人の名前を出力します。</target>
        </trans-unit>
        <trans-unit id="1522176cb84425901971299c06b09272ffef54bc" translate="yes" xml:space="preserve">
          <source>Printing groups of objects</source>
          <target state="translated">オブジェクトのグループを印刷する</target>
        </trans-unit>
        <trans-unit id="81c0c6519860209f67139f0306632ad27465f389" translate="yes" xml:space="preserve">
          <source>Several popular Java libraries offer this feature as well. Some examples include:</source>
          <target state="translated">いくつかの人気のあるJavaライブラリもこの機能を提供しています。いくつかの例を挙げます。</target>
        </trans-unit>
        <trans-unit id="9fbbe9b455dc2fb46bfeb23162f873f5608bfeb0" translate="yes" xml:space="preserve">
          <source>So you just need to ensure your list elements define a nice &lt;code&gt;toString()&lt;/code&gt; as discussed above.</source>
          <target state="translated">したがって、上で説明したように、リスト要素が適切な &lt;code&gt;toString()&lt;/code&gt; を定義していることを確認する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="cbd6d9c391131f62d9e8b9ee030c9c448b945089" translate="yes" xml:space="preserve">
          <source>So you've created a nice &lt;code&gt;toString()&lt;/code&gt; for your class. What happens if that class is placed into an array or a collection?</source>
          <target state="translated">クラスの素敵な &lt;code&gt;toString()&lt;/code&gt; を作成しました。 そのクラスが配列またはコレクションに配置されるとどうなりますか？</target>
        </trans-unit>
        <trans-unit id="47b5385ba7a7c632504378461d0f352831f0ae16" translate="yes" xml:space="preserve">
          <source>The name of array classes look a little different, which is explained well in the Javadocs for &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--&quot;&gt;&lt;code&gt;Class.getName()&lt;/code&gt;&lt;/a&gt;. For instance, &lt;code&gt;[Ljava.lang.String&lt;/code&gt; means:</source>
          <target state="translated">配列クラスの名前は少し異なります。これは、Javadocの&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--&quot;&gt; &lt;code&gt;Class.getName()&lt;/code&gt; で&lt;/a&gt;よく説明されています。 たとえば、 &lt;code&gt;[Ljava.lang.String&lt;/code&gt; は次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="48852070c9bdc4709f7f4c608480ffb653747f1b" translate="yes" xml:space="preserve">
          <source>There might be other ways as well. Hope this helps. :)</source>
          <target state="translated">他の方法もあるかもしれません。お役に立てるといいですね。:)</target>
        </trans-unit>
        <trans-unit id="b4db6d90b12a1703591e24e0164e7aa47f62156f" translate="yes" xml:space="preserve">
          <source>This method is defined in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; class (the superclass of all Java objects). The &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--&quot;&gt;&lt;code&gt;Object.toString()&lt;/code&gt;&lt;/a&gt; method returns a fairly ugly looking string, composed of the name of the class, an &lt;code&gt;@&lt;/code&gt; symbol and the &lt;a href=&quot;https://stackoverflow.com/questions/3563847/what-is-the-use-of-hashcode-in-java&quot;&gt;hashcode&lt;/a&gt; of the object in hexadecimal. The code for this looks like:</source>
          <target state="translated">このメソッドは、 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;クラス（すべてのJavaオブジェクトのスーパークラス）で定義されています。 &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--&quot;&gt; &lt;code&gt;Object.toString()&lt;/code&gt; &lt;/a&gt;メソッドは、クラスの名前、 &lt;code&gt;@&lt;/code&gt; 記号、16進数のオブジェクトの&lt;a href=&quot;https://stackoverflow.com/questions/3563847/what-is-the-use-of-hashcode-in-java&quot;&gt;ハッシュコード&lt;/a&gt;で構成された、見苦しい文字列を返します。 このコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8c868814138d5ac92bd1e7ca1926a0874698ea98" translate="yes" xml:space="preserve">
          <source>To print something different when you call &lt;code&gt;System.out.println(myObject)&lt;/code&gt;, you must &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/override.html&quot;&gt;override&lt;/a&gt; the &lt;code&gt;toString()&lt;/code&gt; method in your own class. Here's a simple example:</source>
          <target state="translated">&lt;code&gt;System.out.println(myObject)&lt;/code&gt; を呼び出すときに別のものを印刷するには、独自のクラスの &lt;code&gt;toString()&lt;/code&gt; メソッドを&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/override.html&quot;&gt;オーバーライド&lt;/a&gt;する必要があります 。 以下に簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="c31e09c8910dd0159dcd66c8348f1c28ddf65108" translate="yes" xml:space="preserve">
          <source>What does this output mean? How do I change this output so it contains the name of my person? And how do I print collections of my objects?</source>
          <target state="translated">この出力は何を意味するのですか?この出力に自分の人の名前が含まれるように変更するにはどうすればいいですか?また、私のオブジェクトのコレクションを印刷するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="1830245d412826b793d7e01fd0d0998de41ebf80" translate="yes" xml:space="preserve">
          <source>Which would print, e.g., &lt;code&gt;Person[name=Henry]&lt;/code&gt;. That's a really useful piece of data for debugging/testing.</source>
          <target state="translated">たとえば、 &lt;code&gt;Person[name=Henry]&lt;/code&gt; ます。 これは、デバッグ/テストに非常に役立つデータです。</target>
        </trans-unit>
        <trans-unit id="c412dec27ca0bb208f6caa6a19cf72975e9eb06e" translate="yes" xml:space="preserve">
          <source>You can override the toString method of a class to get different output. See this example</source>
          <target state="translated">クラスの toString メソッドをオーバーライドすることで、異なる出力を得ることができます。この例を参照してください。</target>
        </trans-unit>
        <trans-unit id="a7601bce70c633048b623c43329b1aae2834a60f" translate="yes" xml:space="preserve">
          <source>You could print it the java 8 way (using streams and method reference).</source>
          <target state="translated">java 8 の方法(ストリームとメソッド参照を使用)で印刷することができます。</target>
        </trans-unit>
        <trans-unit id="c65d4328676c58aa325f479ae19f3b3c5ff811ed" translate="yes" xml:space="preserve">
          <source>You could print it using Arrays.toString(). This seems the simplest to me.</source>
          <target state="translated">Arrays.toString()を使って印刷することができます。これが一番シンプルなように思えます。</target>
        </trans-unit>
        <trans-unit id="1569f2e36886bc1e9e91cc31375e33a7a7ebc3e1" translate="yes" xml:space="preserve">
          <source>You could write your own function that iterates each person and prints</source>
          <target state="translated">各人をイテレートして表示する関数を自分で書くことができます。</target>
        </trans-unit>
        <trans-unit id="73787fbee40ef45d47925910561a6da2b254d93a" translate="yes" xml:space="preserve">
          <source>but I got the following output: &lt;code&gt;com.foo.Person@2f92e0f4&lt;/code&gt;.</source>
          <target state="translated">しかし、私は次の出力を得ました： &lt;code&gt;com.foo.Person@2f92e0f4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48350a49f28b303cf3ee1264402152f509dc9885" translate="yes" xml:space="preserve">
          <source>in your case &lt;code&gt;com.foo.Person@2f92e0f4&lt;/code&gt; is getting printed . Where &lt;code&gt;Person&lt;/code&gt; is a class to which object belongs and &lt;code&gt;2f92e0f4&lt;/code&gt; is hashCode of the Object.</source>
          <target state="translated">あなたの場合、 &lt;code&gt;com.foo.Person@2f92e0f4&lt;/code&gt; が出力されます。 ここで、 &lt;code&gt;Person&lt;/code&gt; はオブジェクトが属するクラスで、 &lt;code&gt;2f92e0f4&lt;/code&gt; はオブジェクトのhashCodeです。</target>
        </trans-unit>
        <trans-unit id="de77a9f22365ca2a3414504733f5e52677687353" translate="yes" xml:space="preserve">
          <source>whenever you print any object in Java then toString() will be call. Now it's up to you if you override  toString() then your method will call other Object class method call.</source>
          <target state="translated">Java で任意のオブジェクトを印刷するときはいつでも toString()が呼び出されます。toString()をオーバーライドすると、あなたのメソッドが他のObjectクラスのメソッドを呼び出すようになります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
