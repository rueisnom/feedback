<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://stackoverflow.com/questions/29308898">
    <body>
      <group id="29308898">
        <trans-unit id="2752855f86e81cbc5154cab54610b261a2e91dd1" translate="yes" xml:space="preserve">
          <source>1) json_decode($json_string) // it returns object</source>
          <target state="translated">1) json_decode ($ json_string) // 객체를 반환</target>
        </trans-unit>
        <trans-unit id="3a9b3e1936ec1cffd13d5116129b0ec50285ff8d" translate="yes" xml:space="preserve">
          <source>2) json_decode($json_string,true) // it returns array</source>
          <target state="translated">2) json_decode ($ json_string, true) // 배열을 반환</target>
        </trans-unit>
        <trans-unit id="69f8d34be8774de101926cdfadd9a408b2bbf299" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/null&quot;&gt;nulls&lt;/a&gt; (a special type of its own)</source>
          <target state="translated">&lt;a href=&quot;http://php.net/null&quot;&gt;널&lt;/a&gt; (자체의 특수한 유형)</target>
        </trans-unit>
        <trans-unit id="acf1afc3ec49516747096f6f6144d83a567e107d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;json_decode&lt;/code&gt; requires the string to be a valid &lt;code&gt;json&lt;/code&gt; else it will return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;json_decode&lt;/code&gt; 는 문자열이 유효한 &lt;code&gt;json&lt;/code&gt; 이어야하며 그렇지 않으면 &lt;code&gt;NULL&lt;/code&gt; 을 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="e46f8e788ce98317de3fc82656a9c5ca6acdeb89" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;json_decode()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;json_decode()&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 을 반환&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="114ff7e9200a3b3d255a1d3d52560e7863fd1499" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing array elements&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;배열 요소에 액세스&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eeeeb16c5b851d403174f859553076d6fc7baf47" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing associative array items&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;연관 배열 항목에 액세스&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e66329add1a2d9a20eea37e50e76af66b84cfb89" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing nested items&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;중첩 된 항목에 액세스&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c91cca3e70aacff08438032ff96e2e4f27cca13" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing object properties&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;객체 속성에 액세스&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="497c6aa6080bf706a21900c0d08a49d17ba69f88" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Data doesn't fit in memory&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;데이터가 메모리에 맞지 않습니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b0457e08b0834af77efa5a137ac03a4acea5779d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Don't know how the data is structured&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;데이터가 어떻게 구성되어 있는지 모름&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6ee72acac4c97845dc852b6773c99c693582580" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to sort it&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;정렬하는 방법&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b30068a7b6accc37c9a95a65720fe0efadfb212a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Intro&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Intro&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9011baae076f1ea7acce37b38b25b17402a5182" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Object property name contains a special character&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;객체 속성 이름에 특수 문자가 포함되어 있습니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d1735db9972e9b6acede08fcfcbc8a2b8044e9a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Passing &lt;code&gt;true&lt;/code&gt; as the second argument to &lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode()&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode ()에&lt;/a&gt; 두 번째 인수로 &lt;code&gt;true&lt;/code&gt; 전달&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c5c7e3cf59c69ff5f20ae9874b253beab320cb93" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Someone put JSON in your JSON&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;누군가 JSON을 JSON에 넣습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8ff1f9032591ebf283b62753a8815882b515c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Input:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f4cbce6fb3c57b7593a7d962fa7bff29a74f4e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;We can decode json string into array using json_decode function in php&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHP에서 json_decode 함수를 사용하여 JSON 문자열을 배열로 디코딩 할 수 있습니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59078db18d4db45f225a5bafb36a572e538ca90e" translate="yes" xml:space="preserve">
          <source>Break the problem down into pieces that are easier to wrap your head around.</source>
          <target state="translated">문제를 머리를 감싸기 쉬운 조각으로 나누십시오.</target>
        </trans-unit>
        <trans-unit id="6769de79c80b86d3b646c62ed9de7bce9558aeb9" translate="yes" xml:space="preserve">
          <source>Check below code for converting json to array in &lt;code&gt;PHP&lt;/code&gt;,
If JSON is correct then &lt;code&gt;json_decode()&lt;/code&gt; works well, and will return an array,
But if malformed JSON, then It will return &lt;code&gt;NULL&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;PHP&lt;/code&gt; 에서 json을 배열로 변환하는 코드를 아래에서 확인하십시오 &lt;code&gt;json_decode()&lt;/code&gt; 이 정확하면 json_decode () 가 잘 작동하고 배열을 반환하지만 잘못된 JSON을 반환 &lt;code&gt;NULL&lt;/code&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="0edc024abb9688a5ea877692125f834a7f3b63fb" translate="yes" xml:space="preserve">
          <source>Chocolate with Sprinkles</source>
          <target state="translated">뿌리와 초콜릿</target>
        </trans-unit>
        <trans-unit id="313dc8a055a44a7ff53b59b53ce9a63054a7568b" translate="yes" xml:space="preserve">
          <source>Consider using &lt;code&gt;JSONPath&lt;/code&gt;&lt;a href=&quot;https://packagist.org/packages/flow/jsonpath&quot;&gt;https://packagist.org/packages/flow/jsonpath&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;JSONPath&lt;/code&gt; &lt;a href=&quot;https://packagist.org/packages/flow/jsonpath&quot;&gt;https://packagist.org/packages/flow/jsonpath&lt;/a&gt; 사용을 고려 하십시오</target>
        </trans-unit>
        <trans-unit id="d4bf0456effdcaeb906ef7470f9134e274ea01bb" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="translated">Eg.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ec729c97a6eb38d62d2506f8c5dfa8c6fba67d9a" translate="yes" xml:space="preserve">
          <source>Few Points to remember:</source>
          <target state="translated">기억해야 할 몇 가지 사항 :</target>
        </trans-unit>
        <trans-unit id="1f5a8dc9e9bce2a212ac7152227568de7313247a" translate="yes" xml:space="preserve">
          <source>First off you have a string. JSON is not an array, an object, or a data structure. &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; is a text-based serialization format - so a fancy string, but still just a string. Decode it in PHP by using &lt;a href=&quot;http://php.net/json_decode&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">먼저 문자열이 있습니다. JSON은 배열, 객체 또는 데이터 구조가 아닙니다. &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; 은 텍스트 기반 직렬화 형식이므로 멋진 문자열이지만 여전히 문자열입니다. &lt;a href=&quot;http://php.net/json_decode&quot;&gt; &lt;code&gt;json_decode()&lt;/code&gt; &lt;/a&gt; 를 사용하여 PHP로 디코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="4a6368c54a2a53f4e9d910e0d24f09d02ab96f39" translate="yes" xml:space="preserve">
          <source>Furthermore, if you want to read JSON files and extract its data (as it seems you're trying to perform this), see &lt;a href=&quot;https://github.com/MAChitgarha/JSONFile&quot;&gt;JSONFile&lt;/a&gt; package, which I have written it, too.</source>
          <target state="translated">또한 JSON 파일을 읽고 데이터를 추출하려면 (이 작업을 수행하려고하는 것처럼 보입니다) &lt;a href=&quot;https://github.com/MAChitgarha/JSONFile&quot;&gt;JSONFile&lt;/a&gt; 패키지도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="51582c3a29298d27f59d58e55eed54bce9e04ea2" translate="yes" xml:space="preserve">
          <source>Glazed</source>
          <target state="translated">Glazed</target>
        </trans-unit>
        <trans-unit id="884b24f59e95a256e6146a5fa471d1c12b840d09" translate="yes" xml:space="preserve">
          <source>Hit the decoded data with a &lt;a href=&quot;http://php.net/print_r&quot;&gt;&lt;code&gt;print_r()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://php.net/print_r&quot;&gt; &lt;code&gt;print_r()&lt;/code&gt; &lt;/a&gt; 디코딩 된 데이터를 기록하십시오.</target>
        </trans-unit>
        <trans-unit id="ed2c246f1b1d80cde84f94e5306784b2a0b71bc8" translate="yes" xml:space="preserve">
          <source>How do I decode this in PHP and access the resulting data?</source>
          <target state="translated">PHP에서 이것을 해독하고 결과 데이터에 어떻게 액세스합니까?</target>
        </trans-unit>
        <trans-unit id="c68851723d5873669d112250895894c7b43e3465" translate="yes" xml:space="preserve">
          <source>How do I extract data from JSON with PHP</source>
          <target state="translated">PHP로 JSON에서 데이터를 추출하는 방법</target>
        </trans-unit>
        <trans-unit id="9c7b5ce88e1870e05505d44f36eade7d18551d2b" translate="yes" xml:space="preserve">
          <source>How to properly iterate through a big json file</source>
          <target state="translated">큰 json 파일을 올바르게 반복하는 방법</target>
        </trans-unit>
        <trans-unit id="8bd4beaea6157cafbaffca1541b3a462c40d9287" translate="yes" xml:space="preserve">
          <source>I have the JSON:</source>
          <target state="translated">JSON이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c99e38f7ae94ef1959d5af3e04efd367c854e896" translate="yes" xml:space="preserve">
          <source>I have written a package named &lt;code&gt;JSON&lt;/code&gt; (&lt;a href=&quot;https://github.com/MAChitgarha/JSON&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://packagist.org/packages/machitgarha/json&quot;&gt;Packagist&lt;/a&gt;). If you want to prevent overheads of using &lt;code&gt;json_*&lt;/code&gt; functions, you should try it.</source>
          <target state="translated">&lt;code&gt;JSON&lt;/code&gt; ( &lt;a href=&quot;https://github.com/MAChitgarha/JSON&quot;&gt;GitHub&lt;/a&gt; , &lt;a href=&quot;https://packagist.org/packages/machitgarha/json&quot;&gt;Packagist&lt;/a&gt; )이라는 패키지를 작성했습니다. &lt;code&gt;json_*&lt;/code&gt; 함수 사용의 오버 헤드를 방지하려면 시도해야합니다.</target>
        </trans-unit>
        <trans-unit id="10088da4f236ec0befb8e7b2d519554393ebe821" translate="yes" xml:space="preserve">
          <source>If malformed JSON, and you are expecting only array, then you can use this function,</source>
          <target state="translated">JSON이 잘못되어 배열 만 기대하는 경우이 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34e5980fb72b8750caa875a831fcc1af4aafc6ca" translate="yes" xml:space="preserve">
          <source>If malformed JSON, and you want to stop code execution, then you can use this function,</source>
          <target state="translated">JSON이 잘못되어 코드 실행을 중지하려는 경우이 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2adde3af6ad5c0d302a8d1b3f5701ed6baca1be6" translate="yes" xml:space="preserve">
          <source>If you can only get so far into it before you get lost - go that far and hit &lt;em&gt;that&lt;/em&gt; with &lt;code&gt;print_r()&lt;/code&gt;:</source>
          <target state="translated">길을 잃기 전에 너무 멀리 들어갈 수 있다면, 멀리 가서 &lt;code&gt;print_r()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21645eac83a12409ec9ad1505baccee1dfad8ac0" translate="yes" xml:space="preserve">
          <source>If you have an integer as property see: &lt;a href=&quot;https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers&quot;&gt;How to access object properties with names like integers?&lt;/a&gt; as reference.</source>
          <target state="translated">속성으로 정수가있는 경우 정수 &lt;a href=&quot;https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers&quot;&gt;와 같은 이름으로 객체 속성에 액세스하는 방법을&lt;/a&gt; 참조하십시오. 참고로.</target>
        </trans-unit>
        <trans-unit id="0ad97c55c1989c17b597f78824a412383228584b" translate="yes" xml:space="preserve">
          <source>If you need to change the max depth you're probably solving the wrong problem. Find out why you're getting such deeply nested data (e.g. the service you're querying that's generating the JSON has a bug) and get that to not happen.</source>
          <target state="translated">최대 깊이를 변경해야하는 경우 잘못된 문제를 해결하고있을 수 있습니다. 이렇게 깊이 중첩 된 데이터를 얻는 이유 (예 : JSON을 생성하는 쿼리하는 서비스에 버그가 있음)를 찾아서 발생하지 않도록하십시오.</target>
        </trans-unit>
        <trans-unit id="a0a5a270ed47b9c3bbcd6e1134447c0cf668c6c3" translate="yes" xml:space="preserve">
          <source>If your JSON is too large for &lt;code&gt;json_decode()&lt;/code&gt; to handle at once things start to get tricky. See:</source>
          <target state="translated">JSON이 너무 커서 &lt;code&gt;json_decode()&lt;/code&gt; 가 한 번에 처리하기가 어려워 지기 시작합니다. 보다:</target>
        </trans-unit>
        <trans-unit id="e1cf13c6e5b355588073169bdf3d255a5c992faa" translate="yes" xml:space="preserve">
          <source>In the event of a failure to decode, &lt;a href=&quot;http://php.net/manual/en/function.json-last-error.php&quot;&gt;&lt;code&gt;json_last_error()&lt;/code&gt;&lt;/a&gt; can be used to determine the exact nature of the error.</source>
          <target state="translated">디코딩에 실패한 경우 &lt;a href=&quot;http://php.net/manual/en/function.json-last-error.php&quot;&gt; &lt;code&gt;json_last_error()&lt;/code&gt; &lt;/a&gt; 를 사용하여 오류의 정확한 특성을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55c634f61f7da4f089010efdb4ccf3a71fb56c2c" translate="yes" xml:space="preserve">
          <source>It contains elements nested more than 512 levels deep. This default max depth can be overridden by passing an integer as the third argument to &lt;a href=&quot;http://php.net/json_decode&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">512 레벨 이상 중첩 된 요소를 포함합니다. &lt;a href=&quot;http://php.net/json_decode&quot;&gt; &lt;code&gt;json_decode()&lt;/code&gt; &lt;/a&gt; 정수를 세 번째 인수로 전달 하여이 기본 최대 깊이를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b994aa4f680589403787665c1e4cabb9faf33e8e" translate="yes" xml:space="preserve">
          <source>It'll tell you where you have objects, where you have arrays, along with the names and values of their members.</source>
          <target state="translated">개체의 위치, 배열의 위치 및 멤버 이름 및 값을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="8ce4ac08341b5c5493687402a1b3a6fb8b84dda4" translate="yes" xml:space="preserve">
          <source>It's ridiculous but it happens - there's JSON encoded as a string within your JSON. Decode, access the string as usual, decode &lt;em&gt;that&lt;/em&gt;, and eventually get to what you need.</source>
          <target state="translated">그것은 우스운 일이지만 발생합니다 .JSON 내에 문자열로 인코딩 된 JSON이 있습니다. 디코딩하고, 평소와 같이 문자열에 액세스하고, 디코딩 &lt;em&gt;하고&lt;/em&gt; , 필요한 것을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="d6478da7119748fbd44544b80a3faaf90e1a55e7" translate="yes" xml:space="preserve">
          <source>Iterate over it with &lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt; &lt;code&gt;foreach&lt;/code&gt; 로&lt;/a&gt; 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="07396d943ed83c6384166bcaeac7d0e7e92e49d8" translate="yes" xml:space="preserve">
          <source>Look at the JSON - where you see curly brackets &lt;code&gt;{}&lt;/code&gt; expect an object, where you see square brackets &lt;code&gt;[]&lt;/code&gt; expect an array.</source>
          <target state="translated">JSON-중괄호 &lt;code&gt;{}&lt;/code&gt; 가 객체를 기대하고 대괄호 &lt;code&gt;[]&lt;/code&gt; 가 배열을 기대하는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="77930252fd8fa4c7fa6fc965a1105a8bfebaa73b" translate="yes" xml:space="preserve">
          <source>Make sure you pass in &lt;code&gt;utf8&lt;/code&gt; content, or &lt;code&gt;json_decode&lt;/code&gt; may error out and just return a &lt;code&gt;NULL&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 컨텐츠를 전달하십시오. 그렇지 않으면 &lt;code&gt;json_decode&lt;/code&gt; 가 오류를 발생시키고 &lt;code&gt;NULL&lt;/code&gt; 값만 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c80325e96c6a28da569ba88e6bf7452bae2dd98" translate="yes" xml:space="preserve">
          <source>Maple</source>
          <target state="translated">Maple</target>
        </trans-unit>
        <trans-unit id="cd39a88014f9484fb239d7deacc0266b05bef734" translate="yes" xml:space="preserve">
          <source>Objects will be instances of &lt;a href=&quot;http://php.net/manual/en/reserved.classes.php&quot;&gt;stdClass&lt;/a&gt;, a built-in class which is just a &lt;a href=&quot;https://stackoverflow.com/questions/931407/what-is-stdclass-in-php&quot;&gt;generic thing&lt;/a&gt; that's not important here.</source>
          <target state="translated">객체는 내장 클래스 인 &lt;a href=&quot;http://php.net/manual/en/reserved.classes.php&quot;&gt;stdClass의&lt;/a&gt; 인스턴스가 될 것입니다.이 클래스는 여기서 중요하지 않은 &lt;a href=&quot;https://stackoverflow.com/questions/931407/what-is-stdclass-in-php&quot;&gt;일반적인 것&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7951f73febcc4d57f6c90c33bfd76e7140f4ce9e" translate="yes" xml:space="preserve">
          <source>Or mess about with any of the &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot;&gt;bazillion built-in array functions&lt;/a&gt;.</source>
          <target state="translated">또는 &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot;&gt;bazillion 내장 배열 함수&lt;/a&gt; 중 하나를 혼동하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a76cf9887b6f0853816551224e51090fbd36556" translate="yes" xml:space="preserve">
          <source>Prints</source>
          <target state="translated">Prints</target>
        </trans-unit>
        <trans-unit id="2c14ea558a8b5cd95e5b0ec80de4db211d6add31" translate="yes" xml:space="preserve">
          <source>Processing large JSON files in PHP</source>
          <target state="translated">PHP에서 큰 JSON 파일 처리</target>
        </trans-unit>
        <trans-unit id="9caf0fa2989d8b72bfefaff6b654d9199bc0569d" translate="yes" xml:space="preserve">
          <source>Read the documentation for whatever it is you're getting the JSON from.</source>
          <target state="translated">JSON을 얻는 데 필요한 문서를 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="bdd397b6896115da863daca96099c32ba78cf83b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki&quot;&gt;the wiki&lt;/a&gt;, or &lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki/a-quick-tutorial&quot;&gt;the quick tutorial&lt;/a&gt; to get familiar with it.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki&quot;&gt;wiki&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki/a-quick-tutorial&quot;&gt;빠른 학습서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="90f8880d8a52bd21b7baf9a3220428e90ef31e19" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://stackoverflow.com/q/17364127/3942918&quot;&gt;Reference: all basic ways to sort arrays and data in PHP&lt;/a&gt;.</source>
          <target state="translated">참조 : &lt;a href=&quot;https://stackoverflow.com/q/17364127/3942918&quot;&gt;PHP에서 배열과 데이터를 정렬하는 모든 기본 방법을 참조&lt;/a&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="441338da2d560d3fb6535d2b3ed7c04fe85f2d97" translate="yes" xml:space="preserve">
          <source>Sometimes you'll have an object property name that contains something like a hyphen &lt;code&gt;-&lt;/code&gt; or at sign &lt;code&gt;@&lt;/code&gt; which can't be used in a literal identifier. Instead you can use a string literal within curly braces to address it.</source>
          <target state="translated">때로는 하이픈 (또는 기호 &lt;code&gt;@&lt;/code&gt; )을 포함하는 리터럴 식별자로 사용할 수없는 객체 속성 이름이 있습니다. 대신 중괄호 안에 문자열 리터럴을 사용하여이를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f073154b1644abc3f7257a1c2757da10347a106" translate="yes" xml:space="preserve">
          <source>Take a look at it in &lt;a href=&quot;http://array.include-once.org/&quot;&gt;this handy interactive JSON explorer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://array.include-once.org/&quot;&gt;이 편리한 대화식 JSON 탐색기&lt;/a&gt; 에서 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="7406743f64cc6c07760c10b480bd8845edd236c6" translate="yes" xml:space="preserve">
          <source>The JSON consists entirely of just that, &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">JSON은 전적으로 &lt;code&gt;null&lt;/code&gt; 로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="2442be36fb465da64e5bb4e87ac4cc9ce90611a7" translate="yes" xml:space="preserve">
          <source>The JSON is invalid - check the result of &lt;a href=&quot;http://php.net/manual/en/function.json-last-error-msg.php&quot;&gt;&lt;code&gt;json_last_error_msg&lt;/code&gt;&lt;/a&gt; or put it through something like &lt;a href=&quot;http://jsonlint.com/&quot;&gt;JSONLint&lt;/a&gt;.</source>
          <target state="translated">JSON이 유효하지 않습니다. &lt;a href=&quot;http://php.net/manual/en/function.json-last-error-msg.php&quot;&gt; &lt;code&gt;json_last_error_msg&lt;/code&gt; &lt;/a&gt; 의 결과를 확인하거나 JSONLint 와 같은 것을 통해 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="3d780f16e3b42f56d3fb26352c730fe8157cf7d2" translate="yes" xml:space="preserve">
          <source>The properties of objects and the elements of arrays might be more objects and/or arrays - you can simply continue to access their properties and members as usual, e.g. &lt;code&gt;$object-&amp;gt;array[0]-&amp;gt;etc&lt;/code&gt;.</source>
          <target state="translated">객체의 속성과 배열의 요소는 더 많은 객체 및 / 또는 배열 일 수 있습니다. 평소처럼 &lt;code&gt;$object-&amp;gt;array[0]-&amp;gt;etc&lt;/code&gt; 의 속성과 멤버에 계속 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a6a1d25e385353d0dda258c3b65d863ddb7a911" translate="yes" xml:space="preserve">
          <source>The value of key 'bar' is 'bar value'</source>
          <target state="translated">키 'bar'의 값은 'bar value'입니다.</target>
        </trans-unit>
        <trans-unit id="ac644c37f6457f5f26e2ecf6bd47e2213b743dc6" translate="yes" xml:space="preserve">
          <source>The value of key 'baz' is 'baz value'</source>
          <target state="translated">키 'baz'의 값은 'baz value'입니다.</target>
        </trans-unit>
        <trans-unit id="33ea6e0acbc774174cf7e3f962ae01e3c88eb69f" translate="yes" xml:space="preserve">
          <source>The value of key 'foo' is 'foo value'</source>
          <target state="translated">키 'foo'의 값은 'foo value'입니다.</target>
        </trans-unit>
        <trans-unit id="c0b00f15f532bea82c0eabb7d7d8bb1ad50180ee" translate="yes" xml:space="preserve">
          <source>There is a pretty clear explanation of how to use it and parse a JSON-file &lt;strong&gt;avoiding all the loops&lt;/strong&gt; proposed. If you are familiar with &lt;code&gt;XPath&lt;/code&gt; for &lt;code&gt;XML&lt;/code&gt; you will start loving this approach.</source>
          <target state="translated">그것을 사용하고 제안 된 &lt;strong&gt;모든 루프를 피하는&lt;/strong&gt; JSON 파일을 구문 분석하는 방법에 대한 명확한 설명이 있습니다. &lt;code&gt;XPath&lt;/code&gt; for &lt;code&gt;XML&lt;/code&gt; 에 익숙하다면이 방법을 좋아할 것입니다.</target>
        </trans-unit>
        <trans-unit id="ba7185e7aa1e780ba3e753717ea9f75267e158a3" translate="yes" xml:space="preserve">
          <source>There's nothing special about them. They are not &quot;JSON objects&quot; or &quot;JSON arrays.&quot; You've decoded the JSON - you now have &lt;a href=&quot;http://php.net/types&quot;&gt;basic everyday PHP types&lt;/a&gt;.</source>
          <target state="translated">그들에게는 특별한 것이 없습니다. &quot;JSON 객체&quot;또는 &quot;JSON 배열&quot;이 아닙니다. JSON을 해독했습니다. 이제 &lt;a href=&quot;http://php.net/types&quot;&gt;일상적인 기본 PHP 유형이 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b51e7f8ff6a298727f432253e4694ba796cfbc2b" translate="yes" xml:space="preserve">
          <source>Therein you might find:</source>
          <target state="translated">거기에서 찾을 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="4f29befcbe4e29df9bf414eb73b8dbcd997387e3" translate="yes" xml:space="preserve">
          <source>These are the things that can be encoded in JSON. Or more accurately, these are PHP's versions of the things that can be encoded in JSON.</source>
          <target state="translated">이것들은 JSON으로 인코딩 할 수있는 것들입니다. 보다 정확하게는 JSON으로 인코딩 할 수있는 PHP 버전입니다.</target>
        </trans-unit>
        <trans-unit id="27cceebd272d13eb2945b185356c5f7721b8b0be" translate="yes" xml:space="preserve">
          <source>This happens because either:</source>
          <target state="translated">이것은 다음 중 하나 때문에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b81b85f7f6ede979b84731a198555392d1a7b359" translate="yes" xml:space="preserve">
          <source>This is intended to be a general reference question and answer covering many of the never-ending &lt;em&gt;&quot;How do I access data in my JSON?&quot;&lt;/em&gt; questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.</source>
          <target state="translated">이것은 끝없는 &lt;em&gt;&quot;JSON의 데이터에 어떻게 액세스합니까?&quot;를&lt;/em&gt; 다루는 일반적인 참조 질문 및 답변입니다. 질문. PHP에서 JSON을 디코딩하고 결과에 액세스하는 광범위한 기본 사항을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="e314bb2b86ba403080cb5a33b8b9e74e2d0ed131" translate="yes" xml:space="preserve">
          <source>When decoding a JSON &lt;em&gt;object&lt;/em&gt; to an associative PHP array, you can iterate both keys and values using the &lt;a href=&quot;https://www.php.net/manual/control-structures.foreach.php&quot;&gt;&lt;code&gt;foreach (array_expression as $key =&amp;gt; $value)&lt;/code&gt;&lt;/a&gt; syntax, eg</source>
          <target state="translated">JSON &lt;em&gt;객체&lt;/em&gt; 를 연관 PHP 배열로 디코딩 할 때 &lt;a href=&quot;https://www.php.net/manual/control-structures.foreach.php&quot;&gt; &lt;code&gt;foreach (array_expression as $key =&amp;gt; $value)&lt;/code&gt; &lt;/a&gt; 구문을 사용하여 키와 값을 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="449889ddaa9a29a36d8eb21fdbb9218f861ddc74" translate="yes" xml:space="preserve">
          <source>When you do this, instead of objects you'll get associative arrays - arrays with strings for keys. Again you access the elements thereof as usual, e.g. &lt;code&gt;$array['key']&lt;/code&gt;.</source>
          <target state="translated">이렇게하면 객체 대신 연관 배열-키 문자열이있는 배열이 나타납니다. 다시 한 번 &lt;code&gt;$array['key']&lt;/code&gt; 와 같이 평소와 같이 해당 요소에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="42e5f3663fb8993b0bfc82858debaeccf0614acf" translate="yes" xml:space="preserve">
          <source>You access the &lt;a href=&quot;http://php.net/manual/en/language.oop5.properties.php&quot;&gt;properties&lt;/a&gt; of one of these objects the same way you would for the public non-static properties of any other object, e.g. &lt;code&gt;$object-&amp;gt;property&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$object-&amp;gt;property&lt;/code&gt; 와 같이 다른 객체의 공개 비 정적 속성과 동일한 방식으로 이러한 객체 중 하나의 &lt;a href=&quot;http://php.net/manual/en/language.oop5.properties.php&quot;&gt;속성&lt;/a&gt; 에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="ed4e63deec28994c1e8fb7cbf71af9ae2d362ce4" translate="yes" xml:space="preserve">
          <source>You access the elements of one of these arrays the same way you would for any other array, e.g. &lt;a href=&quot;http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing&quot;&gt;&lt;code&gt;$array[0]&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing&quot;&gt; &lt;code&gt;$array[0]&lt;/code&gt; &lt;/a&gt; 과 같은 다른 배열과 같은 방식으로 이러한 배열 중 하나의 요소에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="028990a689d50b008006d01cbd478cebc801a74a" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode()&lt;/a&gt; to convert a json string to a PHP object/array.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode ()&lt;/a&gt; 를 사용하여 json 문자열을 PHP 객체 / 배열로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4859b67c7541f6ebb6e0075bea9a8f1983098ec" translate="yes" xml:space="preserve">
          <source>You can use any function depends on your requirement,</source>
          <target state="translated">모든 기능을 사용할 수 있으며 요구 사항에 따라</target>
        </trans-unit>
        <trans-unit id="cd1019d6b78309125b5018bd893e497abed427c7" translate="yes" xml:space="preserve">
          <source>and check the output:</source>
          <target state="translated">출력을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="318aaa8c4835cf4124cb77ad98a3a3714e61abaf" translate="yes" xml:space="preserve">
          <source>compound types: &lt;a href=&quot;http://php.net/object&quot;&gt;objects&lt;/a&gt; and &lt;a href=&quot;http://php.net/array&quot;&gt;arrays&lt;/a&gt;.</source>
          <target state="translated">복합 유형 : &lt;a href=&quot;http://php.net/object&quot;&gt;객체&lt;/a&gt; 및 &lt;a href=&quot;http://php.net/array&quot;&gt;배열&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a2428f5f708e3c3da0bb469ae8e530d254117dac" translate="yes" xml:space="preserve">
          <source>scalars: &lt;a href=&quot;http://php.net/string&quot;&gt;strings&lt;/a&gt;, &lt;a href=&quot;http://php.net/int&quot;&gt;ints&lt;/a&gt;, &lt;a href=&quot;http://php.net/float&quot;&gt;floats&lt;/a&gt;, and &lt;a href=&quot;http://php.net/bool&quot;&gt;bools&lt;/a&gt;</source>
          <target state="translated">스칼라 : &lt;a href=&quot;http://php.net/string&quot;&gt;strings&lt;/a&gt; , &lt;a href=&quot;http://php.net/int&quot;&gt;int&lt;/a&gt; , &lt;a href=&quot;http://php.net/float&quot;&gt;float&lt;/a&gt; 및 &lt;a href=&quot;http://php.net/bool&quot;&gt;bools&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
