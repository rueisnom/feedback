<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/29308898">
    <body>
      <group id="29308898">
        <trans-unit id="2752855f86e81cbc5154cab54610b261a2e91dd1" translate="yes" xml:space="preserve">
          <source>1) json_decode($json_string) // it returns object</source>
          <target state="translated">1)json_decode($json_string)/オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="3a9b3e1936ec1cffd13d5116129b0ec50285ff8d" translate="yes" xml:space="preserve">
          <source>2) json_decode($json_string,true) // it returns array</source>
          <target state="translated">2)json_decode($json_string,true)/配列を返します。</target>
        </trans-unit>
        <trans-unit id="69f8d34be8774de101926cdfadd9a408b2bbf299" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://php.net/null&quot;&gt;nulls&lt;/a&gt; (a special type of its own)</source>
          <target state="translated">&lt;a href=&quot;http://php.net/null&quot;&gt;null&lt;/a&gt; （独自の特殊なタイプ）</target>
        </trans-unit>
        <trans-unit id="acf1afc3ec49516747096f6f6144d83a567e107d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;json_decode&lt;/code&gt; requires the string to be a valid &lt;code&gt;json&lt;/code&gt; else it will return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;json_decode&lt;/code&gt; では、文字列が有効な &lt;code&gt;json&lt;/code&gt; である必要があり、そうでない場合は &lt;code&gt;NULL&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="e46f8e788ce98317de3fc82656a9c5ca6acdeb89" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;json_decode()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;json_decode()&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返します&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="114ff7e9200a3b3d255a1d3d52560e7863fd1499" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing array elements&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;配列要素へのアクセス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eeeeb16c5b851d403174f859553076d6fc7baf47" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing associative array items&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;連想配列項目へのアクセス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e66329add1a2d9a20eea37e50e76af66b84cfb89" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing nested items&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ネストされたアイテムへのアクセス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c91cca3e70aacff08438032ff96e2e4f27cca13" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing object properties&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;オブジェクトプロパティへのアクセス&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="497c6aa6080bf706a21900c0d08a49d17ba69f88" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Data doesn't fit in memory&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;データがメモリに収まりません&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b0457e08b0834af77efa5a137ac03a4acea5779d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Don't know how the data is structured&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;データの構造がわからない&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6ee72acac4c97845dc852b6773c99c693582580" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to sort it&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;並べ替え方法&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b30068a7b6accc37c9a95a65720fe0efadfb212a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Intro&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Intro&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e9011baae076f1ea7acce37b38b25b17402a5182" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Object property name contains a special character&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;オブジェクトプロパティ名に特殊文字が含まれています&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d1735db9972e9b6acede08fcfcbc8a2b8044e9a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Passing &lt;code&gt;true&lt;/code&gt; as the second argument to &lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode()&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode（）の&lt;/a&gt; 2番目の引数として &lt;code&gt;true&lt;/code&gt; を渡す&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c5c7e3cf59c69ff5f20ae9874b253beab320cb93" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Someone put JSON in your JSON&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;誰かがあなたのJSONにJSONを入れました&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8ff1f9032591ebf283b62753a8815882b515c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Input:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f4cbce6fb3c57b7593a7d962fa7bff29a74f4e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;We can decode json string into array using json_decode function in php&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PHPでjson_decode関数を使用してjson文字列を配列にデコードできます&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="59078db18d4db45f225a5bafb36a572e538ca90e" translate="yes" xml:space="preserve">
          <source>Break the problem down into pieces that are easier to wrap your head around.</source>
          <target state="translated">頭を包み込むように問題を分解していきましょう。</target>
        </trans-unit>
        <trans-unit id="6769de79c80b86d3b646c62ed9de7bce9558aeb9" translate="yes" xml:space="preserve">
          <source>Check below code for converting json to array in &lt;code&gt;PHP&lt;/code&gt;,
If JSON is correct then &lt;code&gt;json_decode()&lt;/code&gt; works well, and will return an array,
But if malformed JSON, then It will return &lt;code&gt;NULL&lt;/code&gt;,</source>
          <target state="translated">以下のコードをチェックして、 &lt;code&gt;PHP&lt;/code&gt; でjsonを配列に変換します。JSONが正しい場合、 &lt;code&gt;json_decode()&lt;/code&gt; は正常に機能し 、配列を返し &lt;code&gt;NULL&lt;/code&gt; 、不正な形式のJSONの場合、 NULLを返します 。</target>
        </trans-unit>
        <trans-unit id="0edc024abb9688a5ea877692125f834a7f3b63fb" translate="yes" xml:space="preserve">
          <source>Chocolate with Sprinkles</source>
          <target state="translated">スプリンクルとチョコレート</target>
        </trans-unit>
        <trans-unit id="313dc8a055a44a7ff53b59b53ce9a63054a7568b" translate="yes" xml:space="preserve">
          <source>Consider using &lt;code&gt;JSONPath&lt;/code&gt;&lt;a href=&quot;https://packagist.org/packages/flow/jsonpath&quot;&gt;https://packagist.org/packages/flow/jsonpath&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;JSONPath&lt;/code&gt; &lt;a href=&quot;https://packagist.org/packages/flow/jsonpath&quot;&gt;https://packagist.org/packages/flow/jsonpathの&lt;/a&gt;使用を検討してください</target>
        </trans-unit>
        <trans-unit id="d4bf0456effdcaeb906ef7470f9134e274ea01bb" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="translated">Eg.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ec729c97a6eb38d62d2506f8c5dfa8c6fba67d9a" translate="yes" xml:space="preserve">
          <source>Few Points to remember:</source>
          <target state="translated">いくつかのポイントを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="1f5a8dc9e9bce2a212ac7152227568de7313247a" translate="yes" xml:space="preserve">
          <source>First off you have a string. JSON is not an array, an object, or a data structure. &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; is a text-based serialization format - so a fancy string, but still just a string. Decode it in PHP by using &lt;a href=&quot;http://php.net/json_decode&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">まず、あなたはひもを持っています。 JSONは、配列、オブジェクト、またはデータ構造ではありません。 &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt;はテキストベースのシリアル化フォーマットです。そのため、派手な文字列ですが、それでも単なる文字列です。 &lt;a href=&quot;http://php.net/json_decode&quot;&gt; &lt;code&gt;json_decode()&lt;/code&gt; &lt;/a&gt;を使用してPHPでデコードします。</target>
        </trans-unit>
        <trans-unit id="4a6368c54a2a53f4e9d910e0d24f09d02ab96f39" translate="yes" xml:space="preserve">
          <source>Furthermore, if you want to read JSON files and extract its data (as it seems you're trying to perform this), see &lt;a href=&quot;https://github.com/MAChitgarha/JSONFile&quot;&gt;JSONFile&lt;/a&gt; package, which I have written it, too.</source>
          <target state="translated">さらに、JSONファイルを読み取ってそのデータを抽出したい場合（これを実行しようとしているように思われる場合）は、私が作成した&lt;a href=&quot;https://github.com/MAChitgarha/JSONFile&quot;&gt;JSONFile&lt;/a&gt;パッケージも参照してください。</target>
        </trans-unit>
        <trans-unit id="51582c3a29298d27f59d58e55eed54bce9e04ea2" translate="yes" xml:space="preserve">
          <source>Glazed</source>
          <target state="translated">Glazed</target>
        </trans-unit>
        <trans-unit id="884b24f59e95a256e6146a5fa471d1c12b840d09" translate="yes" xml:space="preserve">
          <source>Hit the decoded data with a &lt;a href=&quot;http://php.net/print_r&quot;&gt;&lt;code&gt;print_r()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デコードされたデータを&lt;a href=&quot;http://php.net/print_r&quot;&gt; &lt;code&gt;print_r()&lt;/code&gt; &lt;/a&gt;でヒットします。</target>
        </trans-unit>
        <trans-unit id="ed2c246f1b1d80cde84f94e5306784b2a0b71bc8" translate="yes" xml:space="preserve">
          <source>How do I decode this in PHP and access the resulting data?</source>
          <target state="translated">これをPHPでデコードして、結果のデータにアクセスするにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="c68851723d5873669d112250895894c7b43e3465" translate="yes" xml:space="preserve">
          <source>How do I extract data from JSON with PHP</source>
          <target state="translated">PHPでJSONからデータを抽出する方法</target>
        </trans-unit>
        <trans-unit id="9c7b5ce88e1870e05505d44f36eade7d18551d2b" translate="yes" xml:space="preserve">
          <source>How to properly iterate through a big json file</source>
          <target state="translated">大きなjsonファイルを適切に反復処理する方法</target>
        </trans-unit>
        <trans-unit id="8bd4beaea6157cafbaffca1541b3a462c40d9287" translate="yes" xml:space="preserve">
          <source>I have the JSON:</source>
          <target state="translated">JSONを持っています。</target>
        </trans-unit>
        <trans-unit id="c99e38f7ae94ef1959d5af3e04efd367c854e896" translate="yes" xml:space="preserve">
          <source>I have written a package named &lt;code&gt;JSON&lt;/code&gt; (&lt;a href=&quot;https://github.com/MAChitgarha/JSON&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://packagist.org/packages/machitgarha/json&quot;&gt;Packagist&lt;/a&gt;). If you want to prevent overheads of using &lt;code&gt;json_*&lt;/code&gt; functions, you should try it.</source>
          <target state="translated">&lt;code&gt;JSON&lt;/code&gt; （ &lt;a href=&quot;https://github.com/MAChitgarha/JSON&quot;&gt;GitHub&lt;/a&gt; 、 &lt;a href=&quot;https://packagist.org/packages/machitgarha/json&quot;&gt;Packagist&lt;/a&gt; ）という名前のパッケージを作成しました。 &lt;code&gt;json_*&lt;/code&gt; 関数を使用することによるオーバーヘッドを回避したい場合は、試してみてください。</target>
        </trans-unit>
        <trans-unit id="10088da4f236ec0befb8e7b2d519554393ebe821" translate="yes" xml:space="preserve">
          <source>If malformed JSON, and you are expecting only array, then you can use this function,</source>
          <target state="translated">不正なJSONで、配列だけを期待している場合は、この関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="34e5980fb72b8750caa875a831fcc1af4aafc6ca" translate="yes" xml:space="preserve">
          <source>If malformed JSON, and you want to stop code execution, then you can use this function,</source>
          <target state="translated">不正なJSONがあって、コードの実行を停止したい場合は、この関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="2adde3af6ad5c0d302a8d1b3f5701ed6baca1be6" translate="yes" xml:space="preserve">
          <source>If you can only get so far into it before you get lost - go that far and hit &lt;em&gt;that&lt;/em&gt; with &lt;code&gt;print_r()&lt;/code&gt;:</source>
          <target state="translated">道に迷う前にそこまで入ることができるだけの場合-そこまで行っ&lt;em&gt;て&lt;/em&gt; 、 &lt;code&gt;print_r()&lt;/code&gt; でそれを打っ&lt;em&gt;て&lt;/em&gt;ください：</target>
        </trans-unit>
        <trans-unit id="21645eac83a12409ec9ad1505baccee1dfad8ac0" translate="yes" xml:space="preserve">
          <source>If you have an integer as property see: &lt;a href=&quot;https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers&quot;&gt;How to access object properties with names like integers?&lt;/a&gt; as reference.</source>
          <target state="translated">プロパティとして整数がある場合は、整数の&lt;a href=&quot;https://stackoverflow.com/questions/10333016/how-to-access-object-properties-with-names-like-integers&quot;&gt;ような名前のオブジェクトプロパティにアクセスする方法を&lt;/a&gt;参照してください。 参考として。</target>
        </trans-unit>
        <trans-unit id="0ad97c55c1989c17b597f78824a412383228584b" translate="yes" xml:space="preserve">
          <source>If you need to change the max depth you're probably solving the wrong problem. Find out why you're getting such deeply nested data (e.g. the service you're querying that's generating the JSON has a bug) and get that to not happen.</source>
          <target state="translated">最大深度を変更する必要がある場合は、おそらく間違った問題を解決しているでしょう。なぜそのような深い入れ子になったデータを取得しているのか (例えば JSON を生成しているクエリサービスにバグがあるなど)を調べて、そのようなことが起こらないようにしてください。</target>
        </trans-unit>
        <trans-unit id="a0a5a270ed47b9c3bbcd6e1134447c0cf668c6c3" translate="yes" xml:space="preserve">
          <source>If your JSON is too large for &lt;code&gt;json_decode()&lt;/code&gt; to handle at once things start to get tricky. See:</source>
          <target state="translated">JSONが大きすぎて &lt;code&gt;json_decode()&lt;/code&gt; で一度に処理できない場合は、扱いが難しくなります。 見る：</target>
        </trans-unit>
        <trans-unit id="e1cf13c6e5b355588073169bdf3d255a5c992faa" translate="yes" xml:space="preserve">
          <source>In the event of a failure to decode, &lt;a href=&quot;http://php.net/manual/en/function.json-last-error.php&quot;&gt;&lt;code&gt;json_last_error()&lt;/code&gt;&lt;/a&gt; can be used to determine the exact nature of the error.</source>
          <target state="translated">デコードに失敗した場合、 &lt;a href=&quot;http://php.net/manual/en/function.json-last-error.php&quot;&gt; &lt;code&gt;json_last_error()&lt;/code&gt; &lt;/a&gt;を使用してエラーの正確な性質を判別できます。</target>
        </trans-unit>
        <trans-unit id="55c634f61f7da4f089010efdb4ccf3a71fb56c2c" translate="yes" xml:space="preserve">
          <source>It contains elements nested more than 512 levels deep. This default max depth can be overridden by passing an integer as the third argument to &lt;a href=&quot;http://php.net/json_decode&quot;&gt;&lt;code&gt;json_decode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">512レベル以上の深さにネストされた要素が含まれています。 このデフォルトの最大深度は、 &lt;a href=&quot;http://php.net/json_decode&quot;&gt; &lt;code&gt;json_decode()&lt;/code&gt; の&lt;/a&gt; 3番目の引数として整数を渡すことでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="b994aa4f680589403787665c1e4cabb9faf33e8e" translate="yes" xml:space="preserve">
          <source>It'll tell you where you have objects, where you have arrays, along with the names and values of their members.</source>
          <target state="translated">オブジェクトがどこにあるのか、配列がどこにあるのか、メンバーの名前と値を教えてくれます。</target>
        </trans-unit>
        <trans-unit id="8ce4ac08341b5c5493687402a1b3a6fb8b84dda4" translate="yes" xml:space="preserve">
          <source>It's ridiculous but it happens - there's JSON encoded as a string within your JSON. Decode, access the string as usual, decode &lt;em&gt;that&lt;/em&gt;, and eventually get to what you need.</source>
          <target state="translated">それはばかげていますが、起こります-JSON内に文字列としてエンコードされたJSONがあります。 デコードし、通常どおり文字列にアクセスし、それをデコードし&lt;em&gt;て&lt;/em&gt; 、最終的に必要なものに到達します。</target>
        </trans-unit>
        <trans-unit id="d6478da7119748fbd44544b80a3faaf90e1a55e7" translate="yes" xml:space="preserve">
          <source>Iterate over it with &lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt;&lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/control-structures.foreach.php&quot;&gt; &lt;code&gt;foreach&lt;/code&gt; で&lt;/a&gt;繰り返します。</target>
        </trans-unit>
        <trans-unit id="07396d943ed83c6384166bcaeac7d0e7e92e49d8" translate="yes" xml:space="preserve">
          <source>Look at the JSON - where you see curly brackets &lt;code&gt;{}&lt;/code&gt; expect an object, where you see square brackets &lt;code&gt;[]&lt;/code&gt; expect an array.</source>
          <target state="translated">JSONを見てください-中括弧 &lt;code&gt;{}&lt;/code&gt; がオブジェクトを期待しているところ、角括弧 &lt;code&gt;[]&lt;/code&gt; が配列を期待しているところを見てください。</target>
        </trans-unit>
        <trans-unit id="77930252fd8fa4c7fa6fc965a1105a8bfebaa73b" translate="yes" xml:space="preserve">
          <source>Make sure you pass in &lt;code&gt;utf8&lt;/code&gt; content, or &lt;code&gt;json_decode&lt;/code&gt; may error out and just return a &lt;code&gt;NULL&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; コンテンツを渡すようにしてください。そうしないと、 &lt;code&gt;json_decode&lt;/code&gt; がエラーになり、 &lt;code&gt;NULL&lt;/code&gt; 値を返すだけになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c80325e96c6a28da569ba88e6bf7452bae2dd98" translate="yes" xml:space="preserve">
          <source>Maple</source>
          <target state="translated">Maple</target>
        </trans-unit>
        <trans-unit id="cd39a88014f9484fb239d7deacc0266b05bef734" translate="yes" xml:space="preserve">
          <source>Objects will be instances of &lt;a href=&quot;http://php.net/manual/en/reserved.classes.php&quot;&gt;stdClass&lt;/a&gt;, a built-in class which is just a &lt;a href=&quot;https://stackoverflow.com/questions/931407/what-is-stdclass-in-php&quot;&gt;generic thing&lt;/a&gt; that's not important here.</source>
          <target state="translated">オブジェクトは&lt;a href=&quot;http://php.net/manual/en/reserved.classes.php&quot;&gt;stdClassの&lt;/a&gt;インスタンスになります。これは組み込みクラスであり、ここでは重要ではない&lt;a href=&quot;https://stackoverflow.com/questions/931407/what-is-stdclass-in-php&quot;&gt;一般的なもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="7951f73febcc4d57f6c90c33bfd76e7140f4ce9e" translate="yes" xml:space="preserve">
          <source>Or mess about with any of the &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot;&gt;bazillion built-in array functions&lt;/a&gt;.</source>
          <target state="translated">または、 &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot;&gt;バジリオンの組み込み配列関数をいじってください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a76cf9887b6f0853816551224e51090fbd36556" translate="yes" xml:space="preserve">
          <source>Prints</source>
          <target state="translated">Prints</target>
        </trans-unit>
        <trans-unit id="2c14ea558a8b5cd95e5b0ec80de4db211d6add31" translate="yes" xml:space="preserve">
          <source>Processing large JSON files in PHP</source>
          <target state="translated">PHP で大きな JSON ファイルを処理する</target>
        </trans-unit>
        <trans-unit id="9caf0fa2989d8b72bfefaff6b654d9199bc0569d" translate="yes" xml:space="preserve">
          <source>Read the documentation for whatever it is you're getting the JSON from.</source>
          <target state="translated">JSON を取得しているものが何であれ、ドキュメントを読んでください。</target>
        </trans-unit>
        <trans-unit id="bdd397b6896115da863daca96099c32ba78cf83b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki&quot;&gt;the wiki&lt;/a&gt;, or &lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki/a-quick-tutorial&quot;&gt;the quick tutorial&lt;/a&gt; to get familiar with it.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki&quot;&gt;Wikiを&lt;/a&gt;参照するか&lt;a href=&quot;https://github.com/MAChitgarha/JSON/wiki/a-quick-tutorial&quot;&gt;、クイックチュートリアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90f8880d8a52bd21b7baf9a3220428e90ef31e19" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://stackoverflow.com/q/17364127/3942918&quot;&gt;Reference: all basic ways to sort arrays and data in PHP&lt;/a&gt;.</source>
          <target state="translated">参照： &lt;a href=&quot;https://stackoverflow.com/q/17364127/3942918&quot;&gt;リファレンス：PHPで配列とデータをソートするすべての基本的な方法&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="441338da2d560d3fb6535d2b3ed7c04fe85f2d97" translate="yes" xml:space="preserve">
          <source>Sometimes you'll have an object property name that contains something like a hyphen &lt;code&gt;-&lt;/code&gt; or at sign &lt;code&gt;@&lt;/code&gt; which can't be used in a literal identifier. Instead you can use a string literal within curly braces to address it.</source>
          <target state="translated">場合によっては、ハイフンなどのオブジェクトプロパティ名や、 &lt;code&gt;@&lt;/code&gt; 記号@を使用して、リテラル識別子で使用できないことがあります。 代わりに、中括弧内で文字列リテラルを使用してアドレス指定できます。</target>
        </trans-unit>
        <trans-unit id="9f073154b1644abc3f7257a1c2757da10347a106" translate="yes" xml:space="preserve">
          <source>Take a look at it in &lt;a href=&quot;http://array.include-once.org/&quot;&gt;this handy interactive JSON explorer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://array.include-once.org/&quot;&gt;この便利なインタラクティブJSONエクスプローラー&lt;/a&gt;でそれを見てください。</target>
        </trans-unit>
        <trans-unit id="7406743f64cc6c07760c10b480bd8845edd236c6" translate="yes" xml:space="preserve">
          <source>The JSON consists entirely of just that, &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">JSONはそれだけで構成される &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2442be36fb465da64e5bb4e87ac4cc9ce90611a7" translate="yes" xml:space="preserve">
          <source>The JSON is invalid - check the result of &lt;a href=&quot;http://php.net/manual/en/function.json-last-error-msg.php&quot;&gt;&lt;code&gt;json_last_error_msg&lt;/code&gt;&lt;/a&gt; or put it through something like &lt;a href=&quot;http://jsonlint.com/&quot;&gt;JSONLint&lt;/a&gt;.</source>
          <target state="translated">JSONが無効です&lt;a href=&quot;http://php.net/manual/en/function.json-last-error-msg.php&quot;&gt; &lt;code&gt;json_last_error_msg&lt;/code&gt; &lt;/a&gt;の結果を確認するか、 JSONLintなどを使用して&lt;a href=&quot;http://jsonlint.com/&quot;&gt;ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d780f16e3b42f56d3fb26352c730fe8157cf7d2" translate="yes" xml:space="preserve">
          <source>The properties of objects and the elements of arrays might be more objects and/or arrays - you can simply continue to access their properties and members as usual, e.g. &lt;code&gt;$object-&amp;gt;array[0]-&amp;gt;etc&lt;/code&gt;.</source>
          <target state="translated">オブジェクトのプロパティと配列の要素は、より多くのオブジェクトや配列である可能性があります。通常どおり、それらのプロパティとメンバーにアクセスし続けることができます（例： &lt;code&gt;$object-&amp;gt;array[0]-&amp;gt;etc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a6a1d25e385353d0dda258c3b65d863ddb7a911" translate="yes" xml:space="preserve">
          <source>The value of key 'bar' is 'bar value'</source>
          <target state="translated">キー'bar'の値は'bar value'です。</target>
        </trans-unit>
        <trans-unit id="ac644c37f6457f5f26e2ecf6bd47e2213b743dc6" translate="yes" xml:space="preserve">
          <source>The value of key 'baz' is 'baz value'</source>
          <target state="translated">キー'baz'の値は'baz値'です。</target>
        </trans-unit>
        <trans-unit id="33ea6e0acbc774174cf7e3f962ae01e3c88eb69f" translate="yes" xml:space="preserve">
          <source>The value of key 'foo' is 'foo value'</source>
          <target state="translated">キー 'foo' の値は 'foo value' です。</target>
        </trans-unit>
        <trans-unit id="c0b00f15f532bea82c0eabb7d7d8bb1ad50180ee" translate="yes" xml:space="preserve">
          <source>There is a pretty clear explanation of how to use it and parse a JSON-file &lt;strong&gt;avoiding all the loops&lt;/strong&gt; proposed. If you are familiar with &lt;code&gt;XPath&lt;/code&gt; for &lt;code&gt;XML&lt;/code&gt; you will start loving this approach.</source>
          <target state="translated">それを使用し、提案された&lt;strong&gt;すべてのループを回避して&lt;/strong&gt; JSONファイル&lt;strong&gt;を&lt;/strong&gt;解析する方法については、かなり明確な説明が&lt;strong&gt;あります&lt;/strong&gt; 。 &lt;code&gt;XPath&lt;/code&gt; for &lt;code&gt;XML&lt;/code&gt; に精通している場合は、このアプローチを使い始めるでしょう。</target>
        </trans-unit>
        <trans-unit id="ba7185e7aa1e780ba3e753717ea9f75267e158a3" translate="yes" xml:space="preserve">
          <source>There's nothing special about them. They are not &quot;JSON objects&quot; or &quot;JSON arrays.&quot; You've decoded the JSON - you now have &lt;a href=&quot;http://php.net/types&quot;&gt;basic everyday PHP types&lt;/a&gt;.</source>
          <target state="translated">それらについて特別なことは何もありません。 「JSONオブジェクト」や「JSON配列」ではありません。 JSONをデコードしました-これで&lt;a href=&quot;http://php.net/types&quot;&gt;基本的な日常のPHPタイプができました&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="b51e7f8ff6a298727f432253e4694ba796cfbc2b" translate="yes" xml:space="preserve">
          <source>Therein you might find:</source>
          <target state="translated">そこにあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4f29befcbe4e29df9bf414eb73b8dbcd997387e3" translate="yes" xml:space="preserve">
          <source>These are the things that can be encoded in JSON. Or more accurately, these are PHP's versions of the things that can be encoded in JSON.</source>
          <target state="translated">これらは、JSON でエンコードできるものです。より正確には、これらは JSON でエンコードできるものの PHP 版です。</target>
        </trans-unit>
        <trans-unit id="27cceebd272d13eb2945b185356c5f7721b8b0be" translate="yes" xml:space="preserve">
          <source>This happens because either:</source>
          <target state="translated">これはどちらかが原因で起こります。</target>
        </trans-unit>
        <trans-unit id="b81b85f7f6ede979b84731a198555392d1a7b359" translate="yes" xml:space="preserve">
          <source>This is intended to be a general reference question and answer covering many of the never-ending &lt;em&gt;&quot;How do I access data in my JSON?&quot;&lt;/em&gt; questions. It is here to handle the broad basics of decoding JSON in PHP and accessing the results.</source>
          <target state="translated">これは、終わりのない&lt;em&gt;「JSON内のデータにアクセスするにはどうすればよいですか？」の&lt;/em&gt;多くをカバーする一般的な参照の質問と回答を目的と&lt;em&gt;しています。&lt;/em&gt; 質問。 ここでは、PHPでJSONをデコードし、結果にアクセスするための広範な基本を処理します。</target>
        </trans-unit>
        <trans-unit id="e314bb2b86ba403080cb5a33b8b9e74e2d0ed131" translate="yes" xml:space="preserve">
          <source>When decoding a JSON &lt;em&gt;object&lt;/em&gt; to an associative PHP array, you can iterate both keys and values using the &lt;a href=&quot;https://www.php.net/manual/control-structures.foreach.php&quot;&gt;&lt;code&gt;foreach (array_expression as $key =&amp;gt; $value)&lt;/code&gt;&lt;/a&gt; syntax, eg</source>
          <target state="translated">JSON &lt;em&gt;オブジェクト&lt;/em&gt;を連想PHP配列にデコードする場合、 &lt;a href=&quot;https://www.php.net/manual/control-structures.foreach.php&quot;&gt; &lt;code&gt;foreach (array_expression as $key =&amp;gt; $value)&lt;/code&gt; &lt;/a&gt;構文を使用して、キーと値の両方を反復できます。たとえば、</target>
        </trans-unit>
        <trans-unit id="449889ddaa9a29a36d8eb21fdbb9218f861ddc74" translate="yes" xml:space="preserve">
          <source>When you do this, instead of objects you'll get associative arrays - arrays with strings for keys. Again you access the elements thereof as usual, e.g. &lt;code&gt;$array['key']&lt;/code&gt;.</source>
          <target state="translated">これを行うと、オブジェクトの代わりに連想配列（キーの文字列を含む配列）が得られます。 繰り返しますが、 &lt;code&gt;$array['key']&lt;/code&gt; ように、通常どおりその要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="42e5f3663fb8993b0bfc82858debaeccf0614acf" translate="yes" xml:space="preserve">
          <source>You access the &lt;a href=&quot;http://php.net/manual/en/language.oop5.properties.php&quot;&gt;properties&lt;/a&gt; of one of these objects the same way you would for the public non-static properties of any other object, e.g. &lt;code&gt;$object-&amp;gt;property&lt;/code&gt;.</source>
          <target state="translated">これらのオブジェクトの1つのプロパティには、他のオブジェクトのパブリックな非静的プロパティ（ &lt;code&gt;$object-&amp;gt;property&lt;/code&gt; と同じ方法でアクセスします 。</target>
        </trans-unit>
        <trans-unit id="ed4e63deec28994c1e8fb7cbf71af9ae2d362ce4" translate="yes" xml:space="preserve">
          <source>You access the elements of one of these arrays the same way you would for any other array, e.g. &lt;a href=&quot;http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing&quot;&gt;&lt;code&gt;$array[0]&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing&quot;&gt; &lt;code&gt;$array[0]&lt;/code&gt; &lt;/a&gt;ように、これらの配列のいずれかの要素に他の配列と同じ方法でアクセスします。</target>
        </trans-unit>
        <trans-unit id="028990a689d50b008006d01cbd478cebc801a74a" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode()&lt;/a&gt; to convert a json string to a PHP object/array.</source>
          <target state="translated">&lt;a href=&quot;http://php.net/json_decode&quot;&gt;json_decode（）&lt;/a&gt;を使用して、json文字列をPHPオブジェクト/配列に変換できます。</target>
        </trans-unit>
        <trans-unit id="e4859b67c7541f6ebb6e0075bea9a8f1983098ec" translate="yes" xml:space="preserve">
          <source>You can use any function depends on your requirement,</source>
          <target state="translated">要件に応じて任意の機能を使用することができます。</target>
        </trans-unit>
        <trans-unit id="cd1019d6b78309125b5018bd893e497abed427c7" translate="yes" xml:space="preserve">
          <source>and check the output:</source>
          <target state="translated">と出力を確認します。</target>
        </trans-unit>
        <trans-unit id="318aaa8c4835cf4124cb77ad98a3a3714e61abaf" translate="yes" xml:space="preserve">
          <source>compound types: &lt;a href=&quot;http://php.net/object&quot;&gt;objects&lt;/a&gt; and &lt;a href=&quot;http://php.net/array&quot;&gt;arrays&lt;/a&gt;.</source>
          <target state="translated">複合型： &lt;a href=&quot;http://php.net/object&quot;&gt;オブジェクト&lt;/a&gt;と&lt;a href=&quot;http://php.net/array&quot;&gt;配列&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2428f5f708e3c3da0bb469ae8e530d254117dac" translate="yes" xml:space="preserve">
          <source>scalars: &lt;a href=&quot;http://php.net/string&quot;&gt;strings&lt;/a&gt;, &lt;a href=&quot;http://php.net/int&quot;&gt;ints&lt;/a&gt;, &lt;a href=&quot;http://php.net/float&quot;&gt;floats&lt;/a&gt;, and &lt;a href=&quot;http://php.net/bool&quot;&gt;bools&lt;/a&gt;</source>
          <target state="translated">スカラー： &lt;a href=&quot;http://php.net/string&quot;&gt;strings&lt;/a&gt; 、 &lt;a href=&quot;http://php.net/bool&quot;&gt;ints&lt;/a&gt; 、 &lt;a href=&quot;http://php.net/float&quot;&gt;floats&lt;/a&gt; 、およびbools</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
