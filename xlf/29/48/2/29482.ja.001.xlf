<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/29482">
    <body>
      <group id="29482">
        <trans-unit id="a6b4c34af36c3a26b9050e38700b2fae77e146b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Usage:&lt;/em&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Usage:&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="81a72c38deebcc445e6e0b866809a7c979479e5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FYI:&lt;/strong&gt;  The question was about integers, which nobody mentioned will also explicitly convert in Enum.TryParse()</source>
          <target state="translated">&lt;strong&gt;参考：&lt;/strong&gt;質問は整数に関するものでしたが、Enum.TryParse（）で明示的に変換する人は誰もいません。</target>
        </trans-unit>
        <trans-unit id="eed27dac7346464d428cbb3ad292a3ac60f63205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How stuff works&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;もののしくみ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e973dcf220dd2052dbaad0156f4e3d9d0f1782da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B:&lt;/strong&gt; Here I try to parse value into int, because enum is by default &lt;strong&gt;int&lt;/strong&gt;
If you define enum like this which is &lt;strong&gt;byte&lt;/strong&gt; type.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; enumはデフォルトで&lt;strong&gt;int&lt;/strong&gt;なので、このように&lt;strong&gt;バイト&lt;/strong&gt;型であるenumを定義すると、intに値を解析しようとします。</target>
        </trans-unit>
        <trans-unit id="3379b289640323b42df642694c64588c9345c6d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The answer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;答え&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee947672ace063ceb0fbdd407b2cb329f46d107c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Update:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Update:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e2cee577f891dfa999a3a3c8e44916d9a7d5301" translate="yes" xml:space="preserve">
          <source>Also note that I'm explicit about the underlying type of the enum, even though the compiler actually checks this. I'm doing this to ensure I don't run into any surprises down the road. To see these surprises in action, you can use the following code (actually I've seen this happen a lot in database code):</source>
          <target state="translated">また、コンパイラが実際にチェックしているにもかかわらず、enumの基礎となる型を明示していることにも注意してください。これは、将来的にサプライズに遭遇しないようにするためです。これらの驚きを実際に見るには、以下のコードを使用することができます(実際にデータベースのコードでこのようなことが起こるのを何度も見てきました)。</target>
        </trans-unit>
        <trans-unit id="af726d70297878295862d1b77096a1ca802e71c5" translate="yes" xml:space="preserve">
          <source>Alternatively, use an extension method instead of a one-liner:</source>
          <target state="translated">あるいは、ワンライナーの代わりに拡張子のメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="30118d3b1c1343d010562aeede775b3215539795" translate="yes" xml:space="preserve">
          <source>An enum in .NET is a structure that maps a set of values (fields) to a basic type (the default is &lt;code&gt;int&lt;/code&gt;). However, you can actually choose the integral type that your enum maps to:</source>
          <target state="translated">.NETの列挙型は、一連の値（フィールド）を基本タイプ（デフォルトは &lt;code&gt;int&lt;/code&gt; ）にマップする構造です。 ただし、実際には、列挙型がマップする整数型を選択できます。</target>
        </trans-unit>
        <trans-unit id="b916f7a25f55c5eb6520db15c0b76814186e35ef" translate="yes" xml:space="preserve">
          <source>At this point I'd like to point out that &lt;code&gt;System.Enum&lt;/code&gt; is a value type, which basically means that &lt;code&gt;BarFlag&lt;/code&gt; will take up 4 bytes in memory and &lt;code&gt;Foo&lt;/code&gt; will take up 2 -- e.g. the size of the underlying type (it's actually more complicated than that, but hey...).</source>
          <target state="translated">この時点で、 &lt;code&gt;System.Enum&lt;/code&gt; は値型であることを指摘しておきます。これは、基本的に、 &lt;code&gt;BarFlag&lt;/code&gt; がメモリで4バイトを占め、 &lt;code&gt;Foo&lt;/code&gt; が2バイトを占めることを意味します。たとえば、基になる型のサイズ（実際にはより多くのそれよりも複雑ですが、ちょっと&amp;hellip;）。</target>
        </trans-unit>
        <trans-unit id="c0413c5f086e8cdb2bfd487f989b2746f23f64a8" translate="yes" xml:space="preserve">
          <source>Below is a nice utility class for Enums</source>
          <target state="translated">以下はEnumsのための素敵なユーティリティクラスです。</target>
        </trans-unit>
        <trans-unit id="c7a47f219b33d30b71c37b2d6cedfd8e57764dcc" translate="yes" xml:space="preserve">
          <source>Different ways to cast &lt;strong&gt;to and from&lt;/strong&gt;&lt;code&gt;Enum&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; &lt;strong&gt;との間で&lt;/strong&gt;キャスト&lt;strong&gt;する&lt;/strong&gt;さまざまな方法</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="7779fd1817467dd8f6953f720534704f90c6ddd5" translate="yes" xml:space="preserve">
          <source>Following is slightly better extension method</source>
          <target state="translated">以下のように、少し良い拡張方法があります。</target>
        </trans-unit>
        <trans-unit id="5ae38008949e7b592153d6dcf436b9d69ba3e6df" translate="yes" xml:space="preserve">
          <source>For numeric values, this is safer as it will return an object no matter what:</source>
          <target state="translated">数値の場合は、何があってもオブジェクトを返すので、これの方が安全です。</target>
        </trans-unit>
        <trans-unit id="c2ef2caf9f686790ead807567c0c38452b3e7637" translate="yes" xml:space="preserve">
          <source>From a string:</source>
          <target state="translated">文字列から。</target>
        </trans-unit>
        <trans-unit id="cbcb27e94932b1692382c6be1ee06baefc40110b" translate="yes" xml:space="preserve">
          <source>From a string: (Enum.Parse is out of Date, use Enum.TryParse)</source>
          <target state="translated">文字列から (Enum.Parseが古いので、Enum.TryParseを使用してください)</target>
        </trans-unit>
        <trans-unit id="12b5562011271b407c2a07a49b4ce89ba1ce76cf" translate="yes" xml:space="preserve">
          <source>From an int:</source>
          <target state="translated">intから。</target>
        </trans-unit>
        <trans-unit id="d6e762db23f1b10e1af14cabc983c5d6512a41ef" translate="yes" xml:space="preserve">
          <source>From number you can also</source>
          <target state="translated">番号からも可能です。</target>
        </trans-unit>
        <trans-unit id="f137a65c013374c3b55924d030a077022c736fe7" translate="yes" xml:space="preserve">
          <source>Here's an extension method that casts &lt;code&gt;Int32&lt;/code&gt; to &lt;code&gt;Enum&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Int32&lt;/code&gt; を &lt;code&gt;Enum&lt;/code&gt; にキャストする拡張メソッドを次に示します。</target>
        </trans-unit>
        <trans-unit id="47794330eb800548debab157559b2fc0f4e83f59" translate="yes" xml:space="preserve">
          <source>Here's my WCF Class.</source>
          <target state="translated">これが私のWCFクラスです。</target>
        </trans-unit>
        <trans-unit id="9deb0ddaed7c3d92f5ab73d23b1e00a58d3f529f" translate="yes" xml:space="preserve">
          <source>Here's the Extension method that gets the Description from the Enum.</source>
          <target state="translated">ここにEnumからDescriptionを取得するExtensionメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="22e52845e690ffb85ae425e49263d746dcf8be45" translate="yes" xml:space="preserve">
          <source>Here's the code:</source>
          <target state="translated">これがコードだ</target>
        </trans-unit>
        <trans-unit id="b6e2185fd5ad4957e164bfc5cd8182ea7426ad0d" translate="yes" xml:space="preserve">
          <source>How can an &lt;code&gt;int&lt;/code&gt; be cast to an &lt;code&gt;enum&lt;/code&gt; in C#?</source>
          <target state="translated">C＃で &lt;code&gt;int&lt;/code&gt; を &lt;code&gt;enum&lt;/code&gt; にキャストするにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="9ad1aa9a3f6e0c785db5f620ebedd2435fc941f5" translate="yes" xml:space="preserve">
          <source>How to cast int to enum</source>
          <target state="translated">intをenumにキャストする方法</target>
        </trans-unit>
        <trans-unit id="1d8e36314d06b04e852b52096b3001ab6ef713bd" translate="yes" xml:space="preserve">
          <source>I am using this piece of code to cast int to my enum:</source>
          <target state="translated">私はこのコードを使って、私のenumにintをキャストしています。</target>
        </trans-unit>
        <trans-unit id="e24428ad78c068750f7ef484b43a7e9a4fe1cfa6" translate="yes" xml:space="preserve">
          <source>I check my method for following inputs</source>
          <target state="translated">私のメソッドは以下の入力をチェックしています。</target>
        </trans-unit>
        <trans-unit id="ef81821754c4e47ec08734c09c477e8ac9757fe6" translate="yes" xml:space="preserve">
          <source>I don't know anymore where I get the part of this enum extension, but it is from stackoverflow. I am sorry for this! But I took this one and modified it for enums with Flags. 
For enums with Flags I did this:</source>
          <target state="translated">このenum拡張の部分がどこで手に入るのかわからなくなってしまったのですが、stackoverflowのものです。これは申し訳ありませんでした! しかし、私はこれを取って、Flagsを持つenumsのためにそれを修正しました。Flagsのあるenumsの場合はこうしました。</target>
        </trans-unit>
        <trans-unit id="457bca1c0a85aef6bdce1d0f33ebb2509ed1ceb5" translate="yes" xml:space="preserve">
          <source>I find it the best solution.</source>
          <target state="translated">それが一番の解決策だと思います。</target>
        </trans-unit>
        <trans-unit id="c1abcbaa6defe875aae077f24bbffd1ba2a91b12" translate="yes" xml:space="preserve">
          <source>I think to get a complete answer, people have to know how enums work internally in .NET.</source>
          <target state="translated">完全な答えを得るためには、.NETの内部で列挙型がどのように動作するかを知る必要があると思います。</target>
        </trans-unit>
        <trans-unit id="74b835001d4e6bc62e1f790cf0d31fbc11c56484" translate="yes" xml:space="preserve">
          <source>If that's not what you intended, use &lt;code&gt;Enum.IsDefined(typeof(MyEnum), 6)&lt;/code&gt; to check if the value you are casting maps to a defined enum.</source>
          <target state="translated">それが意図したものではない場合は、 &lt;code&gt;Enum.IsDefined(typeof(MyEnum), 6)&lt;/code&gt; を使用して、キャストする値が定義された列挙型にマップされているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="bf4ab29a7d928709689495b0cf054a253bc70f58" translate="yes" xml:space="preserve">
          <source>If you have an integer that acts as a bitmask and could represent one or more values in a [Flags] enumeration, you can use this code to parse the individual flag values into a list:</source>
          <target state="translated">ビットマスクとして動作し、[Flags]列挙の中で1つ以上の値を表すことができる整数を持っている場合、このコードを使用して個々のフラグの値をリストに解析することができます。</target>
        </trans-unit>
        <trans-unit id="c77c5c6c4624bf56bf3ab881363e00f95d0138bf" translate="yes" xml:space="preserve">
          <source>If you look at it from a IL point of view, a (normal, int) enum looks like this:</source>
          <target state="translated">IL的に見ると、(normal,int)のenumはこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="25c3f82e417c33466d85a7e97298a6e16ee7b4fb" translate="yes" xml:space="preserve">
          <source>If you're ready for the 4.0 &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET&lt;/a&gt; Framework, there's a new &lt;em&gt;Enum.TryParse()&lt;/em&gt; function that's very useful and plays well with the [Flags] attribute. See &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd783499.aspx&quot;&gt;Enum.TryParse Method (String, TEnum%)&lt;/a&gt;&lt;/em&gt;</source>
          <target state="translated">4.0 &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET&lt;/a&gt; Frameworkの準備ができている場合は、非常に便利で[Flags]属性とうまく機能する新しい&lt;em&gt;Enum.TryParse（）&lt;/em&gt;関数があります。 &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd783499.aspx&quot;&gt;Enum.TryParseメソッド（String、TEnum％）を&lt;/a&gt;&lt;/em&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="0d71bedbf598c6cb2ef567aed0bcbc08631a830d" translate="yes" xml:space="preserve">
          <source>Implementation:</source>
          <target state="translated">Implementation:</target>
        </trans-unit>
        <trans-unit id="36b8f0807dd5d7178d8b25b6cb15fd0a7aa1cc47" translate="yes" xml:space="preserve">
          <source>In my case, I needed to return the enum from a WCF service.  I also needed a friendly name, not just the enum.ToString().</source>
          <target state="translated">私の場合、WCF サービスから enum を返す必要がありました。また、enum.ToString()だけではなく、親しみやすい名前も必要でした。</target>
        </trans-unit>
        <trans-unit id="d62b78a00e6ea80925fcd64e5da7c05277653560" translate="yes" xml:space="preserve">
          <source>In this case the enum is mapped to the &lt;code&gt;short&lt;/code&gt; data type, which means it will be stored in memory as a short and will behave as a short when you cast and use it.</source>
          <target state="translated">この場合、列挙型は &lt;code&gt;short&lt;/code&gt; データ型にマップされます。 つまり 、列挙型はメモリにshortとして格納され、キャストして使用するとshortとして動作します。</target>
        </trans-unit>
        <trans-unit id="d2802b271f3bb077fa0c3629ce77db289d06e1a8" translate="yes" xml:space="preserve">
          <source>It can help you to convert any input data to user desired &lt;strong&gt;enum&lt;/strong&gt;. Suppose you have an enum like below which by default &lt;strong&gt;int&lt;/strong&gt;. Please add a &lt;strong&gt;Default&lt;/strong&gt; value at first of your enum. Which is used at helpers medthod when there is no match found with input value.</source>
          <target state="translated">入力データをユーザーが希望する&lt;strong&gt;列挙型&lt;/strong&gt;に変換するのに役立ちます。 以下のような列挙型があり、デフォルトでは&lt;strong&gt;intで&lt;/strong&gt;あるとします。 列挙型の最初に&lt;strong&gt;デフォルト&lt;/strong&gt;値を追加してください。 これは、入力値との一致が見つからないときにヘルパーmedthodで使用されます。</target>
        </trans-unit>
        <trans-unit id="33937f92c8a23f78b931b80e06bc320e4b039228" translate="yes" xml:space="preserve">
          <source>It honors bitwise flags even when the value is higher than the maximum possible. For example if you have an enum with possibilities &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt;, and &lt;em&gt;4&lt;/em&gt;, but the int is &lt;em&gt;9&lt;/em&gt;, it understands that as &lt;em&gt;1&lt;/em&gt; in absence of an &lt;em&gt;8&lt;/em&gt;. This lets you make data updates ahead of code updates.</source>
          <target state="translated">値が可能な最大値よりも高い場合でも、ビット単位のフラグを受け入れます。 たとえば、可能性が&lt;em&gt;1、2&lt;/em&gt; 、および&lt;em&gt;4の&lt;/em&gt;列挙型があり、intが&lt;em&gt;9&lt;/em&gt;である場合、 &lt;em&gt;8&lt;/em&gt;がない場合は&lt;em&gt;1&lt;/em&gt;と解釈されます。 これにより、コードを更新する前にデータを更新できます。</target>
        </trans-unit>
        <trans-unit id="669c26b60d45316558ef147c15c0c09988d60fc8" translate="yes" xml:space="preserve">
          <source>Just cast it:</source>
          <target state="translated">キャストして</target>
        </trans-unit>
        <trans-unit id="2c773194ea026cc993e378f1446632013f32a420" translate="yes" xml:space="preserve">
          <source>Note that casting to &lt;code&gt;e2&lt;/code&gt; also works! From the compiler perspective above this makes sense: the &lt;code&gt;value__&lt;/code&gt; field is simply filled with either 5 or 6 and when &lt;code&gt;Console.WriteLine&lt;/code&gt; calls &lt;code&gt;ToString()&lt;/code&gt;, the name of &lt;code&gt;e1&lt;/code&gt; is resolved while the name of &lt;code&gt;e2&lt;/code&gt; is not.</source>
          <target state="translated">&lt;code&gt;e2&lt;/code&gt; へのキャストも機能することに注意してください。 上記のコンパイラーの観点からは、これは理にかなっています &lt;code&gt;value__&lt;/code&gt; フィールドには5または6が入力され、 &lt;code&gt;Console.WriteLine&lt;/code&gt; が &lt;code&gt;ToString()&lt;/code&gt; を呼び出すと、 &lt;code&gt;e1&lt;/code&gt; の名前は解決されますが、 &lt;code&gt;e2&lt;/code&gt; の名前は解決されません。</target>
        </trans-unit>
        <trans-unit id="569ada5fc09d3eeddae46ad081c41b68fabf7331" translate="yes" xml:space="preserve">
          <source>Note that this assumes that the underlying type of the &lt;code&gt;enum&lt;/code&gt; is a signed 32-bit integer. If it were a different numerical type, you'd have to change the hardcoded 32 to reflect the bits in that type (or programatically derive it using &lt;code&gt;Enum.GetUnderlyingType()&lt;/code&gt;)</source>
          <target state="translated">これは、 &lt;code&gt;enum&lt;/code&gt; 型の基になる型が符号付き32ビット整数であると想定していることに注意してください。 別の数値型の場合は、ハードコードされた32を変更して、その型のビットを反映する必要があります（または &lt;code&gt;Enum.GetUnderlyingType()&lt;/code&gt; を使用してプログラムで導出する）。</target>
        </trans-unit>
        <trans-unit id="b3179c75c3fd8315efa725c8e57bb612845936a4" translate="yes" xml:space="preserve">
          <source>Note that using IsDefined is costly and even more than just casting, so it depends on your implementation to decide to use it or not.</source>
          <target state="translated">IsDefinedを使うとコストがかかる上にキャスト以上のコストがかかるので、使うか使わないかは実装次第ということに注意してください。</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="cb46ab1740f0e8d608e38f895692a452d2b8b436" translate="yes" xml:space="preserve">
          <source>Obviously, some of the enum type functionality will be lost, but for storing a bunch of database id constants, it seems like a pretty tidy solution.</source>
          <target state="translated">明らかに、いくつかの列挙型の機能は失われますが、データベースのid定数の束を格納するためには、それはかなり整然とした解決策のように思えます。</target>
        </trans-unit>
        <trans-unit id="2787dadf2ebcf4ca566176af819017f9f6a66212" translate="yes" xml:space="preserve">
          <source>Slightly getting away from the original question, but I found &lt;a href=&quot;https://stackoverflow.com/a/11057004/429973&quot;&gt;an answer to Stack&amp;nbsp;Overflow question &lt;em&gt;Get int value from enum&lt;/em&gt;&lt;/a&gt; useful. Create a static class with &lt;code&gt;public const int&lt;/code&gt; properties, allowing you to easily collect together a bunch of related &lt;code&gt;int&lt;/code&gt; constants, and then not have to cast them to &lt;code&gt;int&lt;/code&gt; when using them.</source>
          <target state="translated">元の質問から少し離れてい&lt;a href=&quot;https://stackoverflow.com/a/11057004/429973&quot;&gt;ますが、Stack Overflowの質問&lt;em&gt;Get entからのint値の&lt;/em&gt;回答は&lt;/a&gt;役に立ちました。 &lt;code&gt;public const int&lt;/code&gt; プロパティを使用して静的クラスを作成すると、関連する &lt;code&gt;int&lt;/code&gt; 定数を簡単にまとめることができ、使用時にそれらを &lt;code&gt;int&lt;/code&gt; にキャストする必要がありません。</target>
        </trans-unit>
        <trans-unit id="41341fed4fc5135c7817e04c2934f4db99145db9" translate="yes" xml:space="preserve">
          <source>So, if you have an integer that you want to map to an enum, the runtime only has to do 2 things: copy the 4 bytes and name it something else (the name of the enum). Copying is implicit because the data is stored as value type - this basically means that if you use unmanaged code, you can simply interchange enums and integers without copying data.</source>
          <target state="translated">つまり、もし整数をenumにマッピングしたい場合、ランタイムは4バイトをコピーすることと、それを別の名前(enumの名前)にすることの2つをしなければなりません。データは値型として保存されているので、コピーは暗黙のうちに行われます-これは基本的に、管理されていないコードを使用する場合、データをコピーせずに単純に列挙型と整数型を交換できることを意味します。</target>
        </trans-unit>
        <trans-unit id="545ab5091363b3b680b64a4657255d140cb67922" translate="yes" xml:space="preserve">
          <source>Sometimes you have an object to the &lt;code&gt;MyEnum&lt;/code&gt; type. Like</source>
          <target state="translated">&lt;code&gt;MyEnum&lt;/code&gt; タイプのオブジェクトがある場合があります。 お気に入り</target>
        </trans-unit>
        <trans-unit id="4e5c1cb438afe66a7a3ce7f0162632afd0f40816" translate="yes" xml:space="preserve">
          <source>Take the following example:</source>
          <target state="translated">次のような例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2d77855a284dd03f6fdaf1a7d511a263b8079230" translate="yes" xml:space="preserve">
          <source>Test Case</source>
          <target state="translated">テストケース</target>
        </trans-unit>
        <trans-unit id="4be24070f4f24438345c01c626b6fdfd6542d435" translate="yes" xml:space="preserve">
          <source>The code goes as shown below where &quot;red&quot; is the string and &quot;MyColors&quot; is the color ENUM which has the color constants.</source>
          <target state="translated">コードは以下のようになります。&quot;red &quot;は文字列、&quot;MyColors &quot;は色定数を持つ色ENUMです。</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="e1ceff90c2d44b022434871989ecfc3d783a6af6" translate="yes" xml:space="preserve">
          <source>This is an flags enumeration aware safe convert method:</source>
          <target state="translated">これはフラグ列挙を意識した安全な変換メソッドです。</target>
        </trans-unit>
        <trans-unit id="2f886dad395648b4e15cc32acf1f9703992e4e5b" translate="yes" xml:space="preserve">
          <source>This parses integers or strings to a target enum with partial matching in dot.NET 4.0 using generics like in Tawani's utility class above.  I am using it to convert command-line switch variables which may be incomplete.  Since an enum cannot be null, you should logically provide a default value.  It can be called like this:</source>
          <target state="translated">これは、dot.NET 4.0で、上のTawaniのユーティリティクラスのようなジェネリックなものを使って、整数や文字列を部分一致の対象となるenumにパースします。私はこれを使ってコマンドラインのスイッチ変数を変換していますが、これは不完全なものかもしれません。enumはnullにできないので、論理的にはデフォルト値を用意する必要があります。このように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e19c993984f6dd6f758fe2a09db7defa6fe45d59" translate="yes" xml:space="preserve">
          <source>To convert a string to ENUM or int to ENUM constant we need to use Enum.Parse function. Here is a youtube video &lt;a href=&quot;https://www.youtube.com/watch?v=4nhx4VwdRDk&quot;&gt;https://www.youtube.com/watch?v=4nhx4VwdRDk&lt;/a&gt;  which actually demonstrate's with string and the same applies for int.</source>
          <target state="translated">文字列をENUM定数またはintからENUM定数に変換するには、Enum.Parse関数を使用する必要があります。 これはYouTubeビデオ&lt;a href=&quot;https://www.youtube.com/watch?v=4nhx4VwdRDk&quot;&gt;https://www.youtube.com/watch?v=4nhx4VwdRDkです。&lt;/a&gt;これは実際に文字列を使用して示していますが、intにも同じことが当てはまります。</target>
        </trans-unit>
        <trans-unit id="a68345d4247855f0ef61c33db7f1d7fc5da8f76c" translate="yes" xml:space="preserve">
          <source>To make it safe, I think it's a best practice to &lt;strong&gt;know that the underlying types are the same or implicitly convertible&lt;/strong&gt; and to ensure the enum values exist (they aren't checked by default!).</source>
          <target state="translated">安全にするために&lt;strong&gt;、基になる型が同じであるか暗黙的に変換可能&lt;/strong&gt;であることを確認し、列挙型の値が存在することを確認することをお勧めします（デフォルトではチェックされません）。</target>
        </trans-unit>
        <trans-unit id="23a5d50f7d560683b09aeb6eb136065dad2c6c30" translate="yes" xml:space="preserve">
          <source>To make sure that you only cast the right values ​​and that you can throw an exception otherwise:</source>
          <target state="translated">正しい値のみをキャストし、それ以外の場合は例外を投げることができるようにするためです。</target>
        </trans-unit>
        <trans-unit id="47face85db7011031f48f02a22cd9a272203d89f" translate="yes" xml:space="preserve">
          <source>To see how this works, try the following code:</source>
          <target state="translated">これがどのように動作するかを確認するには、以下のコードを試してみてください。</target>
        </trans-unit>
        <trans-unit id="fe32a38f013c13127d95cbb21b75c9f2a3ff7ff0" translate="yes" xml:space="preserve">
          <source>What should get your attention here is that the &lt;code&gt;value__&lt;/code&gt; is stored separately from the enum values. In the case of the enum &lt;code&gt;Foo&lt;/code&gt; above, the type of &lt;code&gt;value__&lt;/code&gt; is int16. This basically means that you can store whatever you want in an enum, &lt;strong&gt;as long as the types match&lt;/strong&gt;.</source>
          <target state="translated">ここで注意が必要なのは、 &lt;code&gt;value__&lt;/code&gt; が列挙値とは別に格納されていることです。 上記の列挙型 &lt;code&gt;Foo&lt;/code&gt; の場合、 &lt;code&gt;value__&lt;/code&gt; の型はint16です。 これは基本的に&lt;strong&gt;、型が一致する限り&lt;/strong&gt; 、必要なものを列挙&lt;strong&gt;型に&lt;/strong&gt;格納できることを意味します。</target>
        </trans-unit>
        <trans-unit id="75195f05ea43ea70c38131eb9ea13a4996f5e578" translate="yes" xml:space="preserve">
          <source>You can check if it's in range using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.enum.isdefined.aspx&quot;&gt;Enum.IsDefined&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.enum.isdefined.aspx&quot;&gt;Enum.IsDefined&lt;/a&gt;を使用して、範囲内にあるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="0de1bc194347a91c21a17c2e5bfacb51ce958521" translate="yes" xml:space="preserve">
          <source>You just do like below:</source>
          <target state="translated">下のようにすればいいんだよ。</target>
        </trans-unit>
        <trans-unit id="6994803e241f1afbcedb1ae8f1f21f8c4838e50b" translate="yes" xml:space="preserve">
          <source>You need to change parsing at helper method from</source>
          <target state="translated">ヘルパーメソッドでのパースを</target>
        </trans-unit>
        <trans-unit id="a0c0f2e9958eee84b504206d7affb17281468c3c" translate="yes" xml:space="preserve">
          <source>You should build in some type matching relaxation to be more robust.</source>
          <target state="translated">何らかのタイプのマッチング緩和を組み込んで、より強固なものにした方がいい。</target>
        </trans-unit>
        <trans-unit id="60a7352b0fac243c1417c6c97b157eab5c9c4dc2" translate="yes" xml:space="preserve">
          <source>You simply use &lt;strong&gt;Explicit conversion&lt;/strong&gt; Cast int to enum or enum to int</source>
          <target state="translated">&lt;strong&gt;明示的な変換&lt;/strong&gt; Cast int to enumまたはenum to intを使用するだけです</target>
        </trans-unit>
        <trans-unit id="26c332d9cd21581be5a14d1f84b9f1527eaca082" translate="yes" xml:space="preserve">
          <source>sorry for my english</source>
          <target state="translated">ごめんね</target>
        </trans-unit>
        <trans-unit id="1d21a26520b48d93a5e79674e2985df9e6cc8bee" translate="yes" xml:space="preserve">
          <source>the easy and clear way for casting an int to enum in c#:</source>
          <target state="translated">c#でintをenumにキャストする簡単でわかりやすい方法です。</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">to</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
