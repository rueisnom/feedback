<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://stackoverflow.com/questions/240178">
    <body>
      <group id="240178">
        <trans-unit id="d432b26240dc597d0da2724076628c312f15638d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myList = [[1]*4] * 3&lt;/code&gt; creates one list object &lt;code&gt;[1,1,1,1]&lt;/code&gt; in memory and copies its reference 3 times over. This is equivalent to &lt;code&gt;obj = [1,1,1,1]; myList = [obj]*3&lt;/code&gt;. Any modification to &lt;code&gt;obj&lt;/code&gt; will be reflected at three places, wherever &lt;code&gt;obj&lt;/code&gt; is referenced in the list.
The right statement would be:</source>
          <target state="translated">&lt;code&gt;myList = [[1]*4] * 3&lt;/code&gt; 在内存中创建一个列表对象 &lt;code&gt;[1,1,1,1]&lt;/code&gt; 并复制其引用3次。 这等效于 &lt;code&gt;obj = [1,1,1,1]; myList = [obj]*3&lt;/code&gt; myList = [obj] * 3 。 对 &lt;code&gt;obj&lt;/code&gt; 的任何修改都会在列表中引用 &lt;code&gt;obj&lt;/code&gt; 的三个地方反映出来。 正确的声明是：</target>
        </trans-unit>
        <trans-unit id="14a999c54d37488adf20c37f2a9243a619c30402" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important thing to note here&lt;/strong&gt; is that &lt;code&gt;*&lt;/code&gt; operator is &lt;em&gt;mostly&lt;/em&gt; used to create a &lt;strong&gt;list of literals&lt;/strong&gt;. Although &lt;code&gt;1&lt;/code&gt; is immutable, &lt;code&gt;obj =[1]*4&lt;/code&gt; will still create a list of &lt;code&gt;1&lt;/code&gt; repeated 4 times over to form &lt;code&gt;[1,1,1,1]&lt;/code&gt;. But if any reference to immutable object is made, the object is overwritten with a new one, resulting in expected behaviour. This means if we do &lt;code&gt;obj[2]=42&lt;/code&gt;, then &lt;code&gt;obj&lt;/code&gt; will become &lt;code&gt;[1,1,42,1]&lt;/code&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;strike&gt;&lt;code&gt;[42,42,42,42]&lt;/code&gt;&lt;/strike&gt; as some may assume. This can also be verified:</source>
          <target state="translated">&lt;strong&gt;这里要注意的重要一点&lt;/strong&gt;是 &lt;code&gt;*&lt;/code&gt; 运算符&lt;em&gt;主要&lt;/em&gt;用于创建&lt;strong&gt;文字列表&lt;/strong&gt; 。 尽管 &lt;code&gt;1&lt;/code&gt; 是不可变的，但 &lt;code&gt;obj =[1]*4&lt;/code&gt; 仍将创建一个 &lt;code&gt;1&lt;/code&gt; 的列表，该列表重复4次以形成 &lt;code&gt;[1,1,1,1]&lt;/code&gt; 。 但是，如果对不可变对象进行了任何引用，则该对象将被新对象覆盖，从而导致预期的行为。 这意味着，如果我们做 &lt;code&gt;obj[2]=42&lt;/code&gt; ，那么 &lt;code&gt;obj&lt;/code&gt; 会变成 &lt;code&gt;[1,1,42,1]&lt;/code&gt; &lt;strong&gt;而不是&lt;/strong&gt;某些人可能认为的&lt;strike&gt; &lt;code&gt;[42,42,42,42]&lt;/code&gt; &lt;/strike&gt; 。 这也可以验证：</target>
        </trans-unit>
        <trans-unit id="b69bb96f6a1c611831f677783957c3699bd12e3b" translate="yes" xml:space="preserve">
          <source>@spelchekr from &lt;a href=&quot;https://stackoverflow.com/questions/6688223/python-list-multiplication-3-makes-3-lists-which-mirror-each-other-when&quot;&gt;Python list multiplication: [[...]]*3 makes 3 lists which mirror each other when modified&lt;/a&gt; and I had the same question about
&quot;Why does only the outer *3 create more references while the inner one doesn't? Why isn't it all 1s?&quot;</source>
          <target state="translated">@spelchekr来自&lt;a href=&quot;https://stackoverflow.com/questions/6688223/python-list-multiplication-3-makes-3-lists-which-mirror-each-other-when&quot;&gt;Python的列表乘法：[[...]] * 3使得3个列表在修改后会相互镜像&lt;/a&gt; ，我也有一个相同的问题：&amp;ldquo;为什么只有外部* 3创建更多引用，而内部* 3却没有创建更多引用为什么不是全1？&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="efc3258b21333c6582827d8fcfb8c37328e90aaf" translate="yes" xml:space="preserve">
          <source>Actually, this is exactly what you would expect. Let's decompose what is happening here:</source>
          <target state="translated">其实,这正是你所期待的。我们来分解一下这里发生的事情。</target>
        </trans-unit>
        <trans-unit id="3699e26734311ea9a3f2364fb20cdee6723f0028" translate="yes" xml:space="preserve">
          <source>Alongside the accepted answer that explained the problem correctly, within your list comprehension, if You are using python-2.x use &lt;code&gt;xrange()&lt;/code&gt; that returns a generator which is more efficient (&lt;code&gt;range()&lt;/code&gt; in python 3 does the same job) &lt;code&gt;_&lt;/code&gt; instead of the throwaway variable &lt;code&gt;n&lt;/code&gt;:</source>
          <target state="translated">除了可以正确解释问题的公认答案之外，在列表理解范围内，如果您使用的是python-2.x，请使用 &lt;code&gt;xrange()&lt;/code&gt; 返回一个更高效的生成器 &lt;code&gt;range()&lt;/code&gt; python 3中的range（）可以完成相同的工作）抛弃型变量 &lt;code&gt;n&lt;/code&gt; 的值 ：</target>
        </trans-unit>
        <trans-unit id="7ecfbebcb9274ef38b75f783b12eb3913bcecc0d" translate="yes" xml:space="preserve">
          <source>Also, as a much more &lt;em&gt;Pythonic&lt;/em&gt; way you can use &lt;a href=&quot;https://docs.python.org/2/library/itertools.html#itertools.repeat&quot;&gt;&lt;code&gt;itertools.repeat()&lt;/code&gt;&lt;/a&gt; to create an iterator object of repeated elements :</source>
          <target state="translated">另外，作为一种&lt;em&gt;Python&lt;/em&gt;方式，您可以使用&lt;a href=&quot;https://docs.python.org/2/library/itertools.html#itertools.repeat&quot;&gt; &lt;code&gt;itertools.repeat()&lt;/code&gt; &lt;/a&gt;创建重复元素的迭代器对象：</target>
        </trans-unit>
        <trans-unit id="a1e23f23b1baaba4774c48d79135c2e2b78615e6" translate="yes" xml:space="preserve">
          <source>And then you have:</source>
          <target state="translated">然后你就有了。</target>
        </trans-unit>
        <trans-unit id="8fe026e0d205516b53b9a46caac1a591e512f5d5" translate="yes" xml:space="preserve">
          <source>And you will get the following output:</source>
          <target state="translated">而你会得到以下输出。</target>
        </trans-unit>
        <trans-unit id="a7c33febf186e6bebc71cac17604935dbb813fe1" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;lst[0]&lt;/code&gt; is nothing but &lt;code&gt;lst1&lt;/code&gt;.</source>
          <target state="translated">因为 &lt;code&gt;lst[0]&lt;/code&gt; 就是 &lt;code&gt;lst1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d690971317990129be90e830d2e9d662cd061fb9" translate="yes" xml:space="preserve">
          <source>By using the inbuilt list function you can do like this</source>
          <target state="translated">通过使用内置的列表功能,你可以这样做</target>
        </trans-unit>
        <trans-unit id="b2dabe69c7320d96c0a364c187cf2b4fb9ffc815" translate="yes" xml:space="preserve">
          <source>Creates a list that references the internal &lt;code&gt;[1,1,1,1]&lt;/code&gt; 3 times - not three copies of the inner list, so any time you modify the list (in any position), you'll see the change three times.</source>
          <target state="translated">创建一个引用内部 &lt;code&gt;[1,1,1,1]&lt;/code&gt; 3次的列表-而不是内部列表的3个副本，因此，每次修改列表（在任何位置）时，都会看到3次更改。</target>
        </trans-unit>
        <trans-unit id="c03e56480cc91c295c1944db553322a843c06e5f" translate="yes" xml:space="preserve">
          <source>Here is my explanation after trying the code above:</source>
          <target state="translated">下面是我在尝试了上面的代码后的解释。</target>
        </trans-unit>
        <trans-unit id="c3af64db63c607ccd5d7c0d0436dc3fe4e1836f6" translate="yes" xml:space="preserve">
          <source>I guess everybody explain what is happening.
I suggest one way to solve it:</source>
          <target state="translated">我想大家解释一下到底是怎么回事。我建议大家用一种方法来解决。</target>
        </trans-unit>
        <trans-unit id="8534fb9ce25dc7e289a38639c3ed101e6aca978f" translate="yes" xml:space="preserve">
          <source>I needed to create a list of lists in Python, so I typed the following:</source>
          <target state="translated">我需要在Python中创建一个列表,所以我输入了以下内容。</target>
        </trans-unit>
        <trans-unit id="29f12a5fded06804ff7ad7371817747aa5824961" translate="yes" xml:space="preserve">
          <source>If you want to create clone copies, try Operation 3:</source>
          <target state="translated">如果你想创建克隆副本,请尝试操作3。</target>
        </trans-unit>
        <trans-unit id="bf5b32ba1138a48895509ec559db1478c1ce55fb" translate="yes" xml:space="preserve">
          <source>In contrast, a list comprehension reevaluates the element expression on every iteration. &lt;code&gt;[[1] * 4 for n in range(3)]&lt;/code&gt; reevaluates &lt;code&gt;[1] * 4&lt;/code&gt; every time for the same reason &lt;code&gt;[x**2 for x in range(3)]&lt;/code&gt; reevaluates &lt;code&gt;x**2&lt;/code&gt; every time. Every evaluation of &lt;code&gt;[1] * 4&lt;/code&gt; generates a new list, so the list comprehension does what you wanted.</source>
          <target state="translated">相反，列表推导会在每次迭代时重新评估元素表达式。 &lt;code&gt;[[1] * 4 for n in range(3)]&lt;/code&gt; &lt;code&gt;[1] * 4&lt;/code&gt; 每次都会重新评估[1] * 4 &lt;code&gt;[x**2 for x in range(3)]&lt;/code&gt; 出于相同原因， [x ** 2 for x in range（3））]会重新评估 &lt;code&gt;x**2&lt;/code&gt; 。 &lt;code&gt;[1] * 4&lt;/code&gt; 每个求值都会生成一个新列表，因此列表理解可以满足您的要求。</target>
        </trans-unit>
        <trans-unit id="e1025fd6605e46e51c5d31e907837bdec7c46791" translate="yes" xml:space="preserve">
          <source>In simple words this is happening because in python everything works &lt;strong&gt;by reference&lt;/strong&gt;, so when you create a list of list that way you basically end up with such problems.</source>
          <target state="translated">简而言之，发生这种情况是因为在python中，所有内容都可以&lt;strong&gt;通过引用来工作&lt;/strong&gt; ，因此，当您以这种方式创建列表时，基本上会遇到此类问题。</target>
        </trans-unit>
        <trans-unit id="2ec51667de229ac720957f051485b8993667e491" translate="yes" xml:space="preserve">
          <source>In this &lt;code&gt;b&lt;/code&gt; is a list that contains one item that is a reference to list &lt;code&gt;a&lt;/code&gt;. The list &lt;code&gt;a&lt;/code&gt; is mutable.</source>
          <target state="translated">此 &lt;code&gt;b&lt;/code&gt; 中的列表包含一个项目，该项目是对a的引用。 列表是可变的。</target>
        </trans-unit>
        <trans-unit id="9e15ff8f6022c12da30a2551fca354dddd0ec2ad" translate="yes" xml:space="preserve">
          <source>In this case, the expression is re-evaluated for each n, leading to a different list.</source>
          <target state="translated">在这种情况下,对每一个n的表达式进行重新评估,从而得出不同的列表。</target>
        </trans-unit>
        <trans-unit id="c2cfaffaf44637181730ee74f7758a5df8e6c01f" translate="yes" xml:space="preserve">
          <source>Incidentally, &lt;code&gt;[1] * 4&lt;/code&gt; also doesn't copy the elements of &lt;code&gt;[1]&lt;/code&gt;, but that doesn't matter, since integers are immutable. You can't do something like &lt;code&gt;1.value = 2&lt;/code&gt; and turn a 1 into a 2.</source>
          <target state="translated">顺便说一句， &lt;code&gt;[1] * 4&lt;/code&gt; 也不会复制 &lt;code&gt;[1]&lt;/code&gt; 的元素，但这并不重要，因为整数是不可变的。 您不能做类似 &lt;code&gt;1.value = 2&lt;/code&gt; 事情并将1变成2。</target>
        </trans-unit>
        <trans-unit id="bb931edbb5ba27fe3d1a4cc5f512cecd66291618" translate="yes" xml:space="preserve">
          <source>It's the same as this example:</source>
          <target state="translated">这和这个例子是一样的。</target>
        </trans-unit>
        <trans-unit id="7abfe8c9be6efb6e7f7f5c3db09b78ad3c1f7e81" translate="yes" xml:space="preserve">
          <source>Let us rewrite your code in the following way:</source>
          <target state="translated">让我们用下面的方法重写你的代码。</target>
        </trans-unit>
        <trans-unit id="ef5dbe19e30b0f101fe9a74dc3be697dcc1e5457" translate="yes" xml:space="preserve">
          <source>List of lists changes reflected across sublists unexpectedly</source>
          <target state="translated">反映在子列表中的列表变化出乎意料地反映在子列表上</target>
        </trans-unit>
        <trans-unit id="604284095b019eb3b156a44eb2b4f4d0b59e8bcf" translate="yes" xml:space="preserve">
          <source>Live Python Tutor Visualize</source>
          <target state="translated">活的Python讲师Visualize</target>
        </trans-unit>
        <trans-unit id="0c1f8c70a502dfbbd9f21e1e3a035cc60e84d4c6" translate="yes" xml:space="preserve">
          <source>Noticed why doesn't modifying the first element of the first list didn't modify the second element of each list? That's because &lt;code&gt;[0] * 2&lt;/code&gt; really is a list of two numbers, and a reference to 0 cannot be modified.</source>
          <target state="translated">注意到为什么不修改第一个列表的第一个元素而不修改每个列表的第二个元素？ 这是因为 &lt;code&gt;[0] * 2&lt;/code&gt; 实际上是两个数字的列表，并且不能修改对0的引用。</target>
        </trans-unit>
        <trans-unit id="59988942bd554964f61c4101d7b04dcdc5895919" translate="yes" xml:space="preserve">
          <source>Now my list looks like this:</source>
          <target state="translated">现在我的名单是这样的</target>
        </trans-unit>
        <trans-unit id="87109e3123a787b7086b1e0344a4853202f538af" translate="yes" xml:space="preserve">
          <source>Operation 1:</source>
          <target state="translated">行动1:</target>
        </trans-unit>
        <trans-unit id="6f9c1cd7e0d4ceee1c78fa45e1efc82fd65361e9" translate="yes" xml:space="preserve">
          <source>Operation 2:</source>
          <target state="translated">行动2:</target>
        </trans-unit>
        <trans-unit id="52db409e06d6cc67e16fef7ffb2ecb4c6ae58f7c" translate="yes" xml:space="preserve">
          <source>P.S. Using numpy, if you only want to create an array of ones or zeroes you can use &lt;code&gt;np.ones&lt;/code&gt; and &lt;code&gt;np.zeros&lt;/code&gt; and/or for other number use &lt;code&gt;np.repeat()&lt;/code&gt;:</source>
          <target state="translated">PS使用numpy，如果只想创建一个由1或0组成的数组，则可以使用 &lt;code&gt;np.ones&lt;/code&gt; 和 &lt;code&gt;np.zeros&lt;/code&gt; 和/或对于其他数字，请使用 &lt;code&gt;np.repeat()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b9fd941c35c7432025bdadebdb3df840dbb7a94a" translate="yes" xml:space="preserve">
          <source>Python FAQ also contains explanation of this behavior: &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#faq-multidimensional-list&quot;&gt;How do I create a multidimensional list?&lt;/a&gt;</source>
          <target state="translated">Python FAQ也包含此行为的解释： &lt;a href=&quot;https://docs.python.org/3/faq/programming.html#faq-multidimensional-list&quot;&gt;如何创建多维列表？&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e076f140f79a2376eb9183536edfc7846b67a3b" translate="yes" xml:space="preserve">
          <source>Python containers contain references to other objects. See this example:</source>
          <target state="translated">Python 容器包含对其他对象的引用。请看这个例子。</target>
        </trans-unit>
        <trans-unit id="46b6f603ed59d8fb388ea56d4b8095f193990f60" translate="yes" xml:space="preserve">
          <source>Return the &amp;ldquo;identity&amp;rdquo; of an object</source>
          <target state="translated">返回对象的&amp;ldquo;身份&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="7a0c42ad5524edf40be626c42536a2d1a4effe10" translate="yes" xml:space="preserve">
          <source>So now let us go step-by-step. You have &lt;code&gt;x&lt;/code&gt; which is &lt;code&gt;1&lt;/code&gt;, and a single element list &lt;code&gt;y&lt;/code&gt; containing &lt;code&gt;x&lt;/code&gt;. Your first step is &lt;code&gt;y * 4&lt;/code&gt; which will get you a new list &lt;code&gt;z&lt;/code&gt;, which is basically &lt;code&gt;[x, x, x, x]&lt;/code&gt;, i.e. it creates a new list which will have 4 elements, which are references to the initial &lt;code&gt;x&lt;/code&gt; object. The net step is pretty similar. You basically do &lt;code&gt;z * 3&lt;/code&gt;, which is &lt;code&gt;[[x, x, x, x]] * 3&lt;/code&gt; and returns &lt;code&gt;[[x, x, x, x], [x, x, x, x], [x, x, x, x]]&lt;/code&gt;, for the same reason as for the first step.</source>
          <target state="translated">现在，让我们逐步进行。 您的 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;1&lt;/code&gt; ，并且包含 &lt;code&gt;x&lt;/code&gt; 的单个元素列表 &lt;code&gt;y&lt;/code&gt; 。 第一步是 &lt;code&gt;y * 4&lt;/code&gt; ，这将为您提供一个新列表 &lt;code&gt;z&lt;/code&gt; ，基本上是 &lt;code&gt;[x, x, x, x]&lt;/code&gt; ，即创建一个新列表，其中将包含4个元素，这些元素是对初始 &lt;code&gt;x&lt;/code&gt; 对象的引用。 净步骤非常相似。 您基本上要做 &lt;code&gt;z * 3&lt;/code&gt; ，即 &lt;code&gt;[[x, x, x, x]] * 3&lt;/code&gt; 并返回 &lt;code&gt;[[x, x, x, x], [x, x, x, x], [x, x, x, x]]&lt;/code&gt; ，其原因与第一步相同。</target>
        </trans-unit>
        <trans-unit id="f93d5a3d809830ff27a1468fca3560e606a6e904" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;*3&lt;/code&gt; also creates references, but it's references are immutable, something like &lt;code&gt;[&amp;amp;0, &amp;amp;0, &amp;amp;0]&lt;/code&gt;, then when to change &lt;code&gt;li[0]&lt;/code&gt;, you can't change any underlying reference of  const int &lt;code&gt;0&lt;/code&gt;, so you can just change the reference address into the new one &lt;code&gt;&amp;amp;1&lt;/code&gt;;</source>
          <target state="translated">内部的 &lt;code&gt;*3&lt;/code&gt; 也会创建引用，但它的引用是不可变的，类似于 &lt;code&gt;[&amp;amp;0, &amp;amp;0, &amp;amp;0]&lt;/code&gt; ，然后在更改 &lt;code&gt;li[0]&lt;/code&gt; ，您不能更改const int &lt;code&gt;0&lt;/code&gt; 的任何基础引用，因此您可以将参考地址更改为新的 &lt;code&gt;&amp;amp;1&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="4739576a32845d6b51ea78b0c28e9d1450a698a9" translate="yes" xml:space="preserve">
          <source>The list looked like this:</source>
          <target state="translated">名单看起来是这样的。</target>
        </trans-unit>
        <trans-unit id="24b84a33f8e362f14a10eb125e9ff8cb39decbd8" translate="yes" xml:space="preserve">
          <source>The multiplication of a list by an integer is equivalent to adding the list to itself multiple times (see &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#typesseq-common&quot;&gt;common sequence operations&lt;/a&gt;). So continuing with the example:</source>
          <target state="translated">列表与整数的乘积等效于将列表多次添加到自身（请参阅&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#typesseq-common&quot;&gt;常见序列操作&lt;/a&gt; ）。 因此，继续下面的示例：</target>
        </trans-unit>
        <trans-unit id="c3110260b0c6fa29b5da5eaf7aae20756591136b" translate="yes" xml:space="preserve">
          <source>The only option &lt;code&gt;*&lt;/code&gt; has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 唯一的选择是对现有子列表进行新引用，而不是尝试创建新子列表。 其他所有内容将不一致或需要对基础语言设计决策进行重大重新设计。</target>
        </trans-unit>
        <trans-unit id="e8425035628e9bcd585010aad239f14d3e225dc1" translate="yes" xml:space="preserve">
          <source>Then I changed one of the innermost values:</source>
          <target state="translated">然后,我改变了其中一个最里面的值。</target>
        </trans-unit>
        <trans-unit id="2a9208b32fe3c33e9f8809f33376f79b30f6d8d9" translate="yes" xml:space="preserve">
          <source>Then having this, run the following code to make everything more clear. What the code does is basically print the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#id&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt;s of the obtained objects, which</source>
          <target state="translated">然后，运行以下代码使所有内容更加清晰。 该代码所做的基本上是打印获得的对象的&lt;a href=&quot;https://docs.python.org/2/library/functions.html#id&quot;&gt; &lt;code&gt;id&lt;/code&gt; &lt;/a&gt; ，</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">这相当于:</target>
        </trans-unit>
        <trans-unit id="bf6643d9a3252e5fc74ee1c1c3b5de497efca9cb" translate="yes" xml:space="preserve">
          <source>This means &lt;code&gt;lst&lt;/code&gt; is a list with 3 elements all pointing to &lt;code&gt;lst1&lt;/code&gt;. This means the two following lines are equivalent:</source>
          <target state="translated">这意味着 &lt;code&gt;lst&lt;/code&gt; 是一个包含3个元素的列表，所有元素都指向 &lt;code&gt;lst1&lt;/code&gt; 。 这意味着以下两行是等效的：</target>
        </trans-unit>
        <trans-unit id="3dd8e29b3ac3c6ef269ae676cafacbe21d228fa4" translate="yes" xml:space="preserve">
          <source>To fix it, you need to make sure that you create a new list at each position. One way to do it is</source>
          <target state="translated">要解决这个问题,你需要确保你在每个位置创建一个新的列表。一种方法是</target>
        </trans-unit>
        <trans-unit id="41366f2f3f691d6e960037cbbf3029874e06249f" translate="yes" xml:space="preserve">
          <source>To obtain the desired behavior, you can use list comprehension:</source>
          <target state="translated">为了获得想要的行为,可以使用列表理解。</target>
        </trans-unit>
        <trans-unit id="f6012ff66876f35bf9ed7d47fbc5d81fd830a93a" translate="yes" xml:space="preserve">
          <source>To solve your issue you can do either one of them:
1. Use numpy array &lt;a href=&quot;http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html&quot;&gt;documentation for numpy.empty&lt;/a&gt;
2. Append the list as you get to a list.
3. You can also use dictionary if you want</source>
          <target state="translated">要解决您的问题，您可以执行以下任一操作：1.将numpy数组&lt;a href=&quot;http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html&quot;&gt;文档用于numpy.empty。2&lt;/a&gt; .将列表追加到列表中。 3.如果需要，您也可以使用字典</target>
        </trans-unit>
        <trans-unit id="bc4f66001e531189900b0cd046777ad1b64deee8" translate="yes" xml:space="preserve">
          <source>Trying to explain it more descriptively,</source>
          <target state="translated">试图用更多的描述来解释它。</target>
        </trans-unit>
        <trans-unit id="5adaf1f37f4e60784d899d34c40c6e33010d9e91" translate="yes" xml:space="preserve">
          <source>We can see that the list &lt;code&gt;c&lt;/code&gt; now contains two references to list &lt;code&gt;a&lt;/code&gt; which is equivalent to &lt;code&gt;c = b * 2&lt;/code&gt;.</source>
          <target state="translated">我们可以看到列表 &lt;code&gt;c&lt;/code&gt; 现在包含两个对列表 &lt;code&gt;a&lt;/code&gt; 的引用，等效于 &lt;code&gt;c = b * 2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="501474f83c13b6e53883b1c7e3f3a5ccbe6640da" translate="yes" xml:space="preserve">
          <source>When you write &lt;code&gt;[x]*3&lt;/code&gt; you get, essentially, the list &lt;code&gt;[x, x, x]&lt;/code&gt;. That is, a list with 3 references to the same &lt;code&gt;x&lt;/code&gt;. When you then modify this single &lt;code&gt;x&lt;/code&gt; it is visible via all three references to it:</source>
          <target state="translated">当您编写 &lt;code&gt;[x]*3&lt;/code&gt; 时,您基本上会得到列表 &lt;code&gt;[x, x, x]&lt;/code&gt; 。 即，具有3个引用的列表引用相同的 &lt;code&gt;x&lt;/code&gt; 。 然后，当您修改单个 &lt;code&gt;x&lt;/code&gt; 时 ，可以通过对其的所有三个引用来看到它：</target>
        </trans-unit>
        <trans-unit id="832e94d264b6641a04975b94bcfb71f2f9739daf" translate="yes" xml:space="preserve">
          <source>You might wonder why &lt;code&gt;*&lt;/code&gt; can't make independent objects the way the list comprehension does. That's because the multiplication operator &lt;code&gt;*&lt;/code&gt; operates on objects, without seeing expressions. When you use &lt;code&gt;*&lt;/code&gt; to multiply &lt;code&gt;[[1] * 4]&lt;/code&gt; by 3, &lt;code&gt;*&lt;/code&gt; only sees the 1-element list &lt;code&gt;[[1] * 4]&lt;/code&gt; evaluates to, not the &lt;code&gt;[[1] * 4&lt;/code&gt; expression text. &lt;code&gt;*&lt;/code&gt; has no idea how to make copies of that element, no idea how to reevaluate &lt;code&gt;[[1] * 4]&lt;/code&gt;, and no idea you even want copies, and in general, there might not even be a way to copy the element.</source>
          <target state="translated">您可能想知道为什么 &lt;code&gt;*&lt;/code&gt; 不能像列表理解那样创建独立的对象。 这是因为乘法运算符 &lt;code&gt;*&lt;/code&gt; 对对象进行操作，而没有看到表达式。 当您使用 &lt;code&gt;*&lt;/code&gt; 将 &lt;code&gt;[[1] * 4]&lt;/code&gt; 乘以3时， &lt;code&gt;*&lt;/code&gt; 仅会看到1元素列表 &lt;code&gt;[[1] * 4]&lt;/code&gt; 计算结果，而不是 &lt;code&gt;[[1] * 4&lt;/code&gt; 表达式文本。 &lt;code&gt;*&lt;/code&gt; 不知道如何制作该元素的副本，也不知道如何重新评估 &lt;code&gt;[[1] * 4]&lt;/code&gt; ，也不知道您甚至想要复制，而且一般来说，甚至没有办法复制该元素。</target>
        </trans-unit>
        <trans-unit id="2eb5b7fd5de753d92c63843e41bc009b96c28972" translate="yes" xml:space="preserve">
          <source>You write</source>
          <target state="translated">你写的</target>
        </trans-unit>
        <trans-unit id="42fb56c55709b77df51dc5570a1fd7066696c0d7" translate="yes" xml:space="preserve">
          <source>and will help us identify them and analyse what happens:</source>
          <target state="translated">并将帮助我们识别它们并分析发生了什么。</target>
        </trans-unit>
        <trans-unit id="14a961e9db9747b20286372b24fe3a0e150259a7" translate="yes" xml:space="preserve">
          <source>another interesting way to create clone copies, Operation 4:</source>
          <target state="translated">另一个有趣的方法是创建克隆副本,操作4。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="7006b26f9c8f8d3e063ffcd613fdb2355cbc1ab6" translate="yes" xml:space="preserve">
          <source>or even:</source>
          <target state="translated">或甚至。</target>
        </trans-unit>
        <trans-unit id="5747d5a219bdca8cc8a0afdab31683bbc104375e" translate="yes" xml:space="preserve">
          <source>where it's probably a little less surprising.</source>
          <target state="translated">在这里,它可能是一个有点不那么令人惊讶。</target>
        </trans-unit>
        <trans-unit id="79dae3ceff989b84d037b3e06690ddb0c7a533eb" translate="yes" xml:space="preserve">
          <source>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</source>
          <target state="translated">这不是我想要的,也不是我所期望的。谁能给我解释一下这是怎么回事,以及如何解决这个问题?</target>
        </trans-unit>
        <trans-unit id="7e30c2eec07407bb0c7533db53a27b0460898989" translate="yes" xml:space="preserve">
          <source>which will reevaluate &lt;code&gt;[1]*4&lt;/code&gt; each time instead of evaluating it once and making 3 references to 1 list.</source>
          <target state="translated">它将每次重新评估 &lt;code&gt;[1]*4&lt;/code&gt; 而不是一次评估并且对1个列表进行3次引用。</target>
        </trans-unit>
        <trans-unit id="f4a193e32bfbfcea1d0e06a73c863fe8dd677085" translate="yes" xml:space="preserve">
          <source>while &lt;code&gt;ma=[&amp;amp;li, &amp;amp;li, &amp;amp;li]&lt;/code&gt; and &lt;code&gt;li&lt;/code&gt; is mutable, so when you call &lt;code&gt;ma[0][0]=1&lt;/code&gt;, ma[0][0] is equally to &lt;code&gt;&amp;amp;li[0]&lt;/code&gt;, so all the &lt;code&gt;&amp;amp;li&lt;/code&gt; instances will change its 1st address into &lt;code&gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">而 &lt;code&gt;ma=[&amp;amp;li, &amp;amp;li, &amp;amp;li]&lt;/code&gt; 和 &lt;code&gt;li&lt;/code&gt; 是可变的，因此当您调用 &lt;code&gt;ma[0][0]=1&lt;/code&gt; ，ma [0] [0]等同于 &lt;code&gt;&amp;amp;li[0]&lt;/code&gt; ，因此所有 &lt;code&gt;&amp;amp;li&lt;/code&gt; 实例将将其第一个地址更改为 &lt;code&gt;&amp;amp;1&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
