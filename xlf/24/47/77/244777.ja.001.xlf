<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/244777">
    <body>
      <group id="244777">
        <trans-unit id="34fa93b53bbf246051102dca8baae329621c5691" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;hello base three&lt;/code&gt; in ASCII) But instead of 0 use space, for 1 use line feed and for 2 use carriage return.</source>
          <target state="translated">（ASCIIの &lt;code&gt;hello base three&lt;/code&gt; ）ただし、0の代わりにスペースを使用し、1にはラインフィードを使用し、2にはキャリッジリターンを使用します。</target>
        </trans-unit>
        <trans-unit id="7ebed1765dd7ccc7851e59bc0fdd628490f7bc7d" translate="yes" xml:space="preserve">
          <source>/* This is a</source>
          <target state="translated">/*これは</target>
        </trans-unit>
        <trans-unit id="bf94bef709f46f7c7d68674f1bb8b200ac2da950" translate="yes" xml:space="preserve">
          <source>//&quot;id&quot;: int</source>
          <target state="translated">/&quot;id&quot;:int</target>
        </trans-unit>
        <trans-unit id="ba4a24b3c03e2ccb99980352a2dca68f0f6be621" translate="yes" xml:space="preserve">
          <source>//&quot;name&quot;: &quot;string&quot;</source>
          <target state="translated">/&quot;name&quot;.&quot;文字列&quot;</target>
        </trans-unit>
        <trans-unit id="5b8cb63271630ae5f51e3cb3a0d8b27849d68701" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot;&gt;RFC 4627&lt;/a&gt;:
The &lt;code&gt;application/json&lt;/code&gt; Media Type for JavaScript Object Notation (JSON)</source>
          <target state="translated">&lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot;&gt;RFC 4627&lt;/a&gt; ：JavaScript Object Notation（JSON）の &lt;code&gt;application/json&lt;/code&gt; Media Type</target>
        </trans-unit>
        <trans-unit id="5c2579c1b1b5cf890fcc4fa294fb6ce099d9d5e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.jsonlint.com&quot;&gt;jsonlint&lt;/a&gt; does not validate this. So comments are a parser specific extension and not standard.</source>
          <target state="translated">&lt;a href=&quot;http://www.jsonlint.com&quot;&gt;jsonlint&lt;/a&gt;はこれを検証しません。 したがって、コメントはパーサー固有の拡張であり、標準ではありません。</target>
        </trans-unit>
        <trans-unit id="a702bc50d3f7b75690cde2a03af864243499a7c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; The JavaScript Object Notation (JSON) Data Interchange Format (supercedes RFCs 4627, 7158, 7159)</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; JavaScript Object Notation（JSON）データ交換形式（RFC 4627、7158、7159に優先）</target>
        </trans-unit>
        <trans-unit id="b13056f66ad1abc6e703073098bfef5dc8973dca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Additional note for people who can't think out of the box:&lt;/strong&gt; I use the JSON format for basic settings in an ASP.NET web application I made. I read the file, convert it into the settings object with the Newtonsoft library and use it when necessary.</source>
          <target state="translated">&lt;strong&gt;追加&lt;/strong&gt;設定なしで&lt;strong&gt;考えることができない人のための追加の注意：&lt;/strong&gt;私が作成したASP.NET Webアプリケーションの基本設定にはJSON形式を使用します。 ファイルを読み取り、Newtonsoftライブラリを使用して設定オブジェクトに変換し、必要に応じて使用します。</target>
        </trans-unit>
        <trans-unit id="d6943fb66cf79edcea0c8ade6aa8085a0f57a63a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Answer:&lt;/strong&gt; It would be a one liner. If you do that then JSON files could be used as configuration files.</source>
          <target state="translated">&lt;strong&gt;回答：&lt;/strong&gt;ワンライナーになります。 これを行うと、JSONファイルを構成ファイルとして使用できます。</target>
        </trans-unit>
        <trans-unit id="f4e7ab93def871696ab38f62d8d8428ce1283817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BUT&lt;/strong&gt; as the creator of JSON also observed, there has always been JS pipeline support for comments:</source>
          <target state="translated">&lt;strong&gt;しかし&lt;/strong&gt; 、JSONの作成者も観察したように、コメントに対するJSパイプラインのサポートは常にあります。</target>
        </trans-unit>
        <trans-unit id="a65128266d54c908b80eea5f1f75fb9bf5f72005" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you try to put comments in (using &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/* */&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; for instance), then some parsers will fail because this is strictly not
  within the JSON specification. So you should &lt;em&gt;never&lt;/em&gt; do that.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コメントを（ &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/* */&lt;/code&gt; または &lt;code&gt;#&lt;/code&gt; などを使用して） 挿入しようとすると、一部のパーサーは失敗します。これは、厳密にJSON仕様の範囲外であるためです。&lt;/strong&gt; &lt;strong&gt;だからあなたはそれをするべきでは&lt;em&gt;あり&lt;/em&gt;ません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bd82eee1a265aa79aa470b1a4e82624e65cc313" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Include comments if you choose; strip them out with a minifier before parsing or transmitting.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;必要に応じてコメントを含めます。&lt;/strong&gt; &lt;strong&gt;解析または送信する前に、縮小版でそれらを取り除きます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc137b23a988799b2cc6169d59beb9eb0dd347da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON is not a framed protocol&lt;/strong&gt;. It is a &lt;em&gt;language free format&lt;/em&gt;. So a comment's format is not defined for JSON.</source>
          <target state="translated">&lt;strong&gt;JSONはフレーム化されたプロトコルではありません&lt;/strong&gt; 。 &lt;em&gt;言語フリーフォーマットです&lt;/em&gt; 。 したがって、コメントの形式はJSONでは定義されていません。</target>
        </trans-unit>
        <trans-unit id="a910cb594e2078fcfc6c4427443144218212267a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON5 is a proposed extension to JSON&lt;/strong&gt; that aims to make it easier for humans to write and maintain by hand. It does this by adding some minimal syntax features directly from ECMAScript&amp;nbsp;5.</source>
          <target state="translated">&lt;strong&gt;JSON5は、JSONへの提案された拡張機能であり&lt;/strong&gt; 、人間が手作業で簡単に記述および保守できるようにすることを目的としています。 ECMAScript 5から直接いくつかの最小限の構文機能を追加することにより、これを行います。</target>
        </trans-unit>
        <trans-unit id="44752b4e59de8e3916a24c2afa669cadff40eaaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NO&lt;/strong&gt;. JSON used to support comments, but they were abused and removed from the standard.</source>
          <target state="translated">&lt;strong&gt;いいえ&lt;/strong&gt; 。 以前はJSONがコメントをサポートしていましたが、悪用されて標準から削除されました。</target>
        </trans-unit>
        <trans-unit id="a1b2ad6f7fdad1b2c2a4e6520625509eaa2a7e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No&lt;/strong&gt;, comments of the form &lt;code&gt;//&amp;hellip;&lt;/code&gt; or &lt;code&gt;/*&amp;hellip;*/&lt;/code&gt; are not allowed in JSON. This answer is based on:</source>
          <target state="translated">&lt;strong&gt;いいえ&lt;/strong&gt; 、JSONでは &lt;code&gt;//&amp;hellip;&lt;/code&gt; または &lt;code&gt;/*&amp;hellip;*/&lt;/code&gt; の形式のコメントは許可されていません。 この回答は以下に基づいています：</target>
        </trans-unit>
        <trans-unit id="fece5910c250a5de635eae9fb85c117466f1d727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PS:&lt;/strong&gt; Single-line comments are only supported with 6+ versions of Newtonsoft Json.</source>
          <target state="translated">&lt;strong&gt;PS：&lt;/strong&gt;単一行コメントは、6 +バージョンのNewtonsoft Jsonでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="93fc05c73cfe76d315f7daea63ad940357ab4955" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;*&lt;/sup&gt;The RFC only states &quot;whitespace is allowed before or after any of the six structural characters&quot;, not explicitly mentioning strings, numbers, &quot;false&quot;, &quot;true&quot;, and &quot;null&quot;. This omission is ignored in ALL implementations.</source>
          <target state="translated">&lt;sup&gt;*&lt;/sup&gt; RFCでは、「6つの構造文字の前後に空白を使用できる」とのみ記載されており、文字列、数字、「false」、「true」、および「null」については明示的に言及されていません。 この省略は、すべての実装で無視されます。</target>
        </trans-unit>
        <trans-unit id="b770de645eb5b5b5781f0cd67e201c2b8c143f4f" translate="yes" xml:space="preserve">
          <source>A further alternative is &lt;a href=&quot;https://www.npmjs.com/package/jsonc&quot;&gt;jsonc&lt;/a&gt;.</source>
          <target state="translated">さらなる代替は&lt;a href=&quot;https://www.npmjs.com/package/jsonc&quot;&gt;jsonc&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3ca275b07a1a3e03b4a693a00ced0e07a366f2a6" translate="yes" xml:space="preserve">
          <source>All that said, it's not the intention that the JSON file should contain comments in the traditional sense. It should just be the data.</source>
          <target state="translated">いずれにしても、JSONファイルには伝統的な意味でのコメントが含まれていなければならないという意図はありません。ただのデータであるべきです。</target>
        </trans-unit>
        <trans-unit id="c1fe2287a775f42989886308f53c46700329e39f" translate="yes" xml:space="preserve">
          <source>An alternative to JSON &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt;.</source>
          <target state="translated">JSON &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt;の代替。</target>
        </trans-unit>
        <trans-unit id="c9c7ef0ee577ad0ff1ae47bc8be67f3d6d0023ec" translate="yes" xml:space="preserve">
          <source>And yes, you could &lt;a href=&quot;https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr&quot;&gt;insert comments &lt;em&gt;around&lt;/em&gt; the JSON&lt;/a&gt;, which you could parse out.</source>
          <target state="translated">そしてはい、 &lt;a href=&quot;https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr&quot;&gt;JSONの&lt;em&gt;周り&lt;/em&gt;にコメントを挿入し&lt;em&gt;て&lt;/em&gt; 、&lt;/a&gt;解析することができます。</target>
        </trans-unit>
        <trans-unit id="fbaba3137d3ba5b895b4df6e513c6af6b39a54f0" translate="yes" xml:space="preserve">
          <source>And you can also have comments starting with &lt;code&gt;#&lt;/code&gt; by setting:</source>
          <target state="translated">また、 &lt;code&gt;#&lt;/code&gt; で始まるコメントを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="c97099d81edd7356629b8e241277674d1b800eb6" translate="yes" xml:space="preserve">
          <source>Annotations would just make JSON make less interoperable. There is simply nothing else to add, unless what you really need is a markup language (XML), and don't care if your persisted data is easily parsed.</source>
          <target state="translated">アノテーションはJSONの相互運用性を低下させるだけです。本当に必要なのはマークアップ言語 (XML)であり、パースされたデータが簡単に解析できるかどうかを気にしないのであれば、他に追加するものは何もありません。</target>
        </trans-unit>
        <trans-unit id="50e05893022bff20ab64b80f36d87d25f4dc3a58" translate="yes" xml:space="preserve">
          <source>Another parser is &lt;a href=&quot;https://json5.org/&quot;&gt;JSON5&lt;/a&gt;.</source>
          <target state="translated">別のパーサーは&lt;a href=&quot;https://json5.org/&quot;&gt;JSON5&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fca6d7b54ebefddc6d345628fbf6404f43c423a1" translate="yes" xml:space="preserve">
          <source>Any platform can parse JSON with just a few lines of code. XML requires complex OO libraries that are not viable on many platforms.</source>
          <target state="translated">どのプラットフォームでも、わずか数行のコードでJSONをパースすることができます。XML は複雑な OO ライブラリを必要とし、多くのプラットフォームでは実行できません。</target>
        </trans-unit>
        <trans-unit id="16620e2b329b58753187ee6770d1cdd5badc76ed" translate="yes" xml:space="preserve">
          <source>Anyone who understands the &quot;has-a&quot; relationship of object orientation can understand any JSON structure - that is the whole point. It is just a  directed acyclic graph (DAG) with node tags (key/value pairs), which is a near universal data structure.</source>
          <target state="translated">オブジェクト指向の「ハス・ア」の関係を理解している人ならば、どんなJSON構造でも理解できる-それが全てのポイントです。それは、ノードタグ(キー値のペア)を持つ有向非周期グラフ(DAG)に過ぎず、ほぼ普遍的なデータ構造である。</target>
        </trans-unit>
        <trans-unit id="78fec86ef914ad2766fde71edbc09e36e9fdad94" translate="yes" xml:space="preserve">
          <source>As has been pointed out, this hack takes advantage of the implementation of the spec. Not all JSON parsers will understand this sort of JSON. Streaming parsers in particular will choke.</source>
          <target state="translated">指摘されているように、このハックは仕様の実装を利用しています。すべてのJSONパーサーがこの種のJSONを理解するわけではありません。特にストリーミングパーサーは窒息してしまいます。</target>
        </trans-unit>
        <trans-unit id="2e587a0976bd75a1ebdc07043907330c24061460" translate="yes" xml:space="preserve">
          <source>As many people have suggested, there are some tricks, for example, duplicate keys or a specific key &lt;code&gt;_comment&lt;/code&gt; that you can use. It's up to you.</source>
          <target state="translated">多くの人が示唆しているように、重複するキーや使用できる特定のキー &lt;code&gt;_comment&lt;/code&gt; など、いくつかのトリックがあります。 それはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="07864e21cf41714a1a91b2e8dad908a165050270" translate="yes" xml:space="preserve">
          <source>But if you decided to:</source>
          <target state="translated">でも、あなたが決めたのなら</target>
        </trans-unit>
        <trans-unit id="d188f07e39655751d2837cd85a91661937641375" translate="yes" xml:space="preserve">
          <source>But if you want a way of inserting and extracting arbitrary side-channel data to a valid JSON, here is an answer. We take advantage of the non-unique representation of data in a JSON encoding. This is allowed&lt;sup&gt;*&lt;/sup&gt; in section two of the RFC under &quot;whitespace is allowed before or after any of the six structural characters&quot;.</source>
          <target state="translated">しかし、任意のサイドチャネルデータを有効なJSONに挿入および抽出する方法が必要な場合は、ここに回答があります。 JSONエンコーディングでのデータの一意でない表現を利用します。 これは、RFCのセクション2の「6つの構造文字の前後に空白が許可される」で許可されています。</target>
        </trans-unit>
        <trans-unit id="b61019c2a4e8ea6e3feb4f45256dda80cb9669bc" translate="yes" xml:space="preserve">
          <source>But in general (as answered before) the specification does not allow comments.</source>
          <target state="translated">しかし、一般的には(前に回答されているように)仕様上、コメントを受け付けていません。</target>
        </trans-unit>
        <trans-unit id="2ff9d4802c7bbadfbb8936642807401ba75f0f4b" translate="yes" xml:space="preserve">
          <source>Can I use comments inside a JSON file? If so, how?</source>
          <target state="translated">JSONファイル内でコメントを使用することはできますか?可能であれば、どのようにして使えますか?</target>
        </trans-unit>
        <trans-unit id="3342eaaa081df635d86d4ed103ab827ef1d58839" translate="yes" xml:space="preserve">
          <source>Can comments be used in JSON</source>
          <target state="translated">コメントはJSONで使用できますか?</target>
        </trans-unit>
        <trans-unit id="1053334a01b155351dfa23e7c384060bf041ee69" translate="yes" xml:space="preserve">
          <source>Cf: &lt;a href=&quot;http://tech.groups.yahoo.com/group/json/message/152&quot;&gt;Douglas Crockford, author of JSON spec&lt;/a&gt;.</source>
          <target state="translated">Cf： &lt;a href=&quot;http://tech.groups.yahoo.com/group/json/message/152&quot;&gt;Douglas Crockford、JSON仕様の作成者&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f99350726de90bc5586ade4e2c17579ca266470" translate="yes" xml:space="preserve">
          <source>Comments are not an official standard, although some parsers support C++-style comments. One that I use is &lt;a href=&quot;https://github.com/open-source-parsers/jsoncpp&quot;&gt;JsonCpp&lt;/a&gt;. In the examples there is this one:</source>
          <target state="translated">コメントは公式の標準ではありませんが、一部のパーサーはC ++スタイルのコメントをサポートしています。 私が使用するのは&lt;a href=&quot;https://github.com/open-source-parsers/jsoncpp&quot;&gt;JsonCpp&lt;/a&gt;です。 例にはこれがあります：</target>
        </trans-unit>
        <trans-unit id="df3317483190e8a9a8a35a37f3ab9c10bb8b0448" translate="yes" xml:space="preserve">
          <source>Comments should never be used to transmit anything meaningful. That is
  what JSON is for.</source>
          <target state="translated">コメントは決して意味のあるものを発信するために使われるべきではありません。JSONはそのためにあるのです。</target>
        </trans-unit>
        <trans-unit id="1fff50af10e5c930549993b32ac848df3e193e26" translate="yes" xml:space="preserve">
          <source>Comments were removed from JSON by design.</source>
          <target state="translated">JSONからコメントを意図的に削除しました。</target>
        </trans-unit>
        <trans-unit id="df35e067e1b8ca2a8cc8d578088da211eae4be66" translate="yes" xml:space="preserve">
          <source>Consider using YAML. It's nearly a superset of JSON (virtually all valid JSON is valid YAML) and it allows comments.</source>
          <target state="translated">YAMLの使用を検討してください。これはJSONのほぼスーパーセットであり(事実上すべての有効なJSONは有効なYAMLです)、コメントを許可します。</target>
        </trans-unit>
        <trans-unit id="c2438b86a8a6c50714e0bad6f85dbf92921e8b73" translate="yes" xml:space="preserve">
          <source>DISCLAIMER: THIS IS SILLY</source>
          <target state="translated">免責事項:これは愚かなことです</target>
        </trans-unit>
        <trans-unit id="093ed9747fb50ad3ace5476606d705f02357276b" translate="yes" xml:space="preserve">
          <source>DISCLAIMER: YOUR WARRANTY IS VOID</source>
          <target state="translated">免責事項:あなたの保証は無効です。</target>
        </trans-unit>
        <trans-unit id="9767d216f2b66254e1e20ca9a65631dbeaf4909d" translate="yes" xml:space="preserve">
          <source>Eventually I just sent a manual HTTP request to the address above and realized that the content-type was &lt;code&gt;text/javascript&lt;/code&gt; since, well, JSONP returns pure JavaScript. In this case comments &lt;em&gt;are allowed&lt;/em&gt;. But my application returned content-type &lt;code&gt;application/json&lt;/code&gt;, so I had to remove the comments.</source>
          <target state="translated">最終的に私は手動で上記のアドレスにHTTPリクエストを送信したところ、コンテンツタイプが &lt;code&gt;text/javascript&lt;/code&gt; であることがわかりました。これは、JSONPが純粋なJavaScriptを返すためです。 この場合、コメント&lt;em&gt;は許可され&lt;/em&gt;ます。 しかし、私のアプリケーションはcontent-type &lt;code&gt;application/json&lt;/code&gt; を返したため、コメントを削除する必要がありました。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="f90ab4f60b84ef4fb66542eacd1ad110a153f608" translate="yes" xml:space="preserve">
          <source>First, canonicalize your JSON by minifying it:</source>
          <target state="translated">まず、JSONをミニマイズして正規化します。</target>
        </trans-unit>
        <trans-unit id="c1d409cd4a3403ed218ea6a70a0197bffe0ada5b" translate="yes" xml:space="preserve">
          <source>From the creator of JSON:</source>
          <target state="translated">JSONの生みの親から</target>
        </trans-unit>
        <trans-unit id="60985232aee64d7c83d248d5056a34cd0c5ac498" translate="yes" xml:space="preserve">
          <source>Go ahead and insert all the comments you like.
  Then pipe it through JSMin before handing it to your JSON parser. - &lt;a href=&quot;https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;Douglas Crockford, 2012&lt;/a&gt;</source>
          <target state="translated">先に行き、あなたが好きなすべてのコメントを挿入してください。 次に、それをJSMinにパイプしてから、JSONパーサーに渡します。 - &lt;a href=&quot;https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;ダグラス・クロックフォード、2012&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d46840c80aa71753041fbcd5316414574c064b6" translate="yes" xml:space="preserve">
          <source>Happy hacking!</source>
          <target state="translated">ハッピーハッキング!</target>
        </trans-unit>
        <trans-unit id="945eb7b5688a55ae394939657b1e2ecbfa4c17cf" translate="yes" xml:space="preserve">
          <source>Have a look at the &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON website&lt;/a&gt; for more detail.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON Webサイト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="02bd5637edeede78c6aebbc6aea95a4fa0b2aabe" translate="yes" xml:space="preserve">
          <source>Here is what I found in the &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/js/client#configure_the_browser_to_receive_messages&quot;&gt;Google Firebase documentation&lt;/a&gt; that allows you to put comments in JSON:</source>
          <target state="translated">JSONでコメントを付けることができる&lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/js/client#configure_the_browser_to_receive_messages&quot;&gt;Google Firebaseのドキュメント&lt;/a&gt;で私が見つけたものは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8633550968c6c22f9e3fa9c75c6d80470c4d5f6f" translate="yes" xml:space="preserve">
          <source>Here is your output:</source>
          <target state="translated">こちらが出力です。</target>
        </trans-unit>
        <trans-unit id="33a36408989ced26dbe1cb1d8c0cabbfd8ac0f26" translate="yes" xml:space="preserve">
          <source>Here's a for instance, where my &lt;a href=&quot;http://fyngyrz.com/?p=3389&quot;&gt;image manipulation system&lt;/a&gt; has saved image notations and some basic formatted (comment) information relating to them (at the bottom):</source>
          <target state="translated">たとえば、 &lt;a href=&quot;http://fyngyrz.com/?p=3389&quot;&gt;画像操作システム&lt;/a&gt;が画像の表記とそれらに関連するいくつかの基本的なフォーマット済み（コメント）情報を保存した例を以下に示します（下部）。</target>
        </trans-unit>
        <trans-unit id="0ec84d942319f4dcf466115b9620f8a176cce63e" translate="yes" xml:space="preserve">
          <source>Hjson is a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments.</source>
          <target state="translated">Hjsonは人間用の設定ファイル形式です。リラックスした構文で、ミスが少なく、コメントが多いです。</target>
        </trans-unit>
        <trans-unit id="e2fe75cc6963d7dc30fb895561d3733408988e3f" translate="yes" xml:space="preserve">
          <source>Hopefully that's helpful to those who disagree with why &lt;strong&gt;JSON.minify()&lt;/strong&gt; could be useful.</source>
          <target state="translated">うまくいけば、 &lt;strong&gt;JSON.minify（）&lt;/strong&gt;が有用である理由に反対する人にとって役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="129c794cca15aa9f2515c133cd4b997e4d5b6072" translate="yes" xml:space="preserve">
          <source>I guess one could use &lt;code&gt;&quot;#&quot;: &quot;comment&quot;&lt;/code&gt;, for &quot;valid&quot; JSON.</source>
          <target state="translated">「有効な」JSONには、 &lt;code&gt;&quot;#&quot;: &quot;comment&quot;&lt;/code&gt; 使用できると思います。</target>
        </trans-unit>
        <trans-unit id="8acdec3845099bb2522f4b3146c30f724004a565" translate="yes" xml:space="preserve">
          <source>I just encountering this for configuration files. I don't want to use &lt;strong&gt;XML&lt;/strong&gt; (verbose, graphically, ugly, hard to read), or &quot;ini&quot; format (no hierarchy, no real standard, etc.) or Java &quot;Properties&quot; format (like .ini).</source>
          <target state="translated">設定ファイルでこれに遭遇しました。 &lt;strong&gt;XML&lt;/strong&gt; （冗長、グラフィカル、醜い、読みにくい）、または「ini」形式（階層なし、実際の標準なしなど）またはJavaの「プロパティ」形式（.iniなど）を使用したくありません。</target>
        </trans-unit>
        <trans-unit id="a1697c05a3ee803cc922d72d59e63f002d4870ae" translate="yes" xml:space="preserve">
          <source>I just released &lt;strong&gt;&lt;a href=&quot;http://github.com/getify/JSON.minify&quot;&gt;JSON.minify()&lt;/a&gt;&lt;/strong&gt; which strips out comments and whitespace from a block of JSON and makes it valid JSON that can be parsed. So, you might use it like:</source>
          <target state="translated">JSONのブロックからコメントと空白を&lt;strong&gt;&lt;a href=&quot;http://github.com/getify/JSON.minify&quot;&gt;取り除き&lt;/a&gt;&lt;/strong&gt; 、解析できる有効なJSONにする&lt;strong&gt;JSON.minify（）&lt;/strong&gt;をリリースし&lt;strong&gt;ました&lt;/strong&gt; 。 したがって、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="71af10f1174fd98a85f027d4574894f58909f6f4" translate="yes" xml:space="preserve">
          <source>I never even tried this, for obvious reasons and neither should you.</source>
          <target state="translated">私は一度も試したことがありませんが、明らかな理由で、あなたも試してみてはいかがでしょうか。</target>
        </trans-unit>
        <trans-unit id="ab9b39900ac2db147c382ac4b6f657544f7a7c9b" translate="yes" xml:space="preserve">
          <source>I prefer writing comments about each individual setting in the JSON file itself, and I really don't care about the integrity of the JSON format as long as the library I use is OK with it.</source>
          <target state="translated">私はJSONファイル自体に個々の設定についてのコメントを書くのが好きで、使っているライブラリがそれでOKであれば、JSON形式の整合性は本当に気にしません。</target>
        </trans-unit>
        <trans-unit id="0158a4d90f6b5efaece3cf3af780c9d4914ee6e9" translate="yes" xml:space="preserve">
          <source>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability.  I know that the lack of comments makes some people sad, but it shouldn't.  - &lt;a href=&quot;https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;Douglas Crockford, 2012&lt;/a&gt;</source>
          <target state="translated">JSONからコメントを削除したのは、コメントを使用して解析ディレクティブを保持しているため、相互運用性が失われてしまうためです。 コメントの欠如が一部の人々を悲しくさせることは知っていますが、そうではありません。 - &lt;a href=&quot;https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;ダグラス・クロックフォード、2012&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18b4204602681875e0e110a36d909f3158c98fcc" translate="yes" xml:space="preserve">
          <source>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability. I know that the lack of comments makes some people sad, but it shouldn't.</source>
          <target state="translated">私がコメントをJSONから削除したのは、人々がコメントを使って解析ディレクティブを保持しているのを見たからです。コメントがないことで悲しむ人がいるのはわかりますが、そうするべきではありません。</target>
        </trans-unit>
        <trans-unit id="437f278795b45207777b6b3f5cb628f7d85f92ee" translate="yes" xml:space="preserve">
          <source>I think this is an 'easier to use/understand' way than creating a separate 'settings.README' file and explaining the settings in it.</source>
          <target state="translated">別の「settings.README」ファイルを作成して、その中で設定を説明するよりも「わかりやすい」方法だと思います。</target>
        </trans-unit>
        <trans-unit id="09543815ee5f23cc6a834389eef600ba4052d1cc" translate="yes" xml:space="preserve">
          <source>I've found a little hack that allows you to place comments in a JSON file that will not affect the parsing, or alter the data being represented in any way.</source>
          <target state="translated">JSONファイルにコメントを配置しても、解析に影響を与えたり、表現されているデータを変更したりすることはないという、ちょっとしたハックを見つけました。</target>
        </trans-unit>
        <trans-unit id="dbf85d530dd7056debad251a792f8faeead6d98e" translate="yes" xml:space="preserve">
          <source>If people have strong reasons against having comments in JSON when communicating data (whether valid or not), then possibly JSON could be split into two:</source>
          <target state="translated">データをやり取りするときにコメントをJSONに入れることに強い理由がある人は(有効かどうかに関わらず)、もしかしたらJSONを2つに分割してもいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="c924e8002bdfd65f69ae7095656a4a4eeb004ed6" translate="yes" xml:space="preserve">
          <source>If we apply this technique, your commented JSON file might look like this:</source>
          <target state="translated">このテクニックを適用すると、コメントされたJSONファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b9684a17485b0adbd8900445645c8a494c2755a3" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; as your JSON parser then this is how you enable it to allow comments:</source>
          <target state="translated">JSONパーサーとして&lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;ジャクソン&lt;/a&gt;を使用している場合は、これを有効にしてコメントを許可します。</target>
        </trans-unit>
        <trans-unit id="3f8246d0d3adbf7a7389d705ede0a752c209ba38" translate="yes" xml:space="preserve">
          <source>If you are using the Newtonsoft.Json library with ASP.NET to read/deserialize you can use comments in the JSON content:</source>
          <target state="translated">ASP.NET で Newtonsoft.Json ライブラリを使用して readdeserialize を行っている場合は、JSON コンテンツにコメントを使用することができます。</target>
        </trans-unit>
        <trans-unit id="cabeeb699eaf07605e124cb949346b747a7e0dac" translate="yes" xml:space="preserve">
          <source>If you follow the link, you will see</source>
          <target state="translated">リンクをたどると</target>
        </trans-unit>
        <trans-unit id="a63e2953b6b28d01b6fab0cd0c69b99f6574c7de" translate="yes" xml:space="preserve">
          <source>If you have a problem with this kind of usage; sorry, the genie is out of the lamp. People would find other usages for JSON format, and there is nothing you can do about it.</source>
          <target state="translated">このような使用法に問題がある場合、申し訳ありませんが、精霊はランプの外にいます。人々はJSONフォーマットの他の用途を見つけるでしょうし、あなたがそれについてできることは何もありません。</target>
        </trans-unit>
        <trans-unit id="812bab4dd7487fc279216059de97088cf84dae7a" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;http://json5.org/&quot;&gt;JSON5&lt;/a&gt; you can include comments.</source>
          <target state="translated">&lt;a href=&quot;http://json5.org/&quot;&gt;JSON5&lt;/a&gt;を使用する場合、コメントを含めることができます。</target>
        </trans-unit>
        <trans-unit id="b08db292e52b29c91db521bfa2b81efa3280057a" translate="yes" xml:space="preserve">
          <source>If your text file, which is a JSON string, is going to be read by some program, how difficult would it be to strip out either C or C++ style comments before using it?</source>
          <target state="translated">JSON文字列であるテキストファイルをどこかのプログラムが読もうとしている場合、それを使う前にCかC++スタイルのコメントを削除するのはどれくらい難しいでしょうか?</target>
        </trans-unit>
        <trans-unit id="8aa49e3c9f29fe5a6b28c93b5f1a19ce858cb803" translate="yes" xml:space="preserve">
          <source>In a hacky way, you can abuse this to add a comment. For instance: start and end your comment with a tab. Encode the comment in base3 and use the other whitespace characters to represent them. For instance.</source>
          <target state="translated">ハックな方法では、これを悪用してコメントを追加することができます。例えば、コメントの最初と最後にタブを付ける。コメントをbase3でエンコードし、他の空白文字を使って表現します。例えば、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="a5f24ec24556750ba15be59104e6be49937079bd" translate="yes" xml:space="preserve">
          <source>In my case, I need use comments for debug purposes, prior the output of the JSON structure. So I decided to use debug information in the HTTP header, to avoid breaking the client:</source>
          <target state="translated">私の場合は、JSON構造体の出力の前に、デバッグのためにコメントを使う必要があります。そこで、クライアントを壊さないように、HTTPヘッダにデバッグ情報を入れることにしました。</target>
        </trans-unit>
        <trans-unit id="276120a4bf34bb8429f2b43928b3a0e4c6821d79" translate="yes" xml:space="preserve">
          <source>Insignificant whitespace is allowed before or after any token.
  Whitespace is any sequence of one or more of the following code
  points: character tabulation (U+0009), line feed (U+000A), carriage
  return (U+000D), and space (U+0020).</source>
          <target state="translated">トークンの前後には、重要でない空白が許される。空白とは、次のコードポイントのうちの1つ以上の連続したものである:文字集計(U+0009)、改行(U+000A)、キャリッジリターン(U+000D)、及びスペース(U+0020)。</target>
        </trans-unit>
        <trans-unit id="48b50f16ce601739669575140e95e21d988bae25" translate="yes" xml:space="preserve">
          <source>It appears that when declaring an object literal you can specify two values with the same key, and the last one takes precedence. Believe it or not, it turns out that JSON parsers work the same way. So we can use this to create comments in the source JSON that will not be present in a parsed object representation.</source>
          <target state="translated">オブジェクトリテラルを宣言するときに、同じキーで2つの値を指定することができ、最後の値が優先されるようです。信じられないかもしれませんが、JSON パーサーも同じように動作することがわかりました。ですから、これを使って、解析されたオブジェクト表現には存在しないコメントをソースJSONに作成することができます。</target>
        </trans-unit>
        <trans-unit id="82cd8d15b1bd8e199799380ad43d59ee9b5ba712" translate="yes" xml:space="preserve">
          <source>It depends on your JSON library. &lt;a href=&quot;https://github.com/JamesNK/Newtonsoft.Json&quot;&gt;Json.NET&lt;/a&gt; supports JavaScript-style comments, &lt;code&gt;/* commment */&lt;/code&gt;.</source>
          <target state="translated">それはあなたのJSONライブラリに依存します。 &lt;a href=&quot;https://github.com/JamesNK/Newtonsoft.Json&quot;&gt;Json.NET&lt;/a&gt;は、JavaScriptスタイルのコメント、 &lt;code&gt;/* commment */&lt;/code&gt; コメント* /をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6ff7ed3f3d0cb930680ea06a91bdd9f410385b49" translate="yes" xml:space="preserve">
          <source>It doesn't really allow for comments as such, however, passing a comment as one of the name/value pairs in the data would certainly work, although that data would obviously need to be ignored or handled specifically by the parsing code.</source>
          <target state="translated">しかし、コメントをデータ中の名前と値のペアの一つとして渡すことは確かに可能です。</target>
        </trans-unit>
        <trans-unit id="8b19f596dc7224ce2f8d5b6d837618e59941abcb" translate="yes" xml:space="preserve">
          <source>It's an interesting curiosity, but you &lt;strong&gt;should really not be using it for anything at all&lt;/strong&gt;. Below is the original answer.</source>
          <target state="translated">これは興味深い好奇心です&lt;strong&gt;が、実際には何にも使用しないでください&lt;/strong&gt; 。 以下は元の答えです。</target>
        </trans-unit>
        <trans-unit id="74a40f3578a3c42e743f19623deb9c7f5d776631" translate="yes" xml:space="preserve">
          <source>JSON by design is an easily reverse-engineered (human parsed) alternative to XML. It is simplified even to the point that annotations are unnecessary. It is not even a markup language. The goal is stability and  interoperablilty.</source>
          <target state="translated">デザインによるJSONは、XMLに代わるリバースエンジニアリング(人間が解析)が容易なものです。注釈が不要なほど単純化されています。マークアップ言語ですらありません。目標は安定性と相互運用性です。</target>
        </trans-unit>
        <trans-unit id="8398b2bb763389aa2a2ee5d9f2352ebd5b7accf0" translate="yes" xml:space="preserve">
          <source>JSON can do all they can do, but it is way less verbose and more human readable - and parsers are easy and ubiquitous in many languages. It's just a tree of data. But out-of-band comments are a necessity often to document &quot;default&quot; configurations and the like. Configurations are never to be &quot;full documents&quot;, but trees of saved data that can be human readable when needed.</source>
          <target state="translated">JSONはできることはすべてできますが、より冗長でなく、より人間が読みやすいものです。ただのデータのツリーです。しかし、帯域外コメントは「デフォルト」の設定などを文書化するために必要です。設定は決して「完全な文書」であるべきではなく、必要なときに人間が読めるように保存されたデータの木です。</target>
        </trans-unit>
        <trans-unit id="8c1993e45bffed1300c1dc50e5447b301e83790f" translate="yes" xml:space="preserve">
          <source>JSON does not have comments. A JSON encoder MUST NOT output comments.
  A JSON decoder MAY accept and ignore comments.</source>
          <target state="translated">JSONにはコメントがありません。JSON エンコーダーはコメントを出力してはいけません(MUST NOT)。JSONデコーダはコメントを受け入れたり無視したりしてもよい[MAY]。</target>
        </trans-unit>
        <trans-unit id="e2e64a9d1e8c5e44b330ca7a7b80a5418ba7d47d" translate="yes" xml:space="preserve">
          <source>JSON does not support comments natively, but you can make your own decoder or at least preprocessor to strip out comments, that's perfectly fine (as long as you just ignore comments and don't use them to guide how your application should process the JSON data).</source>
          <target state="translated">JSON はコメントをネイティブにはサポートしていませんが、コメントを取り除くために独自のデコーダや少なくともプリプロセッサを作ることができます。</target>
        </trans-unit>
        <trans-unit id="726f133617e74aa8751821a42ceb51d521bc92cd" translate="yes" xml:space="preserve">
          <source>JSON does not support comments. It was also never intended to be used for configuration files where comments would be needed.</source>
          <target state="translated">JSON はコメントをサポートしていません。また、コメントが必要な設定ファイルに使用することも意図していませんでした。</target>
        </trans-unit>
        <trans-unit id="501bdc0f8fdf940649176ca24d143965cb8f6989" translate="yes" xml:space="preserve">
          <source>JSON doesn't allow comments, per se. The reasoning is utterly foolish, because you can use JSON &lt;em&gt;itself&lt;/em&gt; to create comments, which obviates the reasoning entirely, &lt;em&gt;and&lt;/em&gt; loads the parser data space for no good reason at all for &lt;em&gt;exactly&lt;/em&gt; the same result and potential issues, such as they are: a JSON file with comments.</source>
          <target state="translated">JSON自体はコメントを許可しません。 JSON &lt;em&gt;自体&lt;/em&gt;を使用してコメントを作成できるため、推論はまったくばかげています。これにより、推論が完全に不要になり、パーサーデータスペースを&lt;em&gt;まったく&lt;/em&gt;同じ理由で&lt;em&gt;まったく&lt;/em&gt;同じ結果と潜在的な問題に対してロードします。コメント付きのファイル。</target>
        </trans-unit>
        <trans-unit id="09c3b12a027d2dcd8c91b9b62b6f273b10bad380" translate="yes" xml:space="preserve">
          <source>JSON has its syntax visualized on that page. There isn't any note about comments.</source>
          <target state="translated">JSONはそのページで構文が可視化されています。コメントについての注意書きはありません。</target>
        </trans-unit>
        <trans-unit id="976fd2bc03bc2a22ff4f002d1679d2a1718f3011" translate="yes" xml:space="preserve">
          <source>JSON makes a lot of sense for config files and other local usage because it's ubiquitous and because it's much simpler than XML.</source>
          <target state="translated">JSON はユビキタスであり、XML よりもはるかにシンプルなので、設定ファイルやその他のローカルでの使用に多くの意味があります。</target>
        </trans-unit>
        <trans-unit id="000792ec4997245cbcd13240bdaead6035bcfda0" translate="yes" xml:space="preserve">
          <source>JSON-COM: JSON on the wire, or rules that apply when communicating JSON data.</source>
          <target state="translated">JSON-COM:JSON on the wire、またはJSONデータを通信する際に適用されるルール。</target>
        </trans-unit>
        <trans-unit id="48b52d89e7b207194b31e0efa96191605763a131" translate="yes" xml:space="preserve">
          <source>JSON-DOC will allow comments, and other minor differences might exist such as handling whitespace. Parsers can easily convert from one spec to the other.</source>
          <target state="translated">JSON-DOCはコメントを許可しますが、他にも空白の扱いなどの細かい違いがあるかもしれません。パーサは簡単に一方の仕様から他方の仕様に変換することができます。</target>
        </trans-unit>
        <trans-unit id="6dbc0606e8c2b4a5f2222aeb77b6b7252bfd4168" translate="yes" xml:space="preserve">
          <source>JSON-DOC: JSON document, or JSON in files or locally. Rules that define a valid JSON document.</source>
          <target state="translated">JSON-DOC:JSON ドキュメント、またはファイルまたはローカルでの JSON。有効なJSON文書を定義するルール。</target>
        </trans-unit>
        <trans-unit id="b019fec79fce564e6a858d4135ba07c6e432fcf0" translate="yes" xml:space="preserve">
          <source>No, you shouldn't use duplicative object members to stuff side channel data into a JSON encoding. (See &quot;The names within an object SHOULD be unique&quot; &lt;a href=&quot;https://tools.ietf.org/html/rfc7159&quot;&gt;in the RFC&lt;/a&gt;).</source>
          <target state="translated">いいえ、サイドチャネルデータをJSONエンコーディングに詰め込むために重複オブジェクトメンバーを使用しないでください。 （ &lt;a href=&quot;https://tools.ietf.org/html/rfc7159&quot;&gt;RFCの&lt;/a&gt; 「オブジェクト内の名前は一意である必要があります」を参照してください）。</target>
        </trans-unit>
        <trans-unit id="b8b9f1367ad6269845f5ec54d66262066092883f" translate="yes" xml:space="preserve">
          <source>No.</source>
          <target state="translated">No.</target>
        </trans-unit>
        <trans-unit id="41f3445f00f7570dee2718e061446c8ba3e2c310" translate="yes" xml:space="preserve">
          <source>Other JavaScript toolkits may work similarly.</source>
          <target state="translated">他のJavaScriptツールキットも同様に動作する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d7e64daaa3f687a35f3ef2e5959e2d88a2537414" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://hjson.org&quot;&gt;hjson.org&lt;/a&gt; for JavaScript, Java, Python, PHP, Rust, Go, Ruby and C# libraries.</source>
          <target state="translated">JavaScript、Java、Python、PHP、Rust、Go、Ruby、C＃ライブラリについては、 &lt;a href=&quot;http://hjson.org&quot;&gt;hjson.org&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="dfaf82f0dc0b49d0e045c25d554109dfb4f850f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://stackoverflow.com/a/10325432/166286&quot;&gt;another Stack&amp;nbsp;Overflow question&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/10325432/166286&quot;&gt;別のスタックオーバーフローの質問を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="073200acf99512df8130754287c73186048bb656" translate="yes" xml:space="preserve">
          <source>Simply &lt;code&gt;npm install --save strip-json-comments&lt;/code&gt; to install and use it like:</source>
          <target state="translated">&lt;code&gt;npm install --save strip-json-comments&lt;/code&gt; をインストールして使用するだけです：</target>
        </trans-unit>
        <trans-unit id="f506a3540bd757d871fdaa0806e59e8449171ae5" translate="yes" xml:space="preserve">
          <source>Since I had a similar file in my local folder, there were no issues with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;Same-origin policy&lt;/a&gt;, so I decided to use pure JSON... and, of course, &lt;code&gt;$.getJSON&lt;/code&gt; was failing silently because of the comments.</source>
          <target state="translated">ローカルフォルダーに同様のファイルがあったため、 &lt;a href=&quot;http://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;Same-originポリシーに&lt;/a&gt;は問題がなかったので、純粋なJSONを使用することにしました...もちろん、コメントのために &lt;code&gt;$.getJSON&lt;/code&gt; が警告なしで失敗していました。</target>
        </trans-unit>
        <trans-unit id="71afd90a6307c6c96cb48a0eb950d54ed21ba403" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://web.archive.org/web/20120507093915/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;Public statement by Douglas Crockford on G+&lt;/a&gt;</source>
          <target state="translated">出典： &lt;a href=&quot;https://web.archive.org/web/20120507093915/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;G +に関するDouglas Crockfordの公式声明&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7597ad58479a9cadb8c485eff7b25f3dcde2534b" translate="yes" xml:space="preserve">
          <source>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</source>
          <target state="translated">JSONを使って設定ファイルを保持していて、それに注釈を付けたいとします。好きなだけコメントを挿入してください。そして、それを JSON パーサに渡す前に JSMin でパイプします。</target>
        </trans-unit>
        <trans-unit id="95c4ec0c1f6b94f7fa15f8848f32685e381ea392" translate="yes" xml:space="preserve">
          <source>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser. - &lt;a href=&quot;https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;Douglas Crockford, 2012&lt;/a&gt;</source>
          <target state="translated">JSONを使用して、注釈を付けたい構成ファイルを保持しているとします。 先に行き、あなたが好きなすべてのコメントを挿入してください。 次に、それをJSMinにパイプしてから、JSONパーサーに渡します。 - &lt;a href=&quot;https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;ダグラス・クロックフォード、2012&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a31010b229f5d5d38cb8460296b3ffc06502029e" translate="yes" xml:space="preserve">
          <source>Sure a JSON specific minify can be implemented in any language,
but standardize this so it becomes ubiquitous across parsers in all languages and platforms so people stop wasting their time lacking the feature because they have good use-cases for it, looking the issue up in online forums, and getting people telling them it's a bad idea or suggesting it's easy to implement stripping comments out of text files.</source>
          <target state="translated">確かにJSON固有のminifyはどの言語でも実装できますが、標準化することで、すべての言語やプラットフォームのパーサーでユビキタスなものになるので、ユーザが良いユースケースを持っているからといって、その機能に欠けている時間を無駄にしたり、オンラインフォーラムで問題を調べたり、それは良くないアイデアだと言われたり、テキストファイルからコメントを削除するのは簡単だと提案されたりするのを止めてください。</target>
        </trans-unit>
        <trans-unit id="3e99e6da8be38fff3a522f1f23ad02df352466c2" translate="yes" xml:space="preserve">
          <source>The Dojo Toolkit JavaScript toolkit (at least as of version 1.4), allows you to include comments in your JSON. The comments can be of &lt;code&gt;/* */&lt;/code&gt; format. Dojo Toolkit consumes the JSON via the &lt;code&gt;dojo.xhrGet()&lt;/code&gt; call.</source>
          <target state="translated">Dojo Toolkit JavaScriptツールキット（少なくともバージョン1.4以降）では、JSONにコメントを含めることができます。 コメントは &lt;code&gt;/* */&lt;/code&gt; 形式にすることができます。 Dojo Toolkitは、 &lt;code&gt;dojo.xhrGet()&lt;/code&gt; 呼び出しを介してJSONを使用します。</target>
        </trans-unit>
        <trans-unit id="506b87b707c634e0b2a9ca847a5419d0c97d6a4c" translate="yes" xml:space="preserve">
          <source>The JSON should all be data, and if you include a comment, then it will be data too.</source>
          <target state="translated">JSONは全てデータになるはずで、コメントを入れればそれもデータになります。</target>
        </trans-unit>
        <trans-unit id="29b2cd6789d0e06a6f2f17423431e5a7ccf21a24" translate="yes" xml:space="preserve">
          <source>The above code is &lt;a href=&quot;http://jsonlint.com/&quot;&gt;valid JSON&lt;/a&gt;. If you parse it, you'll get an object like this:</source>
          <target state="translated">上記のコードは&lt;a href=&quot;http://jsonlint.com/&quot;&gt;有効なJSON&lt;/a&gt;です。 解析すると、次のようなオブジェクトが得られます。</target>
        </trans-unit>
        <trans-unit id="b8f8fba45d519a650dd034779bb67724bec9b4eb" translate="yes" xml:space="preserve">
          <source>The idea behind JSON is to provide simple data exchange between applications. These are typically web based and the language is JavaScript.</source>
          <target state="translated">JSONの背後にある考え方は、アプリケーション間で簡単なデータ交換を提供することです。これらは一般的にウェブベースであり、言語はJavaScriptです。</target>
        </trans-unit>
        <trans-unit id="118eacae6b4f733ba3d8e27073279fa7d6945aa8" translate="yes" xml:space="preserve">
          <source>The official JSON site is at &lt;a href=&quot;http://json.org&quot;&gt;JSON.org&lt;/a&gt;. JSON is defined as a &lt;a href=&quot;http://ecma-international.org/publications/standards/Ecma-404.htm&quot;&gt;standard&lt;/a&gt; by ECMA International. There is always a petition process to have standards revised. It is unlikely that annotations will be added to the JSON standard for several reasons.</source>
          <target state="translated">公式のJSONサイトは&lt;a href=&quot;http://json.org&quot;&gt;JSON.orgにあり&lt;/a&gt;ます。 JSONはECMA Internationalによって&lt;a href=&quot;http://ecma-international.org/publications/standards/Ecma-404.htm&quot;&gt;標準&lt;/a&gt;として定義されています。 基準を改訂するための請願プロセスは常にあります。 いくつかの理由により、JSON標準に注釈が追加されることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="6de039dc41d4aabcce5230d7a4c62570374729b7" translate="yes" xml:space="preserve">
          <source>The other issue is interoperability. Suppose you have a library or API or any kind of subsystem which has some config or data files associated with it. And this subsystem is
to be accessed from different languages.  Then do you go about telling people: by the way
don't forget to strip out the comments from the JSON files before passing them to the parser!</source>
          <target state="translated">もう一つの問題は相互運用性です。例えば、ライブラリやAPI、あるいは何らかの種類のサブシステムがあって、それに関連した設定ファイルやデータファイルを持っているとします。そして、このサブシステムは異なる言語からアクセスすることになっています。では、パーサに渡す前にJSONファイルからコメントを削除することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="d0841b7455110d89326e1a28a5e44e10c4570e5d" translate="yes" xml:space="preserve">
          <source>Then encode your comment in binary:</source>
          <target state="translated">そして、あなたのコメントをバイナリでエンコードします。</target>
        </trans-unit>
        <trans-unit id="cb80cdc45aa7b8b143f7abe549b0a2a38ef5ca01" translate="yes" xml:space="preserve">
          <source>Then steg your binary:</source>
          <target state="translated">それから、あなたのバイナリをステグ。</target>
        </trans-unit>
        <trans-unit id="93ae98bd84aa4fbc409553d7cab4dfbf8d06c00b" translate="yes" xml:space="preserve">
          <source>Then you can have comments like this:</source>
          <target state="translated">そうすると、こんなコメントが出てきます。</target>
        </trans-unit>
        <trans-unit id="49db07c0eb71bb872bdde75cfbad8f1430e8e945" translate="yes" xml:space="preserve">
          <source>There is actually a way to add comments, and stay within the spec (no additional parser needed). It will not result into human-readable comments without any sort of parsing though.</source>
          <target state="translated">実際には、コメントを追加して仕様内にとどめる方法があります(追加のパーサは必要ありません)。しかし、何らかの構文解析を行わなければ、人間が読めるコメントにはなりません。</target>
        </trans-unit>
        <trans-unit id="939c8690fd4debc3efc52fd16ff9fa763116587f" translate="yes" xml:space="preserve">
          <source>This can be helpful when experimenting with alternate data structures (or even data lists) before choosing a final option.</source>
          <target state="translated">これは、最終的な選択肢を選択する前に、代替データ構造(またはデータリスト)を実験する際に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f64679fe6571746a9ba9e6ac37f387ce8686d481" translate="yes" xml:space="preserve">
          <source>This is a &lt;strong&gt;&quot;can you&quot;&lt;/strong&gt; question. And here is a &lt;strong&gt;&quot;yes&quot;&lt;/strong&gt; answer.</source>
          <target state="translated">これは&lt;strong&gt;「できますか」&lt;/strong&gt;という質問です。 そして、ここに&lt;strong&gt;「はい」の&lt;/strong&gt;答えがあります。</target>
        </trans-unit>
        <trans-unit id="6fdccc472b5b375de3890696c9e5a380489af6fb" translate="yes" xml:space="preserve">
          <source>This only annotation required might be &quot;//These are DAG tags&quot;. The key names can be as informative as required, allowing arbitrary semantic arity.</source>
          <target state="translated">必要なのは「/These are DAG tags」というアノテーションだけかもしれません。キー名は必要に応じて情報を提供することができ、任意のセマンティック・アリティを可能にします。</target>
        </trans-unit>
        <trans-unit id="c9b00a22cb69ded735c57bf505cdfefe076ebaa9" translate="yes" xml:space="preserve">
          <source>This will just leave you with a lot of unreadable whitespace (unless you make an IDE plugin to encode/decode it on the fly).</source>
          <target state="translated">これでは、(IDE プラグインを作ってその場でエンコードしない限り)読めない空白がたくさん残ることになります。</target>
        </trans-unit>
        <trans-unit id="388b829f16dd17f84ea2ba8d1476b6313b19ec03" translate="yes" xml:space="preserve">
          <source>To cut a JSON item into parts I add &quot;dummy comment&quot; lines:</source>
          <target state="translated">JSONの項目を部分的にカットするために、「ダミーコメント」の行を追加しています。</target>
        </trans-unit>
        <trans-unit id="c46c93b452125db5e01ac6f5b129d24508a4638b" translate="yes" xml:space="preserve">
          <source>We are using &lt;a href=&quot;https://github.com/sindresorhus/strip-json-comments&quot;&gt;&lt;code&gt;strip-json-comments&lt;/code&gt;&lt;/a&gt; for our project. It supports something like:</source>
          <target state="translated">プロジェクトには&lt;a href=&quot;https://github.com/sindresorhus/strip-json-comments&quot;&gt; &lt;code&gt;strip-json-comments&lt;/code&gt; &lt;/a&gt;を使用しています。 それは次のようなものをサポートします：</target>
        </trans-unit>
        <trans-unit id="3541c15e44949bf6aaf515ad0f11200bb4b27c8a" translate="yes" xml:space="preserve">
          <source>We're talking about a generic config file issue (cross language/platform), and he's answering with a JS specific utility!</source>
          <target state="translated">一般的なコンフィグファイルの問題(クロスランゲージプラットフォーム)について話しているのですが、JSに特化したユーティリティで答えてくれています!</target>
        </trans-unit>
        <trans-unit id="40086162c11724bb65bc484b7a663182d4a0214f" translate="yes" xml:space="preserve">
          <source>When I released it, I got a huge backlash of people disagreeing with even the idea of it, so I decided that I'd write a comprehensive blog post on why &lt;a href=&quot;http://web.archive.org/web/20100629021329/http://blog.getify.com/2010/06/json-comments/&quot;&gt;comments make sense in JSON&lt;/a&gt;. It includes this notable comment from the creator of JSON:</source>
          <target state="translated">それをリリースしたとき、私はそれについてさえ意見に反対する人々の大きな反発を得たので、 &lt;a href=&quot;http://web.archive.org/web/20100629021329/http://blog.getify.com/2010/06/json-comments/&quot;&gt;コメントがJSONで理にかなっ&lt;/a&gt;ている理由について包括的なブログ投稿を書くことにしました。 JSONの作成者からの次の注目すべきコメントが含まれています。</target>
        </trans-unit>
        <trans-unit id="98fd7e23dcf6f9b9b1816044ced909699b4c49f7" translate="yes" xml:space="preserve">
          <source>Which means there is no trace of the comments, and they won't have weird side-effects.</source>
          <target state="translated">つまりコメントの痕跡が残らないから変な副作用が出ないってことだな</target>
        </trans-unit>
        <trans-unit id="c4cb6522fff6a5d557f0d476627f9ece04ec2cfd" translate="yes" xml:space="preserve">
          <source>With regards to the &lt;a href=&quot;https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;remark&lt;/a&gt; made by Douglas Crockford on this issues (referenced by @Artur Czajka)</source>
          <target state="translated">この問題に関してダグラス・クロックフォードが行った&lt;a href=&quot;https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr&quot;&gt;発言&lt;/a&gt;について（@Artur Czajkaが参照）</target>
        </trans-unit>
        <trans-unit id="feaa09360dfd54411746acac2798b890bddec1c2" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; have comments in &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;, but not in pure JSON. I've just spent an hour trying to make my program work with this example from Highcharts: &lt;a href=&quot;http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;amp;callback=?&quot;&gt;http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;amp;callback=?&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPでは&lt;/a&gt;コメントを使用&lt;em&gt;でき&lt;/em&gt;ます&lt;em&gt;が&lt;/em&gt; 、純粋なJSON では使用 &lt;em&gt;でき&lt;/em&gt;ません。 Highchartsの次の例を使用してプログラムを動作させるために1時間費やしました。http：//www.highcharts.com/samples/data/jsonp.php &lt;a href=&quot;http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;amp;callback=?&quot;&gt;？&lt;/a&gt; filename = aapl-c.json＆callback =？</target>
        </trans-unit>
        <trans-unit id="1deff785b9f44f36c7ffb11fb73ab887e7163ffb" translate="yes" xml:space="preserve">
          <source>You can provide documentation by using the &lt;strong&gt;description&lt;/strong&gt; schema attribute.</source>
          <target state="translated">&lt;strong&gt;説明&lt;/strong&gt;スキーマ属性を使用して、ドキュメントを提供できます。</target>
        </trans-unit>
        <trans-unit id="6321e0e7526a00ea19de7e51a8a6484deb9e4c60" translate="yes" xml:space="preserve">
          <source>You can't. At least that's my experience from a quick glance at &lt;a href=&quot;http://json.org&quot;&gt;json.org&lt;/a&gt;.</source>
          <target state="translated">できません。 少なくとも、これは&lt;a href=&quot;http://json.org&quot;&gt;json.orgをざっと&lt;/a&gt;見た私の経験です 。</target>
        </trans-unit>
        <trans-unit id="a38662ff523b7d9c8a3a3c993706047579876c91" translate="yes" xml:space="preserve">
          <source>You could abuse the following:</source>
          <target state="translated">以下のように悪用することができます。</target>
        </trans-unit>
        <trans-unit id="1a3df4432a8595e033223ec8fe5e551c685694e2" translate="yes" xml:space="preserve">
          <source>You could have a designated data element called &lt;code&gt;&quot;_comment&quot;&lt;/code&gt; (or something) that would be ignored by apps that use the JSON data.</source>
          <target state="translated">JSONデータを使用するアプリによって無視される &lt;code&gt;&quot;_comment&quot;&lt;/code&gt; （または何か）と呼ばれる指定されたデータ要素を持つことができます。</target>
        </trans-unit>
        <trans-unit id="7d1a793bb1b7d02580215fd79bb3a42efc2f9543" translate="yes" xml:space="preserve">
          <source>You should write a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; instead. JSON schema is currently a proposed Internet draft specification. Besides documentation, the schema can also be used for validating your JSON data.</source>
          <target state="translated">代わりに&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSONスキーマ&lt;/a&gt;を記述する必要があります 。 JSONスキーマは、現在提案されているインターネットドラフト仕様です。 ドキュメントの他に、スキーマはJSONデータの検証にも使用できます。</target>
        </trans-unit>
        <trans-unit id="5f1eb38f94b01dd40159fa9e41b98ceba4ac1117" translate="yes" xml:space="preserve">
          <source>You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it.</source>
          <target state="translated">JSONのデータがどのようなものになるのか、少なくとも構造は事前に知っているはずなので、JSONを生成・受信するプロセスにコメントを入れておいた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="7e147e80eb87acbe7b929c746720cc66c49a3fae" translate="yes" xml:space="preserve">
          <source>comment example */</source>
          <target state="translated">コメント例</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
