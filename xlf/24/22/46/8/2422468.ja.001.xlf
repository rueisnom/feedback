<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://stackoverflow.com/questions/2422468">
    <body>
      <group id="2422468">
        <trans-unit id="5f1ca1210967cf7ec0665a0d48a694121d166ff6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads&quot;&gt;http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads&quot;&gt;http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c802972cb140e98ca35c9f54cf59cd4c59c3c504" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;AS YOU CAN SEE&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;あなたが見ることができるように&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="c8c82fd6d2b50c25f40c28ce6616fc2c94a9a204" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In the JSP File&lt;/em&gt; or &lt;em&gt;Servlet&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;JSPファイル&lt;/em&gt;または&lt;em&gt;サーブレット&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6cdfa52c2ae1a0fca0bd83cad23cb73192529104" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In the html file&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;htmlファイル&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="91f22f129213fc64bd890400f19b52156434e6ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For Spring MVC&lt;/strong&gt;
I have been trying for hours to do this
and managed to have a simpler version that worked for taking form input both data and image.</source>
          <target state="translated">&lt;strong&gt;Spring MVCの場合、&lt;/strong&gt;私は何時間もこれを行うために努力しており、データと画像の両方のフォーム入力を取得するために機能する単純なバージョンをなんとか持っています。</target>
        </trans-unit>
        <trans-unit id="976c186c8b17e4ceb58ac69ab373f6b81d7f9717" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Uploading Files using JSP. Files:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSPを使用したファイルのアップロード。&lt;/strong&gt; &lt;strong&gt;ファイル：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b7d61c47c1d04f0f13c6b6b6c5f034514ad0a80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Without component or external Library in Tomcat 6 o 7&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tomcat 6 o 7のコンポーネントまたは外部ライブラリなし&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="816b589dc3fcb7f757c8d78e6f2c8aff66eabd0c" translate="yes" xml:space="preserve">
          <source>Abstract template for static resource servlet supporting HTTP caching</source>
          <target state="translated">HTTP キャッシングをサポートする静的リソースサーブレットのための抽象テンプレート</target>
        </trans-unit>
        <trans-unit id="79896a10f482904c45ecf45713e4ab831d7e3b9b" translate="yes" xml:space="preserve">
          <source>After submitting such a form, the binary multipart form data is available in the request body in &lt;a href=&quot;https://stackoverflow.com/questions/13372775/servlet-handling-file-upload-why-bigger-than-the-original/13399437#13399437&quot;&gt;a different format&lt;/a&gt; than when the &lt;code&gt;enctype&lt;/code&gt; isn't set.</source>
          <target state="translated">このようなフォームを送信すると、バイナリマルチパートフォームデータは、 &lt;code&gt;enctype&lt;/code&gt; が設定されていない場合とは&lt;a href=&quot;https://stackoverflow.com/questions/13372775/servlet-handling-file-upload-why-bigger-than-the-original/13399437#13399437&quot;&gt;異なる形式&lt;/a&gt;でリクエストの本文に表示されます。</target>
        </trans-unit>
        <trans-unit id="fa01a9138d6ed5581ec69a547036ead99184f82e" translate="yes" xml:space="preserve">
          <source>Ajaxifying the form</source>
          <target state="translated">フォームの Ajax 化</target>
        </trans-unit>
        <trans-unit id="b6cda67eca08015c20a43a0579a2814b5771ce0a" translate="yes" xml:space="preserve">
          <source>Alternatively you can also wrap this all in a &lt;code&gt;Filter&lt;/code&gt; which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using &lt;code&gt;request.getParameter()&lt;/code&gt; the usual way and retrieve the uploaded file by &lt;code&gt;request.getAttribute()&lt;/code&gt;. &lt;a href=&quot;http://balusc.blogspot.com/2007/11/multipartfilter.html&quot;&gt;You can find an example in this blog article&lt;/a&gt;.</source>
          <target state="translated">あるいは、これをすべて自動的に解析する &lt;code&gt;Filter&lt;/code&gt; でこれをすべてラップし、リクエストのパラメーターマップにこれらを戻すことで、通常の方法で &lt;code&gt;request.getParameter()&lt;/code&gt; を引き続き使用し、 &lt;code&gt;request.getAttribute()&lt;/code&gt; 。 &lt;a href=&quot;http://balusc.blogspot.com/2007/11/multipartfilter.html&quot;&gt;このブログ記事で例を見つけることができます&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="eed3425334f048339b7269df43a9de0871184e14" translate="yes" xml:space="preserve">
          <source>Another source of this problem occurs if you are using Geronimo with its embedded Tomcat. In this case, after many iterations of testing commons-io and commons-fileupload, the problem arises from a parent classloader handling the commons-xxx jars. This has to be prevented. The crash always occurred at:</source>
          <target state="translated">この問題のもう一つの原因は、Tomcat を組み込んだ Geronimo を使用している場合に発生します。この場合、commons-io と commons-fileupload のテストを何度も繰り返した後、問題は commons-xxx ジャーを扱う親クラスローダから発生します。これを防ぐ必要があります。クラッシュは常に発生していました。</target>
        </trans-unit>
        <trans-unit id="052285112e7153712a45418d1cb8aadce253de0f" translate="yes" xml:space="preserve">
          <source>Before Servlet 3.0, the Servlet API didn't natively support &lt;code&gt;multipart/form-data&lt;/code&gt;. It supports only the default form enctype of &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;. The &lt;code&gt;request.getParameter()&lt;/code&gt; and consorts would all return &lt;code&gt;null&lt;/code&gt; when using multipart form data. This is where the well known &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt; came into the picture.</source>
          <target state="translated">サーブレット3.0以前は、サーブレットAPIは &lt;code&gt;multipart/form-data&lt;/code&gt; をネイティブでサポートしていませんでした。 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; のデフォルトのフォームenctypeのみをサポートします。 マルチパートフォームデータを使用すると、 &lt;code&gt;request.getParameter()&lt;/code&gt; およびconsortsはすべて &lt;code&gt;null&lt;/code&gt; を返します 。 これは、よく知られている&lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt;が登場した場所です。</target>
        </trans-unit>
        <trans-unit id="f5ec78b41b25ed040e46c59fb888dcada543adb1" translate="yes" xml:space="preserve">
          <source>Compile above servlet UploadServlet and create required entry in web.xml file as follows.</source>
          <target state="translated">上記のサーブレットUploadServletをコンパイルし、以下のようにweb.xmlファイルに必要なエントリを作成します。</target>
        </trans-unit>
        <trans-unit id="7519374a969b224a434ff7a89d5989428f5f1e88" translate="yes" xml:space="preserve">
          <source>Controller to handle</source>
          <target state="translated">コントローラーで処理</target>
        </trans-unit>
        <trans-unit id="79888d887fe201f7187f97359c2a96e1253b3b07" translate="yes" xml:space="preserve">
          <source>Don't manually parse it!</source>
          <target state="translated">手動で解析するな!</target>
        </trans-unit>
        <trans-unit id="f42ea9cd1b30e9f99e72f812f872a3199f233324" translate="yes" xml:space="preserve">
          <source>During research I stumbled upon &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Common FileUpload&lt;/a&gt;. I tried this:</source>
          <target state="translated">調査中、 &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Common FileUpload&lt;/a&gt;を偶然見つけました。 私はこれを試しました：</target>
        </trans-unit>
        <trans-unit id="236e4ef34309253923d558786788c10ae6bee8fa" translate="yes" xml:space="preserve">
          <source>Edit your code to servlet requirements, like &lt;em&gt;max-file-size&lt;/em&gt;, &lt;em&gt;max-request-size&lt;/em&gt;  and other options that you can to set...</source>
          <target state="translated">&lt;em&gt;max-file-size&lt;/em&gt; 、 &lt;em&gt;max-request-size&lt;/em&gt;など、サーブレットの要件に合わせてコードを編集し、設定できるその他のオプションを...</target>
        </trans-unit>
        <trans-unit id="f49cde406e0c7558373b92d169a18ab1b83c650d" translate="yes" xml:space="preserve">
          <source>Enabling Upload in the &lt;strong&gt;web.xml&lt;/strong&gt; file:</source>
          <target state="translated">&lt;strong&gt;web.xml&lt;/strong&gt;ファイルでアップロードを有効にする：</target>
        </trans-unit>
        <trans-unit id="4005b98aca50467cf88bae12854c110a5f44481b" translate="yes" xml:space="preserve">
          <source>Finally, I found 1 place that posed a working solution which successfully solved my problem. You must hide the jars from parent loader in the deployment plan. This was put into geronimo-web.xml with my full file shown below.</source>
          <target state="translated">最終的に、私は私の問題をうまく解決してくれる解決策を提示している場所を1箇所見つけました。デプロイプランの中で、親ローダからのjarを非表示にしなければなりません。これをgeronimo-web.xmlに記述したのが、以下のファイルです。</target>
        </trans-unit>
        <trans-unit id="01614b7b5b022c8fa0d8275c860507f89f85d53c" translate="yes" xml:space="preserve">
          <source>First annotate your servlet with &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/MultipartConfig.html&quot;&gt;&lt;code&gt;@MultipartConfig&lt;/code&gt;&lt;/a&gt; in order to let it recognize and support &lt;code&gt;multipart/form-data&lt;/code&gt; requests and thus get &lt;code&gt;getPart()&lt;/code&gt; to work:</source>
          <target state="translated">最初に&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/MultipartConfig.html&quot;&gt; &lt;code&gt;@MultipartConfig&lt;/code&gt; を使用&lt;/a&gt;してサーブレットに注釈を付け、 &lt;code&gt;multipart/form-data&lt;/code&gt; リクエストを認識およびサポートして、 &lt;code&gt;getPart()&lt;/code&gt; が機能するようにします。</target>
        </trans-unit>
        <trans-unit id="d24d616c422437d271ef913e0e7477402ee96bd1" translate="yes" xml:space="preserve">
          <source>From this object you have to get file items and fields then yo can store into server like followed:</source>
          <target state="translated">このオブジェクトからファイルの項目とフィールドを取得して、以下のようにサーバーに保存することができます。</target>
        </trans-unit>
        <trans-unit id="df217e018684ead21e0e3025a39df8244dc03d22" translate="yes" xml:space="preserve">
          <source>HTML PAGE</source>
          <target state="translated">HTMLページ</target>
        </trans-unit>
        <trans-unit id="0ab82452935082c91e91a8a8f671f8bc055f06bc" translate="yes" xml:space="preserve">
          <source>HTML5 File Upload to Java Servlet</source>
          <target state="translated">HTML5ファイルのJavaサーブレットへのアップロード</target>
        </trans-unit>
        <trans-unit id="7608e216c8f08f251d8c0741b8ca119d95a352a5" translate="yes" xml:space="preserve">
          <source>Head to the following answers for detail on properly saving the obtained &lt;code&gt;InputStream&lt;/code&gt; (the &lt;code&gt;fileContent&lt;/code&gt; variable as shown in the above code snippets) to disk or database:</source>
          <target state="translated">取得した &lt;code&gt;InputStream&lt;/code&gt; （上記のコードスニペットに示されている &lt;code&gt;fileContent&lt;/code&gt; 変数）をディスクまたはデータベースに適切に保存する方法の詳細については、次の回答を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b60022c2a6fd10edd9ae3509070592342be240f" translate="yes" xml:space="preserve">
          <source>Head to the following answers for detail on properly serving the saved file from disk or database back to the client:</source>
          <target state="translated">保存されたファイルをディスクまたはデータベースからクライアントに戻すことを適切に提供するための詳細については、次の回答を参照してください。</target>
        </trans-unit>
        <trans-unit id="60bd560a3d767322c4a1bdea25e056bb263ff016" translate="yes" xml:space="preserve">
          <source>Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting).</source>
          <target state="translated">Ajax(とjQuery)を使用してアップロードする方法を以下の回答に向かう。フォームデータを収集するサーブレットのコードを変更する必要はありません。応答方法だけが変更されるかもしれませんが、これはかなり些細なことです(つまり、JSPに転送する代わりに、Ajax呼び出しを担当するスクリプトが何を期待しているかに応じて、JSONやXML、あるいはプレーンテキストを出力するだけです)。</target>
        </trans-unit>
        <trans-unit id="f747461915808e1d4e154030418828c551656641" translate="yes" xml:space="preserve">
          <source>Here's a kickoff example how the &lt;code&gt;doPost()&lt;/code&gt; of your &lt;code&gt;UploadServlet&lt;/code&gt; may look like when using Apache Commons FileUpload:</source>
          <target state="translated">Apache Commons FileUploadを使用するときに &lt;code&gt;UploadServlet&lt;/code&gt; の &lt;code&gt;doPost()&lt;/code&gt; がどのように見えるかを示すキックオフの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="75e1da44ba61ab15b1882c07714ba4ee5596822f" translate="yes" xml:space="preserve">
          <source>Here's an example using apache commons-fileupload:</source>
          <target state="translated">apache commons-fileuploadを使用した例です。</target>
        </trans-unit>
        <trans-unit id="f06f21f48ab00714a5f687efe6ed514e6290f68e" translate="yes" xml:space="preserve">
          <source>Hope it helps :)</source>
          <target state="translated">それが役立つことを願っています :)</target>
        </trans-unit>
        <trans-unit id="c7ae901846dd48f28c5a142807dfc13230248ca8" translate="yes" xml:space="preserve">
          <source>Hope this all helps :)</source>
          <target state="translated">これがすべての助けになることを願っています :)</target>
        </trans-unit>
        <trans-unit id="25fcff96928db75f166883f1bb1a1957e971ae6c" translate="yes" xml:space="preserve">
          <source>How can I upload files to server using JSP/Servlet? I tried this:</source>
          <target state="translated">JSPServletを使ってサーバーにファイルをアップロードするには?これを試してみました。</target>
        </trans-unit>
        <trans-unit id="c6c72f46d0082406a10bc66d05a50add855e6c3f" translate="yes" xml:space="preserve">
          <source>How to convert Part to Blob, so I can store it in MySQL?</source>
          <target state="translated">どのようにPartをBlobに変換してMySQLに保存できますか?</target>
        </trans-unit>
        <trans-unit id="ead0c8056b3c97ef973d83b0cd30c0bb9dcfdcab" translate="yes" xml:space="preserve">
          <source>How to retrieve and display images from a database in a JSP page?</source>
          <target state="translated">JSPページでデータベースから画像を取得して表示するには?</target>
        </trans-unit>
        <trans-unit id="91c3290800a3458e98a05145d89bba52c43ca16f" translate="yes" xml:space="preserve">
          <source>How to upload an image and save it in database?</source>
          <target state="translated">画像をアップロードしてデータベースに保存する方法は?</target>
        </trans-unit>
        <trans-unit id="36ee6e867e8ab123ade5e42ec8cf7b5e519f970d" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet</source>
          <target state="translated">JSPServletを使ってサーバーにファイルをアップロードする方法</target>
        </trans-unit>
        <trans-unit id="70cbe90eaa16a4700707cad552786a51fb645ab2" translate="yes" xml:space="preserve">
          <source>How to upload files to server using JSP/Servlet and Ajax?</source>
          <target state="translated">JSPServletとAjaxを使ってサーバーにファイルをアップロードする方法は?</target>
        </trans-unit>
        <trans-unit id="27a9ecde2d19cea3c82935fd6c0ec42df7711cbf" translate="yes" xml:space="preserve">
          <source>However, I only get the file name, not the file content. When I add  &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, then &lt;code&gt;request.getParameter()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">しかし、私はファイル名のみを取得し、ファイルの内容は取得しません。 &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; を &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; に追加すると、 &lt;code&gt;request.getParameter()&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="1e430fc8075c236758ccb76022b1bb6896cc5159" translate="yes" xml:space="preserve">
          <source>I added the source code for commons-fileupload and commons-io into my Eclipse project to trace the actual error and finally got some insight. First, the exception thrown is of type Throwable not the stated FileIOException nor even Exception (these will not be trapped). Second, the error message is obfuscatory in that it stated class not found because axis2 could not find commons-io.  Axis2 is not used in my project at all but exists as a folder in the Geronimo repository subdirectory as part of standard installation.</source>
          <target state="translated">commons-fileupload と commons-io のソースコードを Eclipse プロジェクトに追加して、実際のエラーをトレースしてみました。まず、スローされる例外はThrowable型で、FileIOExceptionやExceptionではありません(これらはトラップされません)。第二に、エラーメッセージは、axis2 が commons-io を見つけられなかったためにクラスが見つかりませんでした。Axis2 は私のプロジェクトでは全く使用されていませんが、標準インストールの一部として Geronimo リポジトリサブディレクトリ内のフォルダとして存在しています。</target>
        </trans-unit>
        <trans-unit id="ab21986a178cd08b064d5a41e91720c77bdc921b" translate="yes" xml:space="preserve">
          <source>I am Using common Servlet for &lt;strong&gt;every&lt;/strong&gt; Html Form whether it has attachments or not.
This Servlet returns a &lt;code&gt;TreeMap&lt;/code&gt; where the keys are jsp name Parameters and values are User Inputs and saves all attachments in fixed directory and later you rename the directory of your choice.Here Connections is our custom interface having connection object. I think this will help you</source>
          <target state="translated">添付ファイルがあるかどうかにかかわらず、 &lt;strong&gt;すべての&lt;/strong&gt; HTMLフォームに共通のサーブレットを使用しています。 このサーブレットは、キーがjsp名である &lt;code&gt;TreeMap&lt;/code&gt; を返しますパラメーターと値はユーザー入力であり、すべての添付ファイルを固定ディレクトリに保存し、後で選択したディレクトリの名前を変更します。ここで、Connectionsは、接続オブジェクトを持つカスタムインターフェイスです。 これはあなたに役立つと思います</target>
        </trans-unit>
        <trans-unit id="d38da4edfddb86af0e1b682297886c953eb8c99c" translate="yes" xml:space="preserve">
          <source>I've tested this with Spring version &lt;code&gt;4.1.1.RELEASE&lt;/code&gt;.</source>
          <target state="translated">私はこれをSpringバージョン &lt;code&gt;4.1.1.RELEASE&lt;/code&gt; でテストしました。</target>
        </trans-unit>
        <trans-unit id="b3abf66dfc3693796329fa24d91068d59d24d8d9" translate="yes" xml:space="preserve">
          <source>If you happen to use Spring MVC, this is how to: 
(I'm leaving this here in case someone find it useful).</source>
          <target state="translated">たまたまSpring MVCを使っていた場合、その方法は以下の通りです。(役に立つと思う人がいるかもしれないので、ここに残しておきます)。</target>
        </trans-unit>
        <trans-unit id="4e584a474f83f0920ef21d5d302aa54701cad50b" translate="yes" xml:space="preserve">
          <source>If you're not on Servlet 3.0 yet (isn't it about time to upgrade?), the common practice is to make use of &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt; to parse the multpart form data requests. It has an excellent &lt;a href=&quot;http://commons.apache.org/fileupload/using.html&quot;&gt;User Guide&lt;/a&gt; and &lt;a href=&quot;http://commons.apache.org/fileupload/faq.html&quot;&gt;FAQ&lt;/a&gt; (carefully go through both). There's also the O'Reilly (&quot;&lt;a href=&quot;http://www.servlets.com/cos/&quot;&gt;cos&lt;/a&gt;&quot;) &lt;code&gt;MultipartRequest&lt;/code&gt;, but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature.</source>
          <target state="translated">まだサーブレット3.0を使用していない場合（アップグレードする時期ではありませんか？）、一般的な方法は、 &lt;a href=&quot;http://commons.apache.org/fileupload&quot;&gt;Apache Commons FileUpload&lt;/a&gt;を使用してマルチパートフォームデータ要求を解析することです。 優れた&lt;a href=&quot;http://commons.apache.org/fileupload/using.html&quot;&gt;ユーザーガイド&lt;/a&gt;と&lt;a href=&quot;http://commons.apache.org/fileupload/faq.html&quot;&gt;FAQがあります&lt;/a&gt; （両方を注意深く読んでください ）。 O'Reilly（ &quot; &lt;a href=&quot;http://www.servlets.com/cos/&quot;&gt;cos&lt;/a&gt; &quot;） &lt;code&gt;MultipartRequest&lt;/code&gt; もありますが、いくつかの（マイナー）バグがあり、何年も積極的にメンテナンスされていません。 私はそれを使用することをお勧めしません。 Apache Commons FileUploadはまだ積極的に維持されており、現在非常に成熟しています。</target>
        </trans-unit>
        <trans-unit id="9b85c6258d155b2e3ee148f9c16763360d8b23a3" translate="yes" xml:space="preserve">
          <source>If you're using at least Servlet 3.0 (Tomcat 7, Jetty 9, JBoss AS 6, GlassFish 3, etc), then you can just use standard API provided &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getParts()&quot;&gt;&lt;code&gt;HttpServletRequest#getPart()&lt;/code&gt;&lt;/a&gt; to collect the individual multipart form data items (most Servlet 3.0 implementations actually use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by &lt;code&gt;getParameter()&lt;/code&gt; the usual way.</source>
          <target state="translated">少なくともServlet 3.0（Tomcat 7、Jetty 9、JBoss AS 6、GlassFish 3など）を使用している場合は、標準のAPIが提供する&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getParts()&quot;&gt; &lt;code&gt;HttpServletRequest#getPart()&lt;/code&gt; &lt;/a&gt;を使用して、個々のマルチパートフォームデータ項目（ほとんどのサーブレット）を収集できます。 3.0の実装は、実際にはこのためにApache Commons FileUploadを使用しています！）。 また、通常のフォームフィールドは、通常の方法で &lt;code&gt;getParameter()&lt;/code&gt; によって使用できます。</target>
        </trans-unit>
        <trans-unit id="2792b3a162c7e1e506c6ffc41aea631345883f87" translate="yes" xml:space="preserve">
          <source>In case you have a &lt;code&gt;&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; multiple=&quot;true&quot; /&amp;gt;&lt;/code&gt; for multi-file upload, collect them as below (unfortunately there is no such method as &lt;code&gt;request.getParts(&quot;file&quot;)&lt;/code&gt;):</source>
          <target state="translated">マルチファイルのアップロード用に &lt;code&gt;&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; multiple=&quot;true&quot; /&amp;gt;&lt;/code&gt; がある場合は、以下のように収集します（残念ながら、 &lt;code&gt;request.getParts(&quot;file&quot;)&lt;/code&gt; などのメソッドはありません） ）：</target>
        </trans-unit>
        <trans-unit id="2927a9cf6b59012693ea19c61826c02e97387eb5" translate="yes" xml:space="preserve">
          <source>In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's &lt;code&gt;/WEB-INF/lib&lt;/code&gt;:</source>
          <target state="translated">Apache Commons FileUploadを使用するには、Webアプリケーションの &lt;code&gt;/WEB-INF/lib&lt;/code&gt; に少なくとも以下のファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="3f42bea78e0be9336f78c0cc8f964b694e2fe68c" translate="yes" xml:space="preserve">
          <source>In your controller, map the request parameter &lt;code&gt;file&lt;/code&gt; to &lt;code&gt;MultipartFile&lt;/code&gt; type as follows:</source>
          <target state="translated">コントローラで、リクエストパラメータ &lt;code&gt;file&lt;/code&gt; を次のように &lt;code&gt;MultipartFile&lt;/code&gt; タイプにマッピングします。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c5d8a02410399f09874e132d8540410dfc3a1d3c" translate="yes" xml:space="preserve">
          <source>It's very important that you don't call &lt;code&gt;getParameter()&lt;/code&gt;, &lt;code&gt;getParameterMap()&lt;/code&gt;, &lt;code&gt;getParameterValues()&lt;/code&gt;, &lt;code&gt;getInputStream()&lt;/code&gt;, &lt;code&gt;getReader()&lt;/code&gt;, etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. &lt;a href=&quot;https://stackoverflow.com/questions/13881272/servletfileuploadparserequestrequest-returns-an-empty-list&quot;&gt;ServletFileUpload#parseRequest(request) returns an empty list&lt;/a&gt;.</source>
          <target state="translated">同じリクエストで事前に &lt;code&gt;getParameter()&lt;/code&gt; 、 &lt;code&gt;getParameterMap()&lt;/code&gt; 、 &lt;code&gt;getParameterValues()&lt;/code&gt; 、 &lt;code&gt;getInputStream()&lt;/code&gt; 、 &lt;code&gt;getReader()&lt;/code&gt; などを呼び出さないことが非常に重要です。 それ以外の場合、サーブレットコンテナはリクエストの本文を読み取って解析し、Apache Commons FileUploadは空のリクエストの本文を取得します。 ao &lt;a href=&quot;https://stackoverflow.com/questions/13881272/servletfileuploadparserequestrequest-returns-an-empty-list&quot;&gt;ServletFileUpload＃parseRequest（request）returns a empty list&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="7a50978fc7dc45d37d68d79c30d48beecf73a887" translate="yes" xml:space="preserve">
          <source>Load images from outside of webapps / webcontext / deploy folder using &amp;lt;h:graphicImage&amp;gt; or &amp;lt;img&amp;gt; tag</source>
          <target state="translated">&amp;lt;h：graphicImage&amp;gt;または&amp;lt;img&amp;gt;タグを使用して、webapps / webcontext / deployフォルダーの外部から画像を読み込みます</target>
        </trans-unit>
        <trans-unit id="cc33c714e85666805d8f16e942c8dd3f11d23ea4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName()&quot;&gt;&lt;code&gt;Part#getSubmittedFileName()&lt;/code&gt;&lt;/a&gt; was introduced in Servlet 3.1 (Tomcat 8, Jetty 9, WildFly 8, GlassFish 4, etc). If you're not on Servlet 3.1 yet, then you need an additional utility method to obtain the submitted file name.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName()&quot;&gt; &lt;code&gt;Part#getSubmittedFileName()&lt;/code&gt; &lt;/a&gt;はサーブレット3.1（Tomcat 8、Jetty 9、WildFly 8、GlassFish 4など）で導入されたことに注意してください。 まだサーブレット3.1を使用していない場合は、送信されたファイル名を取得するための追加のユーティリティメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="422132cae943ddfa642986eb43b66030bc1c54a4" translate="yes" xml:space="preserve">
          <source>Note that Glassfish versions older than 3.1.2 had &lt;a href=&quot;http://java.net/jira/browse/GLASSFISH-16740&quot;&gt;a bug&lt;/a&gt; wherein the &lt;code&gt;getParameter()&lt;/code&gt; still returns &lt;code&gt;null&lt;/code&gt;. If you are targeting such a container and can't upgrade it, then you need to extract the value from &lt;code&gt;getPart()&lt;/code&gt; with help of this utility method:</source>
          <target state="translated">3.1.2より古いバージョンのGlassfishには、 &lt;code&gt;getParameter()&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; を返す&lt;a href=&quot;http://java.net/jira/browse/GLASSFISH-16740&quot;&gt;というバグ&lt;/a&gt;があったことに注意してください。 このようなコンテナを対象としていて、アップグレードできない場合は、このユーティリティメソッドを使用して &lt;code&gt;getPart()&lt;/code&gt; から値を抽出する必要があります。</target>
        </trans-unit>
        <trans-unit id="d3223bd580e19d77142aea280656cfd4b03cddb8" translate="yes" xml:space="preserve">
          <source>Note that the List type of fileItems has changed with the current version of commons-fileupload to be specifically &lt;code&gt;List&amp;lt;FileItem&amp;gt;&lt;/code&gt; as opposed to prior versions where it was generic &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">fileItemsのリストタイプは、現在のバージョンのcommons-fileuploadで、一般的な &lt;code&gt;List&lt;/code&gt; であった以前のバージョンとは異なり、具体的には &lt;code&gt;List&amp;lt;FileItem&amp;gt;&lt;/code&gt; 変更されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8e4be53d048d23d18a4452a476074ae239e4d5a8" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;FilenameUtils#getName()&lt;/code&gt;. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</source>
          <target state="translated">&lt;code&gt;FilenameUtils#getName()&lt;/code&gt; に注意してください。 これは、ファイル名の取得に関するMSIEの修正です。 このブラウザは、ファイル名だけではなく、名前に沿って完全なファイルパスを誤って送信します。</target>
        </trans-unit>
        <trans-unit id="1b2340999914e37b2ef52dfcc5eb4ce99ee15657" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;Path#getFileName()&lt;/code&gt;. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</source>
          <target state="translated">&lt;code&gt;Path#getFileName()&lt;/code&gt; に注意してください。 これは、ファイル名の取得に関するMSIEの修正です。 このブラウザは、ファイル名だけではなく、名前に沿って完全なファイルパスを誤って送信します。</target>
        </trans-unit>
        <trans-unit id="a7819ad5202a2520690c3779512538a28dbdae82" translate="yes" xml:space="preserve">
          <source>Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</source>
          <target state="translated">ファイル名を取得する際のMSIEの修正に注意してください。このブラウザでは、ファイル名のみではなく、ファイル名に沿ったフルパスが正しく送信されませんでした。</target>
        </trans-unit>
        <trans-unit id="d19568e50ad99ecd12d66c0a2aa9dbb53f965a50" translate="yes" xml:space="preserve">
          <source>Recommended way to save uploaded files in a servlet application</source>
          <target state="translated">サーブレットアプリでアップロードしたファイルを保存するおすすめの方法</target>
        </trans-unit>
        <trans-unit id="743ce4827f9b83ba056554fcbb63ebf2706a0400" translate="yes" xml:space="preserve">
          <source>SERVLET FILE</source>
          <target state="translated">サーボレットファイル</target>
        </trans-unit>
        <trans-unit id="21e66e6f7f0b649621e5cbb71a94fdf0528c1a79" translate="yes" xml:space="preserve">
          <source>Saving uploaded file (don't use &lt;code&gt;getRealPath()&lt;/code&gt; nor &lt;code&gt;part.write()&lt;/code&gt;!)</source>
          <target state="translated">アップロードされたファイルを保存しています（ &lt;code&gt;getRealPath()&lt;/code&gt; や &lt;code&gt;part.write()&lt;/code&gt; は使用しないでください！）</target>
        </trans-unit>
        <trans-unit id="8ea4bd5b352f3bc33dfc4673d3d56ad6df1d86d5" translate="yes" xml:space="preserve">
          <source>Send a file as multipart through xmlHttpRequest</source>
          <target state="translated">xmlHttpRequestを介してマルチパートでファイルを送信する</target>
        </trans-unit>
        <trans-unit id="77e58b90764605fceeecc2238bfa5b3e6deb8582" translate="yes" xml:space="preserve">
          <source>Sending multiple file for file we have to use &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; を使用する必要があるファイルに複数のファイルを送信する</target>
        </trans-unit>
        <trans-unit id="c1f3975e65801e5309eee560ab48c7fa634f82c7" translate="yes" xml:space="preserve">
          <source>Serving uploaded file</source>
          <target state="translated">アップロードされたファイルのサーブ</target>
        </trans-unit>
        <trans-unit id="c1ead808bbd6989ed5fe657f1195a07d0b97a91f" translate="yes" xml:space="preserve">
          <source>Simplest way to serve static data from outside the application server in a Java web application</source>
          <target state="translated">Javaウェブアプリケーションでアプリケーションサーバーの外部から静的データを提供する最もシンプルな方法</target>
        </trans-unit>
        <trans-unit id="0c39f3d1d7cc0fb9dd71cd96c6392c09c11f41d3" translate="yes" xml:space="preserve">
          <source>Then, implement its &lt;code&gt;doPost()&lt;/code&gt; as follows:</source>
          <target state="translated">次に、その &lt;code&gt;doPost()&lt;/code&gt; を次のように実装します。</target>
        </trans-unit>
        <trans-unit id="86974eb210d24ae502124d960b0101e64f56a7d7" translate="yes" xml:space="preserve">
          <source>To browse and select a file for upload you need a HTML &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; field in the form. As stated in the &lt;a href=&quot;http://www.w3.org/TR/html4/interact/forms.html&quot;&gt;HTML specification&lt;/a&gt; you have to use the &lt;code&gt;POST&lt;/code&gt; method and the &lt;code&gt;enctype&lt;/code&gt; attribute of the form has to be set to &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt;.</source>
          <target state="translated">アップロードするファイルを参照して選択するには、フォームにHTML &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; フィールドが必要です。 &lt;a href=&quot;http://www.w3.org/TR/html4/interact/forms.html&quot;&gt;HTML仕様に&lt;/a&gt;記載されているように、 &lt;code&gt;POST&lt;/code&gt; メソッドを使用する必要があり、フォームの &lt;code&gt;enctype&lt;/code&gt; 属性を &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt; に設定する必要があります 。</target>
        </trans-unit>
        <trans-unit id="90522d3de09499002d43103211c12c2e5148ca37" translate="yes" xml:space="preserve">
          <source>To get the &lt;code&gt;common.io.jar&lt;/code&gt; file just google it or just go to the Apache &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Tomcat&quot;&gt;Tomcat&lt;/a&gt; website where you get the option for a free download of this file. But remember one thing: download the binary ZIP file if you're a Windows user.</source>
          <target state="translated">&lt;code&gt;common.io.jar&lt;/code&gt; ファイルを取得するには、それをグーグルするか、Apache &lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Tomcat&quot;&gt;Tomcat&lt;/a&gt; Webサイトにアクセスして、このファイルの無料ダウンロードのオプションを取得します。 ただし、Windowsユーザーの場合は、バイナリZIPファイルをダウンロードしてください。</target>
        </trans-unit>
        <trans-unit id="48f3422e738a5d2062f6ec80c7f40f6f12af37b5" translate="yes" xml:space="preserve">
          <source>Unfortunately, the servlet threw an exception without a clear message and cause. Here is the stacktrace:</source>
          <target state="translated">残念ながら、サーブレットは明確なメッセージと原因がないまま例外を投げました。以下がスタックトレースです。</target>
        </trans-unit>
        <trans-unit id="7a7f0e680f68bb313789da611591c96e89d3706b" translate="yes" xml:space="preserve">
          <source>Use a form with &lt;code&gt;enctype&lt;/code&gt; attribute set to &quot;&lt;code&gt;multipart/form-data&lt;/code&gt;&quot; (Same as BalusC's Answer)</source>
          <target state="translated">&lt;code&gt;enctype&lt;/code&gt; 属性が &quot; &lt;code&gt;multipart/form-data&lt;/code&gt; &quot;に設定されたフォームを使用します（BalusCの回答と同じ）</target>
        </trans-unit>
        <trans-unit id="ef4e3ac4b836d4368f42d6cc73fc2f9dee1b1725" translate="yes" xml:space="preserve">
          <source>When you're already on Servlet 3.0 or newer, use native API</source>
          <target state="translated">Servlet 3.0 以降を使用している場合は、ネイティブ API を使用します。</target>
        </trans-unit>
        <trans-unit id="263a1e004dfe846e3760fdbed241e79f7e1e500a" translate="yes" xml:space="preserve">
          <source>When you're not on Servlet 3.0 yet, use Apache Commons FileUpload</source>
          <target state="translated">まだServlet 3.0を使用していない場合は、Apache Commons FileUploadを使用してください。</target>
        </trans-unit>
        <trans-unit id="06d2c2b12c64de8ba019df47faa17be8691887dd" translate="yes" xml:space="preserve">
          <source>When you're not on Servlet 3.1 yet, manually get submitted file name</source>
          <target state="translated">Servlet 3.1をまだ使っていない場合は、提出されたファイル名を手動で取得してください。</target>
        </trans-unit>
        <trans-unit id="f2db992af803180ae4385adf77e18c3da8d82c98" translate="yes" xml:space="preserve">
          <source>Workaround for GlassFish3 bug of &lt;code&gt;getParameter()&lt;/code&gt; still returning &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getParameter()&lt;/code&gt; の GlassFish3バグの回避策が依然として &lt;code&gt;null&lt;/code&gt; を返す</target>
        </trans-unit>
        <trans-unit id="03a16293e241d52ca6692f27c52aceaeba19cea3" translate="yes" xml:space="preserve">
          <source>You can get the filename and size using &lt;code&gt;MultipartFile&lt;/code&gt;'s &lt;code&gt;getOriginalFilename()&lt;/code&gt; and &lt;code&gt;getSize()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MultipartFile&lt;/code&gt; の &lt;code&gt;getOriginalFilename()&lt;/code&gt; および &lt;code&gt;getSize()&lt;/code&gt; を使用して、ファイル名とサイズを取得できます。</target>
        </trans-unit>
        <trans-unit id="35a8da032d3a2dbef7c02420a7227ebc0187748c" translate="yes" xml:space="preserve">
          <source>You can in theory parse the request body yourself based on &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getInputStream%28%29&quot;&gt;&lt;code&gt;ServletRequest#getInputStream()&lt;/code&gt;&lt;/a&gt;. However, this is a precise and tedious work which requires precise knowledge of &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;RFC2388&lt;/a&gt;. You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also &lt;a href=&quot;https://stackoverflow.com/questions/5038798/uploading-of-pdf-file&quot;&gt;uploading of pdf file&lt;/a&gt;. You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness.</source>
          <target state="translated">理論的には、 &lt;a href=&quot;http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getInputStream%28%29&quot;&gt; &lt;code&gt;ServletRequest#getInputStream()&lt;/code&gt; に&lt;/a&gt;基づいて自分でリクエスト本文を解析できます。 ただし、これは&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2388.html&quot;&gt;RFC2388の&lt;/a&gt;正確な知識を必要とする正確で退屈な作業です 。 これを自分で行ったり、インターネット上の他の場所で見つかった独自のライブラリなしのコードをコピーして貼り付けたりしないでください。 roseindia.netなど、多くのオンラインソースがこれに失敗しました。 &lt;a href=&quot;https://stackoverflow.com/questions/5038798/uploading-of-pdf-file&quot;&gt;PDFファイルのアップロード&lt;/a&gt;も参照してください。 何百万人ものユーザーによって何年も使用されている（そして暗黙的にテストされている）実際のライブラリを使用するべきです。 このようなライブラリは、その堅牢性を証明しています。</target>
        </trans-unit>
        <trans-unit id="1e8986626521ded064dd1af230c20c1455110800" translate="yes" xml:space="preserve">
          <source>You need the &lt;code&gt;common-io.1.4.jar&lt;/code&gt; file to be included in your &lt;code&gt;lib&lt;/code&gt; directory, or if you're working in any editor, like NetBeans, then you need to go to project properties and just add the JAR file and you will be done.</source>
          <target state="translated">&lt;code&gt;common-io.1.4.jar&lt;/code&gt; ファイルを &lt;code&gt;lib&lt;/code&gt; ディレクトリに含める必要があります。または、NetBeansなどのエディターで作業している場合は、プロジェクトのプロパティに移動してJARファイルを追加するだけで、完了しました。</target>
        </trans-unit>
        <trans-unit id="33dccc7f52bf5b58fc1ec2b8e20e2a608095ba2d" translate="yes" xml:space="preserve">
          <source>Your initial attempt failed most likely because you forgot the commons IO.</source>
          <target state="translated">あなたの最初の試みは、コモンズのIOを忘れたために失敗した可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="a5b8363b277e4deb4686047d5b1b962767fad824" translate="yes" xml:space="preserve">
          <source>and to send multiple file use  &lt;code&gt;multiple=&quot;multiple&quot;&lt;/code&gt; in input tag</source>
          <target state="translated">複数のファイルを送信するには、inputタグで &lt;code&gt;multiple=&quot;multiple&quot;&lt;/code&gt; を使用します</target>
        </trans-unit>
        <trans-unit id="b5bf4df12f6b2dd32c3c9368402d797c08f678ab" translate="yes" xml:space="preserve">
          <source>on the other hand server side.
use following code.</source>
          <target state="translated">一方、サーバ側では以下のコードを使用します。</target>
        </trans-unit>
        <trans-unit id="883ff21824d1a24fbb42f58b1e145b46d304d8b2" translate="yes" xml:space="preserve">
          <source>web.xml</source>
          <target state="translated">web.xml</target>
        </trans-unit>
        <trans-unit id="208dd9736bbacbca949c6c10fc0bb2609dde7cd8" translate="yes" xml:space="preserve">
          <source>you can upload file using jsp /servlet.</source>
          <target state="translated">jspサーブレットを使ってファイルをアップロードすることができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
